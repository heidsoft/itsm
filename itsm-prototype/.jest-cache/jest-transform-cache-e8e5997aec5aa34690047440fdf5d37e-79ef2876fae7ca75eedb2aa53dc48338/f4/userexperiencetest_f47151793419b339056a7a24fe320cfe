d2b8a078c00ba89ad243a8643247912d
/**
 * 用户体验测试
 * 测试错误提示、加载状态、交互反馈等用户体验相关功能
 */ "use strict";
// Mock modules
jest.mock('../../lib/http-client');
jest.mock('../../lib/auth-service');
jest.mock('../../../lib/store/ui-store', ()=>({
        useNotifications: jest.fn()
    }));
jest.mock('../../components/RouteGuard', ()=>({
        useAuth: jest.fn()
    }));
jest.mock('antd', ()=>{
    const originalAntd = jest.requireActual('antd');
    return {
        ...originalAntd,
        message: {
            success: jest.fn(),
            error: jest.fn(),
            warning: jest.fn(),
            info: jest.fn(),
            loading: jest.fn(),
            destroy: jest.fn()
        },
        notification: {
            success: jest.fn(),
            error: jest.fn(),
            warning: jest.fn(),
            info: jest.fn(),
            open: jest.fn(),
            destroy: jest.fn()
        }
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _antd = require("antd");
const _zh_CN = /*#__PURE__*/ _interop_require_default(require("antd/locale/zh_CN"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock loading components
const MockLoadingSpinner = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "loading-spinner",
        className: "animate-spin",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full"
        })
    });
const MockSkeletonLoader = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "skeleton-loader",
        className: "animate-pulse",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "h-4 bg-gray-200 rounded mb-2"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "h-4 bg-gray-200 rounded mb-2"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "h-4 bg-gray-200 rounded w-3/4"
            })
        ]
    });
// Mock error boundary
class MockErrorBoundary extends _react.default.Component {
    constructor(props){
        super(props);
        this.state = {
            hasError: false
        };
    }
    static getDerivedStateFromError(error) {
        return {
            hasError: true,
            error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error('Error caught by boundary:', error, errorInfo);
    }
    render() {
        if (this.state.hasError) {
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "error-boundary",
                className: "p-4 bg-red-50 border border-red-200 rounded",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        className: "text-red-800 font-semibold mb-2",
                        children: "出现了错误"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-red-600 mb-4",
                        children: "页面加载失败，请刷新重试"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "retry-button",
                        onClick: ()=>this.setState({
                                hasError: false
                            }),
                        className: "px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700",
                        children: "重试"
                    })
                ]
            });
        }
        return this.props.children;
    }
}
// Mock components with different states
const MockTicketForm = ({ loading = false, error = null, onSubmit = jest.fn(), onCancel = jest.fn() })=>{
    const [formData, setFormData] = _react.default.useState({
        title: '',
        description: '',
        priority: 'medium'
    });
    const handleSubmit = async (e)=>{
        e.preventDefault();
        if (loading) return;
        try {
            await onSubmit();
            _antd.message.success('工单创建成功');
        } catch  {
            _antd.message.error('工单创建失败');
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "ticket-form",
        children: [
            error && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "form-error",
                className: "mb-4 p-3 bg-red-50 border border-red-200 rounded",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "text-red-600",
                    children: error
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                onSubmit: handleSubmit,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "mb-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "title",
                                className: "block text-sm font-medium text-gray-700 mb-1",
                                children: "工单标题 *"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                id: "title",
                                "data-testid": "title-input",
                                type: "text",
                                value: formData.title,
                                onChange: (e)=>setFormData({
                                        ...formData,
                                        title: e.target.value
                                    }),
                                className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                placeholder: "请输入工单标题",
                                required: true
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "mb-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "description",
                                className: "block text-sm font-medium text-gray-700 mb-1",
                                children: "问题描述 *"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("textarea", {
                                id: "description",
                                "data-testid": "description-input",
                                value: formData.description,
                                onChange: (e)=>setFormData({
                                        ...formData,
                                        description: e.target.value
                                    }),
                                className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                rows: 4,
                                placeholder: "请详细描述遇到的问题",
                                required: true
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "mb-6",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                htmlFor: "priority",
                                className: "block text-sm font-medium text-gray-700 mb-1",
                                children: "优先级"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                                id: "priority",
                                "data-testid": "priority-select",
                                value: formData.priority,
                                onChange: (e)=>setFormData({
                                        ...formData,
                                        priority: e.target.value
                                    }),
                                className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "low",
                                        children: "低"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "medium",
                                        children: "中"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "high",
                                        children: "高"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "urgent",
                                        children: "紧急"
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex justify-end space-x-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "button",
                                "data-testid": "cancel-button",
                                onClick: onCancel,
                                className: "px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500",
                                disabled: loading,
                                children: "取消"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                type: "submit",
                                "data-testid": "submit-button",
                                className: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed",
                                disabled: loading || !formData.title.trim() || !formData.description.trim(),
                                children: loading ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex items-center",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLoadingSpinner, {}),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                            className: "ml-2",
                                            children: "创建中..."
                                        })
                                    ]
                                }) : '创建工单'
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
const MockTicketList = ({ loading = false, error = null, tickets = [], onRefresh = jest.fn() })=>{
    if (loading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "ticket-list-loading",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "space-y-4",
                children: Array.from({
                    length: 5
                }).map((_, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(MockSkeletonLoader, {}, index))
            })
        });
    }
    if (error) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "ticket-list-error",
            className: "text-center py-8",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "mb-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-16 h-16 mx-auto bg-red-100 rounded-full flex items-center justify-center",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-red-600 text-2xl",
                            children: "⚠️"
                        })
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                    className: "text-lg font-medium text-gray-900 mb-2",
                    children: "加载失败"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "text-gray-600 mb-4",
                    children: error
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    "data-testid": "refresh-button",
                    onClick: onRefresh,
                    className: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500",
                    children: "重新加载"
                })
            ]
        });
    }
    if (tickets.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            "data-testid": "ticket-list-empty",
            className: "text-center py-8",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "mb-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-gray-400 text-2xl",
                            children: "\uD83D\uDCDD"
                        })
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                    className: "text-lg font-medium text-gray-900 mb-2",
                    children: "暂无工单"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "text-gray-600",
                    children: "还没有创建任何工单"
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "ticket-list",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "space-y-4",
            children: tickets.map((_, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `ticket-item-${index}`,
                    className: "p-4 bg-white border border-gray-200 rounded-lg",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("h4", {
                            className: "font-medium text-gray-900",
                            children: [
                                "工单 ",
                                index + 1
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-gray-600 mt-1",
                            children: "工单描述内容"
                        })
                    ]
                }, index))
        })
    });
};
// Test wrapper
const TestWrapper = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_antd.ConfigProvider, {
        locale: _zh_CN.default,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockErrorBoundary, {
            children: children
        })
    });
};
describe('用户体验测试', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('加载状态测试', ()=>{
        it('应该显示加载中的骨架屏', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    loading: true
                })
            }));
            // 验证骨架屏显示
            expect(_react1.screen.getByTestId('ticket-list-loading')).toBeInTheDocument();
            expect(_react1.screen.getAllByTestId('skeleton-loader')).toHaveLength(5);
        });
        it('应该在表单提交时显示加载状态', async ()=>{
            const user = _userevent.default.setup();
            const mockSubmit = jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 1000)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    loading: false,
                    onSubmit: mockSubmit
                })
            }));
            // 填写表单
            await user.type(_react1.screen.getByTestId('title-input'), '测试工单');
            await user.type(_react1.screen.getByTestId('description-input'), '这是一个测试工单');
            // 提交表单
            const submitButton = _react1.screen.getByTestId('submit-button');
            expect(submitButton).not.toBeDisabled();
            await user.click(submitButton);
            // 验证提交按钮状态
            expect(mockSubmit).toHaveBeenCalled();
        });
        it('应该显示加载中的旋转图标', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    loading: true
                })
            }));
            // 验证加载图标显示
            expect(_react1.screen.getByTestId('loading-spinner')).toBeInTheDocument();
            expect(_react1.screen.getByText('创建中...')).toBeInTheDocument();
        });
    });
    describe('错误处理测试', ()=>{
        it('应该显示表单验证错误', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    error: "标题不能为空"
                })
            }));
            // 验证错误信息显示
            expect(_react1.screen.getByTestId('form-error')).toBeInTheDocument();
            expect(_react1.screen.getByText('标题不能为空')).toBeInTheDocument();
            // 验证提交按钮被禁用
            const submitButton = _react1.screen.getByTestId('submit-button');
            expect(submitButton).toBeDisabled();
        });
        it('应该显示网络错误状态', ()=>{
            const mockRefresh = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    error: "网络连接失败，请检查网络设置",
                    onRefresh: mockRefresh
                })
            }));
            // 验证错误状态显示
            expect(_react1.screen.getByTestId('ticket-list-error')).toBeInTheDocument();
            expect(_react1.screen.getByText('加载失败')).toBeInTheDocument();
            expect(_react1.screen.getByText('网络连接失败，请检查网络设置')).toBeInTheDocument();
            // 验证重新加载按钮
            const refreshButton = _react1.screen.getByTestId('refresh-button');
            expect(refreshButton).toBeInTheDocument();
        });
        it('应该处理组件错误边界', ()=>{
            const ThrowError = ()=>{
                throw new Error('测试错误');
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {})
            }));
            // 验证错误边界显示
            expect(_react1.screen.getByTestId('error-boundary')).toBeInTheDocument();
            expect(_react1.screen.getByText('出现了错误')).toBeInTheDocument();
            expect(_react1.screen.getByText('页面加载失败，请刷新重试')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('retry-button')).toBeInTheDocument();
        });
        it('应该支持错误重试功能', async ()=>{
            const user = _userevent.default.setup();
            const mockRefresh = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    error: "加载失败",
                    onRefresh: mockRefresh
                })
            }));
            // 点击重新加载按钮
            const refreshButton = _react1.screen.getByTestId('refresh-button');
            await user.click(refreshButton);
            // 验证重试函数被调用
            expect(mockRefresh).toHaveBeenCalledTimes(1);
        });
    });
    describe('交互反馈测试', ()=>{
        it('应该显示成功消息', async ()=>{
            const user = _userevent.default.setup();
            const mockSubmit = jest.fn().mockResolvedValue({});
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    onSubmit: mockSubmit
                })
            }));
            // 填写并提交表单
            await user.type(_react1.screen.getByTestId('title-input'), '测试工单');
            await user.type(_react1.screen.getByTestId('description-input'), '这是一个测试工单');
            await user.click(_react1.screen.getByTestId('submit-button'));
            // 等待提交完成
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
            // 验证成功消息
            expect(_antd.message.success).toHaveBeenCalledWith('工单创建成功');
        });
        it('应该显示失败消息', async ()=>{
            const user = _userevent.default.setup();
            const mockSubmit = jest.fn().mockRejectedValue(new Error('提交失败'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    onSubmit: mockSubmit
                })
            }));
            // 填写并提交表单
            await user.type(_react1.screen.getByTestId('title-input'), '测试工单');
            await user.type(_react1.screen.getByTestId('description-input'), '这是一个测试工单');
            await user.click(_react1.screen.getByTestId('submit-button'));
            // 等待提交完成
            await (0, _react1.waitFor)(()=>{
                expect(mockSubmit).toHaveBeenCalled();
            });
            // 验证错误消息
            expect(_antd.message.error).toHaveBeenCalledWith('工单创建失败');
        });
        it('应该提供视觉反馈', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 测试输入框焦点状态
            const titleInput = _react1.screen.getByTestId('title-input');
            await user.click(titleInput);
            expect(titleInput).toHaveFocus();
            expect(titleInput).toHaveClass('focus:ring-2', 'focus:ring-blue-500');
            // 测试按钮悬停状态
            const submitButton = _react1.screen.getByTestId('submit-button');
            expect(submitButton).toHaveClass('hover:bg-blue-700');
        });
        it('应该支持键盘导航', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 测试Tab键导航
            const titleInput = _react1.screen.getByTestId('title-input');
            titleInput.focus();
            await user.tab();
            expect(_react1.screen.getByTestId('description-input')).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByTestId('priority-select')).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByTestId('cancel-button')).toHaveFocus();
            await user.tab();
            expect(_react1.screen.getByTestId('submit-button')).toHaveFocus();
        });
    });
    describe('空状态测试', ()=>{
        it('应该显示空状态页面', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    tickets: []
                })
            }));
            // 验证空状态显示
            expect(_react1.screen.getByTestId('ticket-list-empty')).toBeInTheDocument();
            expect(_react1.screen.getByText('暂无工单')).toBeInTheDocument();
            expect(_react1.screen.getByText('还没有创建任何工单')).toBeInTheDocument();
        });
        it('应该在有数据时显示列表', ()=>{
            const mockTickets = [
                1,
                2,
                3
            ];
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    tickets: mockTickets
                })
            }));
            // 验证列表显示
            expect(_react1.screen.getByTestId('ticket-list')).toBeInTheDocument();
            expect(_react1.screen.getAllByTestId(/ticket-item-/)).toHaveLength(3);
        });
    });
    describe('表单验证测试', ()=>{
        it('应该验证必填字段', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 验证初始状态下提交按钮被禁用
            const submitButton = _react1.screen.getByTestId('submit-button');
            expect(submitButton).toBeDisabled();
            // 只填写标题
            await user.type(_react1.screen.getByTestId('title-input'), '测试工单');
            expect(submitButton).toBeDisabled();
            // 填写描述
            await user.type(_react1.screen.getByTestId('description-input'), '这是一个测试工单');
            expect(submitButton).not.toBeDisabled();
        });
        it('应该实时验证输入内容', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            const titleInput = _react1.screen.getByTestId('title-input');
            const submitButton = _react1.screen.getByTestId('submit-button');
            // 输入空格
            await user.type(titleInput, '   ');
            expect(submitButton).toBeDisabled();
            // 输入有效内容
            await user.clear(titleInput);
            await user.type(titleInput, '有效标题');
            await user.type(_react1.screen.getByTestId('description-input'), '有效描述');
            expect(submitButton).not.toBeDisabled();
        });
    });
    describe('响应式交互测试', ()=>{
        it('应该在移动设备上正确显示', ()=>{
            // Mock 移动设备视口
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 验证表单在移动设备上的显示
            expect(_react1.screen.getByTestId('ticket-form')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('title-input')).toHaveClass('w-full');
            expect(_react1.screen.getByTestId('description-input')).toHaveClass('w-full');
        });
        it('应该支持触摸交互', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 模拟触摸交互
            const titleInput = _react1.screen.getByTestId('title-input');
            await user.click(titleInput);
            expect(titleInput).toHaveFocus();
        });
    });
    describe('性能优化测试', ()=>{
        it('应该防止重复提交', async ()=>{
            const user = _userevent.default.setup();
            const mockSubmit = jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 1000)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    onSubmit: mockSubmit
                })
            }));
            // 填写表单
            await user.type(_react1.screen.getByTestId('title-input'), '测试工单');
            await user.type(_react1.screen.getByTestId('description-input'), '这是一个测试工单');
            // 快速点击提交按钮多次
            const submitButton = _react1.screen.getByTestId('submit-button');
            await user.click(submitButton);
            await user.click(submitButton);
            await user.click(submitButton);
            // 验证只调用一次
            expect(mockSubmit).toHaveBeenCalledTimes(1);
        });
        it('应该优化大量数据的渲染', ()=>{
            const largeTicketList = Array.from({
                length: 1000
            }, (_, i)=>i);
            const startTime = performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    tickets: largeTicketList
                })
            }));
            const endTime = performance.now();
            const renderTime = endTime - startTime;
            // 验证渲染时间在合理范围内（小于100ms）
            expect(renderTime).toBeLessThan(100);
        });
    });
    describe('无障碍访问测试', ()=>{
        it('应该提供正确的ARIA标签', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {})
            }));
            // 验证表单标签
            const titleInput = _react1.screen.getByTestId('title-input');
            expect(titleInput).toHaveAttribute('required');
            expect(_react1.screen.getByLabelText('工单标题 *')).toBe(titleInput);
            const descriptionInput = _react1.screen.getByTestId('description-input');
            expect(descriptionInput).toHaveAttribute('required');
            expect(_react1.screen.getByLabelText('问题描述 *')).toBe(descriptionInput);
        });
        it('应该支持屏幕阅读器', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketList, {
                    error: "加载失败"
                })
            }));
            // 验证错误状态的可访问性
            const errorContainer = _react1.screen.getByTestId('ticket-list-error');
            expect(errorContainer).toBeInTheDocument();
            // 标题应为“加载失败”
            expect((0, _react1.within)(errorContainer).getByRole('heading', {
                name: '加载失败'
            })).toBeInTheDocument();
            // 文本也应包含错误提示（可能出现多个匹配项）
            expect((0, _react1.within)(errorContainer).getAllByText('加载失败').length).toBeGreaterThanOrEqual(1);
        });
        it('应该提供键盘快捷键支持', async ()=>{
            const user = _userevent.default.setup();
            const mockCancel = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockTicketForm, {
                    onCancel: mockCancel
                })
            }));
            // 测试Escape键取消
            await user.keyboard('{Escape}');
        // 注意：这里需要实际的键盘事件处理逻辑
        // 在真实组件中应该监听keydown事件
        });
    });
});

//# sourceMappingURL=data:application/json;base64,