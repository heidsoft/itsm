{"version":3,"names":["ApiError","cov_bye5a6xvi","f","s","ApiResponseHandler","BaseApi","baseUrl","getList","endpoint","params","response","_httpclient","httpClient","get","error","console","getById","id","create","data","post","update","put","patch","delete","batchDelete","ids","search","getStats","export","format","b","fetch","baseURL","method","headers","getToken","ok","Error","statusText","blob","upload","file","additionalData","formData","FormData","append","Object","entries","forEach","key","value","String","constructor","message","code","originalError","name","fromResponse","fromError","isSuccess","extractData","handlePaginationResponse"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/api/base-api.ts"],"sourcesContent":["import { httpClient } from '../http-client';\nimport { ApiResponse, PaginationResponse } from '../api-config';\n\n/**\n * 基础API类，提供通用的CRUD操作\n */\nexport abstract class BaseApi {\n  protected static baseUrl: string = '';\n\n  /**\n   * 获取列表数据\n   */\n  protected static async getList<T, P = Record<string, unknown>>(\n    endpoint: string,\n    params?: P\n  ): Promise<PaginationResponse<T>> {\n    try {\n      const response = await httpClient.get<PaginationResponse<T>>(endpoint, params);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.getList error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取单个资源\n   */\n  protected static async getById<T>(endpoint: string, id: string | number): Promise<T> {\n    try {\n      const response = await httpClient.get<T>(`${endpoint}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.getById error for ${endpoint}/${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 创建资源\n   */\n  protected static async create<T, D = Record<string, unknown>>(\n    endpoint: string,\n    data: D\n  ): Promise<T> {\n    try {\n      const response = await httpClient.post<T>(endpoint, data);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.create error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 更新资源\n   */\n  protected static async update<T, D = Record<string, unknown>>(\n    endpoint: string,\n    id: string | number,\n    data: D\n  ): Promise<T> {\n    try {\n      const response = await httpClient.put<T>(`${endpoint}/${id}`, data);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.update error for ${endpoint}/${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 部分更新资源\n   */\n  protected static async patch<T, D = Record<string, unknown>>(\n    endpoint: string,\n    id: string | number,\n    data: D\n  ): Promise<T> {\n    try {\n      const response = await httpClient.patch<T>(`${endpoint}/${id}`, data);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.patch error for ${endpoint}/${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 删除资源\n   */\n  protected static async delete<T = void>(endpoint: string, id: string | number): Promise<T> {\n    try {\n      const response = await httpClient.delete<T>(`${endpoint}/${id}`);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.delete error for ${endpoint}/${id}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 批量删除资源\n   */\n  protected static async batchDelete<T = void>(\n    endpoint: string,\n    ids: (string | number)[]\n  ): Promise<T> {\n    try {\n      const response = await httpClient.delete<T>(`${endpoint}/batch`, { ids });\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.batchDelete error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 搜索资源\n   */\n  protected static async search<T, P = Record<string, unknown>>(\n    endpoint: string,\n    params: P\n  ): Promise<PaginationResponse<T>> {\n    try {\n      const response = await httpClient.get<PaginationResponse<T>>(`${endpoint}/search`, params);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.search error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取统计数据\n   */\n  protected static async getStats<T>(endpoint: string, params?: Record<string, unknown>): Promise<T> {\n    try {\n      const response = await httpClient.get<T>(`${endpoint}/stats`, params);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.getStats error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 导出数据\n   */\n  protected static async export<P = Record<string, unknown>>(\n    endpoint: string,\n    params?: P,\n    format: 'csv' | 'excel' | 'pdf' = 'csv'\n  ): Promise<Blob> {\n    try {\n      const response = await fetch(`${httpClient.baseURL}${endpoint}/export?format=${format}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${httpClient.getToken()}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.statusText}`);\n      }\n\n      return await response.blob();\n    } catch (error) {\n      console.error(`BaseApi.export error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 上传文件\n   */\n  protected static async upload<T>(\n    endpoint: string,\n    file: File,\n    additionalData?: Record<string, unknown>\n  ): Promise<T> {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      if (additionalData) {\n        Object.entries(additionalData).forEach(([key, value]) => {\n          formData.append(key, String(value));\n        });\n      }\n\n      const response = await httpClient.post<T>(endpoint, formData);\n      return response;\n    } catch (error) {\n      console.error(`BaseApi.upload error for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n}\n\n/**\n * API错误处理工具\n */\nexport class ApiError extends Error {\n  public code: number;\n  public originalError?: unknown;\n\n  constructor(message: string, code: number = 5001, originalError?: unknown) {\n    super(message);\n    this.name = 'ApiError';\n    this.code = code;\n    this.originalError = originalError;\n  }\n\n  static fromResponse(response: ApiResponse<unknown>): ApiError {\n    return new ApiError(response.message, response.code);\n  }\n\n  static fromError(error: unknown): ApiError {\n    if (error instanceof ApiError) {\n      return error;\n    }\n    \n    if (error instanceof Error) {\n      return new ApiError(error.message, 5001, error);\n    }\n    \n    return new ApiError('Unknown error occurred', 5001, error);\n  }\n}\n\n/**\n * API响应处理工具\n */\nexport class ApiResponseHandler {\n  /**\n   * 检查响应是否成功\n   */\n  static isSuccess(response: ApiResponse<unknown>): boolean {\n    return response.code === 0;\n  }\n\n  /**\n   * 提取响应数据\n   */\n  static extractData<T>(response: ApiResponse<T>): T {\n    if (!this.isSuccess(response)) {\n      throw ApiError.fromResponse(response);\n    }\n    return response.data;\n  }\n\n  /**\n   * 处理分页响应\n   */\n  static handlePaginationResponse<T>(\n    response: ApiResponse<PaginationResponse<T>>\n  ): PaginationResponse<T> {\n    return this.extractData(response);\n  }\n}"],"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","ignoreList":[]}