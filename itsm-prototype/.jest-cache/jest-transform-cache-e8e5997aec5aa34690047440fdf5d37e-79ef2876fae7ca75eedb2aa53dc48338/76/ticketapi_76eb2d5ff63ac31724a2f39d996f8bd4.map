{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/ticket-api.ts"],"sourcesContent":["import { httpClient } from './http-client';\nimport {\n  Ticket,\n  TicketListResponse,\n  CreateTicketRequest,\n  GetTicketsParams\n} from './api-config';\n\nexport class TicketApi {\n  // Get ticket list\n  static async getTickets(params?: GetTicketsParams & { [key: string]: unknown }): Promise<TicketListResponse> {\n    return httpClient.get<TicketListResponse>('/api/v1/tickets', params);\n  }\n\n  // Create ticket\n  static async createTicket(data: CreateTicketRequest): Promise<Ticket> {\n    return httpClient.post<Ticket>('/api/v1/tickets', data);\n  }\n\n  // Get ticket details\n  static async getTicket(id: number): Promise<Ticket> {\n    return httpClient.get<Ticket>(`/api/v1/tickets/${id}`);\n  }\n\n  // Update ticket status\n  static async updateTicketStatus(id: number, status: string): Promise<Ticket> {\n    return httpClient.put<Ticket>(`/api/v1/tickets/${id}/status`, { status });\n  }\n\n  // Update ticket information\n  static async updateTicket(id: number, data: Partial<Ticket>): Promise<Ticket> {\n    return httpClient.patch<Ticket>(`/api/v1/tickets/${id}`, data);\n  }\n\n  // Delete ticket\n  static async deleteTicket(id: number): Promise<void> {\n    return httpClient.delete(`/api/v1/tickets/${id}`);\n  }\n\n  // Approve ticket\n  static async approveTicket(id: number, data: {\n    action: 'approve' | 'reject';\n    comment: string;\n    step_name: string;\n  }): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/approve`, data);\n  }\n\n  // Add comment\n  static async addComment(id: number, content: string): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/comment`, { content });\n  }\n\n  // Assign ticket\n  static async assignTicket(id: number, assigneeId: number): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/assign`, { assignee_id: assigneeId });\n  }\n\n  // Escalate ticket\n  static async escalateTicket(id: number, reason: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/escalate`, { reason });\n  }\n\n  // Resolve ticket\n  static async resolveTicket(id: number, resolution: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/resolve`, { resolution });\n  }\n\n  // Close ticket\n  static async closeTicket(id: number, feedback?: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/close`, { feedback });\n  }\n\n  // Search tickets\n  static async searchTickets(query: string): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>('/api/v1/tickets/search', { q: query });\n  }\n\n  // Get overdue tickets\n  static async getOverdueTickets(): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>('/api/v1/tickets/overdue');\n  }\n\n  // Get tickets by assignee\n  static async getTicketsByAssignee(assigneeId: number): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>(`/api/v1/tickets/assignee/${assigneeId}`);\n  }\n\n  // Get ticket activity log\n  static async getTicketActivity(id: number): Promise<Array<{\n    action: string;\n    timestamp: string;\n    user_id: number;\n    details: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/activity`);\n  }\n\n  // Get ticket comments\n  static async getTicketComments(id: number): Promise<Array<{\n    id: number;\n    content: string;\n    type: string;\n    created_by: number;\n    created_at: string;\n    author?: {\n      id: number;\n      name: string;\n      username: string;\n    };\n    is_internal: boolean;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/comments`);\n  }\n\n  // Add ticket comment\n  static async addTicketComment(id: number, data: {\n    content: string;\n    type: 'comment' | 'work_note';\n    is_internal?: boolean;\n  }): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/comments`, data);\n  }\n\n  // Get ticket attachments\n  static async getTicketAttachments(id: number): Promise<Array<{\n    id: number;\n    filename: string;\n    original_name: string;\n    file_size: number;\n    mime_type: string;\n    url: string;\n    uploaded_by: number;\n    uploaded_at: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/attachments`);\n  }\n\n  // Upload ticket attachment\n  static async uploadTicketAttachment(id: number, file: File): Promise<unknown> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return httpClient.post(`/api/v1/tickets/${id}/attachments`, formData);\n  }\n\n  // Delete ticket attachment\n  static async deleteTicketAttachment(ticketId: number, attachmentId: number): Promise<void> {\n    return httpClient.delete(`/api/v1/tickets/${ticketId}/attachments/${attachmentId}`);\n  }\n\n  // Get ticket workflow\n  static async getTicketWorkflow(id: number): Promise<Array<{\n    id: number;\n    step_name: string;\n    step_order: number;\n    status: string;\n    assignee_id?: number;\n    assignee?: {\n      id: number;\n      name: string;\n    };\n    started_at?: string;\n    completed_at?: string;\n    comments?: string;\n    required_approval: boolean;\n    approval_status?: string;\n    approval_comments?: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/workflow`);\n  }\n\n  // Update workflow step\n  static async updateWorkflowStep(ticketId: number, stepId: number, data: {\n    status: string;\n    comments?: string;\n    assignee_id?: number;\n  }): Promise<unknown> {\n    return httpClient.put(`/api/v1/tickets/${ticketId}/workflow/${stepId}`, data);\n  }\n\n  // Get ticket SLA\n  static async getTicketSLA(id: number): Promise<{\n    sla_id: number;\n    sla_name: string;\n    response_time: number;\n    resolution_time: number;\n    start_time: string;\n    due_time: string;\n    breach_time?: string;\n    status: string;\n  }> {\n    return httpClient.get(`/api/v1/tickets/${id}/sla`);\n  }\n\n  // Add ticket tags\n  static async addTicketTags(id: number, tags: string[]): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/tags`, { tags });\n  }\n\n  // Remove ticket tags\n  static async removeTicketTags(id: number, tags: string[]): Promise<unknown> {\n    return httpClient.request({\n      method: 'DELETE',\n      url: `/api/v1/tickets/${id}/tags`,\n      data: { tags }\n    });\n  }\n\n  // Get ticket history\n  static async getTicketHistory(id: number): Promise<Array<{\n    id: number;\n    field_name: string;\n    old_value: string;\n    new_value: string;\n    changed_by: number;\n    changed_at: string;\n    change_reason?: string;\n    user?: {\n      id: number;\n      name: string;\n    };\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/history`);\n  }\n\n  // Batch delete tickets\n  static async batchDeleteTickets(ticketIds: number[]): Promise<void> {\n    return httpClient.request({\n      method: 'DELETE',\n      url: '/api/v1/tickets/batch',\n      data: { ticket_ids: ticketIds }\n    });\n  }\n\n  // Get ticket statistics\n  static async getTicketStats(): Promise<{\n    total: number;\n    open: number;\n    in_progress: number;\n    resolved: number;\n    high_priority: number;\n    overdue: number;\n  }> {\n    return httpClient.get('/api/v1/tickets/stats');\n  }\n\n  // Export tickets\n  static async exportTickets(params: {\n    format: 'excel' | 'csv' | 'pdf';\n    filters?: Record<string, unknown>;\n  }): Promise<Blob> {\n    const response = await httpClient.request({\n      method: 'GET',\n      url: '/api/v1/tickets/export',\n      params,\n      responseType: 'blob'\n    });\n    return response as Blob;\n  }\n\n  // Batch update tickets\n  static async batchUpdateTickets(ticketIds: number[], action: string, data?: Record<string, unknown>): Promise<void> {\n    return httpClient.put('/api/v1/tickets/batch', {\n      ticket_ids: ticketIds,\n      action,\n      data\n    });\n  }\n}\n\nexport default TicketApi;"],"names":["TicketApi","getTickets","params","httpClient","get","createTicket","data","post","getTicket","id","updateTicketStatus","status","put","updateTicket","patch","deleteTicket","delete","approveTicket","addComment","content","assignTicket","assigneeId","assignee_id","escalateTicket","reason","resolveTicket","resolution","closeTicket","feedback","searchTickets","query","q","getOverdueTickets","getTicketsByAssignee","getTicketActivity","getTicketComments","addTicketComment","getTicketAttachments","uploadTicketAttachment","file","formData","FormData","append","deleteTicketAttachment","ticketId","attachmentId","getTicketWorkflow","updateWorkflowStep","stepId","getTicketSLA","addTicketTags","tags","removeTicketTags","request","method","url","getTicketHistory","batchDeleteTickets","ticketIds","ticket_ids","getTicketStats","exportTickets","response","responseType","batchUpdateTickets","action"],"mappings":"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"}