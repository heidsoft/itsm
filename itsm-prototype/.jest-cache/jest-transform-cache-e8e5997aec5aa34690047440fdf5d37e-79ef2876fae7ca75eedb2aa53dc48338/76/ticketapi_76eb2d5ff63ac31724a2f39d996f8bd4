efa71bf373b4f08b3fce293086d9cfef
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TicketApi: function() {
        return TicketApi;
    },
    default: function() {
        return _default;
    }
});
const _httpclient = require("./http-client");
class TicketApi {
    // Get ticket list
    static async getTickets(params) {
        return _httpclient.httpClient.get('/api/v1/tickets', params);
    }
    // Create ticket
    static async createTicket(data) {
        return _httpclient.httpClient.post('/api/v1/tickets', data);
    }
    // Get ticket details
    static async getTicket(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}`);
    }
    // Update ticket status
    static async updateTicketStatus(id, status) {
        return _httpclient.httpClient.put(`/api/v1/tickets/${id}/status`, {
            status
        });
    }
    // Update ticket information
    static async updateTicket(id, data) {
        return _httpclient.httpClient.patch(`/api/v1/tickets/${id}`, data);
    }
    // Delete ticket
    static async deleteTicket(id) {
        return _httpclient.httpClient.delete(`/api/v1/tickets/${id}`);
    }
    // Approve ticket
    static async approveTicket(id, data) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/approve`, data);
    }
    // Add comment
    static async addComment(id, content) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/comment`, {
            content
        });
    }
    // Assign ticket
    static async assignTicket(id, assigneeId) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/assign`, {
            assignee_id: assigneeId
        });
    }
    // Escalate ticket
    static async escalateTicket(id, reason) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/escalate`, {
            reason
        });
    }
    // Resolve ticket
    static async resolveTicket(id, resolution) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/resolve`, {
            resolution
        });
    }
    // Close ticket
    static async closeTicket(id, feedback) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/close`, {
            feedback
        });
    }
    // Search tickets
    static async searchTickets(query) {
        return _httpclient.httpClient.get('/api/v1/tickets/search', {
            q: query
        });
    }
    // Get overdue tickets
    static async getOverdueTickets() {
        return _httpclient.httpClient.get('/api/v1/tickets/overdue');
    }
    // Get tickets by assignee
    static async getTicketsByAssignee(assigneeId) {
        return _httpclient.httpClient.get(`/api/v1/tickets/assignee/${assigneeId}`);
    }
    // Get ticket activity log
    static async getTicketActivity(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/activity`);
    }
    // Get ticket comments
    static async getTicketComments(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/comments`);
    }
    // Add ticket comment
    static async addTicketComment(id, data) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/comments`, data);
    }
    // Get ticket attachments
    static async getTicketAttachments(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/attachments`);
    }
    // Upload ticket attachment
    static async uploadTicketAttachment(id, file) {
        const formData = new FormData();
        formData.append('file', file);
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/attachments`, formData);
    }
    // Delete ticket attachment
    static async deleteTicketAttachment(ticketId, attachmentId) {
        return _httpclient.httpClient.delete(`/api/v1/tickets/${ticketId}/attachments/${attachmentId}`);
    }
    // Get ticket workflow
    static async getTicketWorkflow(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/workflow`);
    }
    // Update workflow step
    static async updateWorkflowStep(ticketId, stepId, data) {
        return _httpclient.httpClient.put(`/api/v1/tickets/${ticketId}/workflow/${stepId}`, data);
    }
    // Get ticket SLA
    static async getTicketSLA(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/sla`);
    }
    // Add ticket tags
    static async addTicketTags(id, tags) {
        return _httpclient.httpClient.post(`/api/v1/tickets/${id}/tags`, {
            tags
        });
    }
    // Remove ticket tags
    static async removeTicketTags(id, tags) {
        return _httpclient.httpClient.request({
            method: 'DELETE',
            url: `/api/v1/tickets/${id}/tags`,
            data: {
                tags
            }
        });
    }
    // Get ticket history
    static async getTicketHistory(id) {
        return _httpclient.httpClient.get(`/api/v1/tickets/${id}/history`);
    }
    // Batch delete tickets
    static async batchDeleteTickets(ticketIds) {
        return _httpclient.httpClient.request({
            method: 'DELETE',
            url: '/api/v1/tickets/batch',
            data: {
                ticket_ids: ticketIds
            }
        });
    }
    // Get ticket statistics
    static async getTicketStats() {
        return _httpclient.httpClient.get('/api/v1/tickets/stats');
    }
    // Export tickets
    static async exportTickets(params) {
        const response = await _httpclient.httpClient.request({
            method: 'GET',
            url: '/api/v1/tickets/export',
            params,
            responseType: 'blob'
        });
        return response;
    }
    // Batch update tickets
    static async batchUpdateTickets(ticketIds, action, data) {
        return _httpclient.httpClient.put('/api/v1/tickets/batch', {
            ticket_ids: ticketIds,
            action,
            data
        });
    }
}
const _default = TicketApi;

//# sourceMappingURL=data:application/json;base64,