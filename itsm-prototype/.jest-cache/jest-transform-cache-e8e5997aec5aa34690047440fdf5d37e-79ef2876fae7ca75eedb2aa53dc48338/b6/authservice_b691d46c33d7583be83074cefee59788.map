{"version":3,"names":["AuthService","cov_ik6fs70mm","f","s","default","_default","setTokens","accessToken","refreshToken","window","b","localStorage","setItem","getAccessToken","getItem","getRefreshToken","isAuthenticated","_store","useAuthStore","getState","console","log","token","startsWith","parts","split","length","payload","JSON","parse","atob","currentTime","Math","floor","Date","now","exp","clearTokens","error","makeRequest","endpoint","options","url","_apiconfig","API_BASE_URL","method","body","response","fetch","headers","status","ok","Error","responseData","json","code","message","data","stringify","refresh_token","access_token","removeItem","logout","login","username","password","tenantCode","tenant_code","user","id","name"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/auth-service.ts"],"sourcesContent":["import { API_BASE_URL, Tenant } from './api-config';\nimport { useAuthStore } from './store';\n\nexport class AuthService {\n  // 设置tokens\n  static setTokens(accessToken: string, refreshToken: string) {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('access_token', accessToken);\n      localStorage.setItem('refresh_token', refreshToken);\n    }\n  }\n\n  // 获取access token\n  static getAccessToken(): string | null {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('access_token');\n    }\n    return null;\n  }\n\n  // 获取refresh token\n  static getRefreshToken(): string | null {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('refresh_token');\n    }\n    return null;\n  }\n\n  // 检查是否已认证\n  static isAuthenticated(): boolean {\n    // 首先检查Zustand store的状态\n    const { isAuthenticated } = useAuthStore.getState();\n    console.log('AuthService.isAuthenticated - Zustand状态:', { isAuthenticated });\n    if (isAuthenticated) {\n      return true;\n    }\n\n    // 然后检查localStorage中的token\n    const token = this.getAccessToken();\n    console.log('AuthService.isAuthenticated - Token:', token);\n    if (!token) {\n      return false;\n    }\n\n    // 对于开发环境，允许mock token\n    if (token.startsWith('mock_')) {\n      console.log('AuthService.isAuthenticated - Mock token detected');\n      return true;\n    }\n\n    try {\n      // 简单检查token格式（JWT应该有3个部分）\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        return false;\n      }\n\n      // 检查token是否过期\n      const payload = JSON.parse(atob(parts[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      \n      if (payload.exp && payload.exp < currentTime) {\n        // Token已过期，清除它\n        this.clearTokens();\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      // Token格式无效\n      console.error('Invalid token format:', error);\n      this.clearTokens();\n      return false;\n    }\n  }\n\n  // 直接使用fetch进行HTTP请求，避免循环依赖\n  private static async makeRequest<T>(endpoint: string, options: RequestInit): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    console.log('makeRequest called with:', { url, method: options.method, body: options.body });\n    \n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    console.log('makeRequest response status:', response.status);\n    console.log('makeRequest response headers:', response.headers);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const responseData = await response.json() as { code: number; message: string; data: T };\n    console.log('makeRequest response data:', responseData);\n    \n    // 检查响应码\n    if (responseData.code !== 0) {\n      throw new Error(responseData.message || '请求失败');\n    }\n    \n    return responseData.data;\n  }\n\n  // 刷新token\n  static async refreshToken(): Promise<boolean> {\n    const refreshToken = this.getRefreshToken();\n    if (!refreshToken) {\n      return false;\n    }\n\n    try {\n      const data = await this.makeRequest<{\n        access_token: string;\n      }>('/api/v1/refresh-token', {\n        method: 'POST',\n        body: JSON.stringify({\n          refresh_token: refreshToken,\n        }),\n      });\n\n      // 更新access token\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('access_token', data.access_token);\n      }\n      return true;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      this.clearTokens();\n      return false;\n    }\n  }\n\n  // 清除所有tokens\n  static clearTokens() {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n    }\n  }\n\n  // 登出方法\n  static logout() {\n    this.clearTokens();\n    const { logout } = useAuthStore.getState();\n    logout();\n  }\n\n  // 修改login方法\n  static async login(username: string, password: string, tenantCode?: string): Promise<boolean> {\n    try {\n      console.log('AuthService.login called with:', { username, password: '***', tenantCode });\n      \n      const data = await this.makeRequest<{\n        access_token: string;\n        refresh_token: string;\n        user: unknown;\n      }>('/api/v1/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          username,\n          password,\n          tenant_code: tenantCode,\n        }),\n      });\n      \n      console.log('AuthService.login response data:', data);\n      \n      // 存储tokens\n      this.setTokens(data.access_token, data.refresh_token);\n      \n      // 使用store管理登录状态\n      const { login } = useAuthStore.getState();\n      console.log('AuthService.login - 调用Zustand login方法');\n      login(\n        data.user as { id: number; username: string; role: string; email?: string; name?: string },\n        data.access_token,\n        { id: 1, name: \"默认租户\", code: \"default\" } as Tenant\n      );\n      \n      // 验证状态是否正确设置\n      const { isAuthenticated } = useAuthStore.getState();\n      console.log('AuthService.login - 登录后Zustand状态:', { isAuthenticated });\n      \n      console.log('AuthService.login completed successfully');\n      return true;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    }\n  }\n}\n\nexport default AuthService;"],"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","ignoreList":[]}