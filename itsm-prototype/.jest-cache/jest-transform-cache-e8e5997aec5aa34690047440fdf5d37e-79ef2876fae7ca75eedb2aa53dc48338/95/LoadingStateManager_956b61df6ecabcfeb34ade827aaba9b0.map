{"version":3,"names":["cov_190hx7w76f","actualCoverage","s","LoadingStateManager","f","SimpleError","SimpleLoading","default","_default","withLoadingState","Text","Title","_antd","Typography","LoadingStateManagerComponent","loading","b","error","empty","data","children","loadingText","emptyText","emptyDescription","errorTitle","showRetry","onRetry","minHeight","className","cardWrapper","retryCount","maxRetries","showErrorDetails","isEmpty","_react","useMemo","undefined","Array","isArray","length","Object","keys","isNetworkError","includes","containerStyle","handleRetry","useCallback","handleRefresh","window","location","reload","renderLoading","_jsxruntime","jsxs","style","jsx","Spin","size","renderError","isMaxRetriesReached","_lucidereact","WifiOff","AlertCircle","level","Space","Button","type","icon","RefreshCw","onClick","Wifi","Alert","message","description","showIcon","renderEmpty","Empty","image","Inbox","direction","renderContent","Card","Fragment","Component","WrappedComponent","props","componentProps","displayName","name","SimpleLoadingComponent","text","memo","SimpleErrorComponent","prevProps","nextProps"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/components/common/LoadingStateManager.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useMemo, useCallback } from 'react';\nimport { Spin, Empty, Alert, Button, Card, Space, Typography } from 'antd';\nimport { RefreshCw, Wifi, WifiOff, AlertCircle, Inbox } from 'lucide-react';\n\nconst { Text, Title } = Typography;\n\ninterface LoadingStateManagerProps {\n  loading?: boolean;\n  error?: string | null;\n  empty?: boolean;\n  data?: unknown;\n  children: React.ReactNode;\n  \n  // 自定义配置\n  loadingText?: string;\n  emptyText?: string;\n  emptyDescription?: string;\n  errorTitle?: string;\n  showRetry?: boolean;\n  onRetry?: () => void;\n  \n  // 样式配置\n  minHeight?: number | string;\n  className?: string;\n  cardWrapper?: boolean;\n  \n  // 高级配置\n  retryCount?: number;\n  maxRetries?: number;\n  showErrorDetails?: boolean;\n}\n\nconst LoadingStateManagerComponent: React.FC<LoadingStateManagerProps> = ({\n  loading = false,\n  error = null,\n  empty = false,\n  data,\n  children,\n  loadingText = '加载中...',\n  emptyText = '暂无数据',\n  emptyDescription = '当前没有可显示的内容',\n  errorTitle = '加载失败',\n  showRetry = true,\n  onRetry,\n  minHeight = 200,\n  className = '',\n  cardWrapper = false,\n  retryCount = 0,\n  maxRetries = 3,\n  showErrorDetails = false,\n}) => {\n  // 使用useMemo优化计算\n  const isEmpty = useMemo(() => {\n    return empty || (\n      data !== undefined && (\n        data === null ||\n        (Array.isArray(data) && data.length === 0) ||\n        (typeof data === 'object' && Object.keys(data).length === 0)\n      )\n    );\n  }, [empty, data]);\n\n  // 使用useMemo优化网络错误判断\n  const isNetworkError = useMemo(() => {\n    return error && (\n      error.includes('网络') ||\n      error.includes('连接') ||\n      error.includes('timeout') ||\n      error.includes('fetch')\n    );\n  }, [error]);\n\n  // 使用useMemo优化容器样式\n  const containerStyle = useMemo(() => ({\n    minHeight: typeof minHeight === 'number' ? `${minHeight}px` : minHeight,\n  }), [minHeight]);\n\n  // 使用useCallback优化重试处理\n  const handleRetry = useCallback(() => {\n    if (onRetry) {\n      onRetry();\n    }\n  }, [onRetry]);\n\n  // 使用useCallback优化页面刷新\n  const handleRefresh = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  // 渲染加载状态\n  const renderLoading = () => (\n    <div \n      className={`flex flex-col items-center justify-center ${className}`}\n      style={containerStyle}\n    >\n      <Spin size=\"large\" />\n      <Text className=\"mt-4 text-gray-500\">{loadingText}</Text>\n    </div>\n  );\n\n  // 渲染错误状态\n  const renderError = () => {\n    const isMaxRetriesReached = retryCount >= maxRetries;\n    \n    return (\n      <div \n        className={`flex flex-col items-center justify-center p-6 ${className}`}\n        style={containerStyle}\n      >\n        <div className=\"text-center max-w-md\">\n          {isNetworkError ? (\n            <WifiOff className=\"text-red-500 mx-auto mb-4\" size={48} />\n          ) : (\n            <AlertCircle className=\"text-red-500 mx-auto mb-4\" size={48} />\n          )}\n          \n          <Title level={4} className=\"text-gray-800 mb-2\">\n            {errorTitle}\n          </Title>\n          \n          <Text className=\"text-gray-600 block mb-4\">\n            {isNetworkError ? '网络连接异常，请检查网络设置' : error}\n          </Text>\n          \n          {showErrorDetails && retryCount > 0 && (\n            <Text className=\"text-orange-600 text-sm block mb-4\">\n              已重试 {retryCount} 次\n              {isMaxRetriesReached && ' (已达到最大重试次数)'}\n            </Text>\n          )}\n          \n          {showRetry && onRetry && !isMaxRetriesReached && (\n            <Space>\n              <Button \n                type=\"primary\" \n                icon={<RefreshCw size={16} />}\n                onClick={handleRetry}\n              >\n                重试\n              </Button>\n              {isNetworkError && (\n                <Button \n                  icon={<Wifi size={16} />}\n                  onClick={handleRefresh}\n                >\n                  刷新页面\n                </Button>\n              )}\n            </Space>\n          )}\n          \n          {isMaxRetriesReached && (\n            <Alert\n              message=\"多次重试失败\"\n              description=\"请稍后再试或联系技术支持\"\n              type=\"warning\"\n              showIcon\n              className=\"mt-4 text-left\"\n            />\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // 渲染空状态\n  const renderEmpty = () => (\n    <div \n      className={`flex flex-col items-center justify-center ${className}`}\n      style={containerStyle}\n    >\n      <Empty\n        image={<Inbox className=\"text-gray-400\" size={64} />}\n        description={\n          <Space direction=\"vertical\" size=\"small\">\n            <Text className=\"text-gray-600\">{emptyText}</Text>\n            <Text className=\"text-gray-400 text-sm\">{emptyDescription}</Text>\n          </Space>\n        }\n      />\n    </div>\n  );\n\n  // 渲染内容\n  const renderContent = () => {\n    if (loading) {\n      return renderLoading();\n    }\n    \n    if (error) {\n      return renderError();\n    }\n    \n    if (isEmpty) {\n      return renderEmpty();\n    }\n    \n    return children;\n  };\n\n  // 如果需要卡片包装\n  if (cardWrapper) {\n    return (\n      <Card className={className}>\n        {renderContent()}\n      </Card>\n    );\n  }\n\n  return <>{renderContent()}</>;\n};\n\n// 高阶组件包装器\nexport const withLoadingState = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  const WrappedComponent = (props: P & LoadingStateManagerProps) => {\n    const { \n      loading, \n      error, \n      empty, \n      data, \n      loadingText,\n      emptyText,\n      emptyDescription,\n      errorTitle,\n      showRetry,\n      onRetry,\n      minHeight,\n      className,\n      cardWrapper,\n      retryCount,\n      maxRetries,\n      showErrorDetails,\n      ...componentProps \n    } = props;\n    \n    return (\n      <LoadingStateManagerComponent\n        loading={loading}\n        error={error}\n        empty={empty}\n        data={data}\n        loadingText={loadingText}\n        emptyText={emptyText}\n        emptyDescription={emptyDescription}\n        errorTitle={errorTitle}\n        showRetry={showRetry}\n        onRetry={onRetry}\n        minHeight={minHeight}\n        className={className}\n        cardWrapper={cardWrapper}\n        retryCount={retryCount}\n        maxRetries={maxRetries}\n        showErrorDetails={showErrorDetails}\n      >\n        <Component {...(componentProps as P)} />\n      </LoadingStateManagerComponent>\n    );\n  };\n  \n  WrappedComponent.displayName = `withLoadingState(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n};\n\n// 简化的加载组件\nconst SimpleLoadingComponent: React.FC<{\n  text?: string;\n  size?: 'small' | 'default' | 'large';\n}> = ({ text = '加载中...', size = 'default' }) => (\n  <div className=\"flex flex-col items-center justify-center p-8\">\n    <Spin size={size} />\n    <Text className=\"mt-2 text-gray-500\">{text}</Text>\n  </div>\n);\n\nexport const SimpleLoading = React.memo(SimpleLoadingComponent);\n\n// 简化的错误组件\nconst SimpleErrorComponent: React.FC<{\n  message?: string;\n  onRetry?: () => void;\n}> = ({ message = '加载失败', onRetry }) => (\n  <div className=\"flex flex-col items-center justify-center p-8\">\n    <AlertCircle className=\"text-red-500 mb-2\" size={32} />\n    <Text className=\"text-gray-600 mb-4\">{message}</Text>\n    {onRetry && (\n      <Button \n        type=\"primary\" \n        size=\"small\"\n        icon={<RefreshCw size={14} />}\n        onClick={onRetry}\n      >\n        重试\n      </Button>\n    )}\n  </div>\n);\n\nexport const SimpleError = React.memo(SimpleErrorComponent);\n\n// 使用React.memo优化性能\nexport const LoadingStateManager = React.memo(LoadingStateManagerComponent, (prevProps, nextProps) => {\n  // 自定义比较函数，避免不必要的重渲染\n  return (\n    prevProps.loading === nextProps.loading &&\n    prevProps.error === nextProps.error &&\n    prevProps.empty === nextProps.empty &&\n    prevProps.data === nextProps.data &&\n    prevProps.loadingText === nextProps.loadingText &&\n    prevProps.emptyText === nextProps.emptyText &&\n    prevProps.emptyDescription === nextProps.emptyDescription &&\n    prevProps.errorTitle === nextProps.errorTitle &&\n    prevProps.showRetry === nextProps.showRetry &&\n    prevProps.onRetry === nextProps.onRetry &&\n    prevProps.minHeight === nextProps.minHeight &&\n    prevProps.className === nextProps.className &&\n    prevProps.cardWrapper === nextProps.cardWrapper &&\n    prevProps.retryCount === nextProps.retryCount &&\n    prevProps.maxRetries === nextProps.maxRetries &&\n    prevProps.showErrorDetails === nextProps.showErrorDetails\n  );\n});\n\nexport default LoadingStateManager;"],"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","ignoreList":[]}