{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/__tests__/ux/user-experience.test.tsx"],"sourcesContent":["/**\n * 用户体验测试\n * 测试错误提示、加载状态、交互反馈等用户体验相关功能\n */\n\nimport React from 'react';\nimport { render, screen, waitFor, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ConfigProvider, message } from 'antd';\nimport zhCN from 'antd/locale/zh_CN';\n\n// Mock modules\njest.mock('../../lib/http-client');\njest.mock('../../lib/auth-service');\njest.mock('../../../lib/store/ui-store', () => ({\n  useNotifications: jest.fn(),\n}));\njest.mock('../../components/RouteGuard', () => ({\n  useAuth: jest.fn(),\n}));\njest.mock('antd', () => {\n  const originalAntd = jest.requireActual('antd');\n  return {\n    ...originalAntd,\n    message: {\n      success: jest.fn(),\n      error: jest.fn(),\n      warning: jest.fn(),\n      info: jest.fn(),\n      loading: jest.fn(),\n      destroy: jest.fn(),\n    },\n    notification: {\n      success: jest.fn(),\n      error: jest.fn(),\n      warning: jest.fn(),\n      info: jest.fn(),\n      open: jest.fn(),\n      destroy: jest.fn(),\n    },\n  };\n});\n\n// Mock loading components\nconst MockLoadingSpinner = () => (\n  <div data-testid=\"loading-spinner\" className=\"animate-spin\">\n    <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full\" />\n  </div>\n);\n\nconst MockSkeletonLoader = () => (\n  <div data-testid=\"skeleton-loader\" className=\"animate-pulse\">\n    <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n    <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n    <div className=\"h-4 bg-gray-200 rounded w-3/4\" />\n  </div>\n);\n\n// Mock error boundary\nclass MockErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div data-testid=\"error-boundary\" className=\"p-4 bg-red-50 border border-red-200 rounded\">\n          <h2 className=\"text-red-800 font-semibold mb-2\">出现了错误</h2>\n          <p className=\"text-red-600 mb-4\">页面加载失败，请刷新重试</p>\n          <button \n            data-testid=\"retry-button\"\n            onClick={() => this.setState({ hasError: false })}\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n          >\n            重试\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Mock components with different states\nconst MockTicketForm = ({ \n  loading = false, \n  error = null,\n  onSubmit = jest.fn(),\n  onCancel = jest.fn() \n}: {\n  loading?: boolean;\n  error?: string | null;\n  onSubmit?: jest.MockedFunction<() => void>;\n  onCancel?: jest.MockedFunction<() => void>;\n}) => {\n  const [formData, setFormData] = React.useState({\n    title: '',\n    description: '',\n    priority: 'medium',\n  });\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (loading || isSubmitting) return;\n    \n    try {\n      setIsSubmitting(true);\n      await onSubmit();\n      message.success('工单创建成功');\n    } catch {\n      message.error('工单创建失败');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div data-testid=\"ticket-form\">\n      {error && (\n        <div data-testid=\"form-error\" className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded\">\n          <p className=\"text-red-600\">{error}</p>\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"mb-4\">\n          <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            工单标题 *\n          </label>\n          <input\n            id=\"title\"\n            data-testid=\"title-input\"\n            type=\"text\"\n            value={formData.title}\n            onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"请输入工单标题\"\n            required\n          />\n        </div>\n\n        <div className=\"mb-4\">\n          <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            问题描述 *\n          </label>\n          <textarea\n            id=\"description\"\n            data-testid=\"description-input\"\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            rows={4}\n            placeholder=\"请详细描述遇到的问题\"\n            required\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <label htmlFor=\"priority\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n            优先级\n          </label>\n          <select\n            id=\"priority\"\n            data-testid=\"priority-select\"\n            value={formData.priority}\n            onChange={(e) => setFormData({ ...formData, priority: e.target.value })}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"low\">低</option>\n            <option value=\"medium\">中</option>\n            <option value=\"high\">高</option>\n            <option value=\"urgent\">紧急</option>\n          </select>\n        </div>\n\n        <div className=\"flex justify-end space-x-3\">\n          <button\n            type=\"button\"\n            data-testid=\"cancel-button\"\n            onClick={onCancel}\n            className=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n            disabled={loading || isSubmitting}\n          >\n            取消\n          </button>\n          <button\n            type=\"submit\"\n            data-testid=\"submit-button\"\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={loading || isSubmitting || !formData.title.trim() || !formData.description.trim()}\n          >\n            {loading || isSubmitting ? (\n              <div className=\"flex items-center\">\n                <MockLoadingSpinner />\n                <span className=\"ml-2\">创建中...</span>\n              </div>\n            ) : (\n              '创建工单'\n            )}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst MockTicketList = ({ \n  loading = false, \n  error = null,\n  tickets = [],\n  onRefresh = jest.fn()\n}: {\n  loading?: boolean;\n  error?: string | null;\n  tickets?: unknown[];\n  onRefresh?: jest.MockedFunction<() => void>;\n}) => {\n  if (loading) {\n    return (\n      <div data-testid=\"ticket-list-loading\">\n        <div className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, index) => (\n            <MockSkeletonLoader key={index} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div data-testid=\"ticket-list-error\" className=\"text-center py-8\">\n        <div className=\"mb-4\">\n          <div className=\"w-16 h-16 mx-auto bg-red-100 rounded-full flex items-center justify-center\">\n            <span className=\"text-red-600 text-2xl\">⚠️</span>\n          </div>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">加载失败</h3>\n        <p className=\"text-gray-600 mb-4\">{error}</p>\n        <button\n          data-testid=\"refresh-button\"\n          onClick={onRefresh}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          重新加载\n        </button>\n      </div>\n    );\n  }\n\n  if (tickets.length === 0) {\n    return (\n      <div data-testid=\"ticket-list-empty\" className=\"text-center py-8\">\n        <div className=\"mb-4\">\n          <div className=\"w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center\">\n            <span className=\"text-gray-400 text-2xl\">📝</span>\n          </div>\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">暂无工单</h3>\n        <p className=\"text-gray-600\">还没有创建任何工单</p>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"ticket-list\">\n      <div className=\"space-y-4\">\n        {tickets.map((_, index) => (\n          <div key={index} data-testid={`ticket-item-${index}`} className=\"p-4 bg-white border border-gray-200 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900\">工单 {index + 1}</h4>\n            <p className=\"text-gray-600 mt-1\">工单描述内容</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Test wrapper\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <MockErrorBoundary>\n        {children}\n      </MockErrorBoundary>\n    </ConfigProvider>\n  );\n};\n\ndescribe('用户体验测试', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('加载状态测试', () => {\n    it('应该显示加载中的骨架屏', async () => {\n      render(\n        <TestWrapper>\n          <MockTicketList loading={true} />\n        </TestWrapper>\n      );\n\n      // 验证骨架屏显示\n      expect(screen.getByTestId('ticket-list-loading')).toBeInTheDocument();\n      expect(screen.getAllByTestId('skeleton-loader')).toHaveLength(5);\n    });\n\n    it('应该在表单提交时显示加载状态', async () => {\n      const user = userEvent.setup();\n      const mockSubmit = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(resolve, 1000))\n      );\n\n      render(\n        <TestWrapper>\n          <MockTicketForm loading={false} onSubmit={mockSubmit} />\n        </TestWrapper>\n      );\n\n      // 填写表单\n      await user.type(screen.getByTestId('title-input'), '测试工单');\n      await user.type(screen.getByTestId('description-input'), '这是一个测试工单');\n\n      // 提交表单\n      const submitButton = screen.getByTestId('submit-button');\n      expect(submitButton).not.toBeDisabled();\n\n      await user.click(submitButton);\n\n      // 验证提交按钮状态\n      expect(mockSubmit).toHaveBeenCalled();\n    });\n\n    it('应该显示加载中的旋转图标', () => {\n      render(\n        <TestWrapper>\n          <MockTicketForm loading={true} />\n        </TestWrapper>\n      );\n\n      // 验证加载图标显示\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n      expect(screen.getByText('创建中...')).toBeInTheDocument();\n    });\n  });\n\n  describe('错误处理测试', () => {\n    it('应该显示表单验证错误', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm error=\"标题不能为空\" />\n        </TestWrapper>\n      );\n\n      // 验证错误信息显示\n      expect(screen.getByTestId('form-error')).toBeInTheDocument();\n      expect(screen.getByText('标题不能为空')).toBeInTheDocument();\n\n      // 验证提交按钮被禁用\n      const submitButton = screen.getByTestId('submit-button');\n      expect(submitButton).toBeDisabled();\n    });\n\n    it('应该显示网络错误状态', () => {\n      const mockRefresh = jest.fn();\n\n      render(\n        <TestWrapper>\n          <MockTicketList error=\"网络连接失败，请检查网络设置\" onRefresh={mockRefresh} />\n        </TestWrapper>\n      );\n\n      // 验证错误状态显示\n      expect(screen.getByTestId('ticket-list-error')).toBeInTheDocument();\n      expect(screen.getByText('加载失败')).toBeInTheDocument();\n      expect(screen.getByText('网络连接失败，请检查网络设置')).toBeInTheDocument();\n\n      // 验证重新加载按钮\n      const refreshButton = screen.getByTestId('refresh-button');\n      expect(refreshButton).toBeInTheDocument();\n    });\n\n    it('应该处理组件错误边界', () => {\n      const ThrowError = () => {\n        throw new Error('测试错误');\n      };\n\n      render(\n        <TestWrapper>\n          <ThrowError />\n        </TestWrapper>\n      );\n\n      // 验证错误边界显示\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n      expect(screen.getByText('出现了错误')).toBeInTheDocument();\n      expect(screen.getByText('页面加载失败，请刷新重试')).toBeInTheDocument();\n      expect(screen.getByTestId('retry-button')).toBeInTheDocument();\n    });\n\n    it('应该支持错误重试功能', async () => {\n      const user = userEvent.setup();\n      const mockRefresh = jest.fn();\n\n      render(\n        <TestWrapper>\n          <MockTicketList error=\"加载失败\" onRefresh={mockRefresh} />\n        </TestWrapper>\n      );\n\n      // 点击重新加载按钮\n      const refreshButton = screen.getByTestId('refresh-button');\n      await user.click(refreshButton);\n\n      // 验证重试函数被调用\n      expect(mockRefresh).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('交互反馈测试', () => {\n    it('应该显示成功消息', async () => {\n      const user = userEvent.setup();\n      const mockSubmit = jest.fn().mockResolvedValue({});\n\n      render(\n        <TestWrapper>\n          <MockTicketForm onSubmit={mockSubmit} />\n        </TestWrapper>\n      );\n\n      // 填写并提交表单\n      await user.type(screen.getByTestId('title-input'), '测试工单');\n      await user.type(screen.getByTestId('description-input'), '这是一个测试工单');\n      await user.click(screen.getByTestId('submit-button'));\n\n      // 等待提交完成\n      await waitFor(() => {\n        expect(mockSubmit).toHaveBeenCalled();\n      });\n\n      // 验证成功消息\n      expect(message.success).toHaveBeenCalledWith('工单创建成功');\n    });\n\n    it('应该显示失败消息', async () => {\n      const user = userEvent.setup();\n      const mockSubmit = jest.fn().mockRejectedValue(new Error('提交失败'));\n\n      render(\n        <TestWrapper>\n          <MockTicketForm onSubmit={mockSubmit} />\n        </TestWrapper>\n      );\n\n      // 填写并提交表单\n      await user.type(screen.getByTestId('title-input'), '测试工单');\n      await user.type(screen.getByTestId('description-input'), '这是一个测试工单');\n      await user.click(screen.getByTestId('submit-button'));\n\n      // 等待提交完成\n      await waitFor(() => {\n        expect(mockSubmit).toHaveBeenCalled();\n      });\n\n      // 验证错误消息\n      expect(message.error).toHaveBeenCalledWith('工单创建失败');\n    });\n\n    it('应该提供视觉反馈', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 测试输入框焦点状态\n      const titleInput = screen.getByTestId('title-input');\n      await user.click(titleInput);\n      \n      expect(titleInput).toHaveFocus();\n      expect(titleInput).toHaveClass('focus:ring-2', 'focus:ring-blue-500');\n\n      // 测试按钮悬停状态\n      const submitButton = screen.getByTestId('submit-button');\n      expect(submitButton).toHaveClass('hover:bg-blue-700');\n    });\n\n    it('应该支持键盘导航', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 测试Tab键导航\n      const titleInput = screen.getByTestId('title-input');\n      titleInput.focus();\n\n      await user.tab();\n      expect(screen.getByTestId('description-input')).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByTestId('priority-select')).toHaveFocus();\n\n      await user.tab();\n      expect(screen.getByTestId('cancel-button')).toHaveFocus();\n\n      await user.tab();\n      // 提交按钮禁用时不应获取焦点\n      expect(screen.getByTestId('submit-button')).not.toHaveFocus();\n      expect(screen.getByTestId('submit-button')).toBeDisabled();\n    });\n  });\n\n  describe('空状态测试', () => {\n    it('应该显示空状态页面', () => {\n      render(\n        <TestWrapper>\n          <MockTicketList tickets={[]} />\n        </TestWrapper>\n      );\n\n      // 验证空状态显示\n      expect(screen.getByTestId('ticket-list-empty')).toBeInTheDocument();\n      expect(screen.getByText('暂无工单')).toBeInTheDocument();\n      expect(screen.getByText('还没有创建任何工单')).toBeInTheDocument();\n    });\n\n    it('应该在有数据时显示列表', () => {\n      const mockTickets = [1, 2, 3];\n\n      render(\n        <TestWrapper>\n          <MockTicketList tickets={mockTickets} />\n        </TestWrapper>\n      );\n\n      // 验证列表显示\n      expect(screen.getByTestId('ticket-list')).toBeInTheDocument();\n      expect(screen.getAllByTestId(/ticket-item-/)).toHaveLength(3);\n    });\n  });\n\n  describe('表单验证测试', () => {\n    it('应该验证必填字段', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 验证初始状态下提交按钮被禁用\n      const submitButton = screen.getByTestId('submit-button');\n      expect(submitButton).toBeDisabled();\n\n      // 只填写标题\n      await user.type(screen.getByTestId('title-input'), '测试工单');\n      expect(submitButton).toBeDisabled();\n\n      // 填写描述\n      await user.type(screen.getByTestId('description-input'), '这是一个测试工单');\n      expect(submitButton).not.toBeDisabled();\n    });\n\n    it('应该实时验证输入内容', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      const titleInput = screen.getByTestId('title-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      // 输入空格\n      await user.type(titleInput, '   ');\n      expect(submitButton).toBeDisabled();\n\n      // 输入有效内容\n      await user.clear(titleInput);\n      await user.type(titleInput, '有效标题');\n      await user.type(screen.getByTestId('description-input'), '有效描述');\n      expect(submitButton).not.toBeDisabled();\n    });\n  });\n\n  describe('响应式交互测试', () => {\n    it('应该在移动设备上正确显示', () => {\n      // Mock 移动设备视口\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 验证表单在移动设备上的显示\n      expect(screen.getByTestId('ticket-form')).toBeInTheDocument();\n      expect(screen.getByTestId('title-input')).toHaveClass('w-full');\n      expect(screen.getByTestId('description-input')).toHaveClass('w-full');\n    });\n\n    it('应该支持触摸交互', async () => {\n      const user = userEvent.setup();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 模拟触摸交互\n      const titleInput = screen.getByTestId('title-input');\n      await user.click(titleInput);\n      \n      expect(titleInput).toHaveFocus();\n    });\n  });\n\n  describe('性能优化测试', () => {\n    it('应该防止重复提交', async () => {\n      const user = userEvent.setup();\n      const mockSubmit = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(resolve, 1000))\n      );\n\n      render(\n        <TestWrapper>\n          <MockTicketForm onSubmit={mockSubmit} />\n        </TestWrapper>\n      );\n\n      // 填写表单\n      await user.type(screen.getByTestId('title-input'), '测试工单');\n      await user.type(screen.getByTestId('description-input'), '这是一个测试工单');\n\n      // 快速点击提交按钮多次\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n      await user.click(submitButton);\n      await user.click(submitButton);\n\n      // 验证只调用一次\n      expect(mockSubmit).toHaveBeenCalledTimes(1);\n    });\n\n    it('应该优化大量数据的渲染', () => {\n      const largeTicketList = Array.from({ length: 1000 }, (_, i) => i);\n\n      const startTime = performance.now();\n      \n      render(\n        <TestWrapper>\n          <MockTicketList tickets={largeTicketList} />\n        </TestWrapper>\n      );\n\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n\n      // 验证渲染时间在合理范围内（小于300ms）\n      expect(renderTime).toBeLessThan(300);\n    });\n  });\n\n  describe('无障碍访问测试', () => {\n    it('应该提供正确的ARIA标签', () => {\n      render(\n        <TestWrapper>\n          <MockTicketForm />\n        </TestWrapper>\n      );\n\n      // 验证表单标签\n      const titleInput = screen.getByTestId('title-input');\n      expect(titleInput).toHaveAttribute('required');\n      expect(screen.getByLabelText('工单标题 *')).toBe(titleInput);\n\n      const descriptionInput = screen.getByTestId('description-input');\n      expect(descriptionInput).toHaveAttribute('required');\n      expect(screen.getByLabelText('问题描述 *')).toBe(descriptionInput);\n    });\n\n    it('应该支持屏幕阅读器', () => {\n      render(\n        <TestWrapper>\n          <MockTicketList error=\"加载失败\" />\n        </TestWrapper>\n      );\n\n      // 验证错误状态的可访问性\n      const errorContainer = screen.getByTestId('ticket-list-error');\n      expect(errorContainer).toBeInTheDocument();\n      // 标题应为“加载失败”\n      expect(within(errorContainer).getByRole('heading', { name: '加载失败' })).toBeInTheDocument();\n      // 文本也应包含错误提示（可能出现多个匹配项）\n      expect(within(errorContainer).getAllByText('加载失败').length).toBeGreaterThanOrEqual(1);\n    });\n\n    it('应该提供键盘快捷键支持', async () => {\n      const user = userEvent.setup();\n      const mockCancel = jest.fn();\n\n      render(\n        <TestWrapper>\n          <MockTicketForm onCancel={mockCancel} />\n        </TestWrapper>\n      );\n\n      // 测试Escape键取消\n      await user.keyboard('{Escape}');\n      \n      // 注意：这里需要实际的键盘事件处理逻辑\n      // 在真实组件中应该监听keydown事件\n    });\n  });\n});"],"names":["jest","mock","useNotifications","fn","useAuth","originalAntd","requireActual","message","success","error","warning","info","loading","destroy","notification","open","MockLoadingSpinner","div","data-testid","className","MockSkeletonLoader","MockErrorBoundary","React","Component","constructor","props","state","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","console","render","h2","p","button","onClick","setState","children","MockTicketForm","onSubmit","onCancel","formData","setFormData","useState","title","description","priority","isSubmitting","setIsSubmitting","handleSubmit","e","preventDefault","form","label","htmlFor","input","id","type","value","onChange","target","placeholder","required","textarea","rows","select","option","disabled","trim","span","MockTicketList","tickets","onRefresh","Array","from","length","map","_","index","h3","h4","TestWrapper","ConfigProvider","locale","zhCN","describe","beforeEach","clearAllMocks","it","expect","screen","getByTestId","toBeInTheDocument","getAllByTestId","toHaveLength","user","userEvent","setup","mockSubmit","mockImplementation","Promise","resolve","setTimeout","submitButton","not","toBeDisabled","click","toHaveBeenCalled","getByText","mockRefresh","refreshButton","ThrowError","Error","toHaveBeenCalledTimes","mockResolvedValue","waitFor","toHaveBeenCalledWith","mockRejectedValue","titleInput","toHaveFocus","toHaveClass","focus","tab","mockTickets","clear","Object","defineProperty","window","writable","configurable","largeTicketList","i","startTime","performance","now","endTime","renderTime","toBeLessThan","toHaveAttribute","getByLabelText","toBe","descriptionInput","errorContainer","within","getByRole","name","getAllByText","toBeGreaterThanOrEqual","mockCancel","keyboard"],"mappings":"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"}