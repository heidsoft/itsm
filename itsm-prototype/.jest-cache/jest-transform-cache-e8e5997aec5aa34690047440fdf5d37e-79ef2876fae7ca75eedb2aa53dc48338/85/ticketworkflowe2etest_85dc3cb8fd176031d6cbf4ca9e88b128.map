{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/__tests__/e2e/ticket-workflow.e2e.test.tsx"],"sourcesContent":["/**\n * 工单管理端到端测试\n * 测试完整的用户工作流程\n */\n\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ConfigProvider } from 'antd';\nimport zhCN from 'antd/locale/zh_CN';\n\n// Mock 所有外部依赖\njest.mock('../../lib/http-client', () => ({\n  httpClient: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n  },\n}));\n\njest.mock('../../lib/auth-service', () => ({\n  authService: {\n    login: jest.fn(),\n    logout: jest.fn(),\n    getCurrentUser: jest.fn(),\n    isAuthenticated: jest.fn(() => true),\n    getToken: jest.fn(() => 'mock-token'),\n  },\n}));\n\njest.mock('lucide-react', () => ({\n  Plus: () => <div data-testid=\"plus-icon\" />,\n  Search: () => <div data-testid=\"search-icon\" />,\n  Filter: () => <div data-testid=\"filter-icon\" />,\n  MoreHorizontal: () => <div data-testid=\"more-icon\" />,\n  Edit: () => <div data-testid=\"edit-icon\" />,\n  Trash2: () => <div data-testid=\"trash-icon\" />,\n  Eye: () => <div data-testid=\"eye-icon\" />,\n  CheckCircle: () => <div data-testid=\"check-icon\" />,\n  Clock: () => <div data-testid=\"clock-icon\" />,\n  AlertTriangle: () => <div data-testid=\"alert-icon\" />,\n  User: () => <div data-testid=\"user-icon\" />,\n  Calendar: () => <div data-testid=\"calendar-icon\" />,\n  Tag: () => <div data-testid=\"tag-icon\" />,\n  MessageSquare: () => <div data-testid=\"message-icon\" />,\n  Paperclip: () => <div data-testid=\"paperclip-icon\" />,\n}));\n\n// Mock 页面组件\nconst MockTicketsPage = () => (\n  <div data-testid=\"tickets-page\">\n    <h1>工单管理</h1>\n    <button data-testid=\"create-ticket-btn\">创建工单</button>\n    <div data-testid=\"ticket-list\">\n      <div data-testid=\"ticket-item-1\">系统登录问题</div>\n      <div data-testid=\"ticket-item-2\">网络连接缓慢</div>\n    </div>\n  </div>\n);\n\nconst MockDashboardPage = () => (\n  <div data-testid=\"dashboard-page\">\n    <h1>仪表板</h1>\n    <div data-testid=\"stats-cards\">\n      <div data-testid=\"total-tickets\">总工单: 150</div>\n      <div data-testid=\"open-tickets\">待处理: 45</div>\n    </div>\n  </div>\n);\n\njest.mock('../../tickets/page', () => ({\n  default: MockTicketsPage,\n}));\n\njest.mock('../../dashboard/page', () => ({\n  default: MockDashboardPage,\n}));\n\n// 测试包装器\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ConfigProvider locale={zhCN}>\n    {children}\n  </ConfigProvider>\n);\n\ndescribe('工单管理端到端测试', () => {\n  beforeEach(() => {\n    // 重置所有 mock\n    jest.clearAllMocks();\n  });\n\n  describe('基础功能测试', () => {\n    it('应该正确渲染工单列表页面', async () => {\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('tickets-page')).toBeInTheDocument();\n      expect(screen.getByText('工单管理')).toBeInTheDocument();\n      expect(screen.getByTestId('create-ticket-btn')).toBeInTheDocument();\n      expect(screen.getByTestId('ticket-list')).toBeInTheDocument();\n    });\n\n    it('应该正确渲染仪表板页面', async () => {\n      const { default: DashboardPage } = await import('../../dashboard/page');\n      \n      render(\n        <TestWrapper>\n          <DashboardPage />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument();\n      expect(screen.getByText('仪表板')).toBeInTheDocument();\n      expect(screen.getByTestId('stats-cards')).toBeInTheDocument();\n    });\n\n    it('应该支持用户交互', async () => {\n      const user = userEvent.setup();\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      const createButton = screen.getByTestId('create-ticket-btn');\n      await user.click(createButton);\n\n      // 验证按钮可以被点击\n      expect(createButton).toBeInTheDocument();\n    });\n  });\n\n  describe('数据加载测试', () => {\n    it('应该正确处理工单数据', async () => {\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      // 验证工单项目显示\n      expect(screen.getByTestId('ticket-item-1')).toBeInTheDocument();\n      expect(screen.getByTestId('ticket-item-2')).toBeInTheDocument();\n      expect(screen.getByText('系统登录问题')).toBeInTheDocument();\n      expect(screen.getByText('网络连接缓慢')).toBeInTheDocument();\n    });\n\n    it('应该正确处理统计数据', async () => {\n      const { default: DashboardPage } = await import('../../dashboard/page');\n      \n      render(\n        <TestWrapper>\n          <DashboardPage />\n        </TestWrapper>\n      );\n\n      // 验证统计数据显示\n      expect(screen.getByTestId('total-tickets')).toBeInTheDocument();\n      expect(screen.getByTestId('open-tickets')).toBeInTheDocument();\n      expect(screen.getByText('总工单: 150')).toBeInTheDocument();\n      expect(screen.getByText('待处理: 45')).toBeInTheDocument();\n    });\n  });\n\n  describe('错误处理测试', () => {\n    it('应该处理页面加载错误', async () => {\n      // 模拟页面加载错误\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      \n      try {\n        const { default: TicketsPage } = await import('../../tickets/page');\n        \n        render(\n          <TestWrapper>\n            <TicketsPage />\n          </TestWrapper>\n        );\n\n        // 验证页面仍然可以渲染\n        expect(screen.getByTestId('tickets-page')).toBeInTheDocument();\n      } catch (error) {\n        // 如果有错误，确保它被正确处理\n        expect(error).toBeDefined();\n      } finally {\n        consoleSpy.mockRestore();\n      }\n    });\n  });\n\n  describe('响应式设计测试', () => {\n    it('应该在不同屏幕尺寸下正确显示', async () => {\n      // 模拟移动设备\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('tickets-page')).toBeInTheDocument();\n\n      // 模拟桌面设备\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 1920,\n      });\n\n      // 触发 resize 事件\n      window.dispatchEvent(new Event('resize'));\n\n      expect(screen.getByTestId('tickets-page')).toBeInTheDocument();\n    });\n  });\n\n  describe('国际化测试', () => {\n    it('应该正确显示中文界面', async () => {\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      // 验证中文文本显示\n      expect(screen.getByText('工单管理')).toBeInTheDocument();\n    });\n\n    it('应该正确处理日期格式', async () => {\n      const { default: DashboardPage } = await import('../../dashboard/page');\n      \n      render(\n        <TestWrapper>\n          <DashboardPage />\n        </TestWrapper>\n      );\n\n      // 验证页面渲染成功\n      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument();\n    });\n  });\n\n  describe('性能测试', () => {\n    it('应该在合理时间内加载页面', async () => {\n      const startTime = performance.now();\n      \n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      const endTime = performance.now();\n      const loadTime = endTime - startTime;\n\n      // 验证加载时间小于 1000ms\n      expect(loadTime).toBeLessThan(1000);\n      expect(screen.getByTestId('tickets-page')).toBeInTheDocument();\n    });\n\n    it('应该正确处理大量数据', async () => {\n      const { default: TicketsPage } = await import('../../tickets/page');\n      \n      render(\n        <TestWrapper>\n          <TicketsPage />\n        </TestWrapper>\n      );\n\n      // 验证页面可以处理数据\n      expect(screen.getByTestId('ticket-list')).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","httpClient","get","fn","post","put","delete","authService","login","logout","getCurrentUser","isAuthenticated","getToken","Plus","div","data-testid","Search","Filter","MoreHorizontal","Edit","Trash2","Eye","CheckCircle","Clock","AlertTriangle","User","Calendar","Tag","MessageSquare","Paperclip","default","MockTicketsPage","MockDashboardPage","h1","button","TestWrapper","children","ConfigProvider","locale","zhCN","describe","beforeEach","clearAllMocks","it","TicketsPage","render","expect","screen","getByTestId","toBeInTheDocument","getByText","DashboardPage","user","userEvent","setup","createButton","click","consoleSpy","spyOn","console","mockImplementation","error","toBeDefined","mockRestore","Object","defineProperty","window","writable","configurable","value","dispatchEvent","Event","startTime","performance","now","endTime","loadTime","toBeLessThan"],"mappings":"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"}