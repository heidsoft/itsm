{"version":3,"names":["cov_2kzk1c5svw","actualCoverage","s","default","f","_default","useDashboardData","CACHE_KEY","CACHE_DURATION","MAX_RETRY_ATTEMPTS","RETRY_DELAY","delay","ms","Promise","resolve","setTimeout","fetchWithRetry","retryCount","b","Math","random","Error","systemAlerts","type","message","time","severity","recentTickets","id","title","priority","status","assignee","category","sla","recentActivities","operator","action","target","avatar","kpiData","totalTickets","value","floor","change","trend","pendingEvents","activeUsers","avgResponseTime","slaCompliance","customerSatisfaction","error","console","warn","fetchDashboardData","data","setData","_react","useState","loading","setLoading","setError","lastUpdated","setLastUpdated","setRetryCount","cachedData","setCachedData","_usePerformance","useLocalStorage","refreshState","setRefreshState","useSessionStorage","lastRefresh","autoRefreshEnabled","abortControllerRef","useRef","autoRefreshIntervalRef","isInitialLoadRef","loadData","useCallback","forceRefresh","current","abort","now","Date","cacheAge","timestamp","log","round","AbortController","dashboardData","signal","aborted","prev","err","errorMessage","refreshData","toggleAutoRefresh","clearCache","useEffect","clearInterval","setInterval","cacheStatus","hasCache","isStale"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/hooks/useDashboardData.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useLocalStorage, useSessionStorage } from './usePerformance';\n\n// 类型定义\nexport interface SystemAlert {\n  type: 'warning' | 'error' | 'info' | 'success';\n  message: string;\n  time: string;\n  severity: 'low' | 'medium' | 'high';\n}\n\nexport interface RecentTicket {\n  id: string;\n  title: string;\n  priority: 'high' | 'medium' | 'low';\n  status: 'processing' | 'pending' | 'resolved';\n  assignee: string;\n  time: string;\n  category: string;\n  sla: string;\n}\n\nexport interface RecentActivity {\n  operator: string;\n  action: string;\n  target: string;\n  time: string;\n  avatar: string;\n}\n\nexport interface KPIData {\n  totalTickets: { value: number; change: number; trend: 'up' | 'down' };\n  pendingEvents: { value: number; change: number; trend: 'up' | 'down' };\n  activeUsers: { value: number; change: number; trend: 'up' | 'down' };\n  avgResponseTime: { value: number; change: number; trend: 'up' | 'down' };\n  slaCompliance: { value: number; change: number; trend: 'up' | 'down' };\n  customerSatisfaction: { value: number; change: number; trend: 'up' | 'down' };\n}\n\nexport interface DashboardData {\n  systemAlerts: SystemAlert[];\n  recentTickets: RecentTicket[];\n  recentActivities: RecentActivity[];\n  kpiData: KPIData;\n}\n\n// 缓存配置\nconst CACHE_KEY = 'dashboard_data_cache';\nconst CACHE_DURATION = 5 * 60 * 1000; // 5分钟缓存\nconst MAX_RETRY_ATTEMPTS = 3;\nconst RETRY_DELAY = 1000; // 1秒重试延迟\n\n// 延迟函数\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n// 带重试的API调用\nconst fetchWithRetry = async (retryCount = 0): Promise<DashboardData> => {\n  try {\n    // 模拟网络延迟\n    await delay(Math.random() * 500 + 500); // 500-1000ms随机延迟\n    \n    // 模拟偶尔的网络错误\n    if (Math.random() < 0.1 && retryCount === 0) {\n      throw new Error('网络连接超时');\n    }\n  \n    return {\n      systemAlerts: [\n        {\n          type: \"warning\",\n          message: \"系统负载较高，建议检查服务器状态\",\n          time: \"2分钟前\",\n          severity: \"medium\",\n        },\n      ],\n    recentTickets: [\n      {\n        id: \"T-2024-001\",\n        title: \"网络连接异常\",\n        priority: \"high\",\n        status: \"processing\",\n        assignee: \"张三\",\n        time: \"10分钟前\",\n        category: \"网络\",\n        sla: \"4小时\",\n      },\n      {\n        id: \"T-2024-002\",\n        title: \"软件安装失败\",\n        priority: \"medium\",\n        status: \"pending\",\n        assignee: \"李四\",\n        time: \"30分钟前\",\n        category: \"软件\",\n        sla: \"8小时\",\n      },\n      {\n        id: \"T-2024-003\",\n        title: \"数据库性能优化\",\n        priority: \"low\",\n        status: \"resolved\",\n        assignee: \"王五\",\n        time: \"2小时前\",\n        category: \"数据库\",\n        sla: \"24小时\",\n      },\n    ],\n    recentActivities: [\n      {\n        operator: \"张三\",\n        action: \"处理了工单\",\n        target: \"T-2024-001\",\n        time: \"10分钟前\",\n        avatar: \"https://api.dicebear.com/7x/avataaars/svg?seed=张三\",\n      },\n      {\n        operator: \"系统\",\n        action: \"自动分配工单\",\n        target: \"T-2024-002\",\n        time: \"30分钟前\",\n        avatar: \"https://api.dicebear.com/7x/avataaars/svg?seed=系统\",\n      },\n      {\n        operator: \"李四\",\n        action: \"更新了配置\",\n        target: \"数据库配置\",\n        time: \"1小时前\",\n        avatar: \"https://api.dicebear.com/7x/avataaars/svg?seed=李四\",\n      },\n    ],\n      kpiData: {\n        totalTickets: { value: 1247 + Math.floor(Math.random() * 100), change: 12, trend: \"up\" },\n        pendingEvents: { value: 23 + Math.floor(Math.random() * 10), change: -5, trend: \"down\" },\n        activeUsers: { value: 156 + Math.floor(Math.random() * 20), change: 8, trend: \"up\" },\n        avgResponseTime: { value: 2.4 + Math.random() * 0.5, change: -15, trend: \"down\" },\n        slaCompliance: { value: 98.5 + Math.random() * 1, change: 2, trend: \"up\" },\n        customerSatisfaction: { value: 4.7 + Math.random() * 0.3, change: 0.3, trend: \"up\" },\n      },\n    };\n  } catch (error) {\n    if (retryCount < MAX_RETRY_ATTEMPTS - 1) {\n      console.warn(`API调用失败，正在重试... (${retryCount + 1}/${MAX_RETRY_ATTEMPTS})`);\n      await delay(RETRY_DELAY * (retryCount + 1)); // 递增延迟\n      return fetchWithRetry(retryCount + 1);\n    }\n    throw error;\n  }\n};\n\n// 主要的数据获取函数\nconst fetchDashboardData = async (): Promise<DashboardData> => {\n  return fetchWithRetry();\n};\n\nexport const useDashboardData = () => {\n  const [data, setData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  \n  // 使用本地存储缓存数据\n  const [cachedData, setCachedData] = useLocalStorage<{\n    data: DashboardData;\n    timestamp: number;\n  } | null>(CACHE_KEY, null);\n  \n  // 使用会话存储记录刷新状态\n  const [refreshState, setRefreshState] = useSessionStorage('dashboard_refresh_state', {\n    lastRefresh: 0,\n    autoRefreshEnabled: true,\n  });\n  \n  const abortControllerRef = useRef<AbortController | null>(null);\n  const autoRefreshIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isInitialLoadRef = useRef(true);\n\n  const loadData = useCallback(async (forceRefresh = false) => {\n    // 取消之前的请求\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    // 检查缓存（仅在非强制刷新时）\n    if (!forceRefresh && cachedData && !isInitialLoadRef.current) {\n      const now = Date.now();\n      const cacheAge = now - cachedData.timestamp;\n      \n      if (cacheAge < CACHE_DURATION) {\n        console.log('使用缓存数据，缓存年龄:', Math.round(cacheAge / 1000), '秒');\n        setData(cachedData.data);\n        setLastUpdated(new Date(cachedData.timestamp));\n        setLoading(false);\n        setError(null);\n        return;\n      }\n    }\n    \n    // 标记非初始加载\n    isInitialLoadRef.current = false;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      setRetryCount(0);\n      \n      abortControllerRef.current = new AbortController();\n      \n      const dashboardData = await fetchDashboardData();\n      \n      // 检查请求是否被取消\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n      \n      const now = Date.now();\n      setData(dashboardData);\n      setLastUpdated(new Date(now));\n      \n      // 更新缓存\n      setCachedData({\n        data: dashboardData,\n        timestamp: now,\n      });\n      \n      // 更新刷新状态\n      setRefreshState(prev => ({\n        ...prev,\n        lastRefresh: now,\n      }));\n      \n    } catch (err) {\n      if (abortControllerRef.current?.signal.aborted) {\n        return;\n      }\n      \n      const errorMessage = err instanceof Error ? err.message : '加载数据失败';\n      setError(errorMessage);\n      setRetryCount(prev => prev + 1);\n      \n      // 如果有缓存数据，在错误时仍然显示缓存数据\n      if (cachedData && !data) {\n        console.warn('API调用失败，使用缓存数据:', errorMessage);\n        setData(cachedData.data);\n        setLastUpdated(new Date(cachedData.timestamp));\n      }\n    } finally {\n      setLoading(false);\n      abortControllerRef.current = null;\n    }\n  }, [cachedData, setCachedData, setRefreshState, data]);\n\n  const refreshData = useCallback(() => {\n    loadData(true); // 强制刷新，跳过缓存\n  }, [loadData]);\n  \n  const toggleAutoRefresh = useCallback(() => {\n    setRefreshState(prev => ({\n      ...prev,\n      autoRefreshEnabled: !prev.autoRefreshEnabled,\n    }));\n  }, [setRefreshState]);\n  \n  const clearCache = useCallback(() => {\n    setCachedData(null);\n    loadData(true);\n  }, [setCachedData, loadData]);\n\n  // 初始化数据加载\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n  \n  // 自动刷新逻辑\n  useEffect(() => {\n    if (!refreshState.autoRefreshEnabled) {\n      if (autoRefreshIntervalRef.current) {\n        clearInterval(autoRefreshIntervalRef.current);\n        autoRefreshIntervalRef.current = null;\n      }\n      return;\n    }\n    \n    // 设置自动刷新，每5分钟刷新一次\n    autoRefreshIntervalRef.current = setInterval(() => {\n      loadData();\n    }, 5 * 60 * 1000);\n    \n    return () => {\n      if (autoRefreshIntervalRef.current) {\n        clearInterval(autoRefreshIntervalRef.current);\n        autoRefreshIntervalRef.current = null;\n      }\n    };\n  }, [refreshState.autoRefreshEnabled, loadData]);\n  \n  // 清理函数\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      if (autoRefreshIntervalRef.current) {\n        clearInterval(autoRefreshIntervalRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    data,\n    loading,\n    error,\n    lastUpdated,\n    refreshData,\n    retryCount,\n    autoRefreshEnabled: refreshState.autoRefreshEnabled,\n    toggleAutoRefresh,\n    clearCache,\n    // 计算缓存状态\n    cacheStatus: cachedData ? {\n      hasCache: true,\n      cacheAge: Date.now() - cachedData.timestamp,\n      isStale: Date.now() - cachedData.timestamp > CACHE_DURATION,\n    } : {\n      hasCache: false,\n      cacheAge: 0,\n      isStale: false,\n    },\n  };\n};\n\nexport default useDashboardData;"],"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","ignoreList":[]}