{"version":3,"names":["BasicExample","cov_19wf13nxne","f","s","LoadingEmptyErrorExamples","ModuleExamples","TicketListExample","default","_default","state","setState","_react","useState","simulateLoading","simulateEmpty","simulateError","simulateSuccess","_jsxruntime","jsxs","_antd","Card","title","className","Space","jsx","Button","onClick","_LoadingEmptyError","loadingText","empty","description","actionText","onAction","console","log","showAction","error","showRetry","b","loading","setLoading","tickets","setTickets","setError","fetchTickets","setTimeout","random","Math","id","getState","length","map","ticket","minHeight"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/components/ui/LoadingEmptyError.example.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Card, Space } from \"antd\";\nimport LoadingEmptyError from \"./LoadingEmptyError\";\n\n// 示例1: 基础用法\nexport const BasicExample = () => {\n  const [state, setState] = useState<\"loading\" | \"empty\" | \"error\" | \"success\">(\n    \"loading\"\n  );\n\n  const simulateLoading = () => setState(\"loading\");\n  const simulateEmpty = () => setState(\"empty\");\n  const simulateError = () => setState(\"error\");\n  const simulateSuccess = () => setState(\"success\");\n\n  return (\n    <Card title=\"基础用法示例\" className=\"mb-6\">\n      <Space className=\"mb-4\">\n        <Button onClick={simulateLoading}>加载状态</Button>\n        <Button onClick={simulateEmpty}>空状态</Button>\n        <Button onClick={simulateError}>错误状态</Button>\n        <Button onClick={simulateSuccess}>成功状态</Button>\n      </Space>\n\n      <LoadingEmptyError\n        state={state}\n        loadingText=\"正在加载数据...\"\n        empty={{\n          title: \"暂无数据\",\n          description: \"当前没有相关数据，您可以创建新的记录\",\n          actionText: \"创建记录\",\n          onAction: () => console.log(\"创建记录\"),\n          showAction: true,\n        }}\n        error={{\n          title: \"加载失败\",\n          description: \"数据加载过程中发生错误，请稍后重试\",\n          actionText: \"重试\",\n          onAction: () => console.log(\"重试\"),\n          showRetry: true,\n          showAction: true,\n        }}\n      >\n        {state === \"success\" && (\n          <div className=\"p-4 text-center\">\n            <h3 className=\"text-lg font-semibold text-green-600\">数据加载成功！</h3>\n            <p className=\"text-gray-600\">这里显示实际的数据内容</p>\n          </div>\n        )}\n      </LoadingEmptyError>\n    </Card>\n  );\n};\n\n// 示例2: 工单列表示例\ninterface Ticket {\n  id: number;\n  title: string;\n}\n\nexport const TicketListExample = () => {\n  const [loading, setLoading] = useState(false);\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchTickets = async () => {\n    setLoading(true);\n    setError(null);\n    \n    // 模拟API调用\n    setTimeout(() => {\n      const random = Math.random();\n      if (random < 0.3) {\n        setError(\"网络错误\");\n        setTickets([]);\n      } else if (random < 0.6) {\n        setTickets([]);\n      } else {\n        setTickets([{ id: 1, title: \"示例工单\" }]);\n      }\n      setLoading(false);\n    }, 2000);\n  };\n\n  const getState = () => {\n    if (loading) return \"loading\";\n    if (error) return \"error\";\n    if (tickets.length === 0) return \"empty\";\n    return \"success\";\n  };\n\n  return (\n    <Card title=\"工单列表示例\" className=\"mb-6\">\n      <Space className=\"mb-4\">\n        <Button onClick={fetchTickets} loading={loading}>\n          获取工单列表\n        </Button>\n      </Space>\n\n      <LoadingEmptyError\n        state={getState()}\n        loadingText=\"正在加载工单列表...\"\n        empty={{\n          title: \"暂无工单\",\n          description: \"当前没有工单数据，点击下方按钮创建第一个工单\",\n          actionText: \"创建工单\",\n          onAction: () => console.log(\"创建工单\"),\n          showAction: true,\n        }}\n        error={{\n          title: \"加载失败\",\n          description: error || \"工单列表加载失败，请稍后重试\",\n          actionText: \"重试\",\n          onAction: fetchTickets,\n          showRetry: true,\n          showAction: true,\n        }}\n      >\n        {tickets.length > 0 && (\n          <div className=\"space-y-2\">\n            {tickets.map((ticket) => (\n              <div key={ticket.id} className=\"p-3 border rounded\">\n                {ticket.title}\n              </div>\n            ))}\n          </div>\n        )}\n      </LoadingEmptyError>\n    </Card>\n  );\n};\n\n// 示例3: 模块化示例\nexport const ModuleExamples = () => {\n  return (\n    <div className=\"space-y-6\">\n      <Card title=\"不同模块的空状态\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <LoadingEmptyError\n            state=\"empty\"\n            empty={{\n              title: \"暂无事件\",\n              description: \"当前没有事件数据\",\n              actionText: \"创建事件\",\n              onAction: () => console.log(\"创建事件\"),\n              showAction: true,\n            }}\n            minHeight={150}\n          />\n          \n          <LoadingEmptyError\n            state=\"empty\"\n            empty={{\n              title: \"暂无问题\",\n              description: \"当前没有问题数据\",\n              actionText: \"创建问题\",\n              onAction: () => console.log(\"创建问题\"),\n              showAction: true,\n            }}\n            minHeight={150}\n          />\n        </div>\n      </Card>\n    </div>\n  );\n};\n\n// 主示例组件\nexport const LoadingEmptyErrorExamples = () => {\n  return (\n    <div className=\"p-6 space-y-6\">\n      <h1 className=\"text-2xl font-bold mb-6\">LoadingEmptyError 组件示例</h1>\n      <BasicExample />\n      <TicketListExample />\n      <ModuleExamples />\n    </div>\n  );\n};\n\nexport default LoadingEmptyErrorExamples;\n"],"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","ignoreList":[]}