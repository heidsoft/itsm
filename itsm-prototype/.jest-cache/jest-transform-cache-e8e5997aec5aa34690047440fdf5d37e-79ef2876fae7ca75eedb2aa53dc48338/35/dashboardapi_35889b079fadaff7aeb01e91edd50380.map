{"version":3,"names":["DashboardAPI","getDashboardConfig","userId","cov_25i82t6ql5","f","params","s","b","user_id","_httpclient","httpClient","get","saveDashboardConfig","config","post","getDashboardLayout","saveDashboardLayout","layout","getTicketStats","filters","getUserStats","getSystemStats","getChartData","chartType","getRealtimeData","dataType","getWidgetData","widgetId","refreshWidgetData","getAvailableWidgets","addWidget","widgetConfig","updateWidget","put","removeWidget","delete","generateReport","reportType","getReports","page","pageSize","page_size","downloadReport","reportId","response","Blob","type","exportDashboard","getTemplates","applyTemplate","templateId","saveAsTemplate","name","description","getPerformanceMetrics","getUsageStats","dateRange"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/api/dashboard-api.ts"],"sourcesContent":["import { httpClient } from '../../app/lib/http-client';\nimport {\n  DashboardWidget,\n  Dashboard,\n  DashboardLayout,\n  TicketStats,\n  UserStats,\n  SystemStats,\n  ChartData,\n  RealtimeData,\n  Report,\n  DashboardTemplate,\n  CreateDashboardRequest,\n  UpdateDashboardRequest\n} from '../../types/dashboard';\n\n/**\n * 仪表盘API客户端\n * 提供仪表盘数据获取和管理相关的API调用方法\n */\nexport class DashboardAPI {\n  /**\n   * 获取仪表盘配置\n   * @param userId 用户ID\n   * @returns 仪表盘配置\n   */\n  static async getDashboardConfig(userId?: number): Promise<Dashboard> {\n    const params = userId ? { user_id: userId } : {};\n    return httpClient.get<Dashboard>('/api/v1/dashboard/config', params);\n  }\n\n  /**\n   * 保存仪表盘配置\n   * @param config 仪表盘配置\n   * @returns 保存结果\n   */\n  static async saveDashboardConfig(config: Dashboard): Promise<{ success: boolean }> {\n    return httpClient.post<{ success: boolean }>('/api/v1/dashboard/config', config);\n  }\n\n  /**\n   * 获取仪表盘布局\n   * @param userId 用户ID\n   * @returns 仪表盘布局\n   */\n  static async getDashboardLayout(userId?: number): Promise<DashboardLayout> {\n    const params = userId ? { user_id: userId } : {};\n    return httpClient.get<DashboardLayout>('/api/v1/dashboard/layout', params);\n  }\n\n  /**\n   * 保存仪表盘布局\n   * @param layout 仪表盘布局\n   * @returns 保存结果\n   */\n  static async saveDashboardLayout(layout: DashboardLayout): Promise<{ success: boolean }> {\n    return httpClient.post<{ success: boolean }>('/api/v1/dashboard/layout', layout);\n  }\n\n  /**\n   * 获取工单统计数据\n   * @param filters 过滤条件\n   * @returns 工单统计数据\n   */\n  static async getTicketStats(filters?: Record<string, unknown>): Promise<TicketStats> {\n    return httpClient.get<TicketStats>('/api/v1/dashboard/stats/tickets', filters);\n  }\n\n  /**\n   * 获取用户统计数据\n   * @param filters 过滤条件\n   * @returns 用户统计数据\n   */\n  static async getUserStats(filters?: Record<string, unknown>): Promise<UserStats> {\n    return httpClient.get<UserStats>('/api/v1/dashboard/stats/users', filters);\n  }\n\n  /**\n   * 获取系统统计数据\n   * @param filters 过滤条件\n   * @returns 系统统计数据\n   */\n  static async getSystemStats(filters?: Record<string, unknown>): Promise<SystemStats> {\n    return httpClient.get<SystemStats>('/api/v1/dashboard/stats/system', filters);\n  }\n\n  /**\n   * 获取图表数据\n   * @param chartType 图表类型\n   * @param filters 过滤条件\n   * @returns 图表数据\n   */\n  static async getChartData(chartType: string, filters?: Record<string, unknown>): Promise<ChartData> {\n    return httpClient.get<ChartData>(`/api/v1/dashboard/charts/${chartType}`, filters);\n  }\n\n  /**\n   * 获取实时数据\n   * @param dataType 数据类型\n   * @returns 实时数据\n   */\n  static async getRealtimeData(dataType: string): Promise<RealtimeData> {\n    return httpClient.get<RealtimeData>(`/api/v1/dashboard/realtime/${dataType}`);\n  }\n\n  /**\n   * 获取部件数据\n   * @param widgetId 部件ID\n   * @param filters 过滤条件\n   * @returns 部件数据\n   */\n  static async getWidgetData(widgetId: string, filters?: Record<string, unknown>): Promise<DashboardWidget> {\n    return httpClient.get<DashboardWidget>(`/api/v1/dashboard/widgets/${widgetId}`, filters);\n  }\n\n  /**\n   * 刷新部件数据\n   * @param widgetId 部件ID\n   * @param filters 过滤条件\n   * @returns 部件数据\n   */\n  static async refreshWidgetData(widgetId: string, filters?: Record<string, unknown>): Promise<DashboardWidget> {\n    return httpClient.post<DashboardWidget>(`/api/v1/dashboard/widgets/${widgetId}/refresh`, filters);\n  }\n\n  /**\n   * 获取可用部件列表\n   * @returns 部件列表\n   */\n  static async getAvailableWidgets(): Promise<DashboardWidget[]> {\n    return httpClient.get<DashboardWidget[]>('/api/v1/dashboard/widgets/available');\n  }\n\n  /**\n   * 添加部件到仪表盘\n   * @param widgetConfig 部件配置\n   * @returns 添加结果\n   */\n  static async addWidget(widgetConfig: Partial<DashboardWidget>): Promise<{ widget: DashboardWidget }> {\n    return httpClient.post<{ widget: DashboardWidget }>('/api/v1/dashboard/widgets', widgetConfig);\n  }\n\n  /**\n   * 更新部件配置\n   * @param widgetId 部件ID\n   * @param config 部件配置\n   * @returns 更新结果\n   */\n  static async updateWidget(widgetId: string, config: Partial<DashboardWidget>): Promise<{ widget: DashboardWidget }> {\n    return httpClient.put<{ widget: DashboardWidget }>(`/api/v1/dashboard/widgets/${widgetId}`, config);\n  }\n\n  /**\n   * 删除部件\n   * @param widgetId 部件ID\n   * @returns 删除结果\n   */\n  static async removeWidget(widgetId: string): Promise<{ success: boolean }> {\n    return httpClient.delete<{ success: boolean }>(`/api/v1/dashboard/widgets/${widgetId}`);\n  }\n\n  /**\n   * 生成报告\n   * @param reportType 报告类型\n   * @param filters 过滤条件\n   * @returns 报告数据\n   */\n  static async generateReport(reportType: string, filters?: Record<string, unknown>): Promise<Report> {\n    return httpClient.post<Report>(`/api/v1/dashboard/reports/${reportType}`, filters);\n  }\n\n  /**\n   * 获取报告列表\n   * @param page 页码\n   * @param pageSize 页面大小\n   * @returns 报告列表\n   */\n  static async getReports(page: number = 1, pageSize: number = 20): Promise<{\n    reports: Report[];\n    total: number;\n    page: number;\n    pageSize: number;\n  }> {\n    return httpClient.get('/api/v1/dashboard/reports', { page, page_size: pageSize });\n  }\n\n  /**\n   * 下载报告\n   * @param reportId 报告ID\n   * @returns 报告文件Blob\n   */\n  static async downloadReport(reportId: string): Promise<Blob> {\n    const response = await httpClient.get<ArrayBuffer>(`/api/v1/dashboard/reports/${reportId}/download`);\n    return new Blob([response], { type: 'application/octet-stream' });\n  }\n\n  /**\n   * 导出仪表盘数据\n   * @param params 导出参数\n   * @returns 导出结果\n   */\n  static async exportDashboard(params?: Record<string, unknown>): Promise<{ download_url: string }> {\n    return httpClient.post<{ download_url: string }>('/api/v1/dashboard/export', params);\n  }\n\n  /**\n   * 获取仪表盘模板列表\n   * @returns 模板列表\n   */\n  static async getTemplates(): Promise<DashboardTemplate[]> {\n    return httpClient.get<DashboardTemplate[]>('/api/v1/dashboard/templates');\n  }\n\n  /**\n   * 应用仪表盘模板\n   * @param templateId 模板ID\n   * @returns 应用结果\n   */\n  static async applyTemplate(templateId: string): Promise<{ success: boolean; config: Dashboard }> {\n    return httpClient.post<{ success: boolean; config: Dashboard }>(`/api/v1/dashboard/templates/${templateId}/apply`);\n  }\n\n  /**\n   * 保存为模板\n   * @param name 模板名称\n   * @param description 模板描述\n   * @param config 仪表盘配置\n   * @returns 保存结果\n   */\n  static async saveAsTemplate(name: string, description: string, config: Dashboard): Promise<{ template: DashboardTemplate }> {\n    return httpClient.post<{ template: DashboardTemplate }>('/api/v1/dashboard/templates', {\n      name,\n      description,\n      config\n    });\n  }\n\n  /**\n   * 获取仪表盘性能指标\n   * @returns 性能指标\n   */\n  static async getPerformanceMetrics(): Promise<{\n    loadTime: number;\n    renderTime: number;\n    dataFetchTime: number;\n    widgetCount: number;\n    memoryUsage: number;\n  }> {\n    return httpClient.get('/api/v1/dashboard/metrics/performance');\n  }\n\n  /**\n   * 获取仪表盘使用统计\n   * @param dateRange 日期范围\n   * @returns 使用统计\n   */\n  static async getUsageStats(dateRange?: { start: string; end: string }): Promise<{\n    totalViews: number;\n    uniqueUsers: number;\n    avgSessionDuration: number;\n    mostUsedWidgets: Array<{ widgetId: string; usage: number }>;\n    peakUsageHours: number[];\n  }> {\n    return httpClient.get('/api/v1/dashboard/metrics/usage', dateRange);\n  }\n}"],"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","ignoreList":[]}