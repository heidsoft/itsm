{"version":3,"names":["cov_14uy15vv8z","actualCoverage","s","WorkflowAPI","listWorkflows","params","b","f","response","_httpclient","httpClient","get","error","console","createWorkflow","data","post","getWorkflow","id","updateWorkflow","put","deleteWorkflow","delete","getWorkflowStatistics","startWorkflow","listWorkflowInstances","getWorkflowInstance","suspendWorkflow","instanceId","reason","resumeWorkflow","comment","terminateWorkflow","listWorkflowTasks","completeTask","task_id","validateBPMN","exportWorkflow","workflowId","format","workflow_id","responseType","importWorkflow","deployWorkflow","activateWorkflow","deactivateWorkflow","createWorkflowVersion","listWorkflowVersions","createProcessDefinition","getProcessDefinition","key","updateProcessDefinition","deleteProcessDefinition","setProcessDefinitionActive","active","startProcess","listProcessInstances","getProcessInstance","setProcessInstanceVariables","variables","listBPMNTasks","getBPMNTask","assignBPMNTask","assignee","completeBPMNTask","cancelBPMNTask","setBPMNTaskVariables","getProcessVersions","version","status","created_at","Date","toISOString","created_by","change_log","xml","createProcessVersion","now","bpmn_xml","deployProcessDefinition","message"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/workflow-api.ts"],"sourcesContent":["import { httpClient } from './http-client';\n\nexport interface Workflow {\n  id: number;\n  name: string;\n  description: string;\n  category: string;\n  version: string;\n  status: 'draft' | 'active' | 'inactive' | 'archived';\n  bpmn_xml: string;\n  process_variables: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n  instances_count: number;\n  running_instances: number;\n  created_by: string;\n}\n\nexport interface WorkflowInstance {\n  id: number;\n  workflow_id: number;\n  instance_id: string;\n  business_key: string;\n  status: 'running' | 'completed' | 'suspended' | 'terminated';\n  current_activity: string;\n  variables: Record<string, any>;\n  started_by: string;\n  completed_by?: string;\n  started_at: string;\n  completed_at?: string;\n  due_date?: string;\n  priority: string;\n}\n\nexport interface WorkflowTask {\n  id: number;\n  instance_id: number;\n  task_id: string;\n  activity_id: string;\n  name: string;\n  type: string;\n  assignee?: string;\n  candidate_users?: string;\n  candidate_groups?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  priority: string;\n  created_at: string;\n  due_date?: string;\n  completed_at?: string;\n  completed_by?: string;\n  form_data?: Record<string, any>;\n  variables?: Record<string, any>;\n  comment?: string;\n}\n\nexport interface CreateWorkflowRequest {\n  name: string;\n  description?: string;\n  category: string;\n  bpmn_xml: string;\n  process_variables?: Record<string, any>;\n  is_template?: boolean;\n  template_category?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface UpdateWorkflowRequest {\n  name?: string;\n  description?: string;\n  category?: string;\n  bpmn_xml?: string;\n  process_variables?: Record<string, any>;\n  status?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ListWorkflowsRequest {\n  page?: number;\n  page_size?: number;\n  category?: string;\n  status?: string;\n  is_template?: boolean;\n  keyword?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListWorkflowsResponse {\n  workflows: Workflow[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\nexport interface StartWorkflowRequest {\n  workflow_id: number;\n  business_key?: string;\n  variables?: Record<string, any>;\n  priority?: string;\n  due_date?: string;\n  assignee?: string;\n  comment?: string;\n}\n\nexport interface StartWorkflowResponse {\n  instance_id: string;\n  business_key: string;\n  status: string;\n  current_task?: WorkflowTask;\n  variables: Record<string, any>;\n  started_at: string;\n}\n\nexport interface CompleteTaskRequest {\n  task_id: string;\n  variables?: Record<string, any>;\n  form_data?: Record<string, any>;\n  comment?: string;\n  outcome?: string;\n}\n\nexport interface ListWorkflowInstancesRequest {\n  page?: number;\n  page_size?: number;\n  workflow_id?: number;\n  status?: string;\n  business_key?: string;\n  started_by?: string;\n  date_from?: string;\n  date_to?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListWorkflowInstancesResponse {\n  instances: WorkflowInstance[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\nexport interface ListWorkflowTasksRequest {\n  page?: number;\n  page_size?: number;\n  instance_id?: number;\n  assignee?: string;\n  status?: string;\n  priority?: string;\n  date_from?: string;\n  date_to?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListWorkflowTasksResponse {\n  tasks: WorkflowTask[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\nexport interface ValidateBPMNRequest {\n  bpmn_xml: string;\n}\n\nexport interface ValidateBPMNResponse {\n  is_valid: boolean;\n  errors: string[];\n  warnings: string[];\n  info: string[];\n}\n\nexport interface WorkflowStatistics {\n  total_workflows: number;\n  active_workflows: number;\n  running_instances: number;\n  completed_instances: number;\n  pending_tasks: number;\n  overdue_tasks: number;\n  avg_completion_time: number;\n}\n\n// BPMN流程定义相关接口\nexport interface ProcessDefinition {\n  key: string;\n  name: string;\n  description?: string;\n  version: number;\n  category?: string;\n  deployment_id: string;\n  resource_name: string;\n  dgrm_resource_name?: string;\n  tenant_id: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateProcessDefinitionRequest {\n  name: string;\n  description?: string;\n  category?: string;\n  bpmn_xml: string;\n  tenant_id: number;\n}\n\nexport interface UpdateProcessDefinitionRequest {\n  name?: string;\n  description?: string;\n  category?: string;\n  bpmn_xml?: string;\n}\n\nexport interface ListProcessDefinitionsRequest {\n  page?: number;\n  page_size?: number;\n  category?: string;\n  is_active?: boolean;\n  keyword?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListProcessDefinitionsResponse {\n  definitions: ProcessDefinition[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\n// BPMN流程实例相关接口\nexport interface ProcessInstance {\n  id: string;\n  process_definition_key: string;\n  business_key?: string;\n  status: 'running' | 'completed' | 'suspended' | 'terminated';\n  variables: Record<string, any>;\n  started_by: string;\n  started_at: string;\n  completed_at?: string;\n  tenant_id: number;\n}\n\nexport interface StartProcessRequest {\n  process_definition_key: string;\n  business_key?: string;\n  variables?: Record<string, any>;\n  tenant_id: number;\n}\n\nexport interface StartProcessResponse {\n  instance_id: string;\n  business_key?: string;\n  status: string;\n  variables: Record<string, any>;\n  started_at: string;\n}\n\nexport interface ListProcessInstancesRequest {\n  page?: number;\n  page_size?: number;\n  process_definition_key?: string;\n  status?: string;\n  business_key?: string;\n  started_by?: string;\n  date_from?: string;\n  date_to?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListProcessInstancesResponse {\n  instances: ProcessInstance[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\n// BPMN任务相关接口\nexport interface BPMNTask {\n  id: string;\n  name: string;\n  description?: string;\n  assignee?: string;\n  candidate_users?: string[];\n  candidate_groups?: string[];\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  priority: number;\n  created_at: string;\n  due_date?: string;\n  completed_at?: string;\n  variables: Record<string, any>;\n  process_instance_id: string;\n  process_definition_key: string;\n  tenant_id: number;\n}\n\nexport interface ListBPMNTasksRequest {\n  page?: number;\n  page_size?: number;\n  assignee?: string;\n  status?: string;\n  priority?: string;\n  process_instance_id?: string;\n  process_definition_key?: string;\n  date_from?: string;\n  date_to?: string;\n  sort_by?: string;\n  sort_order?: string;\n}\n\nexport interface ListBPMNTasksResponse {\n  tasks: BPMNTask[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\nexport interface CompleteBPMNTaskRequest {\n  task_id: string;\n  variables?: Record<string, any>;\n  outcome?: string;\n  comment?: string;\n}\n\nexport class WorkflowAPI {\n  // 工作流管理 - 使用新的BPMN API端点\n  static async listWorkflows(params: ListWorkflowsRequest = {}): Promise<ListWorkflowsResponse> {\n    try {\n      const response = await httpClient.get<ListWorkflowsResponse>('/api/v1/bpmn/process-definitions', params);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listWorkflows error:', error);\n      throw error;\n    }\n  }\n\n  static async createWorkflow(data: CreateWorkflowRequest): Promise<Workflow> {\n    try {\n      const response = await httpClient.post<Workflow>('/api/v1/bpmn/process-definitions', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.createWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async getWorkflow(id: number): Promise<Workflow> {\n    try {\n      const response = await httpClient.get<Workflow>(`/api/v1/bpmn/process-definitions/${id}`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async updateWorkflow(id: number, data: UpdateWorkflowRequest): Promise<Workflow> {\n    try {\n      const response = await httpClient.put<Workflow>(`/api/v1/bpmn/process-definitions/${id}`, data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.updateWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async deleteWorkflow(id: number): Promise<void> {\n    try {\n      await httpClient.delete(`/api/v1/bpmn/process-definitions/${id}`);\n    } catch (error) {\n      console.error('WorkflowAPI.deleteWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async getWorkflowStatistics(): Promise<WorkflowStatistics> {\n    try {\n      const response = await httpClient.get<WorkflowStatistics>('/api/v1/bpmn/process-definitions/statistics');\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getWorkflowStatistics error:', error);\n      throw error;\n    }\n  }\n\n  // 工作流实例管理 - 使用新的BPMN API端点\n  static async startWorkflow(data: StartWorkflowRequest): Promise<StartWorkflowResponse> {\n    try {\n      const response = await httpClient.post<StartWorkflowResponse>('/api/v1/bpmn/process-instances', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.startWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async listWorkflowInstances(params: ListWorkflowInstancesRequest = {}): Promise<ListWorkflowInstancesResponse> {\n    try {\n      const response = await httpClient.get<ListWorkflowInstancesResponse>('/api/v1/bpmn/process-instances', params);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listWorkflowInstances error:', error);\n      throw error;\n    }\n  }\n\n  static async getWorkflowInstance(id: number): Promise<WorkflowInstance> {\n    try {\n      const response = await httpClient.get<WorkflowInstance>(`/api/v1/bpmn/process-instances/${id}`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getWorkflowInstance error:', error);\n      throw error;\n    }\n  }\n\n  static async suspendWorkflow(instanceId: string, reason?: string): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-instances/${instanceId}/suspend`, {\n        reason,\n      });\n    } catch (error) {\n      console.error('WorkflowAPI.suspendWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async resumeWorkflow(instanceId: string, comment?: string): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-instances/${instanceId}/resume`, {\n        comment,\n      });\n    } catch (error) {\n      console.error('WorkflowAPI.resumeWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async terminateWorkflow(instanceId: string, reason?: string): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-instances/${instanceId}/terminate`, {\n        reason,\n      });\n    } catch (error) {\n      console.error('WorkflowAPI.terminateWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  // 工作流任务管理 - 使用新的BPMN API端点\n  static async listWorkflowTasks(params: ListWorkflowTasksRequest = {}): Promise<ListWorkflowTasksResponse> {\n    try {\n      const response = await httpClient.get<ListWorkflowTasksResponse>('/api/v1/bpmn/tasks', params);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listWorkflowTasks error:', error);\n      throw error;\n    }\n  }\n\n  static async completeTask(data: CompleteTaskRequest): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/tasks/${data.task_id}/complete`, data);\n    } catch (error) {\n      console.error('WorkflowAPI.completeTask error:', error);\n      throw error;\n    }\n  }\n\n  // BPMN验证\n  static async validateBPMN(data: ValidateBPMNRequest): Promise<ValidateBPMNResponse> {\n    try {\n      const response = await httpClient.post<ValidateBPMNResponse>('/api/v1/bpmn/process-definitions/validate', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.validateBPMN error:', error);\n      throw error;\n    }\n  }\n\n  // 导出/导入\n  static async exportWorkflow(workflowId: number, format: string): Promise<Blob> {\n    try {\n      const response = await httpClient.post('/api/v1/bpmn/process-definitions/export', {\n        workflow_id: workflowId,\n        format,\n      }, { responseType: 'blob' });\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.exportWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async importWorkflow(data: CreateWorkflowRequest): Promise<Workflow> {\n    try {\n      const response = await httpClient.post<Workflow>('/api/v1/bpmn/process-definitions/import', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.importWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  // 工作流部署\n  static async deployWorkflow(workflowId: number): Promise<void> {\n    try {\n      await httpClient.post('/api/v1/bpmn/process-definitions/deploy', {\n        workflow_id: workflowId,\n      });\n    } catch (error) {\n      console.error('WorkflowAPI.deployWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  // 工作流激活/停用\n  static async activateWorkflow(workflowId: number): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-definitions/${workflowId}/active`);\n    } catch (error) {\n      console.error('WorkflowAPI.activateWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  static async deactivateWorkflow(workflowId: number): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-definitions/${workflowId}/deactivate`);\n    } catch (error) {\n      console.error('WorkflowAPI.deactivateWorkflow error:', error);\n      throw error;\n    }\n  }\n\n  // 工作流版本管理\n  static async createWorkflowVersion(workflowId: number, data: CreateWorkflowRequest): Promise<Workflow> {\n    try {\n      const response = await httpClient.post<Workflow>(`/api/v1/bpmn/process-definitions/${workflowId}/versions`, data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.createWorkflowVersion error:', error);\n      throw error;\n    }\n  }\n\n  static async listWorkflowVersions(workflowId: number): Promise<Workflow[]> {\n    try {\n      const response = await httpClient.get<Workflow[]>(`/api/v1/bpmn/process-definitions/${workflowId}/versions`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listWorkflowVersions error:', error);\n      throw error;\n    }\n  }\n\n  // 新增：BPMN流程定义管理\n  static async createProcessDefinition(data: CreateProcessDefinitionRequest): Promise<ProcessDefinition> {\n    try {\n      const response = await httpClient.post<ProcessDefinition>('/api/v1/bpmn/process-definitions', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.createProcessDefinition error:', error);\n      throw error;\n    }\n  }\n\n  static async getProcessDefinition(key: string): Promise<ProcessDefinition> {\n    try {\n      const response = await httpClient.get<ProcessDefinition>(`/api/v1/bpmn/process-definitions/${key}`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getProcessDefinition error:', error);\n      throw error;\n    }\n  }\n\n  static async updateProcessDefinition(key: string, data: UpdateProcessDefinitionRequest): Promise<ProcessDefinition> {\n    try {\n      const response = await httpClient.put<ProcessDefinition>(`/api/v1/bpmn/process-definitions/${key}`, data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.updateProcessDefinition error:', error);\n      throw error;\n    }\n  }\n\n  static async deleteProcessDefinition(key: string): Promise<void> {\n    try {\n      await httpClient.delete(`/api/v1/bpmn/process-definitions/${key}`);\n    } catch (error) {\n      console.error('WorkflowAPI.deleteProcessDefinition error:', error);\n      throw error;\n    }\n  }\n\n  static async setProcessDefinitionActive(key: string, active: boolean): Promise<void> {\n    try {\n      if (active) {\n        await httpClient.put(`/api/v1/bpmn/process-definitions/${key}/active`);\n      } else {\n        await httpClient.put(`/api/v1/bpmn/process-definitions/${key}/deactivate`);\n      }\n    } catch (error) {\n      console.error('WorkflowAPI.setProcessDefinitionActive error:', error);\n      throw error;\n    }\n  }\n\n  // 新增：BPMN流程实例管理\n  static async startProcess(data: StartProcessRequest): Promise<StartProcessResponse> {\n    try {\n      const response = await httpClient.post<StartProcessResponse>('/api/v1/bpmn/process-instances', data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.startProcess error:', error);\n      throw error;\n    }\n  }\n\n  static async listProcessInstances(params: ListProcessInstancesRequest = {}): Promise<ListProcessInstancesResponse> {\n    try {\n      const response = await httpClient.get<ListProcessInstancesResponse>('/api/v1/bpmn/process-instances', params);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listProcessInstances error:', error);\n      throw error;\n    }\n  }\n\n  static async getProcessInstance(id: string): Promise<ProcessInstance> {\n    try {\n      const response = await httpClient.get<ProcessInstance>(`/api/v1/bpmn/process-instances/${id}`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getProcessInstance error:', error);\n      throw error;\n    }\n  }\n\n  static async setProcessInstanceVariables(id: string, variables: Record<string, any>): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/process-instances/${id}/variables`, { variables });\n    } catch (error) {\n      console.error('WorkflowAPI.setProcessInstanceVariables error:', error);\n      throw error;\n    }\n  }\n\n  // 新增：BPMN任务管理\n  static async listBPMNTasks(params: ListBPMNTasksRequest = {}): Promise<ListBPMNTasksResponse> {\n    try {\n      const response = await httpClient.get<ListBPMNTasksResponse>('/api/v1/bpmn/tasks', params);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.listBPMNTasks error:', error);\n      throw error;\n    }\n  }\n\n  static async getBPMNTask(id: string): Promise<BPMNTask> {\n    try {\n      const response = await httpClient.get<BPMNTask>(`/api/v1/bpmn/tasks/${id}`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getBPMNTask error:', error);\n      throw error;\n    }\n  }\n\n  static async assignBPMNTask(id: string, assignee: string): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/tasks/${id}/assign`, { assignee });\n    } catch (error) {\n      console.error('WorkflowAPI.assignBPMNTask error:', error);\n      throw error;\n    }\n  }\n\n  static async completeBPMNTask(id: string, data: CompleteBPMNTaskRequest): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/tasks/${id}/complete`, data);\n    } catch (error) {\n      console.error('WorkflowAPI.completeBPMNTask error:', error);\n      throw error;\n    }\n  }\n\n  static async cancelBPMNTask(id: string, reason?: string): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/tasks/${id}/cancel`, { reason });\n    } catch (error) {\n      console.error('WorkflowAPI.cancelBPMNTask error:', error);\n      throw error;\n    }\n  }\n\n  static async setBPMNTaskVariables(id: string, variables: Record<string, any>): Promise<void> {\n    try {\n      await httpClient.put(`/api/v1/bpmn/tasks/${id}/variables`, { variables });\n    } catch (error) {\n      console.error('WorkflowAPI.setBPMNTaskVariables error:', error);\n      throw error;\n    }\n  }\n\n  // 新增：流程版本管理\n  static async getProcessVersions(key: string): Promise<any[]> {\n    try {\n      const response = await httpClient.get<any[]>(`/api/v1/bpmn/process-definitions/${key}/versions`);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.getProcessVersions error:', error);\n      // 返回模拟数据\n      return [\n        {\n          id: \"v1\",\n          version: \"1.0.0\",\n          status: \"active\",\n          created_at: new Date().toISOString(),\n          created_by: \"系统\",\n          change_log: \"初始版本\",\n          xml: \"\",\n        }\n      ];\n    }\n  }\n\n  static async createProcessVersion(key: string, data: any): Promise<any> {\n    try {\n      const response = await httpClient.post<any>(`/api/v1/bpmn/process-definitions/${key}/versions`, data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.createProcessVersion error:', error);\n      // 返回模拟数据\n      return {\n        id: \"v\" + Date.now(),\n        version: data.version,\n        status: \"draft\",\n        created_at: new Date().toISOString(),\n        created_by: \"当前用户\",\n        change_log: data.change_log,\n        xml: data.bpmn_xml,\n      };\n    }\n  }\n\n  // 新增：流程部署\n  static async deployProcessDefinition(key: string, data: any): Promise<any> {\n    try {\n      const response = await httpClient.post<any>(`/api/v1/bpmn/process-definitions/${key}/deploy`, data);\n      return response;\n    } catch (error) {\n      console.error('WorkflowAPI.deployProcessDefinition error:', error);\n      // 返回模拟数据\n      return {\n        id: \"deploy_\" + Date.now(),\n        status: \"success\",\n        message: \"部署成功\",\n      };\n    }\n  }\n} "],"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","ignoreList":[]}