{"version":3,"names":["AuthService","TOKEN_KEY","REFRESH_TOKEN_KEY","refreshTimer","login","credentials","cov_ci98a5e7g","f","s","response","_httpclient","httpClient","post","setTokens","token","refresh_token","_authstore","useAuthStore","getState","user","setupTokenRefresh","expires_in","error","console","logout","clearTokens","clearTokenRefresh","refreshToken","getRefreshToken","b","Error","authStore","getCurrentUser","get","updateUser","changePassword","data","isAuthenticated","getToken","isTokenExpired","window","localStorage","getItem","setItem","removeItem","payload","JSON","parse","atob","split","currentTime","Math","floor","Date","now","exp","expiresIn","refreshTime","setTimeout","catch","clearTimeout","initialize"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/auth/auth-service.ts"],"sourcesContent":["import { httpClient } from '../http-client';\nimport { useAuthStore, User } from '../store/auth-store';\n\n// 登录请求接口\nexport interface LoginRequest {\n  username: string;\n  password: string;\n  remember_me?: boolean;\n}\n\n// 登录响应接口\nexport interface LoginResponse {\n  user: User;\n  token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n\n// 刷新token请求接口\nexport interface RefreshTokenRequest {\n  refresh_token: string;\n}\n\n// 刷新token响应接口\nexport interface RefreshTokenResponse {\n  token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n\n// 修改密码请求接口\nexport interface ChangePasswordRequest {\n  current_password: string;\n  new_password: string;\n  confirm_password: string;\n}\n\n/**\n * 认证服务类\n * 处理用户认证相关的所有操作\n */\nexport class AuthService {\n  private static readonly TOKEN_KEY = 'auth_token';\n  private static readonly REFRESH_TOKEN_KEY = 'refresh_token';\n  private static refreshTimer: NodeJS.Timeout | null = null;\n\n  /**\n   * 用户登录\n   * @param credentials 登录凭据\n   * @returns 登录结果\n   */\n  static async login(credentials: LoginRequest): Promise<LoginResponse> {\n    try {\n      const response = await httpClient.post<LoginResponse>('/api/v1/auth/login', credentials);\n      \n      // 保存认证信息\n      this.setTokens(response.token, response.refresh_token);\n      \n      // 更新认证状态\n      useAuthStore.getState().login(response.user, response.token);\n      \n      // 设置自动刷新token\n      this.setupTokenRefresh(response.expires_in);\n      \n      return response;\n    } catch (error) {\n      console.error('AuthService.login error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 用户登出\n   */\n  static async logout(): Promise<void> {\n    try {\n      // 调用后端登出接口\n      await httpClient.post('/api/v1/auth/logout');\n    } catch (error) {\n      console.error('AuthService.logout error:', error);\n      // 即使后端登出失败，也要清除本地状态\n    } finally {\n      // 清除本地认证信息\n      this.clearTokens();\n      \n      // 清除认证状态\n      useAuthStore.getState().logout();\n      \n      // 清除自动刷新定时器\n      this.clearTokenRefresh();\n    }\n  }\n\n  /**\n   * 刷新访问token\n   * @returns 新的token信息\n   */\n  static async refreshToken(): Promise<RefreshTokenResponse> {\n    try {\n      const refreshToken = this.getRefreshToken();\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const response = await httpClient.post<RefreshTokenResponse>('/api/v1/auth/refresh', {\n        refresh_token: refreshToken,\n      });\n\n      // 更新token\n      this.setTokens(response.token, response.refresh_token);\n      \n      // 更新store中的token\n      const authStore = useAuthStore.getState();\n      if (authStore.user) {\n        authStore.login(authStore.user, response.token);\n      }\n\n      // 重新设置自动刷新\n      this.setupTokenRefresh(response.expires_in);\n\n      return response;\n    } catch (error) {\n      console.error('AuthService.refreshToken error:', error);\n      // 刷新失败，清除认证状态\n      this.logout();\n      throw error;\n    }\n  }\n\n  /**\n   * 获取当前用户信息\n   * @returns 用户信息\n   */\n  static async getCurrentUser(): Promise<User> {\n    try {\n      const response = await httpClient.get<{ user: User }>('/api/v1/auth/me');\n      \n      // 更新store中的用户信息\n      useAuthStore.getState().updateUser(response.user);\n      \n      return response.user;\n    } catch (error) {\n      console.error('AuthService.getCurrentUser error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 修改密码\n   * @param data 密码修改数据\n   */\n  static async changePassword(data: ChangePasswordRequest): Promise<void> {\n    try {\n      await httpClient.post('/api/v1/auth/change-password', data);\n    } catch (error) {\n      console.error('AuthService.changePassword error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检查认证状态\n   * @returns 是否已认证\n   */\n  static isAuthenticated(): boolean {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  /**\n   * 获取访问token\n   * @returns 访问token\n   */\n  static getToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  /**\n   * 获取刷新token\n   * @returns 刷新token\n   */\n  static getRefreshToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  /**\n   * 设置tokens\n   * @param token 访问token\n   * @param refreshToken 刷新token\n   */\n  private static setTokens(token: string, refreshToken: string): void {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem(this.TOKEN_KEY, token);\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, refreshToken);\n  }\n\n  /**\n   * 清除tokens\n   */\n  private static clearTokens(): void {\n    if (typeof window === 'undefined') return;\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  /**\n   * 检查token是否过期\n   * @param token JWT token\n   * @returns 是否过期\n   */\n  private static isTokenExpired(token: string): boolean {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      return payload.exp < currentTime;\n    } catch {\n      return true;\n    }\n  }\n\n  /**\n   * 设置自动刷新token\n   * @param expiresIn token过期时间（秒）\n   */\n  private static setupTokenRefresh(expiresIn: number): void {\n    this.clearTokenRefresh();\n    \n    // 在token过期前5分钟刷新\n    const refreshTime = (expiresIn - 300) * 1000;\n    \n    if (refreshTime > 0) {\n      this.refreshTimer = setTimeout(() => {\n        this.refreshToken().catch((error) => {\n          console.error('Auto refresh token failed:', error);\n        });\n      }, refreshTime);\n    }\n  }\n\n  /**\n   * 清除自动刷新定时器\n   */\n  private static clearTokenRefresh(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  /**\n   * 初始化认证状态\n   * 应用启动时调用，恢复认证状态\n   */\n  static async initialize(): Promise<void> {\n    try {\n      const token = this.getToken();\n      if (!token || this.isTokenExpired(token)) {\n        // token无效或过期，尝试刷新\n        await this.refreshToken();\n      } else {\n        // token有效，获取用户信息\n        await this.getCurrentUser();\n      }\n    } catch (error) {\n      console.error('AuthService.initialize error:', error);\n      // 初始化失败，清除认证状态\n      this.logout();\n    }\n  }\n}"],"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","ignoreList":[]}