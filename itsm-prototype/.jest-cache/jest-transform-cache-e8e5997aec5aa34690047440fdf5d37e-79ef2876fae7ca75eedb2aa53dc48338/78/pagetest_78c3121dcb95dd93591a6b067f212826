4753c11eb124a68c11f417a708f511fc
"use strict";
// Mock dependencies
jest.mock('@/lib/store/ui-store', ()=>({
        useNotifications: ()=>({
                success: jest.fn(),
                error: jest.fn(),
                warning: jest.fn(),
                info: jest.fn()
            })
    }));
jest.mock('@/lib/auth', ()=>({
        useAuth: ()=>({
                user: {
                    id: 1,
                    name: 'Test User',
                    roles: [
                        'admin'
                    ]
                },
                isAuthenticated: true
            })
    }));
jest.mock('@/lib/api/dashboard-api', ()=>({
        DashboardAPI: mockDashboardAPI
    }));
// Mock Recharts components
jest.mock('recharts', ()=>({
        LineChart: ({ children, data, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "line-chart",
                "data-chart-data": JSON.stringify(data),
                ...props,
                children: children
            }),
        BarChart: ({ children, data, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bar-chart",
                "data-chart-data": JSON.stringify(data),
                ...props,
                children: children
            }),
        PieChart: ({ children, data, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "pie-chart",
                "data-chart-data": JSON.stringify(data),
                ...props,
                children: children
            }),
        XAxis: ({ dataKey, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "x-axis",
                "data-key": dataKey,
                ...props
            }),
        YAxis: ({ dataKey, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "y-axis",
                "data-key": dataKey,
                ...props
            }),
        CartesianGrid: (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "cartesian-grid",
                ...props
            }),
        Tooltip: (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-tooltip",
                ...props
            }),
        Legend: (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-legend",
                ...props
            }),
        Line: ({ dataKey, stroke, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-line",
                "data-key": dataKey,
                style: {
                    color: stroke
                },
                ...props
            }),
        Bar: ({ dataKey, fill, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-bar",
                "data-key": dataKey,
                style: {
                    backgroundColor: fill
                },
                ...props
            }),
        Cell: ({ fill, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-cell",
                style: {
                    backgroundColor: fill
                },
                ...props
            }),
        Pie: ({ dataKey, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "chart-pie",
                "data-key": dataKey,
                ...props
            }),
        ResponsiveContainer: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "responsive-container",
                ...props,
                children: children
            })
    }));
// Mock Ant Design components
jest.mock('antd', ()=>({
        Row: ({ children, gutter, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "row",
                "data-gutter": gutter,
                ...props,
                children: children
            }),
        Col: ({ children, span, xs, sm, md, lg, xl, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "col",
                "data-span": span,
                "data-responsive": JSON.stringify({
                    xs,
                    sm,
                    md,
                    lg,
                    xl
                }),
                ...props,
                children: children
            }),
        Card: ({ children, title, extra, loading, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "card",
                "data-loading": loading,
                ...props,
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "card-header",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: title
                            }),
                            extra && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "card-extra",
                                children: extra
                            })
                        ]
                    }),
                    loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "card-loading",
                        children: "Loading..."
                    }) : children
                ]
            }),
        Statistic: ({ title, value, prefix, suffix, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "statistic",
                ...props,
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "statistic-title",
                        children: title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "statistic-value",
                        children: [
                            prefix,
                            value,
                            suffix
                        ]
                    })
                ]
            }),
        Progress: ({ percent, status, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "progress",
                "data-percent": percent,
                "data-status": status,
                ...props,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    style: {
                        width: `${percent}%`
                    },
                    children: [
                        "Progress: ",
                        percent,
                        "%"
                    ]
                })
            }),
        Table: ({ columns, dataSource, loading, pagination, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "table",
                "data-loading": loading,
                ...props,
                children: [
                    loading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "table-loading",
                        children: "Loading..."
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                    children: columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                            children: col.title
                                        }, col.key))
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("tbody", {
                                children: dataSource?.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                        "data-testid": `table-row-${index}`,
                                        children: columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                                children: String(item[col.dataIndex] || '')
                                            }, col.key))
                                    }, index))
                            })
                        ]
                    }),
                    pagination && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "table-pagination",
                        children: "Pagination"
                    })
                ]
            }),
        Button: ({ children, type, onClick, loading, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                disabled: loading,
                "data-testid": `button-${type || 'default'}`,
                ...props,
                children: loading ? 'Loading...' : children
            }),
        Select: ({ placeholder, options, onChange, value, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                value: value,
                onChange: (e)=>onChange?.(e.target.value),
                "data-testid": `select-${placeholder?.toLowerCase().replace(/\s+/g, '-')}`,
                ...props,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "",
                        children: placeholder
                    }),
                    options?.map((option)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: option.value,
                            children: option.label
                        }, option.value))
                ]
            })
    }));
// Mock Lucide React icons
jest.mock('lucide-react', ()=>({
        TrendingUp: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "trending-up-icon",
                children: "TrendingUp"
            }),
        TrendingDown: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "trending-down-icon",
                children: "TrendingDown"
            }),
        Users: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "users-icon",
                children: "Users"
            }),
        Ticket: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "ticket-icon",
                children: "Ticket"
            }),
        Clock: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "clock-icon",
                children: "Clock"
            }),
        CheckCircle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "check-circle-icon",
                children: "CheckCircle"
            }),
        AlertCircle: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "alert-circle-icon",
                children: "AlertCircle"
            }),
        Activity: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "activity-icon",
                children: "Activity"
            }),
        BarChart3: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "bar-chart-icon",
                children: "BarChart3"
            }),
        RefreshCw: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "refresh-icon",
                children: "RefreshCw"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dashboard API
const mockDashboardAPI = {
    getDashboardStats: jest.fn(),
    getRecentTickets: jest.fn(),
    getSystemHealth: jest.fn(),
    getPerformanceMetrics: jest.fn()
};
// Mock dashboard data
const mockDashboardStats = {
    totalTickets: 150,
    openTickets: 45,
    resolvedTickets: 95,
    avgResolutionTime: 2.5,
    ticketTrend: [
        {
            date: '2024-01-01',
            open: 10,
            resolved: 8
        },
        {
            date: '2024-01-02',
            open: 12,
            resolved: 10
        },
        {
            date: '2024-01-03',
            open: 8,
            resolved: 15
        }
    ],
    priorityDistribution: [
        {
            name: 'High',
            value: 20,
            color: '#ff4d4f'
        },
        {
            name: 'Medium',
            value: 35,
            color: '#faad14'
        },
        {
            name: 'Low',
            value: 45,
            color: '#52c41a'
        }
    ]
};
const mockRecentTickets = [
    {
        id: 1,
        title: '系统登录问题',
        status: 'open',
        priority: 'high',
        assignee: 'John Doe',
        created_at: '2024-01-01T10:00:00Z'
    },
    {
        id: 2,
        title: '网络连接异常',
        status: 'in_progress',
        priority: 'medium',
        assignee: 'Jane Smith',
        created_at: '2024-01-01T09:30:00Z'
    }
];
const mockSystemHealth = {
    cpu: 65,
    memory: 78,
    disk: 45,
    network: 92,
    status: 'healthy'
};
describe('DashboardPage', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup mock API responses
        mockDashboardAPI.getDashboardStats.mockResolvedValue(mockDashboardStats);
        mockDashboardAPI.getRecentTickets.mockResolvedValue(mockRecentTickets);
        mockDashboardAPI.getSystemHealth.mockResolvedValue(mockSystemHealth);
        mockDashboardAPI.getPerformanceMetrics.mockResolvedValue({
            responseTime: [
                {
                    time: '10:00',
                    value: 120
                },
                {
                    time: '10:05',
                    value: 135
                },
                {
                    time: '10:10',
                    value: 98
                }
            ]
        });
    });
    describe('Rendering', ()=>{
        it('should render dashboard with all main sections', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Should have main layout
            expect(_react1.screen.getByTestId('row')).toBeInTheDocument();
            // Should have statistics cards
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getAllByTestId('card').length).toBeGreaterThan(0);
            });
        });
        it('should display key statistics', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('总工单数')).toBeInTheDocument();
                expect(_react1.screen.getByText('150')).toBeInTheDocument();
                expect(_react1.screen.getByText('待处理工单')).toBeInTheDocument();
                expect(_react1.screen.getByText('45')).toBeInTheDocument();
            });
        });
        it('should render charts', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('line-chart')).toBeInTheDocument();
                expect(_react1.screen.getByTestId('pie-chart')).toBeInTheDocument();
                expect(_react1.screen.getByTestId('bar-chart')).toBeInTheDocument();
            });
        });
        it('should display recent tickets table', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('table')).toBeInTheDocument();
                expect(_react1.screen.getByText('最近工单')).toBeInTheDocument();
            });
        });
    });
    describe('Data Loading', ()=>{
        it('should show loading states initially', async ()=>{
            mockDashboardAPI.getDashboardStats.mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 100)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(_react1.screen.getAllByTestId('card-loading').length).toBeGreaterThan(0);
        });
        it('should hide loading states after data loads', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId('card-loading')).not.toBeInTheDocument();
            });
        });
        it('should call all required APIs on mount', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(1);
                expect(mockDashboardAPI.getRecentTickets).toHaveBeenCalledTimes(1);
                expect(mockDashboardAPI.getSystemHealth).toHaveBeenCalledTimes(1);
            });
        });
    });
    describe('Charts and Visualizations', ()=>{
        it('should render line chart with correct data', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const lineChart = _react1.screen.getByTestId('line-chart');
                expect(lineChart).toBeInTheDocument();
                const chartData = JSON.parse(lineChart.getAttribute('data-chart-data') || '[]');
                expect(chartData).toHaveLength(3);
                expect(chartData[0]).toHaveProperty('date');
                expect(chartData[0]).toHaveProperty('open');
                expect(chartData[0]).toHaveProperty('resolved');
            });
        });
        it('should render pie chart with priority distribution', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const pieChart = _react1.screen.getByTestId('pie-chart');
                expect(pieChart).toBeInTheDocument();
                const chartData = JSON.parse(pieChart.getAttribute('data-chart-data') || '[]');
                expect(chartData).toHaveLength(3);
                expect(chartData[0]).toHaveProperty('name');
                expect(chartData[0]).toHaveProperty('value');
            });
        });
        it('should display system health metrics', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('progress')).toBeInTheDocument();
                expect(_react1.screen.getByText('CPU使用率')).toBeInTheDocument();
                expect(_react1.screen.getByText('内存使用率')).toBeInTheDocument();
            });
        });
    });
    describe('Interactive Features', ()=>{
        it('should handle refresh button click', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const refreshButton = _react1.screen.getByTestId('button-default');
                expect(refreshButton).toBeInTheDocument();
            });
            const refreshButton = _react1.screen.getByTestId('button-default');
            await user.click(refreshButton);
            // Should call APIs again
            await (0, _react1.waitFor)(()=>{
                expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(2);
            });
        });
        it('should handle time range selection', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const timeSelect = _react1.screen.getByTestId('select-时间范围');
                expect(timeSelect).toBeInTheDocument();
            });
            const timeSelect = _react1.screen.getByTestId('select-时间范围');
            await user.selectOptions(timeSelect, '7d');
            expect(timeSelect).toHaveValue('7d');
        });
    });
    describe('Error Handling', ()=>{
        it('should handle API errors gracefully', async ()=>{
            mockDashboardAPI.getDashboardStats.mockRejectedValue(new Error('API Error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                // Should not crash and should show some fallback content
                expect(_react1.screen.getByTestId('row')).toBeInTheDocument();
            });
        });
        it('should handle partial data loading failures', async ()=>{
            mockDashboardAPI.getDashboardStats.mockResolvedValue(mockDashboardStats);
            mockDashboardAPI.getRecentTickets.mockRejectedValue(new Error('Tickets API Error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                // Should still show statistics even if tickets fail
                expect(_react1.screen.getByText('150')).toBeInTheDocument();
            });
        });
    });
    describe('Responsive Design', ()=>{
        it('should render responsive grid layout', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const cols = _react1.screen.getAllByTestId('col');
                expect(cols.length).toBeGreaterThan(0);
                // Check if responsive props are set
                cols.forEach((col)=>{
                    const responsive = col.getAttribute('data-responsive');
                    expect(responsive).toBeTruthy();
                });
            });
        });
    });
    describe('Performance', ()=>{
        it('should not cause memory leaks with timers', async ()=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Simulate component unmount
            unmount();
            // Should not have any pending timers
            expect(setTimeout).not.toHaveBeenCalled();
        });
        it('should handle large datasets efficiently', async ()=>{
            const largeDataset = Array.from({
                length: 1000
            }, (_, i)=>({
                    date: `2024-01-${String(i + 1).padStart(2, '0')}`,
                    open: Math.floor(Math.random() * 50),
                    resolved: Math.floor(Math.random() * 50)
                }));
            mockDashboardAPI.getDashboardStats.mockResolvedValue({
                ...mockDashboardStats,
                ticketTrend: largeDataset
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const lineChart = _react1.screen.getByTestId('line-chart');
                expect(lineChart).toBeInTheDocument();
            });
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper ARIA labels', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const statistics = _react1.screen.getAllByTestId('statistic');
                expect(statistics.length).toBeGreaterThan(0);
            });
        });
        it('should support keyboard navigation', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const refreshButton = _react1.screen.getByTestId('button-default');
                expect(refreshButton).toBeInTheDocument();
            });
            const refreshButton = _react1.screen.getByTestId('button-default');
            // Should be focusable
            refreshButton.focus();
            expect(refreshButton).toHaveFocus();
            // Should respond to Enter key
            await user.keyboard('{Enter}');
            await (0, _react1.waitFor)(()=>{
                expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(2);
            });
        });
    });
    describe('Real-time Updates', ()=>{
        it('should handle real-time data updates', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('150')).toBeInTheDocument();
            });
            // Simulate real-time update
            const updatedStats = {
                ...mockDashboardStats,
                totalTickets: 155
            };
            mockDashboardAPI.getDashboardStats.mockResolvedValue(updatedStats);
            // Trigger refresh
            const refreshButton = _react1.screen.getByTestId('button-default');
            await _userevent.default.click(refreshButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('155')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,