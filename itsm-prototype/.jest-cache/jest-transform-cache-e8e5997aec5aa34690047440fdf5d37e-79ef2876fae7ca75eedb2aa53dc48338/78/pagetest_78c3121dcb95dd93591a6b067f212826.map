{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/dashboard/__tests__/page.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport DashboardPage from '../page';\n\n// Mock dependencies\njest.mock('@/lib/store/ui-store', () => ({\n  useNotifications: () => ({\n    success: jest.fn(),\n    error: jest.fn(),\n    warning: jest.fn(),\n    info: jest.fn(),\n  }),\n}));\n\njest.mock('@/lib/auth', () => ({\n  useAuth: () => ({\n    user: { id: 1, name: 'Test User', roles: ['admin'] },\n    isAuthenticated: true,\n  }),\n}));\n\n// Mock dashboard API\nconst mockDashboardAPI = {\n  getDashboardStats: jest.fn(),\n  getRecentTickets: jest.fn(),\n  getSystemHealth: jest.fn(),\n  getPerformanceMetrics: jest.fn(),\n};\n\njest.mock('@/lib/api/dashboard-api', () => ({\n  DashboardAPI: mockDashboardAPI,\n}));\n\n// Mock Recharts components\njest.mock('recharts', () => ({\n  LineChart: ({ children, data, ...props }: { \n    children: React.ReactNode; \n    data: Array<Record<string, unknown>>; \n    [key: string]: unknown; \n  }) => (\n    <div data-testid=\"line-chart\" data-chart-data={JSON.stringify(data)} {...props}>\n      {children}\n    </div>\n  ),\n  BarChart: ({ children, data, ...props }: { \n    children: React.ReactNode; \n    data: Array<Record<string, unknown>>; \n    [key: string]: unknown; \n  }) => (\n    <div data-testid=\"bar-chart\" data-chart-data={JSON.stringify(data)} {...props}>\n      {children}\n    </div>\n  ),\n  PieChart: ({ children, data, ...props }: { \n    children: React.ReactNode; \n    data?: Array<Record<string, unknown>>; \n    [key: string]: unknown; \n  }) => (\n    <div data-testid=\"pie-chart\" data-chart-data={JSON.stringify(data)} {...props}>\n      {children}\n    </div>\n  ),\n  XAxis: ({ dataKey, ...props }: { dataKey?: string; [key: string]: unknown }) => (\n    <div data-testid=\"x-axis\" data-key={dataKey} {...props} />\n  ),\n  YAxis: ({ dataKey, ...props }: { dataKey?: string; [key: string]: unknown }) => (\n    <div data-testid=\"y-axis\" data-key={dataKey} {...props} />\n  ),\n  CartesianGrid: (props: Record<string, unknown>) => (\n    <div data-testid=\"cartesian-grid\" {...props} />\n  ),\n  Tooltip: (props: Record<string, unknown>) => (\n    <div data-testid=\"chart-tooltip\" {...props} />\n  ),\n  Legend: (props: Record<string, unknown>) => (\n    <div data-testid=\"chart-legend\" {...props} />\n  ),\n  Line: ({ dataKey, stroke, ...props }: { dataKey?: string; stroke?: string; [key: string]: unknown }) => (\n    <div data-testid=\"chart-line\" data-key={dataKey} style={{ color: stroke }} {...props} />\n  ),\n  Bar: ({ dataKey, fill, ...props }: { dataKey?: string; fill?: string; [key: string]: unknown }) => (\n    <div data-testid=\"chart-bar\" data-key={dataKey} style={{ backgroundColor: fill }} {...props} />\n  ),\n  Cell: ({ fill, ...props }: { fill?: string; [key: string]: unknown }) => (\n    <div data-testid=\"chart-cell\" style={{ backgroundColor: fill }} {...props} />\n  ),\n  Pie: ({ dataKey, ...props }: { dataKey?: string; [key: string]: unknown }) => (\n    <div data-testid=\"chart-pie\" data-key={dataKey} {...props} />\n  ),\n  ResponsiveContainer: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (\n    <div data-testid=\"responsive-container\" {...props}>\n      {children}\n    </div>\n  ),\n}));\n\n// Mock Ant Design components\njest.mock('antd', () => ({\n  Row: ({ children, gutter, ...props }: { children: React.ReactNode; gutter?: number; [key: string]: unknown }) => (\n    <div data-testid=\"row\" data-gutter={gutter} {...props}>{children}</div>\n  ),\n  Col: ({ children, span, xs, sm, md, lg, xl, ...props }: { \n    children: React.ReactNode; \n    span?: number; \n    xs?: number; \n    sm?: number; \n    md?: number; \n    lg?: number; \n    xl?: number; \n    [key: string]: unknown; \n  }) => (\n    <div \n      data-testid=\"col\" \n      data-span={span}\n      data-responsive={JSON.stringify({ xs, sm, md, lg, xl })}\n      {...props}\n    >\n      {children}\n    </div>\n  ),\n  Card: ({ children, title, extra, loading, ...props }: {\n    children: React.ReactNode;\n    title?: string;\n    extra?: React.ReactNode;\n    loading?: boolean;\n    [key: string]: unknown;\n  }) => (\n    <div data-testid=\"card\" data-loading={loading} {...props}>\n      {title && (\n        <div data-testid=\"card-header\">\n          <h3>{title}</h3>\n          {extra && <div data-testid=\"card-extra\">{extra}</div>}\n        </div>\n      )}\n      {loading ? <div data-testid=\"card-loading\">Loading...</div> : children}\n    </div>\n  ),\n  Statistic: ({ title, value, prefix, suffix, ...props }: {\n    title?: string;\n    value?: string | number;\n    prefix?: React.ReactNode;\n    suffix?: React.ReactNode;\n    [key: string]: unknown;\n  }) => (\n    <div data-testid=\"statistic\" {...props}>\n      {title && <div data-testid=\"statistic-title\">{title}</div>}\n      <div data-testid=\"statistic-value\">\n        {prefix}{value}{suffix}\n      </div>\n    </div>\n  ),\n  Progress: ({ percent, status, ...props }: { percent?: number; status?: string; [key: string]: unknown }) => (\n    <div data-testid=\"progress\" data-percent={percent} data-status={status} {...props}>\n      <div style={{ width: `${percent}%` }}>Progress: {percent}%</div>\n    </div>\n  ),\n  Table: ({ columns, dataSource, loading, pagination, ...props }: {\n    columns: Array<{ title: string; dataIndex: string; key: string }>;\n    dataSource: Array<Record<string, unknown>>;\n    loading?: boolean;\n    pagination?: boolean | Record<string, unknown>;\n    [key: string]: unknown;\n  }) => (\n    <div data-testid=\"table\" data-loading={loading} {...props}>\n      {loading && <div data-testid=\"table-loading\">Loading...</div>}\n      <table>\n        <thead>\n          <tr>\n            {columns.map(col => (\n              <th key={col.key}>{col.title}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {dataSource?.map((item, index) => (\n            <tr key={index} data-testid={`table-row-${index}`}>\n              {columns.map(col => (\n                <td key={col.key}>{String(item[col.dataIndex] || '')}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {pagination && <div data-testid=\"table-pagination\">Pagination</div>}\n    </div>\n  ),\n  Button: ({ children, type, onClick, loading, ...props }: {\n    children: React.ReactNode;\n    type?: string;\n    onClick?: () => void;\n    loading?: boolean;\n    [key: string]: unknown;\n  }) => (\n    <button \n      onClick={onClick}\n      disabled={loading}\n      data-testid={`button-${type || 'default'}`}\n      {...props}\n    >\n      {loading ? 'Loading...' : children}\n    </button>\n  ),\n  Select: ({ placeholder, options, onChange, value, ...props }: {\n    placeholder?: string;\n    options?: Array<{ label: string; value: string }>;\n    onChange?: (value: string) => void;\n    value?: string;\n    [key: string]: unknown;\n  }) => (\n    <select \n      value={value}\n      onChange={(e) => onChange?.(e.target.value)}\n      data-testid={`select-${placeholder?.toLowerCase().replace(/\\s+/g, '-')}`}\n      {...props}\n    >\n      <option value=\"\">{placeholder}</option>\n      {options?.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  ),\n}));\n\n// Mock Lucide React icons\njest.mock('lucide-react', () => ({\n  TrendingUp: () => <div data-testid=\"trending-up-icon\">TrendingUp</div>,\n  TrendingDown: () => <div data-testid=\"trending-down-icon\">TrendingDown</div>,\n  Users: () => <div data-testid=\"users-icon\">Users</div>,\n  Ticket: () => <div data-testid=\"ticket-icon\">Ticket</div>,\n  Clock: () => <div data-testid=\"clock-icon\">Clock</div>,\n  CheckCircle: () => <div data-testid=\"check-circle-icon\">CheckCircle</div>,\n  AlertCircle: () => <div data-testid=\"alert-circle-icon\">AlertCircle</div>,\n  Activity: () => <div data-testid=\"activity-icon\">Activity</div>,\n  BarChart3: () => <div data-testid=\"bar-chart-icon\">BarChart3</div>,\n  RefreshCw: () => <div data-testid=\"refresh-icon\">RefreshCw</div>,\n}));\n\n// Mock dashboard data\nconst mockDashboardStats = {\n  totalTickets: 150,\n  openTickets: 45,\n  resolvedTickets: 95,\n  avgResolutionTime: 2.5,\n  ticketTrend: [\n    { date: '2024-01-01', open: 10, resolved: 8 },\n    { date: '2024-01-02', open: 12, resolved: 10 },\n    { date: '2024-01-03', open: 8, resolved: 15 },\n  ],\n  priorityDistribution: [\n    { name: 'High', value: 20, color: '#ff4d4f' },\n    { name: 'Medium', value: 35, color: '#faad14' },\n    { name: 'Low', value: 45, color: '#52c41a' },\n  ],\n};\n\nconst mockRecentTickets = [\n  {\n    id: 1,\n    title: '系统登录问题',\n    status: 'open',\n    priority: 'high',\n    assignee: 'John Doe',\n    created_at: '2024-01-01T10:00:00Z',\n  },\n  {\n    id: 2,\n    title: '网络连接异常',\n    status: 'in_progress',\n    priority: 'medium',\n    assignee: 'Jane Smith',\n    created_at: '2024-01-01T09:30:00Z',\n  },\n];\n\nconst mockSystemHealth = {\n  cpu: 65,\n  memory: 78,\n  disk: 45,\n  network: 92,\n  status: 'healthy',\n};\n\ndescribe('DashboardPage', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup mock API responses\n    mockDashboardAPI.getDashboardStats.mockResolvedValue(mockDashboardStats);\n    mockDashboardAPI.getRecentTickets.mockResolvedValue(mockRecentTickets);\n    mockDashboardAPI.getSystemHealth.mockResolvedValue(mockSystemHealth);\n    mockDashboardAPI.getPerformanceMetrics.mockResolvedValue({\n      responseTime: [\n        { time: '10:00', value: 120 },\n        { time: '10:05', value: 135 },\n        { time: '10:10', value: 98 },\n      ],\n    });\n  });\n\n  describe('Rendering', () => {\n    it('should render dashboard with all main sections', async () => {\n      render(<DashboardPage />);\n      \n      // Should have main layout\n      expect(screen.getByTestId('row')).toBeInTheDocument();\n      \n      // Should have statistics cards\n      await waitFor(() => {\n        expect(screen.getAllByTestId('card').length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should display key statistics', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('总工单数')).toBeInTheDocument();\n        expect(screen.getByText('150')).toBeInTheDocument();\n        expect(screen.getByText('待处理工单')).toBeInTheDocument();\n        expect(screen.getByText('45')).toBeInTheDocument();\n      });\n    });\n\n    it('should render charts', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('line-chart')).toBeInTheDocument();\n        expect(screen.getByTestId('pie-chart')).toBeInTheDocument();\n        expect(screen.getByTestId('bar-chart')).toBeInTheDocument();\n      });\n    });\n\n    it('should display recent tickets table', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('table')).toBeInTheDocument();\n        expect(screen.getByText('最近工单')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Data Loading', () => {\n    it('should show loading states initially', async () => {\n      mockDashboardAPI.getDashboardStats.mockImplementation(() => \n        new Promise(resolve => setTimeout(resolve, 100))\n      );\n      \n      render(<DashboardPage />);\n      \n      expect(screen.getAllByTestId('card-loading').length).toBeGreaterThan(0);\n    });\n\n    it('should hide loading states after data loads', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('card-loading')).not.toBeInTheDocument();\n      });\n    });\n\n    it('should call all required APIs on mount', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(1);\n        expect(mockDashboardAPI.getRecentTickets).toHaveBeenCalledTimes(1);\n        expect(mockDashboardAPI.getSystemHealth).toHaveBeenCalledTimes(1);\n      });\n    });\n  });\n\n  describe('Charts and Visualizations', () => {\n    it('should render line chart with correct data', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const lineChart = screen.getByTestId('line-chart');\n        expect(lineChart).toBeInTheDocument();\n        \n        const chartData = JSON.parse(lineChart.getAttribute('data-chart-data') || '[]');\n        expect(chartData).toHaveLength(3);\n        expect(chartData[0]).toHaveProperty('date');\n        expect(chartData[0]).toHaveProperty('open');\n        expect(chartData[0]).toHaveProperty('resolved');\n      });\n    });\n\n    it('should render pie chart with priority distribution', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const pieChart = screen.getByTestId('pie-chart');\n        expect(pieChart).toBeInTheDocument();\n        \n        const chartData = JSON.parse(pieChart.getAttribute('data-chart-data') || '[]');\n        expect(chartData).toHaveLength(3);\n        expect(chartData[0]).toHaveProperty('name');\n        expect(chartData[0]).toHaveProperty('value');\n      });\n    });\n\n    it('should display system health metrics', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('progress')).toBeInTheDocument();\n        expect(screen.getByText('CPU使用率')).toBeInTheDocument();\n        expect(screen.getByText('内存使用率')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Interactive Features', () => {\n    it('should handle refresh button click', async () => {\n      const user = userEvent.setup();\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const refreshButton = screen.getByTestId('button-default');\n        expect(refreshButton).toBeInTheDocument();\n      });\n      \n      const refreshButton = screen.getByTestId('button-default');\n      await user.click(refreshButton);\n      \n      // Should call APIs again\n      await waitFor(() => {\n        expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(2);\n      });\n    });\n\n    it('should handle time range selection', async () => {\n      const user = userEvent.setup();\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const timeSelect = screen.getByTestId('select-时间范围');\n        expect(timeSelect).toBeInTheDocument();\n      });\n      \n      const timeSelect = screen.getByTestId('select-时间范围');\n      await user.selectOptions(timeSelect, '7d');\n      \n      expect(timeSelect).toHaveValue('7d');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle API errors gracefully', async () => {\n      mockDashboardAPI.getDashboardStats.mockRejectedValue(new Error('API Error'));\n      \n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        // Should not crash and should show some fallback content\n        expect(screen.getByTestId('row')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle partial data loading failures', async () => {\n      mockDashboardAPI.getDashboardStats.mockResolvedValue(mockDashboardStats);\n      mockDashboardAPI.getRecentTickets.mockRejectedValue(new Error('Tickets API Error'));\n      \n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        // Should still show statistics even if tickets fail\n        expect(screen.getByText('150')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Responsive Design', () => {\n    it('should render responsive grid layout', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const cols = screen.getAllByTestId('col');\n        expect(cols.length).toBeGreaterThan(0);\n        \n        // Check if responsive props are set\n        cols.forEach(col => {\n          const responsive = col.getAttribute('data-responsive');\n          expect(responsive).toBeTruthy();\n        });\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('should not cause memory leaks with timers', async () => {\n      const { unmount } = render(<DashboardPage />);\n      \n      // Simulate component unmount\n      unmount();\n      \n      // Should not have any pending timers\n      expect(setTimeout).not.toHaveBeenCalled();\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      const largeDataset = Array.from({ length: 1000 }, (_, i) => ({\n        date: `2024-01-${String(i + 1).padStart(2, '0')}`,\n        open: Math.floor(Math.random() * 50),\n        resolved: Math.floor(Math.random() * 50),\n      }));\n      \n      mockDashboardAPI.getDashboardStats.mockResolvedValue({\n        ...mockDashboardStats,\n        ticketTrend: largeDataset,\n      });\n      \n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const lineChart = screen.getByTestId('line-chart');\n        expect(lineChart).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const statistics = screen.getAllByTestId('statistic');\n        expect(statistics.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should support keyboard navigation', async () => {\n      const user = userEvent.setup();\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        const refreshButton = screen.getByTestId('button-default');\n        expect(refreshButton).toBeInTheDocument();\n      });\n      \n      const refreshButton = screen.getByTestId('button-default');\n      \n      // Should be focusable\n      refreshButton.focus();\n      expect(refreshButton).toHaveFocus();\n      \n      // Should respond to Enter key\n      await user.keyboard('{Enter}');\n      \n      await waitFor(() => {\n        expect(mockDashboardAPI.getDashboardStats).toHaveBeenCalledTimes(2);\n      });\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    it('should handle real-time data updates', async () => {\n      render(<DashboardPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('150')).toBeInTheDocument();\n      });\n      \n      // Simulate real-time update\n      const updatedStats = {\n        ...mockDashboardStats,\n        totalTickets: 155,\n      };\n      \n      mockDashboardAPI.getDashboardStats.mockResolvedValue(updatedStats);\n      \n      // Trigger refresh\n      const refreshButton = screen.getByTestId('button-default');\n      await userEvent.click(refreshButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('155')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","useNotifications","success","fn","error","warning","info","useAuth","user","id","name","roles","isAuthenticated","DashboardAPI","mockDashboardAPI","LineChart","children","data","props","div","data-testid","data-chart-data","JSON","stringify","BarChart","PieChart","XAxis","dataKey","data-key","YAxis","CartesianGrid","Tooltip","Legend","Line","stroke","style","color","Bar","fill","backgroundColor","Cell","Pie","ResponsiveContainer","Row","gutter","data-gutter","Col","span","xs","sm","md","lg","xl","data-span","data-responsive","Card","title","extra","loading","data-loading","h3","Statistic","value","prefix","suffix","Progress","percent","status","data-percent","data-status","width","Table","columns","dataSource","pagination","table","thead","tr","map","col","th","key","tbody","item","index","td","String","dataIndex","Button","type","onClick","button","disabled","Select","placeholder","options","onChange","select","e","target","toLowerCase","replace","option","label","TrendingUp","TrendingDown","Users","Ticket","Clock","CheckCircle","AlertCircle","Activity","BarChart3","RefreshCw","getDashboardStats","getRecentTickets","getSystemHealth","getPerformanceMetrics","mockDashboardStats","totalTickets","openTickets","resolvedTickets","avgResolutionTime","ticketTrend","date","open","resolved","priorityDistribution","mockRecentTickets","priority","assignee","created_at","mockSystemHealth","cpu","memory","disk","network","describe","beforeEach","clearAllMocks","mockResolvedValue","responseTime","time","it","render","DashboardPage","expect","screen","getByTestId","toBeInTheDocument","waitFor","getAllByTestId","length","toBeGreaterThan","getByText","mockImplementation","Promise","resolve","setTimeout","queryByTestId","not","toHaveBeenCalledTimes","lineChart","chartData","parse","getAttribute","toHaveLength","toHaveProperty","pieChart","userEvent","setup","refreshButton","click","timeSelect","selectOptions","toHaveValue","mockRejectedValue","Error","cols","forEach","responsive","toBeTruthy","unmount","toHaveBeenCalled","largeDataset","Array","from","_","i","padStart","Math","floor","random","statistics","focus","toHaveFocus","keyboard","updatedStats"],"mappings":"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"}