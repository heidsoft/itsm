{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/tickets/__tests__/page.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport TicketsPage from '../page';\n\n// Mock dependencies\njest.mock('@/lib/store/ui-store', () => ({\n  useNotifications: () => ({\n    success: jest.fn(),\n    error: jest.fn(),\n    warning: jest.fn(),\n    info: jest.fn(),\n  }),\n}));\n\njest.mock('@/lib/auth', () => ({\n  useAuth: () => ({\n    user: { id: 1, name: 'Test User' },\n    isAuthenticated: true,\n  }),\n}));\n\njest.mock('@/lib/api/ticket-api', () => ({\n  TicketAPI: {\n    getTickets: jest.fn(),\n    createTicket: jest.fn(),\n    updateTicket: jest.fn(),\n    deleteTicket: jest.fn(),\n  },\n}));\n\n// Mock Ant Design components\njest.mock('antd', () => ({\n  Table: ({ columns, dataSource, loading, ...props }: { \n    columns: Array<{ title: string; dataIndex: string; key: string }>;\n    dataSource: Array<Record<string, unknown>>;\n    loading?: boolean;\n    [key: string]: unknown;\n  }) => (\n    <div data-testid=\"tickets-table\" {...props}>\n      {loading && <div data-testid=\"table-loading\">Loading...</div>}\n      <table>\n        <thead>\n          <tr>\n            {columns.map(col => (\n              <th key={col.key}>{col.title}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {dataSource?.map((item, index) => (\n            <tr key={index} data-testid={`ticket-row-${index}`}>\n              {columns.map(col => (\n                <td key={col.key}>{String(item[col.dataIndex] || '')}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ),\n  Button: ({ children, loading, type, onClick, ...props }: {\n    children: React.ReactNode;\n    loading?: boolean;\n    type?: string;\n    onClick?: () => void;\n    [key: string]: unknown;\n  }) => (\n    <button \n      onClick={onClick}\n      disabled={loading}\n      data-testid={`button-${type || 'default'}`}\n      {...props}\n    >\n      {loading ? 'Loading...' : children}\n    </button>\n  ),\n  Input: ({ placeholder, onChange, ...props }: {\n    placeholder?: string;\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    [key: string]: unknown;\n  }) => (\n    <input \n      placeholder={placeholder}\n      onChange={onChange}\n      data-testid={`input-${placeholder?.toLowerCase().replace(/\\s+/g, '-')}`}\n      {...props}\n    />\n  ),\n  Select: ({ placeholder, options, onChange, ...props }: {\n    placeholder?: string;\n    options?: Array<{ label: string; value: string }>;\n    onChange?: (value: string) => void;\n    [key: string]: unknown;\n  }) => (\n    <select \n      onChange={(e) => onChange?.(e.target.value)}\n      data-testid={`select-${placeholder?.toLowerCase().replace(/\\s+/g, '-')}`}\n      {...props}\n    >\n      <option value=\"\">{placeholder}</option>\n      {options?.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label}\n        </option>\n      ))}\n    </select>\n  ),\n  Card: ({ children, title, extra, ...props }: {\n    children: React.ReactNode;\n    title?: string;\n    extra?: React.ReactNode;\n    [key: string]: unknown;\n  }) => (\n    <div data-testid=\"tickets-card\" {...props}>\n      {title && (\n        <div data-testid=\"card-header\">\n          <h3>{title}</h3>\n          {extra && <div data-testid=\"card-extra\">{extra}</div>}\n        </div>\n      )}\n      {children}\n    </div>\n  ),\n  Space: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (\n    <div data-testid=\"space\" {...props}>{children}</div>\n  ),\n  Tag: ({ children, color, ...props }: { children: React.ReactNode; color?: string; [key: string]: unknown }) => (\n    <span data-testid=\"tag\" style={{ color }} {...props}>{children}</span>\n  ),\n  Modal: ({ title, open, children, onOk, onCancel, ...props }: {\n    title?: string;\n    open?: boolean;\n    children: React.ReactNode;\n    onOk?: () => void;\n    onCancel?: () => void;\n    [key: string]: unknown;\n  }) => (\n    open ? (\n      <div data-testid=\"modal\" {...props}>\n        {title && <h2 data-testid=\"modal-title\">{title}</h2>}\n        {children}\n        <div data-testid=\"modal-actions\">\n          <button onClick={onCancel} data-testid=\"modal-cancel\">取消</button>\n          <button onClick={onOk} data-testid=\"modal-ok\">确定</button>\n        </div>\n      </div>\n    ) : null\n  ),\n  Form: ({ children, onFinish, ...props }: {\n    children: React.ReactNode;\n    onFinish?: (values: Record<string, unknown>) => void;\n    [key: string]: unknown;\n  }) => (\n    <form onSubmit={(e) => { e.preventDefault(); onFinish?.({}); }} {...props}>\n      {children}\n    </form>\n  ),\n}));\n\n// Mock Lucide React icons\njest.mock('lucide-react', () => ({\n  Plus: () => <div data-testid=\"plus-icon\">Plus</div>,\n  Search: () => <div data-testid=\"search-icon\">Search</div>,\n  Filter: () => <div data-testid=\"filter-icon\">Filter</div>,\n  Download: () => <div data-testid=\"download-icon\">Download</div>,\n  Edit: () => <div data-testid=\"edit-icon\">Edit</div>,\n  Trash2: () => <div data-testid=\"trash-icon\">Trash</div>,\n  Eye: () => <div data-testid=\"eye-icon\">Eye</div>,\n}));\n\n// Mock ticket data\nconst mockTickets = [\n  {\n    id: 1,\n    title: '测试工单1',\n    description: '这是一个测试工单',\n    status: 'open',\n    priority: 'high',\n    assignee: 'John Doe',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: 2,\n    title: '测试工单2',\n    description: '这是另一个测试工单',\n    status: 'in_progress',\n    priority: 'medium',\n    assignee: 'Jane Smith',\n    created_at: '2024-01-02T00:00:00Z',\n    updated_at: '2024-01-02T00:00:00Z',\n  },\n];\n\n// Mock TicketAPI\nconst mockTicketAPI = {\n  getTickets: jest.fn(),\n  createTicket: jest.fn(),\n  updateTicket: jest.fn(),\n  deleteTicket: jest.fn(),\n};\n\ndescribe('TicketsPage', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock API responses\n    mockTicketAPI.getTickets.mockResolvedValue({\n      tickets: mockTickets,\n      total: mockTickets.length,\n      page: 1,\n      pageSize: 20,\n    });\n  });\n\n  describe('Rendering', () => {\n    it('should render tickets page with all main elements', async () => {\n      render(<TicketsPage />);\n      \n      expect(screen.getByTestId('tickets-card')).toBeInTheDocument();\n      expect(screen.getByText('工单管理')).toBeInTheDocument();\n      \n      // Should have action buttons\n      expect(screen.getByTestId('button-primary')).toBeInTheDocument();\n      expect(screen.getByText('新建工单')).toBeInTheDocument();\n      \n      // Should have search and filter controls\n      expect(screen.getByTestId('input-搜索工单')).toBeInTheDocument();\n      expect(screen.getByTestId('select-状态筛选')).toBeInTheDocument();\n      expect(screen.getByTestId('select-优先级筛选')).toBeInTheDocument();\n    });\n\n    it('should render tickets table', async () => {\n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('tickets-table')).toBeInTheDocument();\n      });\n      \n      // Should show table headers\n      expect(screen.getByText('标题')).toBeInTheDocument();\n      expect(screen.getByText('状态')).toBeInTheDocument();\n      expect(screen.getByText('优先级')).toBeInTheDocument();\n      expect(screen.getByText('处理人')).toBeInTheDocument();\n      expect(screen.getByText('创建时间')).toBeInTheDocument();\n      expect(screen.getByText('操作')).toBeInTheDocument();\n    });\n\n    it('should display ticket data in table rows', async () => {\n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('ticket-row-0')).toBeInTheDocument();\n        expect(screen.getByTestId('ticket-row-1')).toBeInTheDocument();\n      });\n      \n      // Should show ticket titles\n      expect(screen.getByText('测试工单1')).toBeInTheDocument();\n      expect(screen.getByText('测试工单2')).toBeInTheDocument();\n    });\n  });\n\n  describe('Search and Filter', () => {\n    it('should handle search input', async () => {\n      const user = userEvent.setup();\n      render(<TicketsPage />);\n      \n      const searchInput = screen.getByTestId('input-搜索工单');\n      await user.type(searchInput, '测试工单1');\n      \n      expect(searchInput).toHaveValue('测试工单1');\n    });\n\n    it('should handle status filter', async () => {\n      const user = userEvent.setup();\n      render(<TicketsPage />);\n      \n      const statusSelect = screen.getByTestId('select-状态筛选');\n      await user.selectOptions(statusSelect, 'open');\n      \n      expect(statusSelect).toHaveValue('open');\n    });\n\n    it('should handle priority filter', async () => {\n      const user = userEvent.setup();\n      render(<TicketsPage />);\n      \n      const prioritySelect = screen.getByTestId('select-优先级筛选');\n      await user.selectOptions(prioritySelect, 'high');\n      \n      expect(prioritySelect).toHaveValue('high');\n    });\n  });\n\n  describe('Ticket Creation', () => {\n    it('should open create modal when clicking new ticket button', async () => {\n      const user = userEvent.setup();\n      render(<TicketsPage />);\n      \n      const newTicketButton = screen.getByTestId('button-primary');\n      await user.click(newTicketButton);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('modal')).toBeInTheDocument();\n        expect(screen.getByTestId('modal-title')).toHaveTextContent('新建工单');\n      });\n    });\n\n    it('should close modal when clicking cancel', async () => {\n      const user = userEvent.setup();\n      render(<TicketsPage />);\n      \n      // Open modal\n      const newTicketButton = screen.getByTestId('button-primary');\n      await user.click(newTicketButton);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('modal')).toBeInTheDocument();\n      });\n      \n      // Close modal\n      const cancelButton = screen.getByTestId('modal-cancel');\n      await user.click(cancelButton);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('modal')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Loading States', () => {\n    it('should show loading state when fetching tickets', async () => {\n      mockTicketAPI.getTickets.mockImplementation(() => \n        new Promise(resolve => setTimeout(resolve, 100))\n      );\n      \n      render(<TicketsPage />);\n      \n      expect(screen.getByTestId('table-loading')).toBeInTheDocument();\n    });\n\n    it('should hide loading state after data is loaded', async () => {\n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('table-loading')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle API errors gracefully', async () => {\n      mockTicketAPI.getTickets.mockRejectedValue(new Error('API Error'));\n      \n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        // Should not crash and should handle error state\n        expect(screen.getByTestId('tickets-table')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper table structure', async () => {\n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        const table = screen.getByRole('table');\n        expect(table).toBeInTheDocument();\n      });\n    });\n\n    it('should have accessible buttons', async () => {\n      render(<TicketsPage />);\n      \n      const buttons = screen.getAllByRole('button');\n      expect(buttons.length).toBeGreaterThan(0);\n      \n      buttons.forEach(button => {\n        expect(button).toBeInTheDocument();\n      });\n    });\n\n    it('should have accessible form controls', async () => {\n      render(<TicketsPage />);\n      \n      const searchInput = screen.getByRole('textbox');\n      expect(searchInput).toBeInTheDocument();\n      \n      const selects = screen.getAllByRole('combobox');\n      expect(selects.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Responsive Design', () => {\n    it('should render properly on different screen sizes', async () => {\n      // Mock window.innerWidth\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 768,\n      });\n      \n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('tickets-table')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('should not re-render unnecessarily', async () => {\n      const renderSpy = jest.fn();\n      \n      const TestWrapper = () => {\n        renderSpy();\n        return <TicketsPage />;\n      };\n      \n      const { rerender } = render(<TestWrapper />);\n      \n      expect(renderSpy).toHaveBeenCalledTimes(1);\n      \n      // Re-render with same props\n      rerender(<TestWrapper />);\n      \n      // Should not cause unnecessary re-renders\n      expect(renderSpy).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Data Management', () => {\n    it('should refresh data when needed', async () => {\n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(mockTicketAPI.getTickets).toHaveBeenCalledTimes(1);\n      });\n    });\n\n    it('should handle empty data state', async () => {\n      mockTicketAPI.getTickets.mockResolvedValue({\n        tickets: [],\n        total: 0,\n        page: 1,\n        pageSize: 20,\n      });\n      \n      render(<TicketsPage />);\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('tickets-table')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","useNotifications","success","fn","error","warning","info","useAuth","user","id","name","isAuthenticated","TicketAPI","getTickets","createTicket","updateTicket","deleteTicket","Table","columns","dataSource","loading","props","div","data-testid","table","thead","tr","map","col","th","title","key","tbody","item","index","td","String","dataIndex","Button","children","type","onClick","button","disabled","Input","placeholder","onChange","input","toLowerCase","replace","Select","options","select","e","target","value","option","label","Card","extra","h3","Space","Tag","color","span","style","Modal","open","onOk","onCancel","h2","Form","onFinish","form","onSubmit","preventDefault","Plus","Search","Filter","Download","Edit","Trash2","Eye","mockTickets","description","status","priority","assignee","created_at","updated_at","mockTicketAPI","describe","beforeEach","clearAllMocks","mockResolvedValue","tickets","total","length","page","pageSize","it","render","TicketsPage","expect","screen","getByTestId","toBeInTheDocument","getByText","waitFor","userEvent","setup","searchInput","toHaveValue","statusSelect","selectOptions","prioritySelect","newTicketButton","click","toHaveTextContent","cancelButton","queryByTestId","not","mockImplementation","Promise","resolve","setTimeout","mockRejectedValue","Error","getByRole","buttons","getAllByRole","toBeGreaterThan","forEach","selects","Object","defineProperty","window","writable","configurable","renderSpy","TestWrapper","rerender","toHaveBeenCalledTimes"],"mappings":"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"}