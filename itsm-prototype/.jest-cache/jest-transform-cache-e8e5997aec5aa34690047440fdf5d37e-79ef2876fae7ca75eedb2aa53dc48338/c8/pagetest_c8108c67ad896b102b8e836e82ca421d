f8d2ab4f91054f2d16e0b476a2ffefd5
"use strict";
// Mock dependencies
jest.mock('@/lib/store/ui-store', ()=>({
        useNotifications: ()=>({
                success: jest.fn(),
                error: jest.fn(),
                warning: jest.fn(),
                info: jest.fn()
            })
    }));
jest.mock('@/lib/auth', ()=>({
        useAuth: ()=>({
                user: {
                    id: 1,
                    name: 'Test User'
                },
                isAuthenticated: true
            })
    }));
jest.mock('@/lib/api/ticket-api', ()=>({
        TicketAPI: {
            getTickets: jest.fn(),
            createTicket: jest.fn(),
            updateTicket: jest.fn(),
            deleteTicket: jest.fn()
        }
    }));
// Mock Ant Design components
jest.mock('antd', ()=>({
        Table: ({ columns, dataSource, loading, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "tickets-table",
                ...props,
                children: [
                    loading && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "table-loading",
                        children: "Loading..."
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                    children: columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                            children: col.title
                                        }, col.key))
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("tbody", {
                                children: dataSource?.map((item, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("tr", {
                                        "data-testid": `ticket-row-${index}`,
                                        children: columns.map((col)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                                children: String(item[col.dataIndex] || '')
                                            }, col.key))
                                    }, index))
                            })
                        ]
                    })
                ]
            }),
        Button: ({ children, loading, type, onClick, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: onClick,
                disabled: loading,
                "data-testid": `button-${type || 'default'}`,
                ...props,
                children: loading ? 'Loading...' : children
            }),
        Input: ({ placeholder, onChange, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                placeholder: placeholder,
                onChange: onChange,
                "data-testid": `input-${placeholder?.toLowerCase().replace(/\s+/g, '-')}`,
                ...props
            }),
        Select: ({ placeholder, options, onChange, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                onChange: (e)=>onChange?.(e.target.value),
                "data-testid": `select-${placeholder?.toLowerCase().replace(/\s+/g, '-')}`,
                ...props,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                        value: "",
                        children: placeholder
                    }),
                    options?.map((option)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: option.value,
                            children: option.label
                        }, option.value))
                ]
            }),
        Card: ({ children, title, extra, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "tickets-card",
                ...props,
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "card-header",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                children: title
                            }),
                            extra && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                "data-testid": "card-extra",
                                children: extra
                            })
                        ]
                    }),
                    children
                ]
            }),
        Space: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "space",
                ...props,
                children: children
            }),
        Tag: ({ children, color, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "tag",
                style: {
                    color
                },
                ...props,
                children: children
            }),
        Modal: ({ title, open, children, onOk, onCancel, ...props })=>open ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "modal",
                ...props,
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        "data-testid": "modal-title",
                        children: title
                    }),
                    children,
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "modal-actions",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: onCancel,
                                "data-testid": "modal-cancel",
                                children: "取消"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: onOk,
                                "data-testid": "modal-ok",
                                children: "确定"
                            })
                        ]
                    })
                ]
            }) : null,
        Form: ({ children, onFinish, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                onSubmit: (e)=>{
                    e.preventDefault();
                    onFinish?.({});
                },
                ...props,
                children: children
            })
    }));
// Mock Lucide React icons
jest.mock('lucide-react', ()=>({
        Plus: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "plus-icon",
                children: "Plus"
            }),
        Search: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "search-icon",
                children: "Search"
            }),
        Filter: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "filter-icon",
                children: "Filter"
            }),
        Download: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "download-icon",
                children: "Download"
            }),
        Edit: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "edit-icon",
                children: "Edit"
            }),
        Trash2: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "trash-icon",
                children: "Trash"
            }),
        Eye: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "eye-icon",
                children: "Eye"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock ticket data
const mockTickets = [
    {
        id: 1,
        title: '测试工单1',
        description: '这是一个测试工单',
        status: 'open',
        priority: 'high',
        assignee: 'John Doe',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
    },
    {
        id: 2,
        title: '测试工单2',
        description: '这是另一个测试工单',
        status: 'in_progress',
        priority: 'medium',
        assignee: 'Jane Smith',
        created_at: '2024-01-02T00:00:00Z',
        updated_at: '2024-01-02T00:00:00Z'
    }
];
// Mock TicketAPI
const mockTicketAPI = {
    getTickets: jest.fn(),
    createTicket: jest.fn(),
    updateTicket: jest.fn(),
    deleteTicket: jest.fn()
};
describe('TicketsPage', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock API responses
        mockTicketAPI.getTickets.mockResolvedValue({
            tickets: mockTickets,
            total: mockTickets.length,
            page: 1,
            pageSize: 20
        });
    });
    describe('Rendering', ()=>{
        it('should render tickets page with all main elements', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(_react1.screen.getByTestId('tickets-card')).toBeInTheDocument();
            expect(_react1.screen.getByText('工单管理')).toBeInTheDocument();
            // Should have action buttons
            expect(_react1.screen.getByTestId('button-primary')).toBeInTheDocument();
            expect(_react1.screen.getByText('新建工单')).toBeInTheDocument();
            // Should have search and filter controls
            expect(_react1.screen.getByTestId('input-搜索工单')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('select-状态筛选')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('select-优先级筛选')).toBeInTheDocument();
        });
        it('should render tickets table', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('tickets-table')).toBeInTheDocument();
            });
            // Should show table headers
            expect(_react1.screen.getByText('标题')).toBeInTheDocument();
            expect(_react1.screen.getByText('状态')).toBeInTheDocument();
            expect(_react1.screen.getByText('优先级')).toBeInTheDocument();
            expect(_react1.screen.getByText('处理人')).toBeInTheDocument();
            expect(_react1.screen.getByText('创建时间')).toBeInTheDocument();
            expect(_react1.screen.getByText('操作')).toBeInTheDocument();
        });
        it('should display ticket data in table rows', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('ticket-row-0')).toBeInTheDocument();
                expect(_react1.screen.getByTestId('ticket-row-1')).toBeInTheDocument();
            });
            // Should show ticket titles
            expect(_react1.screen.getByText('测试工单1')).toBeInTheDocument();
            expect(_react1.screen.getByText('测试工单2')).toBeInTheDocument();
        });
    });
    describe('Search and Filter', ()=>{
        it('should handle search input', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const searchInput = _react1.screen.getByTestId('input-搜索工单');
            await user.type(searchInput, '测试工单1');
            expect(searchInput).toHaveValue('测试工单1');
        });
        it('should handle status filter', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const statusSelect = _react1.screen.getByTestId('select-状态筛选');
            await user.selectOptions(statusSelect, 'open');
            expect(statusSelect).toHaveValue('open');
        });
        it('should handle priority filter', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const prioritySelect = _react1.screen.getByTestId('select-优先级筛选');
            await user.selectOptions(prioritySelect, 'high');
            expect(prioritySelect).toHaveValue('high');
        });
    });
    describe('Ticket Creation', ()=>{
        it('should open create modal when clicking new ticket button', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const newTicketButton = _react1.screen.getByTestId('button-primary');
            await user.click(newTicketButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('modal')).toBeInTheDocument();
                expect(_react1.screen.getByTestId('modal-title')).toHaveTextContent('新建工单');
            });
        });
        it('should close modal when clicking cancel', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            // Open modal
            const newTicketButton = _react1.screen.getByTestId('button-primary');
            await user.click(newTicketButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('modal')).toBeInTheDocument();
            });
            // Close modal
            const cancelButton = _react1.screen.getByTestId('modal-cancel');
            await user.click(cancelButton);
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId('modal')).not.toBeInTheDocument();
            });
        });
    });
    describe('Loading States', ()=>{
        it('should show loading state when fetching tickets', async ()=>{
            mockTicketAPI.getTickets.mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 100)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(_react1.screen.getByTestId('table-loading')).toBeInTheDocument();
        });
        it('should hide loading state after data is loaded', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId('table-loading')).not.toBeInTheDocument();
            });
        });
    });
    describe('Error Handling', ()=>{
        it('should handle API errors gracefully', async ()=>{
            mockTicketAPI.getTickets.mockRejectedValue(new Error('API Error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                // Should not crash and should handle error state
                expect(_react1.screen.getByTestId('tickets-table')).toBeInTheDocument();
            });
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper table structure', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                const table = _react1.screen.getByRole('table');
                expect(table).toBeInTheDocument();
            });
        });
        it('should have accessible buttons', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const buttons = _react1.screen.getAllByRole('button');
            expect(buttons.length).toBeGreaterThan(0);
            buttons.forEach((button)=>{
                expect(button).toBeInTheDocument();
            });
        });
        it('should have accessible form controls', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const searchInput = _react1.screen.getByRole('textbox');
            expect(searchInput).toBeInTheDocument();
            const selects = _react1.screen.getAllByRole('combobox');
            expect(selects.length).toBeGreaterThan(0);
        });
    });
    describe('Responsive Design', ()=>{
        it('should render properly on different screen sizes', async ()=>{
            // Mock window.innerWidth
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 768
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('tickets-table')).toBeInTheDocument();
            });
        });
    });
    describe('Performance', ()=>{
        it('should not re-render unnecessarily', async ()=>{
            const renderSpy = jest.fn();
            const TestWrapper = ()=>{
                renderSpy();
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {});
            };
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {}));
            expect(renderSpy).toHaveBeenCalledTimes(1);
            // Re-render with same props
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {}));
            // Should not cause unnecessary re-renders
            expect(renderSpy).toHaveBeenCalledTimes(2);
        });
    });
    describe('Data Management', ()=>{
        it('should refresh data when needed', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(mockTicketAPI.getTickets).toHaveBeenCalledTimes(1);
            });
        });
        it('should handle empty data state', async ()=>{
            mockTicketAPI.getTickets.mockResolvedValue({
                tickets: [],
                total: 0,
                page: 1,
                pageSize: 20
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('tickets-table')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,