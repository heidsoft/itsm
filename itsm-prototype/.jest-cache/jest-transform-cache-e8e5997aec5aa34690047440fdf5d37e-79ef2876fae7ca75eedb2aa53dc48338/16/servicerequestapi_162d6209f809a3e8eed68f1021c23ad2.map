{"version":3,"names":["cov_zdbnanyqs","actualCoverage","s","serviceRequestAPI","ServiceRequestAPI","constructor","f","baseURL","_apiconfig","API_BASE_URL","request","endpoint","options","b","token","window","localStorage","getItem","response","fetch","headers","Authorization","ok","errorText","text","Error","status","statusText","data","json","code","message","error","console","getUserServiceRequests","params","searchParams","URLSearchParams","page","append","toString","size","getServiceRequestDetails","id","createServiceRequest","method","body","JSON","stringify","updateServiceRequestStatus","comment","healthCheck"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/service-request-api.ts"],"sourcesContent":["import { API_BASE_URL } from './api-config';\n\nexport interface ServiceRequest {\n  id: number;\n  catalog_id: number;\n  requester_id: number;\n  status: 'pending' | 'in_progress' | 'completed' | 'rejected';\n  reason: string;\n  created_at: string;\n  catalog?: {\n    id: number;\n    name: string;\n    category: string;\n    description: string;\n    delivery_time: string;\n  };\n  requester?: {\n    id: number;\n    username: string;\n    name: string;\n    email: string;\n    department: string;\n  };\n}\n\nexport interface ServiceRequestListResponse {\n  requests: ServiceRequest[];\n  total: number;\n  page: number;\n  size: number;\n}\n\nexport interface CreateServiceRequestRequest {\n  catalog_id: number;\n  reason?: string;\n}\n\nexport interface UpdateServiceRequestStatusRequest {\n  status: 'pending' | 'in_progress' | 'completed' | 'rejected';\n}\n\nclass ServiceRequestAPI {\n  private baseURL: string;\n\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n    \n    try {\n      const response = await fetch(`${this.baseURL}${endpoint}`, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token && { Authorization: `Bearer ${token}` }),\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      \n      // Check backend response code field\n      if (data.code !== 0) {\n        throw new Error(data.message || 'Request failed');\n      }\n      \n      return data.data; // Backend response format: { code, message, data }\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Get current user's service request list\n  async getUserServiceRequests(params: {\n    page?: number;\n    size?: number;\n    status?: string;\n  } = {}): Promise<ServiceRequestListResponse> {\n    const searchParams = new URLSearchParams();\n    \n    if (params.page) searchParams.append('page', params.page.toString());\n    if (params.size) searchParams.append('size', params.size.toString());\n    if (params.status && params.status !== 'all') searchParams.append('status', params.status);\n\n    return this.request<ServiceRequestListResponse>(\n      `/api/service-requests/me?${searchParams.toString()}`\n    );\n  }\n\n  // Get service request details\n  async getServiceRequestDetails(id: number): Promise<ServiceRequest> {\n    return this.request<ServiceRequest>(`/api/service-requests/${id}`);\n  }\n\n  // Create service request\n  async createServiceRequest(data: CreateServiceRequestRequest): Promise<ServiceRequest> {\n    return this.request<ServiceRequest>('/api/service-requests', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Update service request status (admin operation)\n  async updateServiceRequestStatus(id: number, status: string, comment?: string): Promise<ServiceRequest> {\n    return this.request<ServiceRequest>(`/api/service-requests/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status, comment }),\n    });\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string }> {\n    return this.request<{ status: string }>('/api/health');\n  }\n}\n\nexport const serviceRequestAPI = new ServiceRequestAPI();"],"mappings":"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","ignoreList":[]}