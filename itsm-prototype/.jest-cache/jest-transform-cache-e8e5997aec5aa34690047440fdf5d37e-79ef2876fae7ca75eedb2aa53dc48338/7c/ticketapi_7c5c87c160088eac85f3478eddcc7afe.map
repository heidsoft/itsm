{"version":3,"names":["cov_19njtzaa7e","actualCoverage","s","TicketAPI","listTickets","params","b","f","_httpclient","httpClient","get","getTicket","id","createTicket","data","post","updateTicket","put","deleteTicket","delete","batchDeleteTickets","ids","assignTicket","escalateTicket","resolveTicket","closeTicket","reopenTicket","reason","getTicketStats","exportTickets","response","Blob","type"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/api/ticket-api.ts"],"sourcesContent":["import { httpClient } from '../../app/lib/http-client';\n\n// 工单接口定义\nexport interface Ticket {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  source: string;\n  type: string;\n  ticket_number: string;\n  is_major_incident: boolean;\n  created_at: string;\n  updated_at: string;\n  requester_id?: number;\n  assignee_id?: number;\n  tenant_id: number;\n  form_fields?: Record<string, unknown>;\n  resolution?: string;\n  resolution_category?: string;\n  satisfaction_rating?: number;\n  satisfaction_comment?: string;\n  escalation_level?: number;\n  escalation_reason?: string;\n  sla_due_date?: string;\n  resolved_at?: string;\n  closed_at?: string;\n}\n\n// 工单统计接口\nexport interface TicketStats {\n  total: number;\n  open: number;\n  in_progress: number;\n  resolved: number;\n  closed: number;\n  overdue: number;\n  high_priority: number;\n  critical_priority: number;\n}\n\n// 列表请求参数\nexport interface ListTicketsRequest {\n  page?: number;\n  page_size?: number;\n  status?: string;\n  priority?: string;\n  source?: string;\n  type?: string;\n  assignee_id?: number;\n  requester_id?: number;\n  is_major_incident?: boolean;\n  keyword?: string;\n  sort_by?: string;\n  sort_order?: 'asc' | 'desc';\n  created_after?: string;\n  created_before?: string;\n  due_after?: string;\n  due_before?: string;\n}\n\n// 列表响应\nexport interface ListTicketsResponse {\n  tickets: Ticket[];\n  total: number;\n  page: number;\n  page_size: number;\n  total_pages: number;\n}\n\n// 创建工单请求\nexport interface CreateTicketRequest {\n  title: string;\n  description: string;\n  priority: string;\n  source?: string;\n  type?: string;\n  requester_id?: number;\n  assignee_id?: number;\n  form_fields?: Record<string, unknown>;\n  is_major_incident?: boolean;\n}\n\n// 更新工单请求\nexport interface UpdateTicketRequest {\n  title?: string;\n  description?: string;\n  priority?: string;\n  status?: string;\n  assignee_id?: number;\n  form_fields?: Record<string, unknown>;\n  is_major_incident?: boolean;\n}\n\n// 分配工单请求\nexport interface AssignTicketRequest {\n  assignee_id: number;\n  comment?: string;\n}\n\n// 升级工单请求\nexport interface EscalateTicketRequest {\n  escalation_level: number;\n  reason: string;\n  assignee_id?: number;\n}\n\n// 解决工单请求\nexport interface ResolveTicketRequest {\n  resolution: string;\n  resolution_category?: string;\n}\n\n// 关闭工单请求\nexport interface CloseTicketRequest {\n  close_reason?: string;\n  satisfaction_rating?: number;\n  satisfaction_comment?: string;\n}\n\n// API响应包装\nexport interface ApiResponse<T> {\n  code: number;\n  message: string;\n  data: T;\n}\n\n// 单个工单响应\nexport interface TicketResponse {\n  ticket: Ticket;\n}\n\n// 工单API类\nexport class TicketAPI {\n  // 获取工单列表\n  static async listTickets(params: ListTicketsRequest = {}): Promise<ListTicketsResponse> {\n    return httpClient.get<ListTicketsResponse>('/api/v1/tickets', params as Record<string, unknown>);\n  }\n\n  // 获取单个工单\n  static async getTicket(id: number): Promise<TicketResponse> {\n    return httpClient.get<TicketResponse>(`/api/v1/tickets/${id}`);\n  }\n\n  // 创建工单\n  static async createTicket(data: CreateTicketRequest): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>('/api/v1/tickets', data);\n  }\n\n  // 更新工单\n  static async updateTicket(id: number, data: UpdateTicketRequest): Promise<TicketResponse> {\n    return httpClient.put<TicketResponse>(`/api/v1/tickets/${id}`, data);\n  }\n\n  // 删除工单\n  static async deleteTicket(id: number): Promise<void> {\n    return httpClient.delete(`/api/v1/tickets/${id}`);\n  }\n\n  // 批量删除工单\n  static async batchDeleteTickets(ids: number[]): Promise<void> {\n    return httpClient.post('/api/v1/tickets/batch-delete', { ids });\n  }\n\n  // 分配工单\n  static async assignTicket(id: number, data: AssignTicketRequest): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>(`/api/v1/tickets/${id}/assign`, data);\n  }\n\n  // 升级工单\n  static async escalateTicket(id: number, data: EscalateTicketRequest): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>(`/api/v1/tickets/${id}/escalate`, data);\n  }\n\n  // 解决工单\n  static async resolveTicket(id: number, data: ResolveTicketRequest): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>(`/api/v1/tickets/${id}/resolve`, data);\n  }\n\n  // 关闭工单\n  static async closeTicket(id: number, data: CloseTicketRequest): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>(`/api/v1/tickets/${id}/close`, data);\n  }\n\n  // 重新打开工单\n  static async reopenTicket(id: number, reason?: string): Promise<TicketResponse> {\n    return httpClient.post<TicketResponse>(`/api/v1/tickets/${id}/reopen`, { reason });\n  }\n\n  // 获取工单统计\n  static async getTicketStats(): Promise<TicketStats> {\n    return httpClient.get<TicketStats>('/api/v1/tickets/stats');\n  }\n\n  // 导出工单\n  static async exportTickets(params: ListTicketsRequest = {}): Promise<Blob> {\n    // 使用get方法获取导出数据，然后转换为Blob\n    const response = await httpClient.get<ArrayBuffer>('/api/v1/tickets/export', params as Record<string, unknown>);\n    return new Blob([response], { type: 'application/octet-stream' });\n  }\n}"],"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","ignoreList":[]}