{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/http-client.ts"],"sourcesContent":["import { API_BASE_URL } from './api-config';\nimport { security } from './security';\n\n// Request configuration interface\ninterface RequestConfig {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: string;\n  timeout?: number;\n}\n\n// API response interface\ninterface ApiResponse<T> {\n  code: number;\n  message: string;\n  data: T;\n}\n\nclass HttpClient {\n  private baseURL: string;\n  private token: string | null = null;\n  private tenantId: number | null = null;\n  private tenantCode: string | null = null;\n  private readonly timeout: number;\n\n  constructor(baseURL: string = API_BASE_URL) {\n    this.baseURL = process.env.NEXT_PUBLIC_API_URL || baseURL;\n    this.timeout = parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '30000');\n    // Get token and tenant ID from localStorage\n    if (typeof window !== 'undefined') {\n      this.token = localStorage.getItem('access_token'); // Changed to access_token\n      const storedTenantId = localStorage.getItem('current_tenant_id');\n      this.tenantId = storedTenantId ? parseInt(storedTenantId) : null;\n      this.tenantCode = localStorage.getItem('current_tenant_code') || null;\n    }\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('access_token', token); // Changed to access_token\n    }\n  }\n\n  clearToken() {\n    this.token = null;\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('access_token'); // Changed to access_token\n    }\n  }\n\n  setTenantId(tenantId: number | null) {\n    this.tenantId = tenantId;\n    if (typeof window !== 'undefined') {\n      if (tenantId) {\n        localStorage.setItem('current_tenant_id', tenantId.toString());\n      } else {\n        localStorage.removeItem('current_tenant_id');\n      }\n    }\n  }\n\n  setTenantCode(code: string | null) {\n    this.tenantCode = code;\n    console.log('HttpClient.setTenantCode:', code);\n    if (typeof window !== 'undefined') {\n      if (code) {\n        localStorage.setItem('current_tenant_code', code);\n      } else {\n        localStorage.removeItem('current_tenant_code');\n      }\n    }\n  }\n\n  // Get tenant code\n  getTenantCode(): string | null {\n    return this.tenantCode;\n  }\n\n  getTenantId(): number | null {\n    return this.tenantId;\n  }\n\n  private getHeaders(): Record<string, string> {\n    // Set secure request headers\n    const csrfToken = security.csrf.getTokenFromMeta();\n    const headers: Record<string, string> = {\n      ...security.network.getSecureHeaders(csrfToken || undefined),\n    };\n\n    // Dynamically get the latest token and tenantId\n    const currentToken = typeof window !== 'undefined' ? localStorage.getItem('access_token') : this.token;\n    const currentTenantId = typeof window !== 'undefined' ? localStorage.getItem('current_tenant_id') : this.tenantId;\n\n    if (currentToken) {\n      headers['Authorization'] = `Bearer ${currentToken}`;\n    }\n\n    if (currentTenantId) {\n      headers['X-Tenant-ID'] = currentTenantId.toString();\n    }\n    const currentTenantCode = typeof window !== 'undefined' ? localStorage.getItem('current_tenant_code') : this.tenantCode;\n    if (currentTenantCode) {\n      headers['X-Tenant-Code'] = currentTenantCode;\n    }\n\n    return headers;\n  }\n\n  // Independent token refresh method to avoid circular dependencies\n  private async refreshTokenInternal(): Promise<boolean> {\n    const refreshToken = typeof window !== 'undefined' ? localStorage.getItem('refresh_token') : null;\n    if (!refreshToken) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/api/v1/refresh-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          refresh_token: refreshToken,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.code === 0) {\n          // Update access token\n          this.setToken(data.data.access_token);\n          // Also update instance variable\n          this.token = data.data.access_token;\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }\n\n  // Request method using fetch API\n  private async request<T>(endpoint: string, config: RequestConfig): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers = this.getHeaders();\n    const requestConfig: RequestInit = {\n      method: config.method,\n      headers: {\n        ...headers,\n        ...config.headers,\n      },\n      body: config.body,\n    };\n\n    console.log('HTTP Client Request:', {\n      url,\n      method: config.method,\n      headers,\n      body: config.body\n    });\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n      \n      const response = await fetch(url, {\n        ...requestConfig,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n      \n      console.log('HTTP Client Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: response.headers ? Object.fromEntries(response.headers.entries()) : {}\n      });\n      \n      // If 401 error, try to refresh token\n      if (response.status === 401) {\n        const refreshSuccess = await this.refreshTokenInternal();\n        if (refreshSuccess) {\n          // Retry original request\n          const retryConfig: RequestInit = {\n            ...requestConfig,\n            headers: {\n              ...this.getHeaders(),\n              ...config.headers,\n            },\n          };\n          const retryResponse = await fetch(url, retryConfig);\n          if (!retryResponse.ok) {\n            const rid = retryResponse.headers.get('X-Request-Id') || '';\n            const suffix = rid ? ` [RID: ${rid}]` : '';\n            throw new Error(`HTTP error! status: ${retryResponse.status}${suffix}`);\n          }\n          const retryData = await retryResponse.json() as ApiResponse<T>;\n          console.log('HTTP Client Retry Response Data:', retryData);\n          \n          // Check response code\n          if (retryData.code !== 0) {\n            const rid = retryResponse.headers.get('X-Request-Id') || '';\n            const suffix = rid ? ` [RID: ${rid}]` : '';\n            throw new Error((retryData.message || 'Request failed') + suffix);\n          }\n          \n          return retryData.data;\n        } else {\n          // Refresh failed, clear token and redirect to login\n          this.clearToken();\n          if (typeof window !== 'undefined') {\n            localStorage.removeItem('refresh_token');\n            window.location.href = '/login';\n          }\n          throw new Error('Authentication failed');\n        }\n      }\n\n      if (!response.ok) {\n        const rid = response.headers.get('X-Request-Id') || '';\n        const suffix = rid ? ` [RID: ${rid}]` : '';\n        throw new Error(`HTTP error! status: ${response.status}${suffix}`);\n      }\n\n      const responseData = await response.json() as ApiResponse<T>;\n      console.log('HTTP Client Raw Response Data:', responseData);\n      \n      // Check response code\n      if (responseData.code !== 0) {\n        const rid = (response.headers && response.headers.get('X-Request-Id')) || '';\n        const suffix = rid ? ` [RID: ${rid}]` : '';\n        throw new Error((responseData.message || 'Request failed') + suffix);\n      }\n      \n      return responseData.data;\n    } catch (error: unknown) {\n      console.error('Request failed:', error);\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('Request timeout, please try again later');\n      }\n      throw error;\n    }\n  }\n\n  async get<T>(endpoint: string, params?: Record<string, unknown>): Promise<T> {\n    let url = endpoint;\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      url += `?${searchParams.toString()}`;\n    }\n    \n    return this.request<T>(url, {\n      method: 'GET',\n    });\n  }\n\n  async post<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async put<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async patch<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport const httpClient = new HttpClient();\nexport default HttpClient;"],"names":["httpClient","HttpClient","constructor","baseURL","API_BASE_URL","token","tenantId","tenantCode","process","env","NEXT_PUBLIC_API_URL","timeout","parseInt","NEXT_PUBLIC_API_TIMEOUT","window","localStorage","getItem","storedTenantId","setToken","setItem","clearToken","removeItem","setTenantId","toString","setTenantCode","code","console","log","getTenantCode","getTenantId","getHeaders","csrfToken","security","csrf","getTokenFromMeta","headers","network","getSecureHeaders","undefined","currentToken","currentTenantId","currentTenantCode","refreshTokenInternal","refreshToken","response","fetch","method","body","JSON","stringify","refresh_token","ok","data","json","access_token","error","request","endpoint","config","url","requestConfig","controller","AbortController","timeoutId","setTimeout","abort","signal","clearTimeout","status","statusText","Object","fromEntries","entries","refreshSuccess","retryConfig","retryResponse","rid","get","suffix","Error","retryData","message","location","href","responseData","name","params","searchParams","URLSearchParams","forEach","key","value","append","String","post","put","patch","delete"],"mappings":"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"}