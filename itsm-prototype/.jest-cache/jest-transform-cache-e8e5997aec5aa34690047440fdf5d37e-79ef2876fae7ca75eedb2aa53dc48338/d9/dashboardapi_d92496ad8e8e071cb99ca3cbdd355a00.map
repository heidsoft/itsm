{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/api/dashboard-api.ts"],"sourcesContent":["import { httpClient } from '../../app/lib/http-client';\nimport {\n  DashboardWidget,\n  Dashboard,\n  DashboardLayout,\n  TicketStats,\n  UserStats,\n  SystemStats,\n  ChartData,\n  RealtimeData,\n  Report,\n  DashboardTemplate,\n  CreateDashboardRequest,\n  UpdateDashboardRequest\n} from '../../types/dashboard';\n\n/**\n * 仪表盘API客户端\n * 提供仪表盘数据获取和管理相关的API调用方法\n */\nexport class DashboardAPI {\n  /**\n   * 获取仪表盘配置\n   * @param userId 用户ID\n   * @returns 仪表盘配置\n   */\n  static async getDashboardConfig(userId?: number): Promise<Dashboard> {\n    const params = userId ? { user_id: userId } : {};\n    return httpClient.get<Dashboard>('/api/v1/dashboard/config', params);\n  }\n\n  /**\n   * 保存仪表盘配置\n   * @param config 仪表盘配置\n   * @returns 保存结果\n   */\n  static async saveDashboardConfig(config: Dashboard): Promise<{ success: boolean }> {\n    return httpClient.post<{ success: boolean }>('/api/v1/dashboard/config', config);\n  }\n\n  /**\n   * 获取仪表盘布局\n   * @param userId 用户ID\n   * @returns 仪表盘布局\n   */\n  static async getDashboardLayout(userId?: number): Promise<DashboardLayout> {\n    const params = userId ? { user_id: userId } : {};\n    return httpClient.get<DashboardLayout>('/api/v1/dashboard/layout', params);\n  }\n\n  /**\n   * 保存仪表盘布局\n   * @param layout 仪表盘布局\n   * @returns 保存结果\n   */\n  static async saveDashboardLayout(layout: DashboardLayout): Promise<{ success: boolean }> {\n    return httpClient.post<{ success: boolean }>('/api/v1/dashboard/layout', layout);\n  }\n\n  /**\n   * 获取工单统计数据\n   * @param filters 过滤条件\n   * @returns 工单统计数据\n   */\n  static async getTicketStats(filters?: Record<string, unknown>): Promise<TicketStats> {\n    return httpClient.get<TicketStats>('/api/v1/dashboard/stats/tickets', filters);\n  }\n\n  /**\n   * 获取用户统计数据\n   * @param filters 过滤条件\n   * @returns 用户统计数据\n   */\n  static async getUserStats(filters?: Record<string, unknown>): Promise<UserStats> {\n    return httpClient.get<UserStats>('/api/v1/dashboard/stats/users', filters);\n  }\n\n  /**\n   * 获取系统统计数据\n   * @param filters 过滤条件\n   * @returns 系统统计数据\n   */\n  static async getSystemStats(filters?: Record<string, unknown>): Promise<SystemStats> {\n    return httpClient.get<SystemStats>('/api/v1/dashboard/stats/system', filters);\n  }\n\n  /**\n   * 获取图表数据\n   * @param chartType 图表类型\n   * @param filters 过滤条件\n   * @returns 图表数据\n   */\n  static async getChartData(chartType: string, filters?: Record<string, unknown>): Promise<ChartData> {\n    return httpClient.get<ChartData>(`/api/v1/dashboard/charts/${chartType}`, filters);\n  }\n\n  /**\n   * 获取实时数据\n   * @param dataType 数据类型\n   * @returns 实时数据\n   */\n  static async getRealtimeData(dataType: string): Promise<RealtimeData> {\n    return httpClient.get<RealtimeData>(`/api/v1/dashboard/realtime/${dataType}`);\n  }\n\n  /**\n   * 获取部件数据\n   * @param widgetId 部件ID\n   * @param filters 过滤条件\n   * @returns 部件数据\n   */\n  static async getWidgetData(widgetId: string, filters?: Record<string, unknown>): Promise<DashboardWidget> {\n    return httpClient.get<DashboardWidget>(`/api/v1/dashboard/widgets/${widgetId}`, filters);\n  }\n\n  /**\n   * 刷新部件数据\n   * @param widgetId 部件ID\n   * @param filters 过滤条件\n   * @returns 部件数据\n   */\n  static async refreshWidgetData(widgetId: string, filters?: Record<string, unknown>): Promise<DashboardWidget> {\n    return httpClient.post<DashboardWidget>(`/api/v1/dashboard/widgets/${widgetId}/refresh`, filters);\n  }\n\n  /**\n   * 获取可用部件列表\n   * @returns 部件列表\n   */\n  static async getAvailableWidgets(): Promise<DashboardWidget[]> {\n    return httpClient.get<DashboardWidget[]>('/api/v1/dashboard/widgets/available');\n  }\n\n  /**\n   * 添加部件到仪表盘\n   * @param widgetConfig 部件配置\n   * @returns 添加结果\n   */\n  static async addWidget(widgetConfig: Partial<DashboardWidget>): Promise<{ widget: DashboardWidget }> {\n    return httpClient.post<{ widget: DashboardWidget }>('/api/v1/dashboard/widgets', widgetConfig);\n  }\n\n  /**\n   * 更新部件配置\n   * @param widgetId 部件ID\n   * @param config 部件配置\n   * @returns 更新结果\n   */\n  static async updateWidget(widgetId: string, config: Partial<DashboardWidget>): Promise<{ widget: DashboardWidget }> {\n    return httpClient.put<{ widget: DashboardWidget }>(`/api/v1/dashboard/widgets/${widgetId}`, config);\n  }\n\n  /**\n   * 删除部件\n   * @param widgetId 部件ID\n   * @returns 删除结果\n   */\n  static async removeWidget(widgetId: string): Promise<{ success: boolean }> {\n    return httpClient.delete<{ success: boolean }>(`/api/v1/dashboard/widgets/${widgetId}`);\n  }\n\n  /**\n   * 生成报告\n   * @param reportType 报告类型\n   * @param filters 过滤条件\n   * @returns 报告数据\n   */\n  static async generateReport(reportType: string, filters?: Record<string, unknown>): Promise<Report> {\n    return httpClient.post<Report>(`/api/v1/dashboard/reports/${reportType}`, filters);\n  }\n\n  /**\n   * 获取报告列表\n   * @param page 页码\n   * @param pageSize 页面大小\n   * @returns 报告列表\n   */\n  static async getReports(page: number = 1, pageSize: number = 20): Promise<{\n    reports: Report[];\n    total: number;\n    page: number;\n    pageSize: number;\n  }> {\n    return httpClient.get('/api/v1/dashboard/reports', { page, page_size: pageSize });\n  }\n\n  /**\n   * 下载报告\n   * @param reportId 报告ID\n   * @returns 报告文件Blob\n   */\n  static async downloadReport(reportId: string): Promise<Blob> {\n    const response = await httpClient.get<ArrayBuffer>(`/api/v1/dashboard/reports/${reportId}/download`);\n    return new Blob([response], { type: 'application/octet-stream' });\n  }\n\n  /**\n   * 导出仪表盘数据\n   * @param params 导出参数\n   * @returns 导出结果\n   */\n  static async exportDashboard(params?: Record<string, unknown>): Promise<{ download_url: string }> {\n    return httpClient.post<{ download_url: string }>('/api/v1/dashboard/export', params);\n  }\n\n  /**\n   * 获取仪表盘模板列表\n   * @returns 模板列表\n   */\n  static async getTemplates(): Promise<DashboardTemplate[]> {\n    return httpClient.get<DashboardTemplate[]>('/api/v1/dashboard/templates');\n  }\n\n  /**\n   * 应用仪表盘模板\n   * @param templateId 模板ID\n   * @returns 应用结果\n   */\n  static async applyTemplate(templateId: string): Promise<{ success: boolean; config: Dashboard }> {\n    return httpClient.post<{ success: boolean; config: Dashboard }>(`/api/v1/dashboard/templates/${templateId}/apply`);\n  }\n\n  /**\n   * 保存为模板\n   * @param name 模板名称\n   * @param description 模板描述\n   * @param config 仪表盘配置\n   * @returns 保存结果\n   */\n  static async saveAsTemplate(name: string, description: string, config: Dashboard): Promise<{ template: DashboardTemplate }> {\n    return httpClient.post<{ template: DashboardTemplate }>('/api/v1/dashboard/templates', {\n      name,\n      description,\n      config\n    });\n  }\n\n  /**\n   * 获取仪表盘性能指标\n   * @returns 性能指标\n   */\n  static async getPerformanceMetrics(): Promise<{\n    loadTime: number;\n    renderTime: number;\n    dataFetchTime: number;\n    widgetCount: number;\n    memoryUsage: number;\n  }> {\n    return httpClient.get('/api/v1/dashboard/metrics/performance');\n  }\n\n  /**\n   * 获取仪表盘使用统计\n   * @param dateRange 日期范围\n   * @returns 使用统计\n   */\n  static async getUsageStats(dateRange?: { start: string; end: string }): Promise<{\n    totalViews: number;\n    uniqueUsers: number;\n    avgSessionDuration: number;\n    mostUsedWidgets: Array<{ widgetId: string; usage: number }>;\n    peakUsageHours: number[];\n  }> {\n    return httpClient.get('/api/v1/dashboard/metrics/usage', dateRange);\n  }\n}"],"names":["DashboardAPI","getDashboardConfig","userId","params","user_id","httpClient","get","saveDashboardConfig","config","post","getDashboardLayout","saveDashboardLayout","layout","getTicketStats","filters","getUserStats","getSystemStats","getChartData","chartType","getRealtimeData","dataType","getWidgetData","widgetId","refreshWidgetData","getAvailableWidgets","addWidget","widgetConfig","updateWidget","put","removeWidget","delete","generateReport","reportType","getReports","page","pageSize","page_size","downloadReport","reportId","response","Blob","type","exportDashboard","getTemplates","applyTemplate","templateId","saveAsTemplate","name","description","getPerformanceMetrics","getUsageStats","dateRange"],"mappings":";;;;+BAoBaA;;;eAAAA;;;4BApBc;AAoBpB,MAAMA;IACX;;;;GAIC,GACD,aAAaC,mBAAmBC,MAAe,EAAsB;QACnE,MAAMC,SAASD,SAAS;YAAEE,SAASF;QAAO,IAAI,CAAC;QAC/C,OAAOG,sBAAU,CAACC,GAAG,CAAY,4BAA4BH;IAC/D;IAEA;;;;GAIC,GACD,aAAaI,oBAAoBC,MAAiB,EAAiC;QACjF,OAAOH,sBAAU,CAACI,IAAI,CAAuB,4BAA4BD;IAC3E;IAEA;;;;GAIC,GACD,aAAaE,mBAAmBR,MAAe,EAA4B;QACzE,MAAMC,SAASD,SAAS;YAAEE,SAASF;QAAO,IAAI,CAAC;QAC/C,OAAOG,sBAAU,CAACC,GAAG,CAAkB,4BAA4BH;IACrE;IAEA;;;;GAIC,GACD,aAAaQ,oBAAoBC,MAAuB,EAAiC;QACvF,OAAOP,sBAAU,CAACI,IAAI,CAAuB,4BAA4BG;IAC3E;IAEA;;;;GAIC,GACD,aAAaC,eAAeC,OAAiC,EAAwB;QACnF,OAAOT,sBAAU,CAACC,GAAG,CAAc,mCAAmCQ;IACxE;IAEA;;;;GAIC,GACD,aAAaC,aAAaD,OAAiC,EAAsB;QAC/E,OAAOT,sBAAU,CAACC,GAAG,CAAY,iCAAiCQ;IACpE;IAEA;;;;GAIC,GACD,aAAaE,eAAeF,OAAiC,EAAwB;QACnF,OAAOT,sBAAU,CAACC,GAAG,CAAc,kCAAkCQ;IACvE;IAEA;;;;;GAKC,GACD,aAAaG,aAAaC,SAAiB,EAAEJ,OAAiC,EAAsB;QAClG,OAAOT,sBAAU,CAACC,GAAG,CAAY,CAAC,yBAAyB,EAAEY,WAAW,EAAEJ;IAC5E;IAEA;;;;GAIC,GACD,aAAaK,gBAAgBC,QAAgB,EAAyB;QACpE,OAAOf,sBAAU,CAACC,GAAG,CAAe,CAAC,2BAA2B,EAAEc,UAAU;IAC9E;IAEA;;;;;GAKC,GACD,aAAaC,cAAcC,QAAgB,EAAER,OAAiC,EAA4B;QACxG,OAAOT,sBAAU,CAACC,GAAG,CAAkB,CAAC,0BAA0B,EAAEgB,UAAU,EAAER;IAClF;IAEA;;;;;GAKC,GACD,aAAaS,kBAAkBD,QAAgB,EAAER,OAAiC,EAA4B;QAC5G,OAAOT,sBAAU,CAACI,IAAI,CAAkB,CAAC,0BAA0B,EAAEa,SAAS,QAAQ,CAAC,EAAER;IAC3F;IAEA;;;GAGC,GACD,aAAaU,sBAAkD;QAC7D,OAAOnB,sBAAU,CAACC,GAAG,CAAoB;IAC3C;IAEA;;;;GAIC,GACD,aAAamB,UAAUC,YAAsC,EAAwC;QACnG,OAAOrB,sBAAU,CAACI,IAAI,CAA8B,6BAA6BiB;IACnF;IAEA;;;;;GAKC,GACD,aAAaC,aAAaL,QAAgB,EAAEd,MAAgC,EAAwC;QAClH,OAAOH,sBAAU,CAACuB,GAAG,CAA8B,CAAC,0BAA0B,EAAEN,UAAU,EAAEd;IAC9F;IAEA;;;;GAIC,GACD,aAAaqB,aAAaP,QAAgB,EAAiC;QACzE,OAAOjB,sBAAU,CAACyB,MAAM,CAAuB,CAAC,0BAA0B,EAAER,UAAU;IACxF;IAEA;;;;;GAKC,GACD,aAAaS,eAAeC,UAAkB,EAAElB,OAAiC,EAAmB;QAClG,OAAOT,sBAAU,CAACI,IAAI,CAAS,CAAC,0BAA0B,EAAEuB,YAAY,EAAElB;IAC5E;IAEA;;;;;GAKC,GACD,aAAamB,WAAWC,OAAe,CAAC,EAAEC,WAAmB,EAAE,EAK5D;QACD,OAAO9B,sBAAU,CAACC,GAAG,CAAC,6BAA6B;YAAE4B;YAAME,WAAWD;QAAS;IACjF;IAEA;;;;GAIC,GACD,aAAaE,eAAeC,QAAgB,EAAiB;QAC3D,MAAMC,WAAW,MAAMlC,sBAAU,CAACC,GAAG,CAAc,CAAC,0BAA0B,EAAEgC,SAAS,SAAS,CAAC;QACnG,OAAO,IAAIE,KAAK;YAACD;SAAS,EAAE;YAAEE,MAAM;QAA2B;IACjE;IAEA;;;;GAIC,GACD,aAAaC,gBAAgBvC,MAAgC,EAAqC;QAChG,OAAOE,sBAAU,CAACI,IAAI,CAA2B,4BAA4BN;IAC/E;IAEA;;;GAGC,GACD,aAAawC,eAA6C;QACxD,OAAOtC,sBAAU,CAACC,GAAG,CAAsB;IAC7C;IAEA;;;;GAIC,GACD,aAAasC,cAAcC,UAAkB,EAAoD;QAC/F,OAAOxC,sBAAU,CAACI,IAAI,CAA0C,CAAC,4BAA4B,EAAEoC,WAAW,MAAM,CAAC;IACnH;IAEA;;;;;;GAMC,GACD,aAAaC,eAAeC,IAAY,EAAEC,WAAmB,EAAExC,MAAiB,EAA4C;QAC1H,OAAOH,sBAAU,CAACI,IAAI,CAAkC,+BAA+B;YACrFsC;YACAC;YACAxC;QACF;IACF;IAEA;;;GAGC,GACD,aAAayC,wBAMV;QACD,OAAO5C,sBAAU,CAACC,GAAG,CAAC;IACxB;IAEA;;;;GAIC,GACD,aAAa4C,cAAcC,SAA0C,EAMlE;QACD,OAAO9C,sBAAU,CAACC,GAAG,CAAC,mCAAmC6C;IAC3D;AACF"}