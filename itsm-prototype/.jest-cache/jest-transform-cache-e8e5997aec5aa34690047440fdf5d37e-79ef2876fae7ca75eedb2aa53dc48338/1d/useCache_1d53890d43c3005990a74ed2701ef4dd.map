{"version":3,"names":["cacheManager","cov_2gzpn9x3oc","f","s","useCache","CacheManager","set","key","data","ttl","b","cache","size","maxSize","firstKey","keys","next","value","delete","timestamp","Date","now","get","entry","isExpired","getStale","isStale","clear","Map","fetcher","options","staleWhileRevalidate","setData","_react","useState","loading","setLoading","error","setError","fetchData","useCallback","forceRefresh","cachedData","staleData","result","err","mutate","newData","invalidate","useEffect","refetch"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/hooks/useCache.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface CacheOptions {\n  ttl?: number; // 缓存时间（毫秒）\n  staleWhileRevalidate?: boolean; // 返回过期数据同时重新验证\n}\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n}\n\nclass CacheManager {\n  private cache = new Map<string, CacheEntry<unknown>>();\n  private maxSize = 100;\n\n  set<T>(key: string, data: T, ttl: number = 5 * 60 * 1000) {\n    // 如果缓存已满，删除最旧的条目\n    if (this.cache.size >= this.maxSize) {\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl\n    });\n  }\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    const isExpired = Date.now() - entry.timestamp > entry.ttl;\n    if (isExpired) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data;\n  }\n\n  getStale<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    return entry ? entry.data : null;\n  }\n\n  isStale(key: string): boolean {\n    const entry = this.cache.get(key);\n    if (!entry) return true;\n    return Date.now() - entry.timestamp > entry.ttl;\n  }\n\n  delete(key: string) {\n    this.cache.delete(key);\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nconst cacheManager = new CacheManager();\n\nexport function useCache<T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  options: CacheOptions = {}\n) {\n  const { ttl = 5 * 60 * 1000, staleWhileRevalidate = true } = options;\n  \n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchData = useCallback(async (forceRefresh = false) => {\n    try {\n      setError(null);\n      \n      // 检查缓存\n      if (!forceRefresh) {\n        const cachedData = cacheManager.get<T>(key);\n        if (cachedData) {\n          setData(cachedData);\n          return cachedData;\n        }\n\n        // 如果启用了 staleWhileRevalidate，先返回过期数据\n        if (staleWhileRevalidate) {\n          const staleData = cacheManager.getStale<T>(key);\n          if (staleData) {\n            setData(staleData);\n          }\n        }\n      }\n\n      setLoading(true);\n      const result = await fetcher();\n      \n      // 缓存新数据\n      cacheManager.set(key, result, ttl);\n      setData(result);\n      \n      return result;\n    } catch (err) {\n      setError(err as Error);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [key, fetcher, ttl, staleWhileRevalidate]);\n\n  const mutate = useCallback((newData: T) => {\n    cacheManager.set(key, newData, ttl);\n    setData(newData);\n  }, [key, ttl]);\n\n  const invalidate = useCallback(() => {\n    cacheManager.delete(key);\n  }, [key]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: () => fetchData(true),\n    mutate,\n    invalidate\n  };\n}\n\nexport { cacheManager };"],"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","ignoreList":[]}