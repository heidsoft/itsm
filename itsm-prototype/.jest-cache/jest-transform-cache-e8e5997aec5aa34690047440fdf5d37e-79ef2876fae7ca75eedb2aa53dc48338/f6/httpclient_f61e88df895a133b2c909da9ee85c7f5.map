{"version":3,"names":["default","cov_9c6dj683r","f","s","_default","httpClient","HttpClient","constructor","baseURL","b","_apiconfig","API_BASE_URL","token","tenantId","tenantCode","process","env","NEXT_PUBLIC_API_URL","timeout","parseInt","NEXT_PUBLIC_API_TIMEOUT","window","localStorage","getItem","storedTenantId","setToken","setItem","clearToken","removeItem","setTenantId","toString","setTenantCode","code","console","log","getTenantCode","getTenantId","getHeaders","csrfToken","_security","security","csrf","getTokenFromMeta","headers","network","getSecureHeaders","undefined","currentToken","currentTenantId","currentTenantCode","refreshTokenInternal","refreshToken","response","fetch","method","body","JSON","stringify","refresh_token","ok","data","json","access_token","error","request","endpoint","config","url","requestConfig","controller","AbortController","timeoutId","setTimeout","abort","signal","clearTimeout","status","statusText","Object","fromEntries","entries","refreshSuccess","retryConfig","retryResponse","rid","get","suffix","Error","retryData","message","location","href","responseData","name","params","searchParams","URLSearchParams","forEach","key","value","append","String","post","put","patch","delete"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/http-client.ts"],"sourcesContent":["import { API_BASE_URL } from './api-config';\nimport { security } from './security';\n\n// Request configuration interface\ninterface RequestConfig {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  body?: string;\n  timeout?: number;\n}\n\n// API response interface\ninterface ApiResponse<T> {\n  code: number;\n  message: string;\n  data: T;\n}\n\nclass HttpClient {\n  private baseURL: string;\n  private token: string | null = null;\n  private tenantId: number | null = null;\n  private tenantCode: string | null = null;\n  private readonly timeout: number;\n\n  constructor(baseURL: string = API_BASE_URL) {\n    this.baseURL = process.env.NEXT_PUBLIC_API_URL || baseURL;\n    this.timeout = parseInt(process.env.NEXT_PUBLIC_API_TIMEOUT || '30000');\n    // Get token and tenant ID from localStorage\n    if (typeof window !== 'undefined') {\n      this.token = localStorage.getItem('access_token'); // Changed to access_token\n      const storedTenantId = localStorage.getItem('current_tenant_id');\n      this.tenantId = storedTenantId ? parseInt(storedTenantId) : null;\n      this.tenantCode = localStorage.getItem('current_tenant_code') || null;\n    }\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('access_token', token); // Changed to access_token\n    }\n  }\n\n  clearToken() {\n    this.token = null;\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('access_token'); // Changed to access_token\n    }\n  }\n\n  setTenantId(tenantId: number | null) {\n    this.tenantId = tenantId;\n    if (typeof window !== 'undefined') {\n      if (tenantId) {\n        localStorage.setItem('current_tenant_id', tenantId.toString());\n      } else {\n        localStorage.removeItem('current_tenant_id');\n      }\n    }\n  }\n\n  setTenantCode(code: string | null) {\n    this.tenantCode = code;\n    console.log('HttpClient.setTenantCode:', code);\n    if (typeof window !== 'undefined') {\n      if (code) {\n        localStorage.setItem('current_tenant_code', code);\n      } else {\n        localStorage.removeItem('current_tenant_code');\n      }\n    }\n  }\n\n  // Get tenant code\n  getTenantCode(): string | null {\n    return this.tenantCode;\n  }\n\n  getTenantId(): number | null {\n    return this.tenantId;\n  }\n\n  private getHeaders(): Record<string, string> {\n    // Set secure request headers\n    const csrfToken = security.csrf.getTokenFromMeta();\n    const headers: Record<string, string> = {\n      ...security.network.getSecureHeaders(csrfToken || undefined),\n    };\n\n    // Dynamically get the latest token and tenantId\n    const currentToken = typeof window !== 'undefined' ? localStorage.getItem('access_token') : this.token;\n    const currentTenantId = typeof window !== 'undefined' ? localStorage.getItem('current_tenant_id') : this.tenantId;\n\n    if (currentToken) {\n      headers['Authorization'] = `Bearer ${currentToken}`;\n    }\n\n    if (currentTenantId) {\n      headers['X-Tenant-ID'] = currentTenantId.toString();\n    }\n    const currentTenantCode = typeof window !== 'undefined' ? localStorage.getItem('current_tenant_code') : this.tenantCode;\n    if (currentTenantCode) {\n      headers['X-Tenant-Code'] = currentTenantCode;\n    }\n\n    return headers;\n  }\n\n  // Independent token refresh method to avoid circular dependencies\n  private async refreshTokenInternal(): Promise<boolean> {\n    const refreshToken = typeof window !== 'undefined' ? localStorage.getItem('refresh_token') : null;\n    if (!refreshToken) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`${this.baseURL}/api/v1/refresh-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          refresh_token: refreshToken,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.code === 0) {\n          // Update access token\n          this.setToken(data.data.access_token);\n          // Also update instance variable\n          this.token = data.data.access_token;\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }\n\n  // Request method using fetch API\n  private async request<T>(endpoint: string, config: RequestConfig): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers = this.getHeaders();\n    const requestConfig: RequestInit = {\n      method: config.method,\n      headers: {\n        ...headers,\n        ...config.headers,\n      },\n      body: config.body,\n    };\n\n    console.log('HTTP Client Request:', {\n      url,\n      method: config.method,\n      headers,\n      body: config.body\n    });\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n      \n      const response = await fetch(url, {\n        ...requestConfig,\n        signal: controller.signal,\n      });\n      \n      clearTimeout(timeoutId);\n      \n      console.log('HTTP Client Response:', {\n        status: response.status,\n        statusText: response.statusText,\n        headers: response.headers ? Object.fromEntries(response.headers.entries()) : {}\n      });\n      \n      // If 401 error, try to refresh token\n      if (response.status === 401) {\n        const refreshSuccess = await this.refreshTokenInternal();\n        if (refreshSuccess) {\n          // Retry original request\n          const retryConfig: RequestInit = {\n            ...requestConfig,\n            headers: {\n              ...this.getHeaders(),\n              ...config.headers,\n            },\n          };\n          const retryResponse = await fetch(url, retryConfig);\n          if (!retryResponse.ok) {\n            const rid = retryResponse.headers.get('X-Request-Id') || '';\n            const suffix = rid ? ` [RID: ${rid}]` : '';\n            throw new Error(`HTTP error! status: ${retryResponse.status}${suffix}`);\n          }\n          const retryData = await retryResponse.json() as ApiResponse<T>;\n          console.log('HTTP Client Retry Response Data:', retryData);\n          \n          // Check response code\n          if (retryData.code !== 0) {\n            const rid = retryResponse.headers.get('X-Request-Id') || '';\n            const suffix = rid ? ` [RID: ${rid}]` : '';\n            throw new Error((retryData.message || 'Request failed') + suffix);\n          }\n          \n          return retryData.data;\n        } else {\n          // Refresh failed, clear token and redirect to login\n          this.clearToken();\n          if (typeof window !== 'undefined') {\n            localStorage.removeItem('refresh_token');\n            window.location.href = '/login';\n          }\n          throw new Error('Authentication failed');\n        }\n      }\n\n      if (!response.ok) {\n        const rid = response.headers.get('X-Request-Id') || '';\n        const suffix = rid ? ` [RID: ${rid}]` : '';\n        throw new Error(`HTTP error! status: ${response.status}${suffix}`);\n      }\n\n      const responseData = await response.json() as ApiResponse<T>;\n      console.log('HTTP Client Raw Response Data:', responseData);\n      \n      // Check response code\n      if (responseData.code !== 0) {\n        const rid = (response.headers && response.headers.get('X-Request-Id')) || '';\n        const suffix = rid ? ` [RID: ${rid}]` : '';\n        throw new Error((responseData.message || 'Request failed') + suffix);\n      }\n      \n      return responseData.data;\n    } catch (error: unknown) {\n      console.error('Request failed:', error);\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('Request timeout, please try again later');\n      }\n      throw error;\n    }\n  }\n\n  async get<T>(endpoint: string, params?: Record<string, unknown>): Promise<T> {\n    let url = endpoint;\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      url += `?${searchParams.toString()}`;\n    }\n    \n    return this.request<T>(url, {\n      method: 'GET',\n    });\n  }\n\n  async post<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async put<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async patch<T>(endpoint: string, data?: unknown): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport const httpClient = new HttpClient();\nexport default HttpClient;"],"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","ignoreList":[]}