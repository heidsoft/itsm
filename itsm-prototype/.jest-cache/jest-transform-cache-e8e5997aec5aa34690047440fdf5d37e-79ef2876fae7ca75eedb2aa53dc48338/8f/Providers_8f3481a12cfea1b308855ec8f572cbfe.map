{"version":3,"names":["Providers","children","cov_1eoq791714","f","login","logout","setLoading","s","_authstore","useAuthStore","_react","useEffect","initAuth","isAuthenticated","_authservice","AuthService","b","user","getCurrentUser","token","getToken","error","console","_jsxruntime","jsxs","Fragment","jsx","_NotificationContainer","NotificationContainer"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/components/providers/Providers.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect } from 'react';\nimport { AuthService } from '@/lib/auth/auth-service';\nimport { useAuthStore } from '@/lib/store/auth-store';\nimport { NotificationContainer } from '@/components/ui/NotificationContainer';\n\n/**\n * 全局提供者组件\n * 负责初始化应用状态和提供全局上下文\n */\nexport function Providers({ children }: { children: React.ReactNode }) {\n  const { login, logout, setLoading } = useAuthStore();\n\n  // 初始化认证状态\n  useEffect(() => {\n    const initAuth = async () => {\n      setLoading(true);\n      \n      try {\n        // 检查是否有有效的认证状态\n        const isAuthenticated = AuthService.isAuthenticated();\n        \n        if (isAuthenticated) {\n          // 获取当前用户信息\n          const user = await AuthService.getCurrentUser();\n          const token = AuthService.getToken();\n          \n          if (user && token) {\n            login(user, token);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to initialize auth:', error);\n        // 清除可能损坏的认证状态\n        AuthService.logout();\n        logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, [login, logout, setLoading]);\n\n  return (\n    <>\n      {children}\n      <NotificationContainer />\n    </>\n  );\n}"],"mappingsgB;;;;;;WAAAA,SAAA;;;;;;;;kCATU;;;kCACE;;;kCACC;;;kCACS;AAM/B,SAASA,UAAU;EAAEC;AAAQ,CAAiC;EAAA;EAAAC,cAAA,GAAAC,CAAA;EACnE,MAAM;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAE;EAAA;EAAA,CAAAJ,cAAA,GAAAK,CAAA,OAAG,IAAAC,UAAA,CAAAC,YAAY;EAElD;EAAA;EAAAP,cAAA,GAAAK,CAAA;EACA,IAAAG,MAAA,CAAAC,SAAS,EAAC;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAK,CAAA;IACR,MAAMK,QAAA,GAAW,MAAAA,CAAA;MAAA;MAAAV,cAAA,GAAAC,CAAA;MAAAD,cAAA,GAAAK,CAAA;MACfD,UAAA,CAAW;MAAA;MAAAJ,cAAA,GAAAK,CAAA;MAEX,IAAI;QACF;QACA,MAAMM,eAAA;QAAA;QAAA,CAAAX,cAAA,GAAAK,CAAA,QAAkBO,YAAA,CAAAC,WAAW,CAACF,eAAe;QAAA;QAAAX,cAAA,GAAAK,CAAA;QAEnD,IAAIM,eAAA,EAAiB;UAAA;UAAAX,cAAA,GAAAc,CAAA;UACnB;UACA,MAAMC,IAAA;UAAA;UAAA,CAAAf,cAAA,GAAAK,CAAA,QAAO,MAAMO,YAAA,CAAAC,WAAW,CAACG,cAAc;UAC7C,MAAMC,KAAA;UAAA;UAAA,CAAAjB,cAAA,GAAAK,CAAA,QAAQO,YAAA,CAAAC,WAAW,CAACK,QAAQ;UAAA;UAAAlB,cAAA,GAAAK,CAAA;UAElC;UAAI;UAAA,CAAAL,cAAA,GAAAc,CAAA,UAAAC,IAAA;UAAA;UAAA,CAAAf,cAAA,GAAAc,CAAA,UAAQG,KAAA,GAAO;YAAA;YAAAjB,cAAA,GAAAc,CAAA;YAAAd,cAAA,GAAAK,CAAA;YACjBH,KAAA,CAAMa,IAAA,EAAME,KAAA;UACd;UAAA;UAAA;YAAAjB,cAAA,GAAAc,CAAA;UAAA;QACF;QAAA;QAAA;UAAAd,cAAA,GAAAc,CAAA;QAAA;MACF,EAAE,OAAOK,KAAA,EAAO;QAAA;QAAAnB,cAAA,GAAAK,CAAA;QACde,OAAA,CAAQD,KAAK,CAAC,8BAA8BA,KAAA;QAC5C;QAAA;QAAAnB,cAAA,GAAAK,CAAA;QACAO,YAAA,CAAAC,WAAW,CAACV,MAAM;QAAA;QAAAH,cAAA,GAAAK,CAAA;QAClBF,MAAA;MACF,UAAU;QAAA;QAAAH,cAAA,GAAAK,CAAA;QACRD,UAAA,CAAW;MACb;IACF;IAAA;IAAAJ,cAAA,GAAAK,CAAA;IAEAK,QAAA;EACF,GAAG,CAACR,KAAA,EAAOC,MAAA,EAAQC,UAAA,CAAW;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EAE9B,oBACE,IAAAgB,WAAA,CAAAC,IAAA,EAAAD,WAAA,CAAAE,QAAA;eACGxB,QAAA,E,aACD,IAAAsB,WAAA,CAAAG,GAAA,EAACC,sBAAA,CAAAC,qBAAqB;;AAG5B","ignoreList":[]}