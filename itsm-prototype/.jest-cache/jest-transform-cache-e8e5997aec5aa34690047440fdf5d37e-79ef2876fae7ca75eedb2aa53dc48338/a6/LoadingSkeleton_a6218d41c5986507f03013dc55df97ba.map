{"version":3,"names":["cov_1m3ol8e8yf","actualCoverage","s","CardSkeleton","f","ChartSkeleton","FormSkeleton","ListSkeleton","LoadingSkeleton","TableSkeleton","type","b","rows","columns","className","renderTableSkeleton","_jsxruntime","jsxs","jsx","_antd","Skeleton","Input","active","size","style","width","height","Array","from","length","map","_","index","colIndex","renderCardSkeleton","Button","renderFormSkeleton","renderListSkeleton","Avatar","renderChartSkeleton","Math","random","shape","props"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/components/ui/LoadingSkeleton.tsx"],"sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport { Skeleton } from \"antd\";\n\ninterface LoadingSkeletonProps {\n  type?: \"table\" | \"card\" | \"form\" | \"list\" | \"chart\";\n  rows?: number;\n  columns?: number;\n  className?: string;\n}\n\nexport const LoadingSkeleton: React.FC<LoadingSkeletonProps> = ({\n  type = \"card\",\n  rows = 3,\n  columns = 1,\n  className = \"\",\n}) => {\n  const renderTableSkeleton = () => (\n    <div className={className}>\n      {/* 表头 */}\n      <div className=\"mb-4\">\n        <Skeleton.Input active size=\"large\" style={{ width: \"100%\", height: 40 }} />\n      </div>\n      \n      {/* 表格行 */}\n      {Array.from({ length: rows }).map((_, index) => (\n        <div key={index} className=\"mb-3\">\n          <div className=\"flex gap-3\">\n            {Array.from({ length: columns }).map((_, colIndex) => (\n              <Skeleton.Input\n                key={colIndex}\n                active\n                size=\"small\"\n                style={{ \n                  width: colIndex === 0 ? \"20%\" : colIndex === columns - 1 ? \"15%\" : \"100%\",\n                  height: 32 \n                }}\n              />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderCardSkeleton = () => (\n    <div className={className}>\n      <div className=\"space-y-4\">\n        {/* 标题 */}\n        <Skeleton.Input active size=\"large\" style={{ width: \"60%\", height: 24 }} />\n        \n        {/* 内容 */}\n        {Array.from({ length: rows }).map((_, index) => (\n          <Skeleton.Input\n            key={index}\n            active\n            size=\"small\"\n            style={{ \n              width: index === 0 ? \"100%\" : index === 1 ? \"80%\" : \"60%\",\n              height: 16 \n            }}\n          />\n        ))}\n        \n        {/* 操作按钮 */}\n        <div className=\"flex gap-2 pt-2\">\n          <Skeleton.Button active size=\"small\" style={{ width: 80, height: 32 }} />\n          <Skeleton.Button active size=\"small\" style={{ width: 60, height: 32 }} />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderFormSkeleton = () => (\n    <div className={className}>\n      <div className=\"space-y-6\">\n        {/* 表单标题 */}\n        <Skeleton.Input active size=\"large\" style={{ width: \"40%\", height: 28 }} />\n        \n        {/* 表单项 */}\n        {Array.from({ length: rows }).map((_, index) => (\n          <div key={index} className=\"space-y-2\">\n            <Skeleton.Input active size=\"small\" style={{ width: \"30%\", height: 16 }} />\n            <Skeleton.Input active size=\"large\" style={{ width: \"100%\", height: 40 }} />\n          </div>\n        ))}\n        \n        {/* 提交按钮 */}\n        <div className=\"pt-4\">\n          <Skeleton.Button active size=\"large\" style={{ width: 120, height: 40 }} />\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderListSkeleton = () => (\n    <div className={className}>\n      <div className=\"space-y-3\">\n        {Array.from({ length: rows }).map((_, index) => (\n          <div key={index} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n            <Skeleton.Avatar active size=\"large\" />\n            <div className=\"flex-1 space-y-2\">\n              <Skeleton.Input active size=\"small\" style={{ width: \"40%\", height: 16 }} />\n              <Skeleton.Input active size=\"small\" style={{ width: \"80%\", height: 14 }} />\n            </div>\n            <Skeleton.Button active size=\"small\" style={{ width: 60, height: 28 }} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderChartSkeleton = () => (\n    <div className={className}>\n      <div className=\"space-y-4\">\n        {/* 图表标题 */}\n        <Skeleton.Input active size=\"large\" style={{ width: \"50%\", height: 24 }} />\n        \n        {/* 图表区域 */}\n        <div className=\"bg-gray-50 rounded-lg p-6\">\n          <div className=\"flex items-end justify-between h-48\">\n            {Array.from({ length: 7 }).map((_, index) => (\n              <div key={index} className=\"flex flex-col items-center space-y-2\">\n                <Skeleton.Input\n                  active\n                  size=\"small\"\n                  style={{ \n                    width: 20,\n                    height: Math.random() * 100 + 50\n                  }}\n                />\n                <Skeleton.Input active size=\"small\" style={{ width: 40, height: 12 }} />\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* 图例 */}\n        <div className=\"flex justify-center space-x-6\">\n          {Array.from({ length: 3 }).map((_, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <Skeleton.Avatar active size=\"small\" shape=\"square\" />\n              <Skeleton.Input active size=\"small\" style={{ width: 60, height: 14 }} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  switch (type) {\n    case \"table\":\n      return renderTableSkeleton();\n    case \"card\":\n      return renderCardSkeleton();\n    case \"form\":\n      return renderFormSkeleton();\n    case \"list\":\n      return renderListSkeleton();\n    case \"chart\":\n      return renderChartSkeleton();\n    default:\n      return renderCardSkeleton();\n  }\n};\n\n// 预定义的骨架屏组件\nexport const TableSkeleton = (props: Omit<LoadingSkeletonProps, \"type\">) => (\n  <LoadingSkeleton type=\"table\" {...props} />\n);\n\nexport const CardSkeleton = (props: Omit<LoadingSkeletonProps, \"type\">) => (\n  <LoadingSkeleton type=\"card\" {...props} />\n);\n\nexport const FormSkeleton = (props: Omit<LoadingSkeletonProps, \"type\">) => (\n  <LoadingSkeleton type=\"form\" {...props} />\n);\n\nexport const ListSkeleton = (props: Omit<LoadingSkeletonProps, \"type\">) => (\n  <LoadingSkeleton type=\"list\" {...props} />\n);\n\nexport const ChartSkeleton = (props: Omit<LoadingSkeletonProps, \"type\">) => (\n  <LoadingSkeleton type=\"chart\" {...props} />\n);\n"],"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","ignoreList":[]}