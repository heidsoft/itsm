{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/__tests__/api-integration.test.ts"],"sourcesContent":["import { TicketApi } from '../ticket-api';\nimport { DashboardAPI } from '../../../lib/api/dashboard-api';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock console methods to avoid noise in tests\nconst consoleSpy = {\n  error: jest.spyOn(console, 'error').mockImplementation(() => {}),\n  warn: jest.spyOn(console, 'warn').mockImplementation(() => {}),\n  log: jest.spyOn(console, 'log').mockImplementation(() => {}),\n};\n\ndescribe('API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Reset fetch mock\n    (fetch as jest.Mock).mockClear();\n  });\n\n  afterAll(() => {\n    // Restore console methods\n    Object.values(consoleSpy).forEach(spy => spy.mockRestore());\n  });\n\n  describe('TicketApi', () => {\n    describe('getTickets', () => {\n      it('should fetch tickets successfully', async () => {\n        const mockResponse = {\n          code: 0,\n          message: 'success',\n          data: {\n            tickets: [\n              {\n                id: 1,\n                title: '系统登录问题',\n                description: '用户无法正常登录',\n                status: 'open',\n                priority: 'high',\n                created_at: '2024-01-01T10:00:00Z',\n              },\n            ],\n            total: 1,\n            page: 1,\n            page_size: 20,\n          },\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockResponse,\n        });\n\n        const result = await TicketApi.getTickets();\n\n        expect(fetch).toHaveBeenCalledWith(\n          expect.stringContaining('/api/v1/tickets'),\n          expect.objectContaining({\n            method: 'GET',\n            headers: expect.objectContaining({\n              'Content-Type': 'application/json',\n            }),\n          })\n        );\n\n        expect(result).toEqual(mockResponse.data);\n      });\n\n      it('should handle API error responses', async () => {\n        const mockErrorResponse = {\n          code: 5001,\n          message: '服务器内部错误',\n          data: null,\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockErrorResponse,\n        });\n\n        await expect(TicketApi.getTickets()).rejects.toThrow('服务器内部错误');\n      });\n\n      it('should handle network errors', async () => {\n        (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));\n\n        await expect(TicketApi.getTickets()).rejects.toThrow('Network error');\n      });\n\n      it('should include query parameters correctly', async () => {\n        const mockResponse = {\n          code: 0,\n          message: 'success',\n          data: { tickets: [], total: 0, page: 1, page_size: 10 },\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockResponse,\n        });\n\n        const params = {\n          page: 2,\n          page_size: 10,\n          status: 'open',\n          priority: 'high',\n        };\n\n        await TicketApi.getTickets(params);\n\n        expect(fetch).toHaveBeenCalledWith(\n          expect.stringContaining('/api/v1/tickets'),\n          expect.objectContaining({\n            method: 'GET',\n          })\n        );\n      });\n    });\n\n    describe('createTicket', () => {\n      it('should create ticket successfully', async () => {\n        const mockTicketData = {\n          title: '新工单',\n          description: '工单描述',\n          priority: 'medium',\n          type: 'incident',\n        };\n\n        const mockResponse = {\n          code: 0,\n          message: 'success',\n          data: {\n            id: 1,\n            ...mockTicketData,\n            status: 'open',\n            created_at: '2024-01-01T10:00:00Z',\n          },\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 201,\n          json: async () => mockResponse,\n        });\n\n        const result = await TicketApi.createTicket(mockTicketData);\n\n        expect(fetch).toHaveBeenCalledWith(\n          expect.stringContaining('/api/v1/tickets'),\n          expect.objectContaining({\n            method: 'POST',\n            headers: expect.objectContaining({\n              'Content-Type': 'application/json',\n            }),\n            body: JSON.stringify(mockTicketData),\n          })\n        );\n\n        expect(result).toEqual(mockResponse.data);\n      });\n\n      it('should handle validation errors', async () => {\n        const mockErrorResponse = {\n          code: 1001,\n          message: '请求参数错误: title is required',\n          data: null,\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockErrorResponse,\n        });\n\n        const invalidData = { \n          description: '缺少标题',\n          priority: 'medium' as const,\n          type: 'incident' as const\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        await expect(TicketApi.createTicket(invalidData as any)).rejects.toThrow(\n          '请求参数错误: title is required'\n        );\n      });\n    });\n  });\n\n  describe('DashboardAPI', () => {\n    describe('getDashboardConfig', () => {\n      it('should fetch dashboard config successfully', async () => {\n        const mockResponse = {\n          code: 0,\n          message: 'success',\n          data: {\n            id: 1,\n            name: '默认仪表盘',\n            layout: 'grid',\n            widgets: [\n              {\n                id: 'widget-1',\n                type: 'stats',\n                title: '工单统计',\n                position: { x: 0, y: 0, w: 6, h: 4 },\n              },\n            ],\n          },\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockResponse,\n        });\n\n        const result = await DashboardAPI.getDashboardConfig();\n\n        expect(fetch).toHaveBeenCalledWith(\n          expect.stringContaining('/api/v1/dashboard/config'),\n          expect.objectContaining({\n            method: 'GET',\n            headers: expect.objectContaining({\n              'Content-Type': 'application/json',\n            }),\n          })\n        );\n\n        expect(result).toEqual(mockResponse.data);\n      });\n    });\n\n    describe('getTicketStats', () => {\n      it('should fetch ticket statistics successfully', async () => {\n        const mockResponse = {\n          code: 0,\n          message: 'success',\n          data: {\n            total: 150,\n            open: 45,\n            in_progress: 10,\n            resolved: 95,\n            by_priority: {\n              low: 50,\n              medium: 70,\n              high: 25,\n              critical: 5,\n            },\n          },\n        };\n\n        (fetch as jest.Mock).mockResolvedValueOnce({\n          ok: true,\n          status: 200,\n          json: async () => mockResponse,\n        });\n\n        const result = await DashboardAPI.getTicketStats();\n\n        expect(fetch).toHaveBeenCalledWith(\n          expect.stringContaining('/api/v1/dashboard/stats/tickets'),\n          expect.objectContaining({\n            method: 'GET',\n          })\n        );\n\n        expect(result).toEqual(mockResponse.data);\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle HTTP error status codes', async () => {\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n        json: async () => ({ message: 'Server error' }),\n      });\n\n      await expect(TicketApi.getTickets()).rejects.toThrow();\n    });\n\n    it('should handle malformed JSON responses', async () => {\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => {\n          throw new Error('Invalid JSON');\n        },\n      });\n\n      await expect(TicketApi.getTickets()).rejects.toThrow('Invalid JSON');\n    });\n\n    it('should handle timeout errors', async () => {\n      (fetch as jest.Mock).mockImplementationOnce(\n        () => new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Request timeout')), 100)\n        )\n      );\n\n      await expect(TicketApi.getTickets()).rejects.toThrow('Request timeout');\n    });\n\n    it('should handle CORS errors', async () => {\n      (fetch as jest.Mock).mockRejectedValueOnce(\n        new TypeError('Failed to fetch')\n      );\n\n      await expect(TicketApi.getTickets()).rejects.toThrow('Failed to fetch');\n    });\n  });\n\n  describe('Authentication Integration', () => {\n    it('should include authorization header when token exists', async () => {\n      // Mock localStorage\n      const mockToken = 'mock-jwt-token';\n      Object.defineProperty(window, 'localStorage', {\n        value: {\n          getItem: jest.fn(() => mockToken),\n          setItem: jest.fn(),\n          removeItem: jest.fn(),\n        },\n        writable: true,\n      });\n\n      const mockResponse = {\n        code: 0,\n        message: 'success',\n        data: { tickets: [] },\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => mockResponse,\n      });\n\n      await TicketApi.getTickets();\n\n      expect(fetch).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'Authorization': `Bearer ${mockToken}`,\n          }),\n        })\n      );\n    });\n\n    it('should handle token expiration', async () => {\n      const mockErrorResponse = {\n        code: 2001,\n        message: 'Token已过期',\n        data: null,\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => mockErrorResponse,\n      });\n\n      await expect(TicketApi.getTickets()).rejects.toThrow('Token已过期');\n    });\n\n    it('should handle unauthorized access', async () => {\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        statusText: 'Unauthorized',\n        json: async () => ({ message: 'Unauthorized' }),\n      });\n\n      await expect(TicketApi.getTickets()).rejects.toThrow();\n    });\n  });\n\n  describe('Performance and Caching', () => {\n    it('should handle concurrent requests', async () => {\n      const mockResponse = {\n        code: 0,\n        message: 'success',\n        data: { tickets: [] },\n      };\n\n      (fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        status: 200,\n        json: async () => mockResponse,\n      });\n\n      // Make multiple concurrent requests\n      const promises = [\n        TicketApi.getTickets(),\n        TicketApi.getTickets(),\n        TicketApi.getTickets(),\n      ];\n\n      const results = await Promise.all(promises);\n\n      expect(results).toHaveLength(3);\n      expect(fetch).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle large response payloads', async () => {\n      // Create a large mock response\n      const largeTicketList = Array.from({ length: 1000 }, (_, i) => ({\n        id: i + 1,\n        title: `工单 ${i + 1}`,\n        status: 'open',\n        priority: 'medium',\n      }));\n\n      const mockResponse = {\n        code: 0,\n        message: 'success',\n        data: {\n          tickets: largeTicketList,\n          total: 1000,\n          page: 1,\n          page_size: 1000,\n        },\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => mockResponse,\n      });\n\n      const result = await TicketApi.getTickets({ page_size: 1000 });\n\n      expect(result.tickets).toHaveLength(1000);\n      expect(result.total).toBe(1000);\n    });\n  });\n\n  describe('Data Validation', () => {\n    it('should handle missing response fields', async () => {\n      const partialResponse = {\n        code: 0,\n        message: 'success',\n        data: {\n          tickets: [\n            {\n              id: 1,\n              title: '工单标题',\n              // Missing other required fields\n            },\n          ],\n        },\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => partialResponse,\n      });\n\n      const result = await TicketApi.getTickets();\n      \n      expect(result.tickets).toHaveLength(1);\n      expect(result.tickets[0].id).toBe(1);\n    });\n\n    it('should validate response data structure', async () => {\n      const invalidResponse = {\n        code: 0,\n        message: 'success',\n        data: {\n          // Missing required fields\n          tickets: null,\n        },\n      };\n\n      (fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        status: 200,\n        json: async () => invalidResponse,\n      });\n\n      // The API should handle invalid response structures gracefully\n      const result = await TicketApi.getTickets();\n      \n      // Should provide fallback values or throw descriptive error\n      expect(result).toBeDefined();\n    });\n  });\n});"],"names":["global","fetch","jest","fn","consoleSpy","error","spyOn","console","mockImplementation","warn","log","describe","beforeEach","clearAllMocks","mockClear","afterAll","Object","values","forEach","spy","mockRestore","it","mockResponse","code","message","data","tickets","id","title","description","status","priority","created_at","total","page","page_size","mockResolvedValueOnce","ok","json","result","TicketApi","getTickets","expect","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","toEqual","mockErrorResponse","rejects","toThrow","mockRejectedValueOnce","Error","params","mockTicketData","type","createTicket","body","JSON","stringify","invalidData","name","layout","widgets","position","x","y","w","h","DashboardAPI","getDashboardConfig","open","in_progress","resolved","by_priority","low","medium","high","critical","getTicketStats","statusText","mockImplementationOnce","Promise","_","reject","setTimeout","TypeError","mockToken","defineProperty","window","value","getItem","setItem","removeItem","writable","any","String","mockResolvedValue","promises","results","all","toHaveLength","toHaveBeenCalledTimes","largeTicketList","Array","from","length","i","toBe","partialResponse","invalidResponse","toBeDefined"],"mappings":"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"}