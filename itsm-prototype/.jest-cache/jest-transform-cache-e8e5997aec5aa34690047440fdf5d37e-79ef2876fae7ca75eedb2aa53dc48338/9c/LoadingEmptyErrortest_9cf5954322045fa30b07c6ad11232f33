4cacd9401bbcdb92f0aa18899ec69508
"use strict";
// Mock Ant Design components
jest.mock('antd', ()=>({
        Button: ({ children, onClick, icon, type, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                onClick: onClick,
                "data-testid": `button-${type || 'default'}`,
                ...props,
                children: [
                    icon,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: children
                    })
                ]
            }),
        Result: ({ title, subTitle, extra, icon })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "result",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "result-icon",
                        children: icon
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "result-title",
                        children: title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "result-subtitle",
                        children: subTitle
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "result-extra",
                        children: extra
                    })
                ]
            }),
        Spin: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "spin",
                "data-size": size,
                children: "Loading..."
            }),
        Typography: {
            Text: ({ children, type, className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": "text",
                    "data-type": type,
                    className: className,
                    children: children
                }),
            Title: ({ children, level, className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    "data-testid": "title",
                    "data-level": level,
                    className: className,
                    children: children
                })
        }
    }));
// Mock Lucide React icons
jest.mock('lucide-react', ()=>({
        RotateCcw: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "rotate-ccw-icon",
                "data-size": size,
                children: "↻"
            }),
        Plus: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "plus-icon",
                "data-size": size,
                children: "+"
            }),
        FileText: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "file-text-icon",
                "data-size": size,
                children: "\uD83D\uDCC4"
            }),
        AlertTriangle: ({ size, style })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "alert-triangle-icon",
                "data-size": size,
                style: style,
                children: "⚠️"
            }),
        User: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "user-icon",
                "data-size": size,
                children: "\uD83D\uDC64"
            }),
        Database: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "database-icon",
                "data-size": size,
                children: "\uD83D\uDDC4️"
            }),
        Settings: ({ size })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "settings-icon",
                "data-size": size,
                children: "⚙️"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const _LoadingEmptyError = require("../ui/LoadingEmptyError");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('LoadingEmptyError Component', ()=>{
    describe('Loading State', ()=>{
        it('should render loading spinner with default text', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "loading"
            }));
            expect(_react1.screen.getByTestId('spin')).toBeInTheDocument();
            expect(_react1.screen.getByText('加载中...')).toBeInTheDocument();
        });
        it('should render loading spinner with custom text', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "loading",
                loadingText: "正在获取数据..."
            }));
            expect(_react1.screen.getByTestId('spin')).toBeInTheDocument();
            expect(_react1.screen.getByText('正在获取数据...')).toBeInTheDocument();
        });
        it('should apply custom minHeight and className', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "loading",
                minHeight: 300,
                className: "custom-loading"
            }));
            const loadingContainer = container.firstChild;
            expect(loadingContainer).toHaveClass('custom-loading');
            expect(loadingContainer.style.minHeight).toBe('300px');
        });
    });
    describe('Empty State', ()=>{
        it('should render empty state with default configuration', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty"
            }));
            expect(_react1.screen.getByTestId('title')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('text')).toBeInTheDocument();
        });
        it('should render empty state with custom configuration', ()=>{
            const mockAction = jest.fn();
            const emptyConfig = {
                title: '没有工单',
                description: '当前没有工单数据',
                actionText: '创建工单',
                onAction: mockAction,
                showAction: true
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                empty: emptyConfig
            }));
            expect(_react1.screen.getByText('没有工单')).toBeInTheDocument();
            expect(_react1.screen.getByText('当前没有工单数据')).toBeInTheDocument();
            const actionButton = _react1.screen.getByTestId('button-primary');
            expect(actionButton).toBeInTheDocument();
            expect(actionButton).toHaveTextContent('创建工单');
            _react1.fireEvent.click(actionButton);
            expect(mockAction).toHaveBeenCalledTimes(1);
        });
        it('should not render action button when showAction is false', ()=>{
            const emptyConfig = {
                title: '没有数据',
                actionText: '添加数据',
                showAction: false
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                empty: emptyConfig
            }));
            expect(_react1.screen.queryByTestId('button-primary')).not.toBeInTheDocument();
        });
        it('should render custom icon when provided', ()=>{
            const customIcon = /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                "data-testid": "custom-icon",
                children: "\uD83C\uDFAF"
            });
            const emptyConfig = {
                title: '自定义空状态',
                icon: customIcon
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                empty: emptyConfig
            }));
            expect(_react1.screen.getByTestId('custom-icon')).toBeInTheDocument();
        });
    });
    describe('Error State', ()=>{
        it('should render error state with default configuration', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "error"
            }));
            expect(_react1.screen.getByTestId('result')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('result-title')).toHaveTextContent('加载失败');
            expect(_react1.screen.getByTestId('alert-triangle-icon')).toBeInTheDocument();
        });
        it('should render error state with custom configuration and retry action', ()=>{
            const mockRetry = jest.fn();
            const errorConfig = {
                title: '网络错误',
                description: '请检查网络连接',
                actionText: '重新加载',
                onAction: mockRetry,
                showRetry: true
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "error",
                error: errorConfig
            }));
            expect(_react1.screen.getByText('网络错误')).toBeInTheDocument();
            expect(_react1.screen.getByText('请检查网络连接')).toBeInTheDocument();
            const retryButton = _react1.screen.getByTestId('button-primary');
            expect(retryButton).toBeInTheDocument();
            expect(retryButton).toHaveTextContent('重新加载');
            _react1.fireEvent.click(retryButton);
            expect(mockRetry).toHaveBeenCalledTimes(1);
        });
        it('should not render retry button when showRetry is false', ()=>{
            const errorConfig = {
                title: '错误',
                showRetry: false
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "error",
                error: errorConfig
            }));
            expect(_react1.screen.queryByTestId('button-primary')).not.toBeInTheDocument();
        });
    });
    describe('Success State', ()=>{
        it('should render children when state is success', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "success",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "success-content",
                    children: "Success Content"
                })
            }));
            expect(_react1.screen.getByTestId('success-content')).toBeInTheDocument();
            expect(_react1.screen.getByText('Success Content')).toBeInTheDocument();
        });
        it('should render success configuration when provided', ()=>{
            const mockAction = jest.fn();
            const successConfig = {
                title: '操作成功',
                description: '数据已成功加载',
                actionText: '继续操作',
                onAction: mockAction,
                showAction: true
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "success",
                success: successConfig
            }));
            expect(_react1.screen.getByText('操作成功')).toBeInTheDocument();
            expect(_react1.screen.getByText('数据已成功加载')).toBeInTheDocument();
            const actionButton = _react1.screen.getByTestId('button-primary');
            expect(actionButton).toBeInTheDocument();
            _react1.fireEvent.click(actionButton);
            expect(mockAction).toHaveBeenCalledTimes(1);
        });
        it('should render both success config and children', ()=>{
            const successConfig = {
                title: '加载完成',
                description: '数据加载成功'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "success",
                success: successConfig,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "children-content",
                    children: "Children Content"
                })
            }));
            expect(_react1.screen.getByText('加载完成')).toBeInTheDocument();
            expect(_react1.screen.getByText('数据加载成功')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('children-content')).toBeInTheDocument();
        });
    });
    describe('Custom Styling', ()=>{
        it('should apply custom className to different states', ()=>{
            const { rerender, container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "loading",
                className: "custom-class"
            }));
            expect(container.firstChild).toHaveClass('custom-class');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                className: "empty-class"
            }));
            expect(container.firstChild).toHaveClass('empty-class');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "error",
                className: "error-class"
            }));
            expect(container.firstChild).toHaveClass('error-class');
        });
        it('should apply custom minHeight to loading and empty states', ()=>{
            const { rerender, container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "loading",
                minHeight: 400
            }));
            const element = container.firstChild;
            expect(element.style.minHeight).toBe('400px');
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                minHeight: 500
            }));
            expect(container.firstChild.style.minHeight).toBe('500px');
        });
    });
    describe('Edge Cases', ()=>{
        it('should return null for invalid state', ()=>{
            const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: 'invalid'
            }));
            expect(container.firstChild).toBeNull();
        });
        it('should handle missing onAction gracefully', ()=>{
            const emptyConfig = {
                title: '测试',
                actionText: '操作'
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingEmptyError.LoadingEmptyError, {
                state: "empty",
                empty: emptyConfig
            }));
            // Should not render button without onAction
            expect(_react1.screen.queryByTestId('button-primary')).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,