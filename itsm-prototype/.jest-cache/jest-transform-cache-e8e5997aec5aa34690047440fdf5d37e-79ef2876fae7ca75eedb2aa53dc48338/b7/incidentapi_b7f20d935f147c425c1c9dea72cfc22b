bc947971cf2562510cf827af7235c281
"use strict";

/* istanbul ignore next */
function cov_1xwikgasbi() {
  var path = "/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/incident-api.ts";
  var hash = "f1daacc0c39f4566e951f568bbc14c307c3f0be6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/incident-api.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 30,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "8": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 27
        }
      },
      "9": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "10": {
        start: {
          line: 31,
          column: 20
        },
        end: {
          line: 31,
          column: 44
        }
      },
      "11": {
        start: {
          line: 32,
          column: 24
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "12": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "13": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 52,
          column: 1
        }
      },
      "14": {
        start: {
          line: 53,
          column: 22
        },
        end: {
          line: 60,
          column: 1
        }
      },
      "15": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "16": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 81
        }
      },
      "17": {
        start: {
          line: 66,
          column: 29
        },
        end: {
          line: 66,
          column: 87
        }
      },
      "18": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 73
        }
      },
      "19": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "20": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 69
        }
      },
      "21": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 24
        }
      },
      "22": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "24": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 85
        }
      },
      "25": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 71
        }
      },
      "26": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "27": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 67
        }
      },
      "28": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "29": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "30": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 78
        }
      },
      "31": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 86
        }
      },
      "32": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 74
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 28
        }
      },
      "34": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "35": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "36": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 108,
          column: 9
        }
      },
      "37": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 89
        }
      },
      "38": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 91
        }
      },
      "39": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 74
        }
      },
      "40": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 28
        }
      },
      "41": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 70
        }
      },
      "42": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "43": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "44": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 74
        }
      },
      "45": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 72
        }
      },
      "46": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 64
        }
      },
      "47": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 70
        }
      },
      "48": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 24
        }
      },
      "49": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 133,
          column: 9
        }
      },
      "50": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 101
        }
      },
      "51": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 127,
          column: 14
        }
      },
      "52": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 74
        }
      },
      "53": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 28
        }
      },
      "54": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 70
        }
      },
      "55": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 24
        }
      },
      "56": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "57": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 100
        }
      },
      "58": {
        start: {
          line: 139,
          column: 29
        },
        end: {
          line: 141,
          column: 14
        }
      },
      "59": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 73
        }
      },
      "60": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 28
        }
      },
      "61": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 69
        }
      },
      "62": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 24
        }
      },
      "63": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "64": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 93
        }
      },
      "65": {
        start: {
          line: 153,
          column: 29
        },
        end: {
          line: 155,
          column: 14
        }
      },
      "66": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 74
        }
      },
      "67": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 28
        }
      },
      "68": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 70
        }
      },
      "69": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 24
        }
      },
      "70": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "71": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 84
        }
      },
      "72": {
        start: {
          line: 167,
          column: 29
        },
        end: {
          line: 167,
          column: 93
        }
      },
      "73": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 76
        }
      },
      "74": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 28
        }
      },
      "75": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 72
        }
      },
      "76": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 24
        }
      },
      "77": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "78": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 79
        }
      },
      "79": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 94
        }
      },
      "80": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 79
        }
      },
      "81": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 28
        }
      },
      "82": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 75
        }
      },
      "83": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 24
        }
      },
      "84": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "85": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 79
        }
      },
      "86": {
        start: {
          line: 191,
          column: 29
        },
        end: {
          line: 191,
          column: 94
        }
      },
      "87": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 79
        }
      },
      "88": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 28
        }
      },
      "89": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 75
        }
      },
      "90": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 24
        }
      },
      "91": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "92": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 93
        }
      },
      "93": {
        start: {
          line: 203,
          column: 29
        },
        end: {
          line: 203,
          column: 101
        }
      },
      "94": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 78
        }
      },
      "95": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 28
        }
      },
      "96": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 74
        }
      },
      "97": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 24
        }
      },
      "98": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "99": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 96
        }
      },
      "100": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 218,
          column: 15
        }
      },
      "101": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 69
        }
      },
      "102": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 75
        }
      },
      "103": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "104": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "105": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 83
        }
      },
      "106": {
        start: {
          line: 229,
          column: 29
        },
        end: {
          line: 229,
          column: 94
        }
      },
      "107": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 65
        }
      },
      "108": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 28
        }
      },
      "109": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 71
        }
      },
      "110": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 24
        }
      },
      "111": {
        start: {
          line: 238,
          column: 17
        },
        end: {
          line: 238,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 12,
            column: 24
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 15,
            column: 22
          }
        },
        loc: {
          start: {
            line: 15,
            column: 32
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 18,
            column: 22
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 21,
            column: 19
          },
          end: {
            line: 21,
            column: 20
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 28
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 24
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 27,
            column: 13
          },
          end: {
            line: 27,
            column: 14
          }
        },
        loc: {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 63
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 33
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 38
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 87
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 99
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 48
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 122
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 47
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 136
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 44
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 150
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 42
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 164
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 41
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 176
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 41
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 188
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 46
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 200
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 48
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 212
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 41
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 226
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 63,
            column: 31
          },
          end: {
            line: 63,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 40
          },
          end: {
            line: 63,
            column: 42
          }
        }],
        line: 63
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/incident-api.ts"],
      sourcesContent: ["import { httpClient } from './http-client';\n\n// \u4E8B\u4EF6\u72B6\u6001\u679A\u4E3E\nexport const INCIDENT_STATUS = {\n  NEW: 'new',\n  IN_PROGRESS: 'in_progress',\n  RESOLVED: 'resolved',\n  CLOSED: 'closed',\n  CANCELLED: 'cancelled',\n} as const;\n\n// \u4E8B\u4EF6\u4F18\u5148\u7EA7\u679A\u4E3E\nexport const INCIDENT_PRIORITY = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical',\n} as const;\n\n// \u4E8B\u4EF6\u6765\u6E90\u679A\u4E3E\nexport const INCIDENT_SOURCE = {\n  EMAIL: 'email',\n  PHONE: 'phone',\n  WEB: 'web',\n  API: 'api',\n  MONITORING: 'monitoring',\n  CHAT: 'chat',\n} as const;\n\n// \u4E8B\u4EF6\u7C7B\u578B\u679A\u4E3E\nexport const INCIDENT_TYPE = {\n  HARDWARE: 'hardware',\n  SOFTWARE: 'software',\n  NETWORK: 'network',\n  SECURITY: 'security',\n  ACCESS: 'access',\n  OTHER: 'other',\n} as const;\n\n// \u4E8B\u4EF6\u6570\u636E\u63A5\u53E3\nexport interface Incident {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  source: string;\n  type: string;\n  incident_number: string;\n  is_major_incident: boolean;\n  requester_id: number;\n  requester_name?: string;\n  requester_email?: string;\n  assignee_id?: number;\n  assignee_name?: string;\n  assignee_email?: string;\n  category_id?: number;\n  category_name?: string;\n  subcategory_id?: number;\n  subcategory_name?: string;\n  resolution?: string;\n  resolution_time?: string;\n  first_response_time?: string;\n  form_fields?: Record<string, string | number | boolean>;\n  attachments?: string[];\n  tags?: string[];\n  created_at: string;\n  updated_at: string;\n}\n\n// \u4E8B\u4EF6\u5217\u8868\u8BF7\u6C42\u53C2\u6570\nexport interface ListIncidentsRequest extends Record<string, unknown> {\n  page?: number;\n  page_size?: number;\n  status?: string;\n  priority?: string;\n  source?: string;\n  type?: string;\n  assignee_id?: number;\n  requester_id?: number;\n  category_id?: number;\n  is_major_incident?: boolean;\n  keyword?: string;\n  date_from?: string;\n  date_to?: string;\n  sort_by?: string;\n  sort_order?: 'asc' | 'desc';\n}\n\n// \u4E8B\u4EF6\u5217\u8868\u54CD\u5E94\nexport interface ListIncidentsResponse {\n  incidents: Incident[];\n  total: number;\n  page: number;\n  page_size: number;\n}\n\n// \u521B\u5EFA\u4E8B\u4EF6\u8BF7\u6C42\nexport interface CreateIncidentRequest {\n  title: string;\n  description: string;\n  priority: string;\n  source: string;\n  type: string;\n  requester_id?: number;\n  assignee_id?: number;\n  category_id?: number;\n  subcategory_id?: number;\n  is_major_incident?: boolean;\n  form_fields?: Record<string, string | number | boolean>;\n  tags?: string[];\n}\n\n// \u66F4\u65B0\u4E8B\u4EF6\u8BF7\u6C42\nexport interface UpdateIncidentRequest {\n  title?: string;\n  description?: string;\n  status?: string;\n  priority?: string;\n  assignee_id?: number;\n  category_id?: number;\n  subcategory_id?: number;\n  resolution?: string;\n  is_major_incident?: boolean;\n  form_fields?: Record<string, string | number | boolean>;\n  tags?: string[];\n}\n\n// \u4E8B\u4EF6\u7EDF\u8BA1\u6570\u636E\nexport interface IncidentStats {\n  total: number;\n  by_status: Record<string, number>;\n  by_priority: Record<string, number>;\n  by_type: Record<string, number>;\n  by_source: Record<string, number>;\n  avg_resolution_time: number;\n  avg_first_response_time: number;\n  sla_compliance_rate: number;\n}\n\n// \u4E8B\u4EF6\u65F6\u95F4\u7EBF\u6761\u76EE\nexport interface IncidentTimelineEntry {\n  id: number;\n  incident_id: number;\n  action: string;\n  description: string;\n  user_id: number;\n  user_name: string;\n  created_at: string;\n  metadata?: Record<string, string | number | boolean>;\n}\n\n// \u4E8B\u4EF6\u8BC4\u8BBA\nexport interface IncidentComment {\n  id: number;\n  incident_id: number;\n  content: string;\n  user_id: number;\n  user_name: string;\n  user_avatar?: string;\n  is_internal: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\n// \u521B\u5EFA\u8BC4\u8BBA\u8BF7\u6C42\nexport interface CreateCommentRequest {\n  content: string;\n  is_internal?: boolean;\n}\n\n// \u4E8B\u4EF6API\u7C7B\nexport class IncidentAPI {\n  // \u83B7\u53D6\u4E8B\u4EF6\u5217\u8868\n  static async listIncidents(params: ListIncidentsRequest = {}): Promise<ListIncidentsResponse> {\n    try {\n      console.log('IncidentAPI.listIncidents called with params:', params);\n      const response = await httpClient.get<ListIncidentsResponse>('/api/incidents', params);\n      console.log('IncidentAPI.listIncidents response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.listIncidents error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u5355\u4E2A\u4E8B\u4EF6\u8BE6\u60C5\n  static async getIncident(id: number): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.getIncident called with id:', id);\n      const response = await httpClient.get<Incident>(`/api/incidents/${id}`);\n      console.log('IncidentAPI.getIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u521B\u5EFA\u4E8B\u4EF6\n  static async createIncident(data: CreateIncidentRequest): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.createIncident called with data:', data);\n      const response = await httpClient.post<Incident>('/api/incidents', data);\n      console.log('IncidentAPI.createIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.createIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u66F4\u65B0\u4E8B\u4EF6\n  static async updateIncident(id: number, data: UpdateIncidentRequest): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.updateIncident called with id:', id, 'data:', data);\n      const response = await httpClient.put<Incident>(`/api/incidents/${id}`, data);\n      console.log('IncidentAPI.updateIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.updateIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u5220\u9664\u4E8B\u4EF6\n  static async deleteIncident(id: number): Promise<void> {\n    try {\n      console.log('IncidentAPI.deleteIncident called with id:', id);\n      await httpClient.delete(`/api/incidents/${id}`);\n      console.log('IncidentAPI.deleteIncident completed');\n    } catch (error) {\n      console.error('IncidentAPI.deleteIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u5206\u914D\u4E8B\u4EF6\n  static async assignIncident(id: number, assigneeId: number): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.assignIncident called with id:', id, 'assigneeId:', assigneeId);\n      const response = await httpClient.put<Incident>(`/api/incidents/${id}/assign`, { assignee_id: assigneeId });\n      console.log('IncidentAPI.assignIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.assignIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u5173\u95ED\u4E8B\u4EF6\n  static async closeIncident(id: number, resolution: string): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.closeIncident called with id:', id, 'resolution:', resolution);\n      const response = await httpClient.put<Incident>(`/api/incidents/${id}/close`, { resolution });\n      console.log('IncidentAPI.closeIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.closeIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u91CD\u65B0\u6253\u5F00\u4E8B\u4EF6\n  static async reopenIncident(id: number, reason: string): Promise<Incident> {\n    try {\n      console.log('IncidentAPI.reopenIncident called with id:', id, 'reason:', reason);\n      const response = await httpClient.put<Incident>(`/api/incidents/${id}/reopen`, { reason });\n      console.log('IncidentAPI.reopenIncident response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.reopenIncident error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u4E8B\u4EF6\u7EDF\u8BA1\n  static async getIncidentStats(params?: { date_from?: string; date_to?: string }): Promise<IncidentStats> {\n    try {\n      console.log('IncidentAPI.getIncidentStats called with params:', params);\n      const response = await httpClient.get<IncidentStats>('/api/incidents/stats', params);\n      console.log('IncidentAPI.getIncidentStats response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getIncidentStats error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u4E8B\u4EF6\u65F6\u95F4\u7EBF\n  static async getIncidentTimeline(id: number): Promise<IncidentTimelineEntry[]> {\n    try {\n      console.log('IncidentAPI.getIncidentTimeline called with id:', id);\n      const response = await httpClient.get<IncidentTimelineEntry[]>(`/api/incidents/${id}/timeline`);\n      console.log('IncidentAPI.getIncidentTimeline response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getIncidentTimeline error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u4E8B\u4EF6\u8BC4\u8BBA\n  static async getIncidentComments(id: number): Promise<IncidentComment[]> {\n    try {\n      console.log('IncidentAPI.getIncidentComments called with id:', id);\n      const response = await httpClient.get<IncidentComment[]>(`/api/incidents/${id}/comments`);\n      console.log('IncidentAPI.getIncidentComments response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getIncidentComments error:', error);\n      throw error;\n    }\n  }\n\n  // \u6DFB\u52A0\u4E8B\u4EF6\u8BC4\u8BBA\n  static async addIncidentComment(id: number, data: CreateCommentRequest): Promise<IncidentComment> {\n    try {\n      console.log('IncidentAPI.addIncidentComment called with id:', id, 'data:', data);\n      const response = await httpClient.post<IncidentComment>(`/api/incidents/${id}/comments`, data);\n      console.log('IncidentAPI.addIncidentComment response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.addIncidentComment error:', error);\n      throw error;\n    }\n  }\n\n  // \u6279\u91CF\u64CD\u4F5C\u4E8B\u4EF6\n  static async bulkUpdateIncidents(ids: number[], data: Partial<UpdateIncidentRequest>): Promise<void> {\n    try {\n      console.log('IncidentAPI.bulkUpdateIncidents called with ids:', ids, 'data:', data);\n      await httpClient.put('/api/incidents/bulk', { ids, ...data });\n      console.log('IncidentAPI.bulkUpdateIncidents completed');\n    } catch (error) {\n      console.error('IncidentAPI.bulkUpdateIncidents error:', error);\n      throw error;\n    }\n  }\n\n  // \u5BFC\u51FA\u4E8B\u4EF6\u6570\u636E\n  static async exportIncidents(params: ListIncidentsRequest & { format?: 'csv' | 'excel' }): Promise<Blob> {\n    try {\n      console.log('IncidentAPI.exportIncidents called with params:', params);\n      const response = await httpClient.get('/api/incidents/export', params);\n      console.log('IncidentAPI.exportIncidents completed');\n      return response as Blob;\n    } catch (error) {\n      console.error('IncidentAPI.exportIncidents error:', error);\n      throw error;\n    }\n  }\n}\n\nexport default IncidentAPI;"],
      names: ["INCIDENT_PRIORITY", "INCIDENT_SOURCE", "INCIDENT_STATUS", "INCIDENT_TYPE", "IncidentAPI", "NEW", "IN_PROGRESS", "RESOLVED", "CLOSED", "CANCELLED", "LOW", "MEDIUM", "HIGH", "CRITICAL", "EMAIL", "PHONE", "WEB", "API", "MONITORING", "CHAT", "HARDWARE", "SOFTWARE", "NETWORK", "SECURITY", "ACCESS", "OTHER", "listIncidents", "params", "console", "log", "response", "httpClient", "get", "error", "getIncident", "id", "createIncident", "data", "post", "updateIncident", "put", "deleteIncident", "delete", "assignIncident", "assigneeId", "assignee_id", "closeIncident", "resolution", "reopenIncident", "reason", "getIncidentStats", "getIncidentTimeline", "getIncidentComments", "addIncidentComment", "bulkUpdateIncidents", "ids", "exportIncidents"],
      mappings: ";;;;;;;;;;;IAYaA,iBAAiB;eAAjBA;;IAQAC,eAAe;eAAfA;;IAjBAC,eAAe;eAAfA;;IA2BAC,aAAa;eAAbA;;IA8IAC,WAAW;eAAXA;;IAsLb,OAA2B;eAA3B;;;4BAlW2B;AAGpB,MAAMF,kBAAkB;IAC7BG,KAAK;IACLC,aAAa;IACbC,UAAU;IACVC,QAAQ;IACRC,WAAW;AACb;AAGO,MAAMT,oBAAoB;IAC/BU,KAAK;IACLC,QAAQ;IACRC,MAAM;IACNC,UAAU;AACZ;AAGO,MAAMZ,kBAAkB;IAC7Ba,OAAO;IACPC,OAAO;IACPC,KAAK;IACLC,KAAK;IACLC,YAAY;IACZC,MAAM;AACR;AAGO,MAAMhB,gBAAgB;IAC3BiB,UAAU;IACVC,UAAU;IACVC,SAAS;IACTC,UAAU;IACVC,QAAQ;IACRC,OAAO;AACT;AAuIO,MAAMrB;IACX,SAAS;IACT,aAAasB,cAAcC,SAA+B,CAAC,CAAC,EAAkC;QAC5F,IAAI;YACFC,QAAQC,GAAG,CAAC,iDAAiDF;YAC7D,MAAMG,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAAwB,kBAAkBL;YAC/EC,QAAQC,GAAG,CAAC,uCAAuCC;YACnD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,oCAAoCA;YAClD,MAAMA;QACR;IACF;IAEA,WAAW;IACX,aAAaC,YAAYC,EAAU,EAAqB;QACtD,IAAI;YACFP,QAAQC,GAAG,CAAC,2CAA2CM;YACvD,MAAML,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAAW,CAAC,eAAe,EAAEG,IAAI;YACtEP,QAAQC,GAAG,CAAC,qCAAqCC;YACjD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,kCAAkCA;YAChD,MAAMA;QACR;IACF;IAEA,OAAO;IACP,aAAaG,eAAeC,IAA2B,EAAqB;QAC1E,IAAI;YACFT,QAAQC,GAAG,CAAC,gDAAgDQ;YAC5D,MAAMP,WAAW,MAAMC,sBAAU,CAACO,IAAI,CAAW,kBAAkBD;YACnET,QAAQC,GAAG,CAAC,wCAAwCC;YACpD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA,OAAO;IACP,aAAaM,eAAeJ,EAAU,EAAEE,IAA2B,EAAqB;QACtF,IAAI;YACFT,QAAQC,GAAG,CAAC,8CAA8CM,IAAI,SAASE;YACvE,MAAMP,WAAW,MAAMC,sBAAU,CAACS,GAAG,CAAW,CAAC,eAAe,EAAEL,IAAI,EAAEE;YACxET,QAAQC,GAAG,CAAC,wCAAwCC;YACpD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA,OAAO;IACP,aAAaQ,eAAeN,EAAU,EAAiB;QACrD,IAAI;YACFP,QAAQC,GAAG,CAAC,8CAA8CM;YAC1D,MAAMJ,sBAAU,CAACW,MAAM,CAAC,CAAC,eAAe,EAAEP,IAAI;YAC9CP,QAAQC,GAAG,CAAC;QACd,EAAE,OAAOI,OAAO;YACdL,QAAQK,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA,OAAO;IACP,aAAaU,eAAeR,EAAU,EAAES,UAAkB,EAAqB;QAC7E,IAAI;YACFhB,QAAQC,GAAG,CAAC,8CAA8CM,IAAI,eAAeS;YAC7E,MAAMd,WAAW,MAAMC,sBAAU,CAACS,GAAG,CAAW,CAAC,eAAe,EAAEL,GAAG,OAAO,CAAC,EAAE;gBAAEU,aAAaD;YAAW;YACzGhB,QAAQC,GAAG,CAAC,wCAAwCC;YACpD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA,OAAO;IACP,aAAaa,cAAcX,EAAU,EAAEY,UAAkB,EAAqB;QAC5E,IAAI;YACFnB,QAAQC,GAAG,CAAC,6CAA6CM,IAAI,eAAeY;YAC5E,MAAMjB,WAAW,MAAMC,sBAAU,CAACS,GAAG,CAAW,CAAC,eAAe,EAAEL,GAAG,MAAM,CAAC,EAAE;gBAAEY;YAAW;YAC3FnB,QAAQC,GAAG,CAAC,uCAAuCC;YACnD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,oCAAoCA;YAClD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAae,eAAeb,EAAU,EAAEc,MAAc,EAAqB;QACzE,IAAI;YACFrB,QAAQC,GAAG,CAAC,8CAA8CM,IAAI,WAAWc;YACzE,MAAMnB,WAAW,MAAMC,sBAAU,CAACS,GAAG,CAAW,CAAC,eAAe,EAAEL,GAAG,OAAO,CAAC,EAAE;gBAAEc;YAAO;YACxFrB,QAAQC,GAAG,CAAC,wCAAwCC;YACpD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,qCAAqCA;YACnD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAaiB,iBAAiBvB,MAAiD,EAA0B;QACvG,IAAI;YACFC,QAAQC,GAAG,CAAC,oDAAoDF;YAChE,MAAMG,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAAgB,wBAAwBL;YAC7EC,QAAQC,GAAG,CAAC,0CAA0CC;YACtD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,uCAAuCA;YACrD,MAAMA;QACR;IACF;IAEA,UAAU;IACV,aAAakB,oBAAoBhB,EAAU,EAAoC;QAC7E,IAAI;YACFP,QAAQC,GAAG,CAAC,mDAAmDM;YAC/D,MAAML,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAA0B,CAAC,eAAe,EAAEG,GAAG,SAAS,CAAC;YAC9FP,QAAQC,GAAG,CAAC,6CAA6CC;YACzD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,0CAA0CA;YACxD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAamB,oBAAoBjB,EAAU,EAA8B;QACvE,IAAI;YACFP,QAAQC,GAAG,CAAC,mDAAmDM;YAC/D,MAAML,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAAoB,CAAC,eAAe,EAAEG,GAAG,SAAS,CAAC;YACxFP,QAAQC,GAAG,CAAC,6CAA6CC;YACzD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,0CAA0CA;YACxD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAaoB,mBAAmBlB,EAAU,EAAEE,IAA0B,EAA4B;QAChG,IAAI;YACFT,QAAQC,GAAG,CAAC,kDAAkDM,IAAI,SAASE;YAC3E,MAAMP,WAAW,MAAMC,sBAAU,CAACO,IAAI,CAAkB,CAAC,eAAe,EAAEH,GAAG,SAAS,CAAC,EAAEE;YACzFT,QAAQC,GAAG,CAAC,4CAA4CC;YACxD,OAAOA;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,yCAAyCA;YACvD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAaqB,oBAAoBC,GAAa,EAAElB,IAAoC,EAAiB;QACnG,IAAI;YACFT,QAAQC,GAAG,CAAC,oDAAoD0B,KAAK,SAASlB;YAC9E,MAAMN,sBAAU,CAACS,GAAG,CAAC,uBAAuB;gBAAEe;gBAAK,GAAGlB,IAAI;YAAC;YAC3DT,QAAQC,GAAG,CAAC;QACd,EAAE,OAAOI,OAAO;YACdL,QAAQK,KAAK,CAAC,0CAA0CA;YACxD,MAAMA;QACR;IACF;IAEA,SAAS;IACT,aAAauB,gBAAgB7B,MAA2D,EAAiB;QACvG,IAAI;YACFC,QAAQC,GAAG,CAAC,mDAAmDF;YAC/D,MAAMG,WAAW,MAAMC,sBAAU,CAACC,GAAG,CAAC,yBAAyBL;YAC/DC,QAAQC,GAAG,CAAC;YACZ,OAAOC;QACT,EAAE,OAAOG,OAAO;YACdL,QAAQK,KAAK,CAAC,sCAAsCA;YACpD,MAAMA;QACR;IACF;AACF;MAEA,WAAe7B"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f1daacc0c39f4566e951f568bbc14c307c3f0be6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xwikgasbi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xwikgasbi();
cov_1xwikgasbi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1xwikgasbi().f[0]++;
  cov_1xwikgasbi().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1xwikgasbi().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1xwikgasbi().s[3]++;
_export(exports, {
  INCIDENT_PRIORITY: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[1]++;
    cov_1xwikgasbi().s[4]++;
    return INCIDENT_PRIORITY;
  },
  INCIDENT_SOURCE: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[2]++;
    cov_1xwikgasbi().s[5]++;
    return INCIDENT_SOURCE;
  },
  INCIDENT_STATUS: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[3]++;
    cov_1xwikgasbi().s[6]++;
    return INCIDENT_STATUS;
  },
  INCIDENT_TYPE: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[4]++;
    cov_1xwikgasbi().s[7]++;
    return INCIDENT_TYPE;
  },
  IncidentAPI: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[5]++;
    cov_1xwikgasbi().s[8]++;
    return IncidentAPI;
  },
  default: function () {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[6]++;
    cov_1xwikgasbi().s[9]++;
    return _default;
  }
});
const _httpclient =
/* istanbul ignore next */
(cov_1xwikgasbi().s[10]++, require("./http-client"));
const INCIDENT_STATUS =
/* istanbul ignore next */
(cov_1xwikgasbi().s[11]++, {
  NEW: 'new',
  IN_PROGRESS: 'in_progress',
  RESOLVED: 'resolved',
  CLOSED: 'closed',
  CANCELLED: 'cancelled'
});
const INCIDENT_PRIORITY =
/* istanbul ignore next */
(cov_1xwikgasbi().s[12]++, {
  LOW: 'low',
  MEDIUM: 'medium',
  HIGH: 'high',
  CRITICAL: 'critical'
});
const INCIDENT_SOURCE =
/* istanbul ignore next */
(cov_1xwikgasbi().s[13]++, {
  EMAIL: 'email',
  PHONE: 'phone',
  WEB: 'web',
  API: 'api',
  MONITORING: 'monitoring',
  CHAT: 'chat'
});
const INCIDENT_TYPE =
/* istanbul ignore next */
(cov_1xwikgasbi().s[14]++, {
  HARDWARE: 'hardware',
  SOFTWARE: 'software',
  NETWORK: 'network',
  SECURITY: 'security',
  ACCESS: 'access',
  OTHER: 'other'
});
class IncidentAPI {
  // 获取事件列表
  static async listIncidents(params =
  /* istanbul ignore next */
  (cov_1xwikgasbi().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[7]++;
    cov_1xwikgasbi().s[15]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[16]++;
      console.log('IncidentAPI.listIncidents called with params:', params);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[17]++, await _httpclient.httpClient.get('/api/incidents', params));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[18]++;
      console.log('IncidentAPI.listIncidents response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[19]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[20]++;
      console.error('IncidentAPI.listIncidents error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[21]++;
      throw error;
    }
  }
  // 获取单个事件详情
  static async getIncident(id) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[8]++;
    cov_1xwikgasbi().s[22]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[23]++;
      console.log('IncidentAPI.getIncident called with id:', id);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[24]++, await _httpclient.httpClient.get(`/api/incidents/${id}`));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[25]++;
      console.log('IncidentAPI.getIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[26]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[27]++;
      console.error('IncidentAPI.getIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[28]++;
      throw error;
    }
  }
  // 创建事件
  static async createIncident(data) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[9]++;
    cov_1xwikgasbi().s[29]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[30]++;
      console.log('IncidentAPI.createIncident called with data:', data);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[31]++, await _httpclient.httpClient.post('/api/incidents', data));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[32]++;
      console.log('IncidentAPI.createIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[33]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[34]++;
      console.error('IncidentAPI.createIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[35]++;
      throw error;
    }
  }
  // 更新事件
  static async updateIncident(id, data) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[10]++;
    cov_1xwikgasbi().s[36]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[37]++;
      console.log('IncidentAPI.updateIncident called with id:', id, 'data:', data);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[38]++, await _httpclient.httpClient.put(`/api/incidents/${id}`, data));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[39]++;
      console.log('IncidentAPI.updateIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[40]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[41]++;
      console.error('IncidentAPI.updateIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[42]++;
      throw error;
    }
  }
  // 删除事件
  static async deleteIncident(id) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[11]++;
    cov_1xwikgasbi().s[43]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[44]++;
      console.log('IncidentAPI.deleteIncident called with id:', id);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[45]++;
      await _httpclient.httpClient.delete(`/api/incidents/${id}`);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[46]++;
      console.log('IncidentAPI.deleteIncident completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[47]++;
      console.error('IncidentAPI.deleteIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[48]++;
      throw error;
    }
  }
  // 分配事件
  static async assignIncident(id, assigneeId) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[12]++;
    cov_1xwikgasbi().s[49]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[50]++;
      console.log('IncidentAPI.assignIncident called with id:', id, 'assigneeId:', assigneeId);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[51]++, await _httpclient.httpClient.put(`/api/incidents/${id}/assign`, {
        assignee_id: assigneeId
      }));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[52]++;
      console.log('IncidentAPI.assignIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[53]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[54]++;
      console.error('IncidentAPI.assignIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[55]++;
      throw error;
    }
  }
  // 关闭事件
  static async closeIncident(id, resolution) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[13]++;
    cov_1xwikgasbi().s[56]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[57]++;
      console.log('IncidentAPI.closeIncident called with id:', id, 'resolution:', resolution);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[58]++, await _httpclient.httpClient.put(`/api/incidents/${id}/close`, {
        resolution
      }));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[59]++;
      console.log('IncidentAPI.closeIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[60]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[61]++;
      console.error('IncidentAPI.closeIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[62]++;
      throw error;
    }
  }
  // 重新打开事件
  static async reopenIncident(id, reason) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[14]++;
    cov_1xwikgasbi().s[63]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[64]++;
      console.log('IncidentAPI.reopenIncident called with id:', id, 'reason:', reason);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[65]++, await _httpclient.httpClient.put(`/api/incidents/${id}/reopen`, {
        reason
      }));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[66]++;
      console.log('IncidentAPI.reopenIncident response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[67]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[68]++;
      console.error('IncidentAPI.reopenIncident error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[69]++;
      throw error;
    }
  }
  // 获取事件统计
  static async getIncidentStats(params) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[15]++;
    cov_1xwikgasbi().s[70]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[71]++;
      console.log('IncidentAPI.getIncidentStats called with params:', params);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[72]++, await _httpclient.httpClient.get('/api/incidents/stats', params));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[73]++;
      console.log('IncidentAPI.getIncidentStats response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[74]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[75]++;
      console.error('IncidentAPI.getIncidentStats error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[76]++;
      throw error;
    }
  }
  // 获取事件时间线
  static async getIncidentTimeline(id) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[16]++;
    cov_1xwikgasbi().s[77]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[78]++;
      console.log('IncidentAPI.getIncidentTimeline called with id:', id);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[79]++, await _httpclient.httpClient.get(`/api/incidents/${id}/timeline`));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[80]++;
      console.log('IncidentAPI.getIncidentTimeline response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[81]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[82]++;
      console.error('IncidentAPI.getIncidentTimeline error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[83]++;
      throw error;
    }
  }
  // 获取事件评论
  static async getIncidentComments(id) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[17]++;
    cov_1xwikgasbi().s[84]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[85]++;
      console.log('IncidentAPI.getIncidentComments called with id:', id);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[86]++, await _httpclient.httpClient.get(`/api/incidents/${id}/comments`));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[87]++;
      console.log('IncidentAPI.getIncidentComments response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[88]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[89]++;
      console.error('IncidentAPI.getIncidentComments error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[90]++;
      throw error;
    }
  }
  // 添加事件评论
  static async addIncidentComment(id, data) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[18]++;
    cov_1xwikgasbi().s[91]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[92]++;
      console.log('IncidentAPI.addIncidentComment called with id:', id, 'data:', data);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[93]++, await _httpclient.httpClient.post(`/api/incidents/${id}/comments`, data));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[94]++;
      console.log('IncidentAPI.addIncidentComment response:', response);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[95]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[96]++;
      console.error('IncidentAPI.addIncidentComment error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[97]++;
      throw error;
    }
  }
  // 批量操作事件
  static async bulkUpdateIncidents(ids, data) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[19]++;
    cov_1xwikgasbi().s[98]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[99]++;
      console.log('IncidentAPI.bulkUpdateIncidents called with ids:', ids, 'data:', data);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[100]++;
      await _httpclient.httpClient.put('/api/incidents/bulk', {
        ids,
        ...data
      });
      /* istanbul ignore next */
      cov_1xwikgasbi().s[101]++;
      console.log('IncidentAPI.bulkUpdateIncidents completed');
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[102]++;
      console.error('IncidentAPI.bulkUpdateIncidents error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[103]++;
      throw error;
    }
  }
  // 导出事件数据
  static async exportIncidents(params) {
    /* istanbul ignore next */
    cov_1xwikgasbi().f[20]++;
    cov_1xwikgasbi().s[104]++;
    try {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[105]++;
      console.log('IncidentAPI.exportIncidents called with params:', params);
      const response =
      /* istanbul ignore next */
      (cov_1xwikgasbi().s[106]++, await _httpclient.httpClient.get('/api/incidents/export', params));
      /* istanbul ignore next */
      cov_1xwikgasbi().s[107]++;
      console.log('IncidentAPI.exportIncidents completed');
      /* istanbul ignore next */
      cov_1xwikgasbi().s[108]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1xwikgasbi().s[109]++;
      console.error('IncidentAPI.exportIncidents error:', error);
      /* istanbul ignore next */
      cov_1xwikgasbi().s[110]++;
      throw error;
    }
  }
}
const _default =
/* istanbul ignore next */
(cov_1xwikgasbi().s[111]++, IncidentAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,