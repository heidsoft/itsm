{"version":3,"names":["cov_2qrbdmrzmw","actualCoverage","s","SimpleTable","f","Table","dataSource","columns","rowKey","b","loading","emptyText","size","bordered","striped","rowSelection","pagination","scroll","className","onRow","sortConfig","setSortConfig","_react","useState","selectedRowKeys","setSelectedRowKeys","getRowKey","record","index","String","handleSort","column","sortable","newDirection","key","direction","handleRowSelect","recordKey","selected","newSelectedKeys","filter","onChange","selectedRecords","includes","handleSelectAll","map","processedData","useMemo","result","find","col","sorter","sort","a","sortResult","dataIndex","aValue","bValue","renderCellContent","value","undefined","render","sizeClasses","sm","md","lg","cellPadding","_jsxruntime","jsx","jsxs","_utils","cn","x","y","style","maxHeight","type","checked","length","e","target","align","width","minWidth","onClick","title","_lucidereact","ChevronUp","ChevronDown","filterable","Filter","colSpan","isSelected","rowProps","disabled","getCheckboxProps","total","current","pageSize","Math","ceil","props"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/components/ui/Table.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { ChevronUp, ChevronDown, Filter } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * 表格列定义\n */\nexport interface TableColumn<T = Record<string, unknown>> {\n  /** 列键 */\n  key: string;\n  /** 列标题 */\n  title: string;\n  /** 数据索引 */\n  dataIndex?: string;\n  /** 列宽 */\n  width?: number | string;\n  /** 最小宽度 */\n  minWidth?: number;\n  /** 是否可排序 */\n  sortable?: boolean;\n  /** 是否可筛选 */\n  filterable?: boolean;\n  /** 筛选选项 */\n  filterOptions?: Array<{ label: string; value: unknown }>;\n  /** 对齐方式 */\n  align?: 'left' | 'center' | 'right';\n  /** 是否固定 */\n  fixed?: 'left' | 'right';\n  /** 自定义渲染 */\n  render?: (value: unknown, record: T, index: number) => React.ReactNode;\n  /** 排序函数 */\n  sorter?: (a: T, b: T) => number;\n  /** 筛选函数 */\n  onFilter?: (value: unknown, record: T) => boolean;\n}\n\n/**\n * 表格属性\n */\nexport interface TableProps<T = Record<string, unknown>> {\n  /** 数据源 */\n  dataSource: T[];\n  /** 列定义 */\n  columns: TableColumn<T>[];\n  /** 行键 */\n  rowKey?: string | ((record: T) => string);\n  /** 是否加载中 */\n  loading?: boolean;\n  /** 空数据提示 */\n  emptyText?: string;\n  /** 表格尺寸 */\n  size?: 'sm' | 'md' | 'lg';\n  /** 是否显示边框 */\n  bordered?: boolean;\n  /** 是否显示斑马纹 */\n  striped?: boolean;\n  /** 是否可选择行 */\n  rowSelection?: {\n    /** 选择类型 */\n    type?: 'checkbox' | 'radio';\n    /** 选中的行键 */\n    selectedRowKeys?: (string | number)[];\n    /** 选择变化回调 */\n    onChange?: (selectedRowKeys: (string | number)[], selectedRows: T[]) => void;\n    /** 获取选择框属性 */\n    getCheckboxProps?: (record: T) => { disabled?: boolean };\n  };\n  /** 分页配置 */\n  pagination?: {\n    /** 当前页 */\n    current?: number;\n    /** 每页条数 */\n    pageSize?: number;\n    /** 总条数 */\n    total?: number;\n    /** 显示快速跳转 */\n    showQuickJumper?: boolean;\n    /** 显示每页条数选择器 */\n    showSizeChanger?: boolean;\n    /** 页码变化回调 */\n    onChange?: (page: number, pageSize: number) => void;\n  } | false;\n  /** 滚动配置 */\n  scroll?: {\n    x?: number | string;\n    y?: number | string;\n  };\n  /** 表格类名 */\n  className?: string;\n  /** 行点击事件 */\n  onRow?: (record: T, index: number) => {\n    onClick?: (event: React.MouseEvent) => void;\n    onDoubleClick?: (event: React.MouseEvent) => void;\n    onContextMenu?: (event: React.MouseEvent) => void;\n  };\n}\n\n/**\n * 通用表格组件\n */\nexport const Table = <T extends Record<string, unknown>>({\n  dataSource,\n  columns,\n  rowKey = 'id',\n  loading = false,\n  emptyText = '暂无数据',\n  size = 'md',\n  bordered = false,\n  striped = false,\n  rowSelection,\n  pagination,\n  scroll,\n  className,\n  onRow,\n}: TableProps<T>) => {\n  const [sortConfig, setSortConfig] = useState<{\n    key: string;\n    direction: 'asc' | 'desc';\n  } | null>(null);\n  \n  const [selectedRowKeys, setSelectedRowKeys] = useState<(string | number)[]>(\n    rowSelection?.selectedRowKeys || []\n  );\n\n  // 获取行键\n  const getRowKey = (record: T, index: number): string => {\n    if (typeof rowKey === 'function') {\n      return rowKey(record);\n    }\n    return String(record[rowKey as keyof T] || index);\n  };\n\n  // 处理排序\n  const handleSort = (column: TableColumn<T>) => {\n    if (!column.sortable) return;\n\n    const newDirection = \n      sortConfig?.key === column.key && sortConfig.direction === 'asc' \n        ? 'desc' \n        : 'asc';\n\n    setSortConfig({\n      key: column.key,\n      direction: newDirection,\n    });\n  };\n\n\n\n  // 处理行选择\n  const handleRowSelect = (recordKey: string | number, selected: boolean) => {\n    const newSelectedKeys = selected\n      ? [...selectedRowKeys, recordKey]\n      : selectedRowKeys.filter(key => key !== recordKey);\n\n    setSelectedRowKeys(newSelectedKeys);\n    \n    if (rowSelection?.onChange) {\n      const selectedRecords = dataSource.filter(record => \n        newSelectedKeys.includes(getRowKey(record, 0))\n      );\n      rowSelection.onChange(newSelectedKeys, selectedRecords);\n    }\n  };\n\n  // 全选处理\n  const handleSelectAll = (selected: boolean) => {\n    const newSelectedKeys = selected\n      ? dataSource.map((record, index) => getRowKey(record, index))\n      : [];\n\n    setSelectedRowKeys(newSelectedKeys);\n    \n    if (rowSelection?.onChange) {\n      const selectedRecords = selected ? dataSource : [];\n      rowSelection.onChange(newSelectedKeys, selectedRecords);\n    }\n  };\n\n  // 处理数据排序和筛选\n  const processedData = useMemo(() => {\n    const result = [...dataSource];\n\n    // 应用排序\n    if (sortConfig) {\n      const column = columns.find(col => col.key === sortConfig.key);\n      if (column?.sorter) {\n        result.sort((a, b) => {\n          const sortResult = column.sorter!(a, b);\n          return sortConfig.direction === 'desc' ? -sortResult : sortResult;\n        });\n      } else if (column?.dataIndex) {\n        result.sort((a, b) => {\n          const aValue = a[column.dataIndex as keyof T];\n          const bValue = b[column.dataIndex as keyof T];\n          \n          if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;\n          if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;\n          return 0;\n        });\n      }\n    }\n\n    return result;\n  }, [dataSource, columns, sortConfig]);\n\n  // 渲染单元格内容\n  const renderCellContent = (column: TableColumn<T>, record: T, index: number) => {\n    const value = column.dataIndex ? record[column.dataIndex as keyof T] : undefined;\n    \n    if (column.render) {\n      return column.render(value, record, index);\n    }\n    \n    return String(value || '');\n  };\n\n  // 表格尺寸样式\n  const sizeClasses = {\n    sm: 'text-sm',\n    md: 'text-base',\n    lg: 'text-lg',\n  };\n\n  // 单元格内边距\n  const cellPadding = {\n    sm: 'px-2 py-1',\n    md: 'px-3 py-2',\n    lg: 'px-4 py-3',\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('overflow-hidden', className)}>\n      <div className={cn(\n        'overflow-auto',\n        scroll?.x && 'overflow-x-auto',\n        scroll?.y && 'overflow-y-auto'\n      )} style={{ maxHeight: scroll?.y }}>\n        <table className={cn(\n          'w-full table-auto',\n          sizeClasses[size],\n          bordered && 'border border-gray-200',\n          'bg-white'\n        )}>\n          <thead className=\"bg-gray-50\">\n            <tr>\n              {rowSelection && (\n                <th className={cn(\n                  'text-left font-medium text-gray-900',\n                  cellPadding[size],\n                  bordered && 'border-b border-gray-200'\n                )}>\n                  {rowSelection.type !== 'radio' && (\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedRowKeys.length === dataSource.length && dataSource.length > 0}\n                      onChange={(e) => handleSelectAll(e.target.checked)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                  )}\n                </th>\n              )}\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  className={cn(\n                    'text-left font-medium text-gray-900',\n                    cellPadding[size],\n                    bordered && 'border-b border-gray-200',\n                    column.align === 'center' && 'text-center',\n                    column.align === 'right' && 'text-right',\n                    column.sortable && 'cursor-pointer hover:bg-gray-100'\n                  )}\n                  style={{ \n                    width: column.width,\n                    minWidth: column.minWidth \n                  }}\n                  onClick={() => handleSort(column)}\n                >\n                  <div className=\"flex items-center gap-1\">\n                    <span>{column.title}</span>\n                    {column.sortable && (\n                      <div className=\"flex flex-col\">\n                        <ChevronUp \n                          className={cn(\n                            'h-3 w-3',\n                            sortConfig?.key === column.key && sortConfig.direction === 'asc'\n                              ? 'text-blue-600'\n                              : 'text-gray-400'\n                          )}\n                        />\n                        <ChevronDown \n                          className={cn(\n                            'h-3 w-3 -mt-1',\n                            sortConfig?.key === column.key && sortConfig.direction === 'desc'\n                              ? 'text-blue-600'\n                              : 'text-gray-400'\n                          )}\n                        />\n                      </div>\n                    )}\n                    {column.filterable && (\n                      <Filter className=\"h-3 w-3 text-gray-400\" />\n                    )}\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {processedData.length === 0 ? (\n              <tr>\n                <td \n                  colSpan={columns.length + (rowSelection ? 1 : 0)}\n                  className={cn(\n                    'text-center text-gray-500 py-8',\n                    cellPadding[size]\n                  )}\n                >\n                  {emptyText}\n                </td>\n              </tr>\n            ) : (\n              processedData.map((record, index) => {\n                const recordKey = getRowKey(record, index);\n                const isSelected = selectedRowKeys.includes(recordKey);\n                const rowProps = onRow?.(record, index) || {};\n\n                return (\n                  <tr\n                    key={recordKey}\n                    className={cn(\n                      'hover:bg-gray-50',\n                      striped && index % 2 === 1 && 'bg-gray-25',\n                      isSelected && 'bg-blue-50',\n                      bordered && 'border-b border-gray-200'\n                    )}\n                    {...rowProps}\n                  >\n                    {rowSelection && (\n                      <td className={cn(cellPadding[size])}>\n                        <input\n                          type={rowSelection.type || 'checkbox'}\n                          checked={isSelected}\n                          onChange={(e) => handleRowSelect(recordKey, e.target.checked)}\n                          disabled={rowSelection.getCheckboxProps?.(record)?.disabled}\n                          className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                        />\n                      </td>\n                    )}\n                    {columns.map((column) => (\n                      <td\n                        key={column.key}\n                        className={cn(\n                          cellPadding[size],\n                          column.align === 'center' && 'text-center',\n                          column.align === 'right' && 'text-right'\n                        )}\n                        style={{ \n                          width: column.width,\n                          minWidth: column.minWidth \n                        }}\n                      >\n                        {renderCellContent(column, record, index)}\n                      </td>\n                    ))}\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {pagination && pagination !== false && (\n        <div className=\"flex items-center justify-between px-4 py-3 bg-white border-t border-gray-200\">\n          <div className=\"flex items-center text-sm text-gray-700\">\n            共 {pagination.total || 0} 条记录\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <button\n              disabled={pagination.current === 1}\n              onClick={() => pagination.onChange?.(pagination.current! - 1, pagination.pageSize!)}\n              className=\"px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              上一页\n            </button>\n            <span className=\"px-3 py-1 text-sm\">\n              第 {pagination.current} 页\n            </span>\n            <button\n              disabled={pagination.current === Math.ceil((pagination.total || 0) / (pagination.pageSize || 10))}\n              onClick={() => pagination.onChange?.(pagination.current! + 1, pagination.pageSize!)}\n              className=\"px-3 py-1 text-sm border border-gray-300 rounded hover:bg-gray-50 disabled:cursor-not-allowed\"\n            >\n              下一页\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * 简单表格组件（无分页和行选择）\n */\nexport const SimpleTable = <T extends Record<string, unknown>>(\n  props: Omit<TableProps<T>, 'pagination' | 'rowSelection'>\n) => {\n  return <Table {...props} pagination={false} />;\n};"],"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","ignoreList":[]}