bfb7ed1305154b7d7051988f0ef6625b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _TicketFilters = /*#__PURE__*/ _interop_require_default(require("../TicketFilters"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('TicketFilters 组件', ()=>{
    const setup = (initial)=>{
        const onChange = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TicketFilters.default, {
            value: {
                status: 'all',
                priority: 'all',
                keyword: '',
                dateStart: '',
                dateEnd: '',
                sortBy: 'createdAt_desc',
                ...initial
            },
            onChange: onChange
        }));
        return {
            onChange
        };
    };
    it('应渲染所有过滤控件并展示默认值', ()=>{
        setup();
        expect(_react1.screen.getByTestId('filter-status-select')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-priority-select')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-keyword-input')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-date-start')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-date-end')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-sort-select')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-apply-btn')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('filter-reset-btn')).toBeInTheDocument();
    });
    it('状态过滤变化时应调用 onChange', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup();
        await user.selectOptions(_react1.screen.getByTestId('filter-status-select'), 'open');
        expect(onChange).toHaveBeenLastCalledWith(expect.objectContaining({
            status: 'open'
        }));
    });
    it('优先级过滤变化时应调用 onChange', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup();
        await user.selectOptions(_react1.screen.getByTestId('filter-priority-select'), 'p1');
        expect(onChange).toHaveBeenLastCalledWith(expect.objectContaining({
            priority: 'p1'
        }));
    });
    it('关键字输入后点击应用应调用 onChange，包含 keyword', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup();
        const input = _react1.screen.getByTestId('filter-keyword-input');
        await user.type(input, '数据库');
        await user.click(_react1.screen.getByTestId('filter-apply-btn'));
        expect(onChange).toHaveBeenLastCalledWith(expect.objectContaining({
            keyword: '数据库'
        }));
    });
    it('设置日期范围后点击应用应包含 dateStart 与 dateEnd', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup();
        await user.type(_react1.screen.getByTestId('filter-date-start'), '2025-01-01');
        await user.type(_react1.screen.getByTestId('filter-date-end'), '2025-01-31');
        await user.click(_react1.screen.getByTestId('filter-apply-btn'));
        expect(onChange).toHaveBeenLastCalledWith(expect.objectContaining({
            dateStart: '2025-01-01',
            dateEnd: '2025-01-31'
        }));
    });
    it('排序变化时应调用 onChange', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup();
        await user.selectOptions(_react1.screen.getByTestId('filter-sort-select'), 'priority_desc');
        expect(onChange).toHaveBeenLastCalledWith(expect.objectContaining({
            sortBy: 'priority_desc'
        }));
    });
    it('重置按钮应将过滤条件恢复默认并调用 onChange', async ()=>{
        const user = _userevent.default.setup();
        const { onChange } = setup({
            status: 'open',
            priority: 'p2',
            keyword: 'x'
        });
        await user.click(_react1.screen.getByTestId('filter-reset-btn'));
        expect(onChange).toHaveBeenLastCalledWith({
            status: 'all',
            priority: 'all',
            keyword: '',
            dateStart: '',
            dateEnd: '',
            sortBy: 'createdAt_desc'
        });
    });
});

//# sourceMappingURL=data:application/json;base64,