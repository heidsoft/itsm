{"version":3,"names":["UserAPI","listUsers","params","cov_1ks86v4pp9","b","f","s","_httpclient","httpClient","get","getUser","id","createUser","data","post","updateUser","put","deleteUser","delete","batchDeleteUsers","ids","enableUser","disableUser","reason","resetPassword","newPassword","new_password","updateUserRoles","roleIds","role_ids","getUserPermissions","getUserActivities","getUserSessions","terminateUserSession","sessionId","getUserPreferences","updateUserPreferences","preferences","getUserStats","importUsers","exportUsers","response","Blob","type","searchUsers","query","limit","q","checkUsernameAvailability","username","checkEmailAvailability","email"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/api/user-api.ts"],"sourcesContent":["import { httpClient } from '../../app/lib/http-client';\nimport { \n  User, \n  CreateUserRequest, \n  UpdateUserRequest, \n  UserFilters, \n  UserListResponse,\n  UserStats,\n  UserActivity,\n  UserSession,\n  Permission,\n  UserPreferences,\n  UserImportRequest,\n  UserExportRequest\n} from '../../types/user';\n\n/**\n * 用户API客户端\n * 提供用户管理相关的API调用方法\n */\nexport class UserAPI {\n  /**\n   * 获取用户列表\n   * @param params 查询参数\n   * @returns 用户列表响应\n   */\n  static async listUsers(params: UserFilters = {}): Promise<UserListResponse> {\n    return httpClient.get<UserListResponse>('/api/v1/users', params as Record<string, unknown>);\n  }\n\n  /**\n   * 获取单个用户详情\n   * @param id 用户ID\n   * @returns 用户详情响应\n   */\n  static async getUser(id: number): Promise<{ user: User }> {\n    return httpClient.get<{ user: User }>(`/api/v1/users/${id}`);\n  }\n\n  /**\n   * 创建新用户\n   * @param data 用户创建数据\n   * @returns 用户响应\n   */\n  static async createUser(data: CreateUserRequest): Promise<{ user: User }> {\n    return httpClient.post<{ user: User }>('/api/v1/users', data);\n  }\n\n  /**\n   * 更新用户信息\n   * @param id 用户ID\n   * @param data 用户更新数据\n   * @returns 用户响应\n   */\n  static async updateUser(id: number, data: UpdateUserRequest): Promise<{ user: User }> {\n    return httpClient.put<{ user: User }>(`/api/v1/users/${id}`, data);\n  }\n\n  /**\n   * 删除用户\n   * @param id 用户ID\n   */\n  static async deleteUser(id: number): Promise<void> {\n    return httpClient.delete(`/api/v1/users/${id}`);\n  }\n\n  /**\n   * 批量删除用户\n   * @param ids 用户ID数组\n   */\n  static async batchDeleteUsers(ids: number[]): Promise<void> {\n    return httpClient.post('/api/v1/users/batch-delete', { ids });\n  }\n\n  /**\n   * 启用用户\n   * @param id 用户ID\n   * @returns 用户响应\n   */\n  static async enableUser(id: number): Promise<{ user: User }> {\n    return httpClient.post<{ user: User }>(`/api/v1/users/${id}/enable`);\n  }\n\n  /**\n   * 禁用用户\n   * @param id 用户ID\n   * @param reason 禁用原因\n   * @returns 用户响应\n   */\n  static async disableUser(id: number, reason?: string): Promise<{ user: User }> {\n    return httpClient.post<{ user: User }>(`/api/v1/users/${id}/disable`, { reason });\n  }\n\n  /**\n   * 重置用户密码\n   * @param id 用户ID\n   * @param newPassword 新密码\n   * @returns 用户响应\n   */\n  static async resetPassword(id: number, newPassword: string): Promise<{ user: User }> {\n    return httpClient.post<{ user: User }>(`/api/v1/users/${id}/reset-password`, { \n      new_password: newPassword \n    });\n  }\n\n  /**\n   * 更新用户角色\n   * @param id 用户ID\n   * @param roleIds 角色ID数组\n   * @returns 用户响应\n   */\n  static async updateUserRoles(id: number, roleIds: number[]): Promise<{ user: User }> {\n    return httpClient.post<{ user: User }>(`/api/v1/users/${id}/roles`, { role_ids: roleIds });\n  }\n\n  /**\n   * 获取用户权限\n   * @param id 用户ID\n   * @returns 用户权限列表\n   */\n  static async getUserPermissions(id: number): Promise<Permission[]> {\n    return httpClient.get<Permission[]>(`/api/v1/users/${id}/permissions`);\n  }\n\n  /**\n   * 获取用户活动记录\n   * @param id 用户ID\n   * @param params 查询参数\n   * @returns 用户活动列表\n   */\n  static async getUserActivities(id: number, params: { \n    page?: number; \n    page_size?: number; \n    activity_type?: string;\n    date_from?: string;\n    date_to?: string;\n  } = {}): Promise<{ activities: UserActivity[]; total: number }> {\n    return httpClient.get<{ activities: UserActivity[]; total: number }>(\n      `/api/v1/users/${id}/activities`, \n      params as Record<string, unknown>\n    );\n  }\n\n  /**\n   * 获取用户会话信息\n   * @param id 用户ID\n   * @returns 用户会话列表\n   */\n  static async getUserSessions(id: number): Promise<UserSession[]> {\n    return httpClient.get<UserSession[]>(`/api/v1/users/${id}/sessions`);\n  }\n\n  /**\n   * 终止用户会话\n   * @param id 用户ID\n   * @param sessionId 会话ID\n   */\n  static async terminateUserSession(id: number, sessionId: string): Promise<void> {\n    return httpClient.delete(`/api/v1/users/${id}/sessions/${sessionId}`);\n  }\n\n  /**\n   * 获取用户偏好设置\n   * @param id 用户ID\n   * @returns 用户偏好设置\n   */\n  static async getUserPreferences(id: number): Promise<UserPreferences> {\n    return httpClient.get<UserPreferences>(`/api/v1/users/${id}/preferences`);\n  }\n\n  /**\n   * 更新用户偏好设置\n   * @param id 用户ID\n   * @param preferences 偏好设置\n   * @returns 用户偏好设置\n   */\n  static async updateUserPreferences(id: number, preferences: Partial<UserPreferences>): Promise<UserPreferences> {\n    return httpClient.put<UserPreferences>(`/api/v1/users/${id}/preferences`, preferences);\n  }\n\n  /**\n   * 获取用户统计信息\n   * @returns 用户统计数据\n   */\n  static async getUserStats(): Promise<UserStats> {\n    return httpClient.get<UserStats>('/api/v1/users/stats');\n  }\n\n  /**\n   * 导入用户\n   * @param data 导入数据\n   * @returns 导入结果\n   */\n  static async importUsers(data: UserImportRequest): Promise<{\n    success_count: number;\n    error_count: number;\n    errors: Array<{ row: number; message: string }>;\n  }> {\n    return httpClient.post('/api/v1/users/import', data);\n  }\n\n  /**\n   * 导出用户\n   * @param params 导出参数\n   * @returns 导出文件Blob\n   */\n  static async exportUsers(params: UserExportRequest): Promise<Blob> {\n    const response = await httpClient.get<ArrayBuffer>('/api/v1/users/export', params as unknown as Record<string, unknown>);\n    return new Blob([response], { type: 'application/octet-stream' });\n  }\n\n  /**\n   * 搜索用户\n   * @param query 搜索关键词\n   * @param limit 结果限制数量\n   * @returns 用户列表\n   */\n  static async searchUsers(query: string, limit: number = 10): Promise<User[]> {\n    return httpClient.get<User[]>('/api/v1/users/search', { q: query, limit });\n  }\n\n  /**\n   * 验证用户名是否可用\n   * @param username 用户名\n   * @returns 是否可用\n   */\n  static async checkUsernameAvailability(username: string): Promise<{ available: boolean }> {\n    return httpClient.get<{ available: boolean }>('/api/v1/users/check-username', { username });\n  }\n\n  /**\n   * 验证邮箱是否可用\n   * @param email 邮箱\n   * @returns 是否可用\n   */\n  static async checkEmailAvailability(email: string): Promise<{ available: boolean }> {\n    return httpClient.get<{ available: boolean }>('/api/v1/users/check-email', { email });\n  }\n}"],"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","ignoreList":[]}