{"version":3,"names":["TicketApi","cov_2a47s5q75x","f","s","default","_default","getTickets","params","_httpclient","httpClient","get","createTicket","data","post","getTicket","id","updateTicketStatus","status","put","updateTicket","patch","deleteTicket","delete","approveTicket","addComment","content","assignTicket","assigneeId","assignee_id","escalateTicket","reason","resolveTicket","resolution","closeTicket","feedback","searchTickets","query","q","getOverdueTickets","getTicketsByAssignee","getTicketActivity","getTicketComments","addTicketComment","getTicketAttachments","uploadTicketAttachment","file","formData","FormData","append","deleteTicketAttachment","ticketId","attachmentId","getTicketWorkflow","updateWorkflowStep","stepId","getTicketSLA","addTicketTags","tags","removeTicketTags","request","method","url","getTicketHistory","batchDeleteTickets","ticketIds","ticket_ids","getTicketStats","exportTickets","response","responseType","batchUpdateTickets","action"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/ticket-api.ts"],"sourcesContent":["import { httpClient } from './http-client';\nimport {\n  Ticket,\n  TicketListResponse,\n  CreateTicketRequest,\n  GetTicketsParams\n} from './api-config';\n\nexport class TicketApi {\n  // Get ticket list\n  static async getTickets(params?: GetTicketsParams & { [key: string]: unknown }): Promise<TicketListResponse> {\n    return httpClient.get<TicketListResponse>('/api/v1/tickets', params);\n  }\n\n  // Create ticket\n  static async createTicket(data: CreateTicketRequest): Promise<Ticket> {\n    return httpClient.post<Ticket>('/api/v1/tickets', data);\n  }\n\n  // Get ticket details\n  static async getTicket(id: number): Promise<Ticket> {\n    return httpClient.get<Ticket>(`/api/v1/tickets/${id}`);\n  }\n\n  // Update ticket status\n  static async updateTicketStatus(id: number, status: string): Promise<Ticket> {\n    return httpClient.put<Ticket>(`/api/v1/tickets/${id}/status`, { status });\n  }\n\n  // Update ticket information\n  static async updateTicket(id: number, data: Partial<Ticket>): Promise<Ticket> {\n    return httpClient.patch<Ticket>(`/api/v1/tickets/${id}`, data);\n  }\n\n  // Delete ticket\n  static async deleteTicket(id: number): Promise<void> {\n    return httpClient.delete(`/api/v1/tickets/${id}`);\n  }\n\n  // Approve ticket\n  static async approveTicket(id: number, data: {\n    action: 'approve' | 'reject';\n    comment: string;\n    step_name: string;\n  }): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/approve`, data);\n  }\n\n  // Add comment\n  static async addComment(id: number, content: string): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/comment`, { content });\n  }\n\n  // Assign ticket\n  static async assignTicket(id: number, assigneeId: number): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/assign`, { assignee_id: assigneeId });\n  }\n\n  // Escalate ticket\n  static async escalateTicket(id: number, reason: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/escalate`, { reason });\n  }\n\n  // Resolve ticket\n  static async resolveTicket(id: number, resolution: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/resolve`, { resolution });\n  }\n\n  // Close ticket\n  static async closeTicket(id: number, feedback?: string): Promise<Ticket> {\n    return httpClient.post<Ticket>(`/api/v1/tickets/${id}/close`, { feedback });\n  }\n\n  // Search tickets\n  static async searchTickets(query: string): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>('/api/v1/tickets/search', { q: query });\n  }\n\n  // Get overdue tickets\n  static async getOverdueTickets(): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>('/api/v1/tickets/overdue');\n  }\n\n  // Get tickets by assignee\n  static async getTicketsByAssignee(assigneeId: number): Promise<Ticket[]> {\n    return httpClient.get<Ticket[]>(`/api/v1/tickets/assignee/${assigneeId}`);\n  }\n\n  // Get ticket activity log\n  static async getTicketActivity(id: number): Promise<Array<{\n    action: string;\n    timestamp: string;\n    user_id: number;\n    details: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/activity`);\n  }\n\n  // Get ticket comments\n  static async getTicketComments(id: number): Promise<Array<{\n    id: number;\n    content: string;\n    type: string;\n    created_by: number;\n    created_at: string;\n    author?: {\n      id: number;\n      name: string;\n      username: string;\n    };\n    is_internal: boolean;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/comments`);\n  }\n\n  // Add ticket comment\n  static async addTicketComment(id: number, data: {\n    content: string;\n    type: 'comment' | 'work_note';\n    is_internal?: boolean;\n  }): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/comments`, data);\n  }\n\n  // Get ticket attachments\n  static async getTicketAttachments(id: number): Promise<Array<{\n    id: number;\n    filename: string;\n    original_name: string;\n    file_size: number;\n    mime_type: string;\n    url: string;\n    uploaded_by: number;\n    uploaded_at: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/attachments`);\n  }\n\n  // Upload ticket attachment\n  static async uploadTicketAttachment(id: number, file: File): Promise<unknown> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return httpClient.post(`/api/v1/tickets/${id}/attachments`, formData);\n  }\n\n  // Delete ticket attachment\n  static async deleteTicketAttachment(ticketId: number, attachmentId: number): Promise<void> {\n    return httpClient.delete(`/api/v1/tickets/${ticketId}/attachments/${attachmentId}`);\n  }\n\n  // Get ticket workflow\n  static async getTicketWorkflow(id: number): Promise<Array<{\n    id: number;\n    step_name: string;\n    step_order: number;\n    status: string;\n    assignee_id?: number;\n    assignee?: {\n      id: number;\n      name: string;\n    };\n    started_at?: string;\n    completed_at?: string;\n    comments?: string;\n    required_approval: boolean;\n    approval_status?: string;\n    approval_comments?: string;\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/workflow`);\n  }\n\n  // Update workflow step\n  static async updateWorkflowStep(ticketId: number, stepId: number, data: {\n    status: string;\n    comments?: string;\n    assignee_id?: number;\n  }): Promise<unknown> {\n    return httpClient.put(`/api/v1/tickets/${ticketId}/workflow/${stepId}`, data);\n  }\n\n  // Get ticket SLA\n  static async getTicketSLA(id: number): Promise<{\n    sla_id: number;\n    sla_name: string;\n    response_time: number;\n    resolution_time: number;\n    start_time: string;\n    due_time: string;\n    breach_time?: string;\n    status: string;\n  }> {\n    return httpClient.get(`/api/v1/tickets/${id}/sla`);\n  }\n\n  // Add ticket tags\n  static async addTicketTags(id: number, tags: string[]): Promise<unknown> {\n    return httpClient.post(`/api/v1/tickets/${id}/tags`, { tags });\n  }\n\n  // Remove ticket tags\n  static async removeTicketTags(id: number, tags: string[]): Promise<unknown> {\n    return httpClient.request({\n      method: 'DELETE',\n      url: `/api/v1/tickets/${id}/tags`,\n      data: { tags }\n    });\n  }\n\n  // Get ticket history\n  static async getTicketHistory(id: number): Promise<Array<{\n    id: number;\n    field_name: string;\n    old_value: string;\n    new_value: string;\n    changed_by: number;\n    changed_at: string;\n    change_reason?: string;\n    user?: {\n      id: number;\n      name: string;\n    };\n  }>> {\n    return httpClient.get(`/api/v1/tickets/${id}/history`);\n  }\n\n  // Batch delete tickets\n  static async batchDeleteTickets(ticketIds: number[]): Promise<void> {\n    return httpClient.request({\n      method: 'DELETE',\n      url: '/api/v1/tickets/batch',\n      data: { ticket_ids: ticketIds }\n    });\n  }\n\n  // Get ticket statistics\n  static async getTicketStats(): Promise<{\n    total: number;\n    open: number;\n    in_progress: number;\n    resolved: number;\n    high_priority: number;\n    overdue: number;\n  }> {\n    return httpClient.get('/api/v1/tickets/stats');\n  }\n\n  // Export tickets\n  static async exportTickets(params: {\n    format: 'excel' | 'csv' | 'pdf';\n    filters?: Record<string, unknown>;\n  }): Promise<Blob> {\n    const response = await httpClient.request({\n      method: 'GET',\n      url: '/api/v1/tickets/export',\n      params,\n      responseType: 'blob'\n    });\n    return response as Blob;\n  }\n\n  // Batch update tickets\n  static async batchUpdateTickets(ticketIds: number[], action: string, data?: Record<string, unknown>): Promise<void> {\n    return httpClient.put('/api/v1/tickets/batch', {\n      ticket_ids: ticketIds,\n      action,\n      data\n    });\n  }\n}\n\nexport default TicketApi;"],"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","ignoreList":[]}