{"version":3,"names":["contentSecurity","cov_2f108b7w4f","f","s","csrfProtection","encryption","inputSanitization","networkSecurity","passwordSecurity","security","securityConfig","securityLogger","sessionSecurity","xssProtection","escapeHtml","text","map","replace","unescapeHtml","stripHtml","html","safeInnerHTML","element","innerHTML","generateToken","array","Uint8Array","crypto","getRandomValues","Array","from","byte","toString","padStart","join","validateToken","token","expectedToken","b","getTokenFromMeta","metaTag","document","querySelector","getAttribute","sanitizeInput","input","trim","substring","isValidEmail","email","emailRegex","test","length","isValidUrl","url","urlObj","URL","includes","protocol","isValidFileType","fileName","allowedTypes","extension","split","pop","toLowerCase","isValidFileSize","fileSize","maxSizeInMB","maxSizeInBytes","checkPasswordStrength","password","feedback","score","push","commonPasswords","isStrong","generateRandomPassword","charset","i","randomIndex","Math","floor","random","isSessionExpired","expirationTime","Date","now","generateSessionId","secureStorage","setItem","key","value","expirationMinutes","item","timestamp","expiration","localStorage","JSON","stringify","getItem","itemStr","parse","removeItem","clear","validateContentType","contentType","some","type","containsMaliciousScript","content","maliciousPatterns","pattern","sanitizeContent","isHttps","window","location","validateOrigin","origin","allowedOrigins","getSecureHeaders","csrfToken","headers","base64Encode","btoa","unescape","encodeURIComponent","base64Decode","encodedText","decodeURIComponent","escape","atob","obfuscate","result","textChar","charCodeAt","keyChar","String","fromCharCode","deobfuscate","obfuscatedText","decodedText","defaults","maxFileSize","allowedFileTypes","sessionTimeout","maxLoginAttempts","passwordMinLength","csrfTokenExpiry","get","set","logSecurityEvent","event","details","logEntry","toISOString","userAgent","navigator","href","process","env","NODE_ENV","console","warn","logLoginAttempt","success","username","logSuspiciousActivity","activity","xss","csrf","session","network","config","logger"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/security.ts"],"sourcesContent":["// 安全工具库\n\n// XSS防护\nexport const xssProtection = {\n  // HTML转义\n  escapeHtml: (text: string): string => {\n    const map: Record<string, string> = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n    };\n    return text.replace(/[&<>\"'\\/]/g, (s) => map[s]);\n  },\n\n  // HTML反转义\n  unescapeHtml: (text: string): string => {\n    const map: Record<string, string> = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#x2F;': '/',\n    };\n    return text.replace(/&(amp|lt|gt|quot|#39|#x2F);/g, (s) => map[s]);\n  },\n\n  // 清理HTML标签\n  stripHtml: (html: string): string => {\n    return html.replace(/<[^>]*>/g, '');\n  },\n\n  // 安全的innerHTML设置\n  safeInnerHTML: (element: HTMLElement, html: string): void => {\n    element.innerHTML = xssProtection.escapeHtml(html);\n  },\n};\n\n// CSRF防护\nexport const csrfProtection = {\n  // 生成CSRF令牌\n  generateToken: (): string => {\n    const array = new Uint8Array(32);\n    crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n\n  // 验证CSRF令牌\n  validateToken: (token: string, expectedToken: string): boolean => {\n    if (!token || !expectedToken) return false;\n    return token === expectedToken;\n  },\n\n  // 从meta标签获取CSRF令牌\n  getTokenFromMeta: (): string | null => {\n    const metaTag = document.querySelector('meta[name=\"csrf-token\"]');\n    return metaTag ? metaTag.getAttribute('content') : null;\n  },\n};\n\n// 输入验证和清理\nexport const inputSanitization = {\n  // 清理用户输入\n  sanitizeInput: (input: string): string => {\n    return input\n      .trim()\n      .replace(/[<>\"'&]/g, '') // 移除潜在的XSS字符\n      .substring(0, 1000); // 限制长度\n  },\n\n  // 验证邮箱格式\n  isValidEmail: (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email) && email.length <= 254;\n  },\n\n  // 验证URL格式\n  isValidUrl: (url: string): boolean => {\n    try {\n      const urlObj = new URL(url);\n      return ['http:', 'https:'].includes(urlObj.protocol);\n    } catch {\n      return false;\n    }\n  },\n\n  // 验证文件类型\n  isValidFileType: (fileName: string, allowedTypes: string[]): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return extension ? allowedTypes.includes(extension) : false;\n  },\n\n  // 验证文件大小\n  isValidFileSize: (fileSize: number, maxSizeInMB: number): boolean => {\n    const maxSizeInBytes = maxSizeInMB * 1024 * 1024;\n    return fileSize <= maxSizeInBytes;\n  },\n};\n\n// 密码安全\nexport const passwordSecurity = {\n  // 密码强度检查\n  checkPasswordStrength: (password: string): {\n    score: number;\n    feedback: string[];\n    isStrong: boolean;\n  } => {\n    const feedback: string[] = [];\n    let score = 0;\n\n    // 长度检查\n    if (password.length >= 8) {\n      score += 1;\n    } else {\n      feedback.push('密码长度至少需要8个字符');\n    }\n\n    // 包含小写字母\n    if (/[a-z]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含小写字母');\n    }\n\n    // 包含大写字母\n    if (/[A-Z]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含大写字母');\n    }\n\n    // 包含数字\n    if (/\\d/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含数字');\n    }\n\n    // 包含特殊字符\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含特殊字符');\n    }\n\n    // 不包含常见弱密码\n    const commonPasswords = ['123456', 'password', '123456789', 'qwerty', 'abc123'];\n    if (commonPasswords.includes(password.toLowerCase())) {\n      score = 0;\n      feedback.push('请不要使用常见的弱密码');\n    }\n\n    return {\n      score,\n      feedback,\n      isStrong: score >= 4,\n    };\n  },\n\n  // 生成随机密码\n  generateRandomPassword: (length = 12): string => {\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  },\n};\n\n// 会话安全\nexport const sessionSecurity = {\n  // 检查会话是否过期\n  isSessionExpired: (expirationTime: number): boolean => {\n    return Date.now() > expirationTime;\n  },\n\n  // 生成会话ID\n  generateSessionId: (): string => {\n    const array = new Uint8Array(16);\n    crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n\n  // 安全的localStorage操作\n  secureStorage: {\n    setItem: (key: string, value: string, expirationMinutes?: number): void => {\n      const item = {\n        value,\n        timestamp: Date.now(),\n        expiration: expirationMinutes ? Date.now() + (expirationMinutes * 60 * 1000) : null,\n      };\n      localStorage.setItem(key, JSON.stringify(item));\n    },\n\n    getItem: (key: string): string | null => {\n      try {\n        const itemStr = localStorage.getItem(key);\n        if (!itemStr) return null;\n\n        const item = JSON.parse(itemStr);\n        \n        // 检查是否过期\n        if (item.expiration && Date.now() > item.expiration) {\n          localStorage.removeItem(key);\n          return null;\n        }\n\n        return item.value;\n      } catch {\n        return null;\n      }\n    },\n\n    removeItem: (key: string): void => {\n      localStorage.removeItem(key);\n    },\n\n    clear: (): void => {\n      localStorage.clear();\n    },\n  },\n};\n\n// 内容安全策略\nexport const contentSecurity = {\n  // 验证内容类型\n  validateContentType: (contentType: string, allowedTypes: string[]): boolean => {\n    return allowedTypes.some(type => contentType.includes(type));\n  },\n\n  // 检查恶意脚本\n  containsMaliciousScript: (content: string): boolean => {\n    const maliciousPatterns = [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n      /eval\\s*\\(/gi,\n      /document\\.write/gi,\n    ];\n    \n    return maliciousPatterns.some(pattern => pattern.test(content));\n  },\n\n  // 清理危险内容\n  sanitizeContent: (content: string): string => {\n    return content\n      .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '')\n      .replace(/eval\\s*\\(/gi, '')\n      .replace(/document\\.write/gi, '');\n  },\n};\n\n// 网络安全\nexport const networkSecurity = {\n  // 检查是否为HTTPS\n  isHttps: (): boolean => {\n    return window.location.protocol === 'https:';\n  },\n\n  // 验证请求来源\n  validateOrigin: (origin: string, allowedOrigins: string[]): boolean => {\n    return allowedOrigins.includes(origin);\n  },\n\n  // 生成安全的请求头\n  getSecureHeaders: (csrfToken?: string): Record<string, string> => {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n    };\n\n    if (csrfToken) {\n      headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    return headers;\n  },\n};\n\n// 数据加密（简单实现，生产环境建议使用专业加密库）\nexport const encryption = {\n  // Base64编码\n  base64Encode: (text: string): string => {\n    return btoa(unescape(encodeURIComponent(text)));\n  },\n\n  // Base64解码\n  base64Decode: (encodedText: string): string => {\n    return decodeURIComponent(escape(atob(encodedText)));\n  },\n\n  // 简单的字符串混淆（不是真正的加密）\n  obfuscate: (text: string, key: string): string => {\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      const textChar = text.charCodeAt(i);\n      const keyChar = key.charCodeAt(i % key.length);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return encryption.base64Encode(result);\n  },\n\n  // 简单的字符串反混淆\n  deobfuscate: (obfuscatedText: string, key: string): string => {\n    const decodedText = encryption.base64Decode(obfuscatedText);\n    let result = '';\n    for (let i = 0; i < decodedText.length; i++) {\n      const textChar = decodedText.charCodeAt(i);\n      const keyChar = key.charCodeAt(i % key.length);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return result;\n  },\n};\n\n// 安全配置类型定义\ninterface SecurityDefaults {\n  maxFileSize: number;\n  allowedFileTypes: string[];\n  sessionTimeout: number;\n  maxLoginAttempts: number;\n  passwordMinLength: number;\n  csrfTokenExpiry: number;\n}\n\n// 安全配置\nexport const securityConfig: {\n  defaults: SecurityDefaults;\n  get: (key: keyof SecurityDefaults) => number | string[];\n  set: (key: keyof SecurityDefaults, value: number | string[]) => void;\n} = {\n  // 默认安全配置\n  defaults: {\n    maxFileSize: 10, // MB\n    allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx'],\n    sessionTimeout: 30, // 分钟\n    maxLoginAttempts: 5,\n    passwordMinLength: 8,\n    csrfTokenExpiry: 60, // 分钟\n  },\n\n  // 获取配置值\n  get: (key: keyof SecurityDefaults) => {\n    return securityConfig.defaults[key];\n  },\n\n  // 设置配置值\n  set: (key: keyof SecurityDefaults, value: number | string[]) => {\n    (securityConfig.defaults as unknown as Record<string, number | string[]>)[key] = value;\n  },\n}\n\n// 安全事件日志\nexport const securityLogger = {\n  // 记录安全事件\n  logSecurityEvent: (event: string, details: Record<string, unknown>): void => {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      event,\n      details,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    // 在开发环境下输出到控制台\n    if (process.env.NODE_ENV === 'development') {\n      console.warn('[Security Event]', logEntry);\n    }\n\n    // 在生产环境下可以发送到安全监控服务\n    if (process.env.NODE_ENV === 'production') {\n      // TODO: 发送到安全监控服务\n      // sendToSecurityService(logEntry);\n    }\n  },\n\n  // 记录登录尝试\n  logLoginAttempt: (success: boolean, username?: string): void => {\n    securityLogger.logSecurityEvent('login_attempt', {\n      success,\n      username: username ? `${username.substring(0, 3)}***` : 'unknown',\n    });\n  },\n\n  // 记录可疑活动\n  logSuspiciousActivity: (activity: string, details: Record<string, unknown>): void => {\n    securityLogger.logSecurityEvent('suspicious_activity', {\n      activity,\n      ...details,\n    });\n  },\n};\n\n// 导出所有安全工具\nexport const security = {\n  xss: xssProtection,\n  csrf: csrfProtection,\n  input: inputSanitization,\n  password: passwordSecurity,\n  session: sessionSecurity,\n  content: contentSecurity,\n  network: networkSecurity,\n  encryption,\n  config: securityConfig,\n  logger: securityLogger,\n};"],"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","ignoreList":[]}