ecd1d33a8946e954b0f32aa58b4d93c9
"use strict";

/* istanbul ignore next */
function cov_1n3q87sv3() {
  var path = "/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/incident-api.ts";
  var hash = "c1844c91c8bf5ebaecb4df01fde67c80f57d43ef";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/incident-api.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 44
        }
      },
      "4": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 77
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "6": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 17,
          column: 90
        }
      },
      "7": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 73
        }
      },
      "8": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 69
        }
      },
      "10": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "11": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 84
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 24
        }
      },
      "13": {
        start: {
          line: 32,
          column: 25
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "14": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 24
        }
      },
      "15": {
        start: {
          line: 37,
          column: 25
        },
        end: {
          line: 37,
          column: 92
        }
      },
      "16": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "17": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 97
        }
      },
      "18": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "19": {
        start: {
          line: 47,
          column: 25
        },
        end: {
          line: 47,
          column: 100
        }
      },
      "20": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 24
        }
      },
      "21": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 84
        }
      },
      "22": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "23": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "24": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 104
        }
      },
      "25": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 28
        }
      },
      "26": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "27": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 24
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "29": {
        start: {
          line: 67,
          column: 29
        },
        end: {
          line: 67,
          column: 100
        }
      },
      "30": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 28
        }
      },
      "31": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 79
        }
      },
      "32": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 24
        }
      },
      "33": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "34": {
        start: {
          line: 76,
          column: 29
        },
        end: {
          line: 76,
          column: 105
        }
      },
      "35": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 28
        }
      },
      "36": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 79
        }
      },
      "37": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 24
        }
      },
      "38": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "39": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 86,
          column: 111
        }
      },
      "40": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "41": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 75
        }
      },
      "42": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "43": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "44": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 107
        }
      },
      "45": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 28
        }
      },
      "46": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 78
        }
      },
      "47": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "48": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 109,
          column: 9
        }
      },
      "49": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 112
        }
      },
      "50": {
        start: {
          line: 105,
          column: 12
        },
        end: {
          line: 105,
          column: 28
        }
      },
      "51": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 78
        }
      },
      "52": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 24
        }
      },
      "53": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "54": {
        start: {
          line: 114,
          column: 29
        },
        end: {
          line: 114,
          column: 108
        }
      },
      "55": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 28
        }
      },
      "56": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 81
        }
      },
      "57": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 24
        }
      },
      "58": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "59": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 104
        }
      },
      "60": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "61": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 84
        }
      },
      "62": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 24
        }
      },
      "63": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "64": {
        start: {
          line: 132,
          column: 29
        },
        end: {
          line: 132,
          column: 109
        }
      },
      "65": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 28
        }
      },
      "66": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 84
        }
      },
      "67": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 24
        }
      },
      "68": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "69": {
        start: {
          line: 142,
          column: 29
        },
        end: {
          line: 142,
          column: 106
        }
      },
      "70": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 28
        }
      },
      "71": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "72": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 24
        }
      },
      "73": {
        start: {
          line: 151,
          column: 23
        },
        end: {
          line: 151,
          column: 25
        }
      },
      "74": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 43
        }
      },
      "75": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 43
        }
      },
      "76": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 37
        }
      },
      "77": {
        start: {
          line: 153,
          column: 18
        },
        end: {
          line: 153,
          column: 37
        }
      },
      "78": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 43
        }
      },
      "79": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 43
        }
      },
      "80": {
        start: {
          line: 155,
          column: 25
        },
        end: {
          line: 155,
          column: 106
        }
      },
      "81": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 24
        }
      },
      "82": {
        start: {
          line: 160,
          column: 25
        },
        end: {
          line: 160,
          column: 105
        }
      },
      "83": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 24
        }
      },
      "84": {
        start: {
          line: 165,
          column: 25
        },
        end: {
          line: 165,
          column: 100
        }
      },
      "85": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 24
        }
      },
      "86": {
        start: {
          line: 170,
          column: 25
        },
        end: {
          line: 170,
          column: 105
        }
      },
      "87": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 24
        }
      },
      "88": {
        start: {
          line: 175,
          column: 26
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "89": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 67
        }
      },
      "90": {
        start: {
          line: 200,
          column: 34
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "91": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 71
        }
      },
      "92": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "93": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 72
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 44
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 38
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 42
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 36
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 48
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 41
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 38
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 51
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 50
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 56
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 50
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 65
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 54
          },
          end: {
            line: 82,
            column: 5
          }
        },
        line: 74
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 49
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 84
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 49
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 93
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 53
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 102
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 55
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 112
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 55
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 121
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 59
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 130
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 51
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 140
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 61
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 150
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 59
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 159
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 55
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 164
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 169,
            column: 4
          },
          end: {
            line: 169,
            column: 5
          }
        },
        loc: {
          start: {
            line: 169,
            column: 59
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 169
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 45
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 174
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 41
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 199
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 45
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 219
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 14,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 14,
            column: 42
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 152,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "2": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 153,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 153,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "3": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 154,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 154,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/incident-api.ts"],
      sourcesContent: ["import { httpClient } from './http-client';\nimport { PaginationRequest, PaginationResponse } from './api-config';\n\n// \u4E8B\u4EF6\u7BA1\u7406API\u63A5\u53E3\nexport interface Incident {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: string;\n  source: string;\n  type: string;\n  incident_number: string;\n  is_major_incident: boolean;\n  reporter?: {\n    id: number;\n    name: string;\n  };\n  assignee?: {\n    id: number;\n    name: string;\n  };\n  // \u914D\u7F6E\u9879\u5173\u8054\n  configuration_item_id?: number;\n  configuration_item?: {\n    id: number;\n    name: string;\n    type: string;\n    status: string;\n    description?: string;\n  };\n  // \u963F\u91CC\u4E91\u76F8\u5173\u5B57\u6BB5\n  alibaba_cloud_instance_id?: string;\n  alibaba_cloud_region?: string;\n  alibaba_cloud_service?: string;\n  alibaba_cloud_alert_data?: unknown;\n  alibaba_cloud_metrics?: unknown;\n  // \u5B89\u5168\u4E8B\u4EF6\u76F8\u5173\u5B57\u6BB5\n  security_event_type?: string;\n  security_event_source_ip?: string;\n  security_event_target?: string;\n  security_event_details?: unknown;\n  // \u65F6\u95F4\u5B57\u6BB5\n  detected_at?: string;\n  confirmed_at?: string;\n  resolved_at?: string;\n  closed_at?: string;\n  created_at: string;\n  updated_at: string;\n  // \u65B0\u589E\u5B57\u6BB5\n  category?: string;\n  subcategory?: string;\n  resolution?: string;\n}\n\nexport interface CreateIncidentRequest {\n  title: string;\n  description?: string;\n  priority: string;\n  source: string;\n  type: string;\n  is_major_incident?: boolean;\n  assignee_id?: number;\n  configuration_item_id?: number;\n  category?: string;\n  subcategory?: string;\n  // \u963F\u91CC\u4E91\u76F8\u5173\u5B57\u6BB5\n  alibaba_cloud_instance_id?: string;\n  alibaba_cloud_region?: string;\n  alibaba_cloud_service?: string;\n  alibaba_cloud_alert_data?: unknown;\n  alibaba_cloud_metrics?: unknown;\n  // \u5B89\u5168\u4E8B\u4EF6\u76F8\u5173\u5B57\u6BB5\n  security_event_type?: string;\n  security_event_source_ip?: string;\n  security_event_target?: string;\n  security_event_details?: unknown;\n  // \u5173\u8054\u7684\u914D\u7F6E\u9879\n  affected_configuration_item_ids?: number[];\n  form_fields?: Record<string, string | number | boolean>;\n}\n\n// \u6839\u56E0\u5206\u6790\u63A5\u53E3\nexport interface RootCauseAnalysis {\n  id?: number;\n  incident_id: number;\n  analysis_method: string; // \"5-whys\" | \"fishbone\" | \"timeline\" | \"fault-tree\"\n  root_cause: string;\n  contributing_factors: string[];\n  evidence: string[];\n  preventive_actions: string[];\n  status: \"draft\" | \"in-progress\" | \"completed\" | \"approved\";\n  analyst_id?: number;\n  analyst_name?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// \u5F71\u54CD\u8BC4\u4F30\u63A5\u53E3\nexport interface ImpactAssessment {\n  id?: number;\n  incident_id: number;\n  business_impact: \"low\" | \"medium\" | \"high\" | \"critical\";\n  technical_impact: \"low\" | \"medium\" | \"high\" | \"critical\";\n  affected_services: string[];\n  affected_users_count: number;\n  financial_impact: number;\n  reputation_impact: \"low\" | \"medium\" | \"high\" | \"critical\";\n  compliance_impact: boolean;\n  assessment_notes: string;\n  assessor_id?: number;\n  assessor_name?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// \u4E8B\u4EF6\u5206\u7C7B\u63A5\u53E3\nexport interface IncidentClassification {\n  id?: number;\n  incident_id: number;\n  category: string;\n  subcategory: string;\n  service_type: string;\n  failure_type: string;\n  urgency: \"low\" | \"medium\" | \"high\" | \"critical\";\n  impact: \"low\" | \"medium\" | \"high\" | \"critical\";\n  classification_confidence: number; // 0-100\n  auto_classified: boolean;\n  classifier_id?: number;\n  classifier_name?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CreateRootCauseAnalysisRequest {\n  incident_id: number;\n  analysis_method: string;\n  root_cause: string;\n  contributing_factors: string[];\n  evidence: string[];\n  preventive_actions: string[];\n  status: string;\n}\n\nexport interface CreateImpactAssessmentRequest {\n  incident_id: number;\n  business_impact: string;\n  technical_impact: string;\n  affected_services: string[];\n  affected_users_count: number;\n  financial_impact: number;\n  reputation_impact: string;\n  compliance_impact: boolean;\n  assessment_notes: string;\n}\n\nexport interface CreateIncidentClassificationRequest {\n  incident_id: number;\n  category: string;\n  subcategory: string;\n  service_type: string;\n  failure_type: string;\n  urgency: string;\n  impact: string;\n  classification_confidence?: number;\n  auto_classified?: boolean;\n}\n\nexport interface UpdateIncidentRequest {\n  title?: string;\n  description?: string;\n  priority?: string;\n  type?: string;\n  status?: string;\n  assignee_id?: number;\n  is_major_incident?: boolean;\n  category?: string;\n  subcategory?: string;\n  resolution?: string;\n  resolution_notes?: string;\n  suspend_reason?: string;\n  resolved_at?: string;\n  closed_at?: string;\n  form_fields?: Record<string, string | number | boolean>;\n}\n\nexport interface UpdateIncidentStatusRequest {\n  status: string;\n  resolution_note?: string;\n  suspend_reason?: string;\n}\n\nexport interface ListIncidentsRequest extends PaginationRequest {\n  status?: string;\n  priority?: string;\n  source?: string;\n  type?: string;\n  category?: string;\n  assignee_id?: number;\n  is_major_incident?: boolean;\n  keyword?: string;\n  date_from?: string;\n  date_to?: string;\n  [key: string]: unknown;\n}\n\nexport interface ListIncidentsResponse extends PaginationResponse<Incident> {\n  incidents: Incident[]; // \u4FDD\u6301\u5411\u540E\u517C\u5BB9\n}\n\nexport interface IncidentMetrics {\n  total_incidents: number;\n  open_incidents: number;\n  critical_incidents: number;\n  major_incidents: number;\n  avg_resolution_time: number;\n  mtta: number;\n  mttr: number;\n}\n\n// \u963F\u91CC\u4E91\u544A\u8B66\u4E8B\u4EF6\nexport interface AlibabaCloudAlertRequest {\n  alert_id: string;\n  alert_name: string;\n  alert_description: string;\n  alert_level: string;\n  instance_id: string;\n  region: string;\n  service: string;\n  metrics: unknown;\n  alert_data: unknown;\n  detected_at: string;\n}\n\n// \u5B89\u5168\u4E8B\u4EF6\nexport interface SecurityEventRequest {\n  event_id: string;\n  event_type: string;\n  event_name: string;\n  event_description: string;\n  source_ip: string;\n  target: string;\n  severity: string;\n  event_details: unknown;\n  detected_at: string;\n}\n\n// \u4E91\u4EA7\u54C1\u4E8B\u4EF6\nexport interface CloudProductEventRequest {\n  event_id: string;\n  event_type: string;\n  event_name: string;\n  event_description: string;\n  product: string;\n  instance_id: string;\n  region: string;\n  event_data: unknown;\n  detected_at: string;\n}\n\n// \u4E8B\u4EF6\u7BA1\u7406API\u7C7B\nexport class IncidentAPI {\n  // \u83B7\u53D6\u4E8B\u4EF6\u5217\u8868\n  static async listIncidents(params: ListIncidentsRequest = {}): Promise<ListIncidentsResponse> {\n    console.log('IncidentAPI.listIncidents called with params:', params);\n    try {\n      const response = await httpClient.get<ListIncidentsResponse>('/api/v1/incidents', params);\n      console.log('IncidentAPI.listIncidents response:', response);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.listIncidents error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u4E8B\u4EF6\u8BE6\u60C5\n  static async getIncident(id: number): Promise<Incident> {\n    const response = await httpClient.get<Incident>(`/api/v1/incidents/${id}`);\n    return response;\n  }\n\n  // \u521B\u5EFA\u4E8B\u4EF6\n  static async createIncident(data: CreateIncidentRequest): Promise<Incident> {\n    const response = await httpClient.post<Incident>('/api/v1/incidents', data);\n    return response;\n  }\n\n  // \u66F4\u65B0\u4E8B\u4EF6\n  static async updateIncident(id: number, data: UpdateIncidentRequest): Promise<Incident> {\n    const response = await httpClient.patch<Incident>(`/api/v1/incidents/${id}`, data);\n    return response;\n  }\n\n  // \u66F4\u65B0\u4E8B\u4EF6\u72B6\u6001\n  static async updateIncidentStatus(id: number, data: UpdateIncidentStatusRequest): Promise<Incident> {\n    const response = await httpClient.put<Incident>(`/api/v1/incidents/${id}/status`, data);\n    return response;\n  }\n\n  // \u6DFB\u52A0\u8BC4\u8BBA\n  static async addComment(id: number, data: { text: string }): Promise<Incident> {\n    const response = await httpClient.post<Incident>(`/api/v1/incidents/${id}/comments`, data);\n    return response;\n  }\n\n  // \u83B7\u53D6\u4E8B\u4EF6\u6307\u6807\n  static async getIncidentMetrics(): Promise<IncidentMetrics> {\n    const response = await httpClient.get<IncidentMetrics>('/api/v1/incidents/stats');\n    return response;\n  }\n\n  // \u6839\u56E0\u5206\u6790\u76F8\u5173API\n  static async getRootCauseAnalysis(incidentId: number): Promise<RootCauseAnalysis> {\n    try {\n      const response = await httpClient.get<RootCauseAnalysis>(`/api/incidents/${incidentId}/root-cause`);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getRootCauseAnalysis error:', error);\n      throw error;\n    }\n  }\n\n  static async createRootCauseAnalysis(request: CreateRootCauseAnalysisRequest): Promise<RootCauseAnalysis> {\n    try {\n      const response = await httpClient.post<RootCauseAnalysis>('/api/incidents/root-cause', request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.createRootCauseAnalysis error:', error);\n      throw error;\n    }\n  }\n\n  static async updateRootCauseAnalysis(id: number, request: Partial<CreateRootCauseAnalysisRequest>): Promise<RootCauseAnalysis> {\n    try {\n      const response = await httpClient.put<RootCauseAnalysis>(`/api/incidents/root-cause/${id}`, request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.updateRootCauseAnalysis error:', error);\n      throw error;\n    }\n  }\n\n  // \u5F71\u54CD\u8BC4\u4F30\u76F8\u5173API\n  static async getImpactAssessment(incidentId: number): Promise<ImpactAssessment> {\n    try {\n      const response = await httpClient.get<ImpactAssessment>(`/api/incidents/${incidentId}/impact-assessment`);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getImpactAssessment error:', error);\n      throw error;\n    }\n  }\n\n  static async createImpactAssessment(request: CreateImpactAssessmentRequest): Promise<ImpactAssessment> {\n    try {\n      const response = await httpClient.post<ImpactAssessment>('/api/incidents/impact-assessment', request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.createImpactAssessment error:', error);\n      throw error;\n    }\n  }\n\n  static async updateImpactAssessment(id: number, request: Partial<CreateImpactAssessmentRequest>): Promise<ImpactAssessment> {\n    try {\n      const response = await httpClient.put<ImpactAssessment>(`/api/incidents/impact-assessment/${id}`, request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.updateImpactAssessment error:', error);\n      throw error;\n    }\n  }\n\n  // \u4E8B\u4EF6\u5206\u7C7B\u76F8\u5173API\n  static async getIncidentClassification(incidentId: number): Promise<IncidentClassification> {\n    try {\n      const response = await httpClient.get<IncidentClassification>(`/api/incidents/${incidentId}/classification`);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.getIncidentClassification error:', error);\n      throw error;\n    }\n  }\n\n  static async createIncidentClassification(request: CreateIncidentClassificationRequest): Promise<IncidentClassification> {\n    try {\n      const response = await httpClient.post<IncidentClassification>('/api/incidents/classification', request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.createIncidentClassification error:', error);\n      throw error;\n    }\n  }\n\n  static async updateIncidentClassification(id: number, request: Partial<CreateIncidentClassificationRequest>): Promise<IncidentClassification> {\n    try {\n      const response = await httpClient.put<IncidentClassification>(`/api/incidents/classification/${id}`, request);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.updateIncidentClassification error:', error);\n      throw error;\n    }\n  }\n\n  // AI\u8F85\u52A9\u5206\u6790\n  static async analyzeIncidentWithAI(incidentId: number): Promise<{\n    suggested_classification: Partial<IncidentClassification>;\n    suggested_root_causes: string[];\n    similar_incidents: Incident[];\n  }> {\n    try {\n      const response = await httpClient.post<{\n        suggested_classification: Partial<IncidentClassification>;\n        suggested_root_causes: string[];\n        similar_incidents: Incident[];\n      }>(`/api/incidents/${incidentId}/ai-analysis`);\n      return response;\n    } catch (error) {\n      console.error('IncidentAPI.analyzeIncidentWithAI error:', error);\n      throw error;\n    }\n  }\n\n  // \u83B7\u53D6\u53EF\u5173\u8054\u7684\u914D\u7F6E\u9879\u5217\u8868\n  static async getConfigurationItems(search?: string, type?: string, status?: string): Promise<Array<{\n    id: number;\n    name: string;\n    type: string;\n    status: string;\n    description?: string;\n  }>> {\n    const params: Record<string, string> = {};\n    if (search) params.search = search;\n    if (type) params.type = type;\n    if (status) params.status = status;\n    \n    const response = await httpClient.get<Array<{\n      id: number;\n      name: string;\n      type: string;\n      status: string;\n      description?: string;\n    }>>('/api/v1/incidents/configuration-items', params);\n    return response;\n  }\n\n  // \u4ECE\u963F\u91CC\u4E91\u544A\u8B66\u521B\u5EFA\u4E8B\u4EF6\n  static async createIncidentFromAlibabaCloudAlert(data: AlibabaCloudAlertRequest): Promise<Incident> {\n    const response = await httpClient.post<Incident>('/api/v1/incidents/alibaba-cloud-alert', data);\n    return response;\n  }\n\n  // \u4ECE\u5B89\u5168\u4E8B\u4EF6\u521B\u5EFA\u4E8B\u4EF6\n  static async createIncidentFromSecurityEvent(data: SecurityEventRequest): Promise<Incident> {\n    const response = await httpClient.post<Incident>('/api/v1/incidents/security-event', data);\n    return response;\n  }\n\n  // \u4ECE\u4E91\u4EA7\u54C1\u4E8B\u4EF6\u521B\u5EFA\u4E8B\u4EF6\n  static async createIncidentFromCloudProductEvent(data: CloudProductEventRequest): Promise<Incident> {\n    const response = await httpClient.post<Incident>('/api/v1/incidents/cloud-product-event', data);\n    return response;\n  }\n\n  // \u6A21\u62DF\u963F\u91CC\u4E91\u544A\u8B66\u4E8B\u4EF6\n  static async simulateAlibabaCloudAlert(): Promise<Incident> {\n    const mockAlert: AlibabaCloudAlertRequest = {\n      alert_id: `alert_${Date.now()}`,\n      alert_name: 'CPU\u4F7F\u7528\u7387\u8FC7\u9AD8\u544A\u8B66',\n      alert_description: '\u5B9E\u4F8B i-bp1abcdefg \u7684CPU\u4F7F\u7528\u7387\u5728\u8FC7\u53BB15\u5206\u949F\u5185\u6301\u7EED\u9AD8\u4E8E95%',\n      alert_level: 'critical',\n      instance_id: 'i-bp1abcdefg',\n      region: 'cn-hangzhou',\n      service: 'ecs',\n      metrics: {\n        cpu_usage: 95.5,\n        memory_usage: 78.2,\n        disk_usage: 45.1\n      },\n      alert_data: {\n        alert_rule: 'CPU\u4F7F\u7528\u7387 > 90%',\n        threshold: 90,\n        current_value: 95.5,\n        duration: '15\u5206\u949F'\n      },\n      detected_at: new Date().toISOString()\n    };\n\n    return this.createIncidentFromAlibabaCloudAlert(mockAlert);\n  }\n\n  // \u6A21\u62DF\u5B89\u5168\u4E8B\u4EF6\n  static async simulateSecurityEvent(): Promise<Incident> {\n    const mockSecurityEvent: SecurityEventRequest = {\n      event_id: `security_${Date.now()}`,\n      event_type: 'SSH\u66B4\u529B\u7834\u89E3',\n      event_name: '\u68C0\u6D4B\u5230\u53EF\u7591\u7684SSH\u767B\u5F55\u5C1D\u8BD5',\n      event_description: '\u5B89\u5168\u7CFB\u7EDF\u68C0\u6D4B\u5230\u6765\u81EA\u672A\u77E5IP\u5730\u5740 (47.98.x.x) \u5BF9\u751F\u4EA7\u73AF\u5883\u670D\u52A1\u5668\u7684\u591A\u6B21SSH\u767B\u5F55\u5931\u8D25\u5C1D\u8BD5',\n      source_ip: '47.98.x.x',\n      target: 'PROD-BASTION-HOST',\n      severity: 'high',\n      event_details: {\n        failed_attempts: 15,\n        time_window: '10\u5206\u949F',\n        target_port: 22,\n        attack_type: 'brute_force'\n      },\n      detected_at: new Date().toISOString()\n    };\n\n    return this.createIncidentFromSecurityEvent(mockSecurityEvent);\n  }\n\n  // \u6A21\u62DF\u4E91\u4EA7\u54C1\u4E8B\u4EF6\n  static async simulateCloudProductEvent(): Promise<Incident> {\n    const mockCloudEvent: CloudProductEventRequest = {\n      event_id: `cloud_${Date.now()}`,\n      event_type: 'RDS\u4E3B\u5907\u540C\u6B65\u5EF6\u8FDF',\n      event_name: '\u6570\u636E\u5E93\u4E3B\u5907\u540C\u6B65\u5EF6\u8FDF\u544A\u8B66',\n      event_description: '\u76D1\u63A7\u7CFB\u7EDF\u544A\u8B66\uFF0C\u751F\u4EA7\u6570\u636E\u5E93\uFF08RDS\uFF09\u4E3B\u5907\u540C\u6B65\u5EF6\u8FDF\u8D85\u8FC7\u9608\u503C\uFF0830\u79D2\uFF09',\n      product: 'rds',\n      instance_id: 'rm-bp1abcdefg',\n      region: 'cn-hangzhou',\n      event_data: {\n        sync_delay: 45,\n        threshold: 30,\n        master_status: 'running',\n        slave_status: 'running'\n      },\n      detected_at: new Date().toISOString()\n    };\n\n    return this.createIncidentFromCloudProductEvent(mockCloudEvent);\n  }\n}"],
      names: ["IncidentAPI", "listIncidents", "params", "console", "log", "response", "httpClient", "get", "error", "getIncident", "id", "createIncident", "data", "post", "updateIncident", "patch", "updateIncidentStatus", "put", "addComment", "getIncidentMetrics", "getRootCauseAnalysis", "incidentId", "createRootCauseAnalysis", "request", "updateRootCauseAnalysis", "getImpactAssessment", "createImpactAssessment", "updateImpactAssessment", "getIncidentClassification", "createIncidentClassification", "updateIncidentClassification", "analyzeIncidentWithAI", "getConfigurationItems", "search", "type", "status", "createIncidentFromAlibabaCloudAlert", "createIncidentFromSecurityEvent", "createIncidentFromCloudProductEvent", "simulateAlibabaCloudAlert", "mockAlert", "alert_id", "Date", "now", "alert_name", "alert_description", "alert_level", "instance_id", "region", "service", "metrics", "cpu_usage", "memory_usage", "disk_usage", "alert_data", "alert_rule", "threshold", "current_value", "duration", "detected_at", "toISOString", "simulateSecurityEvent", "mockSecurityEvent", "event_id", "event_type", "event_name", "event_description", "source_ip", "target", "severity", "event_details", "failed_attempts", "time_window", "target_port", "attack_type", "simulateCloudProductEvent", "mockCloudEvent", "product", "event_data", "sync_delay", "master_status", "slave_status"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c1844c91c8bf5ebaecb4df01fde67c80f57d43ef"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n3q87sv3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1n3q87sv3();
cov_1n3q87sv3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1n3q87sv3().s[1]++;
Object.defineProperty(exports, "IncidentAPI", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[0]++;
    cov_1n3q87sv3().s[2]++;
    return IncidentAPI;
  }
});
const _httpclient =
/* istanbul ignore next */
(cov_1n3q87sv3().s[3]++, require("./http-client"));
class IncidentAPI {
  // 获取事件列表
  static async listIncidents(params =
  /* istanbul ignore next */
  (cov_1n3q87sv3().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[1]++;
    cov_1n3q87sv3().s[4]++;
    console.log('IncidentAPI.listIncidents called with params:', params);
    /* istanbul ignore next */
    cov_1n3q87sv3().s[5]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[6]++, await _httpclient.httpClient.get('/api/v1/incidents', params));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[7]++;
      console.log('IncidentAPI.listIncidents response:', response);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[8]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[9]++;
      console.error('IncidentAPI.listIncidents error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[10]++;
      throw error;
    }
  }
  // 获取事件详情
  static async getIncident(id) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[2]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[11]++, await _httpclient.httpClient.get(`/api/v1/incidents/${id}`));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[12]++;
    return response;
  }
  // 创建事件
  static async createIncident(data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[3]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[13]++, await _httpclient.httpClient.post('/api/v1/incidents', data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[14]++;
    return response;
  }
  // 更新事件
  static async updateIncident(id, data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[4]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[15]++, await _httpclient.httpClient.patch(`/api/v1/incidents/${id}`, data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[16]++;
    return response;
  }
  // 更新事件状态
  static async updateIncidentStatus(id, data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[5]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[17]++, await _httpclient.httpClient.put(`/api/v1/incidents/${id}/status`, data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[18]++;
    return response;
  }
  // 添加评论
  static async addComment(id, data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[6]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[19]++, await _httpclient.httpClient.post(`/api/v1/incidents/${id}/comments`, data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[20]++;
    return response;
  }
  // 获取事件指标
  static async getIncidentMetrics() {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[7]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[21]++, await _httpclient.httpClient.get('/api/v1/incidents/stats'));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[22]++;
    return response;
  }
  // 根因分析相关API
  static async getRootCauseAnalysis(incidentId) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[8]++;
    cov_1n3q87sv3().s[23]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[24]++, await _httpclient.httpClient.get(`/api/incidents/${incidentId}/root-cause`));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[25]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[26]++;
      console.error('IncidentAPI.getRootCauseAnalysis error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[27]++;
      throw error;
    }
  }
  static async createRootCauseAnalysis(request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[9]++;
    cov_1n3q87sv3().s[28]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[29]++, await _httpclient.httpClient.post('/api/incidents/root-cause', request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[30]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[31]++;
      console.error('IncidentAPI.createRootCauseAnalysis error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[32]++;
      throw error;
    }
  }
  static async updateRootCauseAnalysis(id, request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[10]++;
    cov_1n3q87sv3().s[33]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[34]++, await _httpclient.httpClient.put(`/api/incidents/root-cause/${id}`, request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[35]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[36]++;
      console.error('IncidentAPI.updateRootCauseAnalysis error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[37]++;
      throw error;
    }
  }
  // 影响评估相关API
  static async getImpactAssessment(incidentId) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[11]++;
    cov_1n3q87sv3().s[38]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[39]++, await _httpclient.httpClient.get(`/api/incidents/${incidentId}/impact-assessment`));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[40]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[41]++;
      console.error('IncidentAPI.getImpactAssessment error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[42]++;
      throw error;
    }
  }
  static async createImpactAssessment(request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[12]++;
    cov_1n3q87sv3().s[43]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[44]++, await _httpclient.httpClient.post('/api/incidents/impact-assessment', request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[45]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[46]++;
      console.error('IncidentAPI.createImpactAssessment error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[47]++;
      throw error;
    }
  }
  static async updateImpactAssessment(id, request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[13]++;
    cov_1n3q87sv3().s[48]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[49]++, await _httpclient.httpClient.put(`/api/incidents/impact-assessment/${id}`, request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[50]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[51]++;
      console.error('IncidentAPI.updateImpactAssessment error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[52]++;
      throw error;
    }
  }
  // 事件分类相关API
  static async getIncidentClassification(incidentId) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[14]++;
    cov_1n3q87sv3().s[53]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[54]++, await _httpclient.httpClient.get(`/api/incidents/${incidentId}/classification`));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[55]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[56]++;
      console.error('IncidentAPI.getIncidentClassification error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[57]++;
      throw error;
    }
  }
  static async createIncidentClassification(request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[15]++;
    cov_1n3q87sv3().s[58]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[59]++, await _httpclient.httpClient.post('/api/incidents/classification', request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[60]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[61]++;
      console.error('IncidentAPI.createIncidentClassification error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[62]++;
      throw error;
    }
  }
  static async updateIncidentClassification(id, request) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[16]++;
    cov_1n3q87sv3().s[63]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[64]++, await _httpclient.httpClient.put(`/api/incidents/classification/${id}`, request));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[65]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[66]++;
      console.error('IncidentAPI.updateIncidentClassification error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[67]++;
      throw error;
    }
  }
  // AI辅助分析
  static async analyzeIncidentWithAI(incidentId) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[17]++;
    cov_1n3q87sv3().s[68]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1n3q87sv3().s[69]++, await _httpclient.httpClient.post(`/api/incidents/${incidentId}/ai-analysis`));
      /* istanbul ignore next */
      cov_1n3q87sv3().s[70]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_1n3q87sv3().s[71]++;
      console.error('IncidentAPI.analyzeIncidentWithAI error:', error);
      /* istanbul ignore next */
      cov_1n3q87sv3().s[72]++;
      throw error;
    }
  }
  // 获取可关联的配置项列表
  static async getConfigurationItems(search, type, status) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[18]++;
    const params =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[73]++, {});
    /* istanbul ignore next */
    cov_1n3q87sv3().s[74]++;
    if (search) {
      /* istanbul ignore next */
      cov_1n3q87sv3().b[1][0]++;
      cov_1n3q87sv3().s[75]++;
      params.search = search;
    } else
    /* istanbul ignore next */
    {
      cov_1n3q87sv3().b[1][1]++;
    }
    cov_1n3q87sv3().s[76]++;
    if (type) {
      /* istanbul ignore next */
      cov_1n3q87sv3().b[2][0]++;
      cov_1n3q87sv3().s[77]++;
      params.type = type;
    } else
    /* istanbul ignore next */
    {
      cov_1n3q87sv3().b[2][1]++;
    }
    cov_1n3q87sv3().s[78]++;
    if (status) {
      /* istanbul ignore next */
      cov_1n3q87sv3().b[3][0]++;
      cov_1n3q87sv3().s[79]++;
      params.status = status;
    } else
    /* istanbul ignore next */
    {
      cov_1n3q87sv3().b[3][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[80]++, await _httpclient.httpClient.get('/api/v1/incidents/configuration-items', params));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[81]++;
    return response;
  }
  // 从阿里云告警创建事件
  static async createIncidentFromAlibabaCloudAlert(data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[19]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[82]++, await _httpclient.httpClient.post('/api/v1/incidents/alibaba-cloud-alert', data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[83]++;
    return response;
  }
  // 从安全事件创建事件
  static async createIncidentFromSecurityEvent(data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[20]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[84]++, await _httpclient.httpClient.post('/api/v1/incidents/security-event', data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[85]++;
    return response;
  }
  // 从云产品事件创建事件
  static async createIncidentFromCloudProductEvent(data) {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[21]++;
    const response =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[86]++, await _httpclient.httpClient.post('/api/v1/incidents/cloud-product-event', data));
    /* istanbul ignore next */
    cov_1n3q87sv3().s[87]++;
    return response;
  }
  // 模拟阿里云告警事件
  static async simulateAlibabaCloudAlert() {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[22]++;
    const mockAlert =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[88]++, {
      alert_id: `alert_${Date.now()}`,
      alert_name: 'CPU使用率过高告警',
      alert_description: '实例 i-bp1abcdefg 的CPU使用率在过去15分钟内持续高于95%',
      alert_level: 'critical',
      instance_id: 'i-bp1abcdefg',
      region: 'cn-hangzhou',
      service: 'ecs',
      metrics: {
        cpu_usage: 95.5,
        memory_usage: 78.2,
        disk_usage: 45.1
      },
      alert_data: {
        alert_rule: 'CPU使用率 > 90%',
        threshold: 90,
        current_value: 95.5,
        duration: '15分钟'
      },
      detected_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1n3q87sv3().s[89]++;
    return this.createIncidentFromAlibabaCloudAlert(mockAlert);
  }
  // 模拟安全事件
  static async simulateSecurityEvent() {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[23]++;
    const mockSecurityEvent =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[90]++, {
      event_id: `security_${Date.now()}`,
      event_type: 'SSH暴力破解',
      event_name: '检测到可疑的SSH登录尝试',
      event_description: '安全系统检测到来自未知IP地址 (47.98.x.x) 对生产环境服务器的多次SSH登录失败尝试',
      source_ip: '47.98.x.x',
      target: 'PROD-BASTION-HOST',
      severity: 'high',
      event_details: {
        failed_attempts: 15,
        time_window: '10分钟',
        target_port: 22,
        attack_type: 'brute_force'
      },
      detected_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1n3q87sv3().s[91]++;
    return this.createIncidentFromSecurityEvent(mockSecurityEvent);
  }
  // 模拟云产品事件
  static async simulateCloudProductEvent() {
    /* istanbul ignore next */
    cov_1n3q87sv3().f[24]++;
    const mockCloudEvent =
    /* istanbul ignore next */
    (cov_1n3q87sv3().s[92]++, {
      event_id: `cloud_${Date.now()}`,
      event_type: 'RDS主备同步延迟',
      event_name: '数据库主备同步延迟告警',
      event_description: '监控系统告警，生产数据库（RDS）主备同步延迟超过阈值（30秒）',
      product: 'rds',
      instance_id: 'rm-bp1abcdefg',
      region: 'cn-hangzhou',
      event_data: {
        sync_delay: 45,
        threshold: 30,
        master_status: 'running',
        slave_status: 'running'
      },
      detected_at: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_1n3q87sv3().s[93]++;
    return this.createIncidentFromCloudProductEvent(mockCloudEvent);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,