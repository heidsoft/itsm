{"version":3,"names":["cov_9grmjg03r","actualCoverage","s","AsyncFormValidator","f","AsyncValidators","FormValidator","ValidationRules","ValidationUtils","Validator","required","value","isEmpty","b","undefined","trim","Array","isArray","length","isValid","message","validateLength","min","max","pattern","regex","stringValue","String","test","range","numValue","Number","isNaN","email","emailRegex","phone","phoneRegex","url","URL","idCard","idCardRegex","constructor","config","errors","validateField","fieldName","rules","fields","rule","result","push","stopOnFirstError","minLength","maxLength","custom","validateForm","data","allErrors","getFieldErrors","getAllErrors","clearErrors","hasErrors","Object","keys","username","password","ticketTitle","ticketDescription","registerValidator","validator","validators","validateFieldAsync","debounceTimers","clearTimeout","Promise","resolve","debounceMs","setTimeout","validate","cleanup","values","forEach","timer","uniqueUsername","isUnique","includes","toLowerCase","uniqueEmail","formatResult","createFormValidator","validateOnChange","validateOnBlur","validateValue","temp","mergeValidationResults","results"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/utils/validation.ts"],"sourcesContent":["// 验证结果接口\nexport interface ValidationResult {\n  isValid: boolean;\n  message?: string;\n  errors?: string[];\n}\n\n// 验证规则接口\nexport interface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  pattern?: RegExp;\n  min?: number;\n  max?: number;\n  custom?: (value: unknown) => ValidationResult;\n}\n\n// 字段验证配置\nexport interface FieldValidation {\n  [fieldName: string]: ValidationRule[];\n}\n\n// 表单验证配置\nexport interface FormValidationConfig {\n  fields: FieldValidation;\n  validateOnChange?: boolean;\n  validateOnBlur?: boolean;\n  stopOnFirstError?: boolean;\n}\n\n// 验证器类\nexport class Validator {\n  // 必填验证\n  static required(value: unknown): ValidationResult {\n    const isEmpty = value === null || \n                   value === undefined || \n                   (typeof value === 'string' && value.trim() === '') ||\n                   (Array.isArray(value) && value.length === 0);\n    \n    return {\n      isValid: !isEmpty,\n      message: isEmpty ? '此字段为必填项' : undefined\n    };\n  }\n\n  // 长度验证\n  static validateLength(value: unknown, min?: number, max?: number): ValidationResult {\n    if (value === null || value === undefined) {\n      return { isValid: true };\n    }\n\n    const length = typeof value === 'string' ? value.length : \n                  Array.isArray(value) ? value.length : 0;\n\n    if (min !== undefined && length < min) {\n      return {\n        isValid: false,\n        message: `长度不能少于${min}个字符`\n      };\n    }\n\n    if (max !== undefined && length > max) {\n      return {\n        isValid: false,\n        message: `长度不能超过${max}个字符`\n      };\n    }\n\n    return { isValid: true };\n  }\n\n  // 正则表达式验证\n  static pattern(value: unknown, regex: RegExp, message?: string): ValidationResult {\n    if (value === null || value === undefined || value === '') {\n      return { isValid: true };\n    }\n\n    const stringValue = String(value);\n    const isValid = regex.test(stringValue);\n\n    return {\n      isValid,\n      message: isValid ? undefined : (message || '格式不正确')\n    };\n  }\n\n  // 数值范围验证\n  static range(value: unknown, min?: number, max?: number): ValidationResult {\n    if (value === null || value === undefined || value === '') {\n      return { isValid: true };\n    }\n\n    const numValue = Number(value);\n    if (isNaN(numValue)) {\n      return {\n        isValid: false,\n        message: '必须是有效数字'\n      };\n    }\n\n    if (min !== undefined && numValue < min) {\n      return {\n        isValid: false,\n        message: `数值不能小于${min}`\n      };\n    }\n\n    if (max !== undefined && numValue > max) {\n      return {\n        isValid: false,\n        message: `数值不能大于${max}`\n      };\n    }\n\n    return { isValid: true };\n  }\n\n  // 邮箱验证\n  static email(value: unknown): ValidationResult {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return Validator.pattern(value, emailRegex, '请输入有效的邮箱地址');\n  }\n\n  // 手机号验证\n  static phone(value: unknown): ValidationResult {\n    const phoneRegex = /^1[3-9]\\d{9}$/;\n    return Validator.pattern(value, phoneRegex, '请输入有效的手机号码');\n  }\n\n  // URL验证\n  static url(value: unknown): ValidationResult {\n    if (value === null || value === undefined || value === '') {\n      return { isValid: true };\n    }\n\n    try {\n      new URL(String(value));\n      return { isValid: true };\n    } catch {\n      return {\n        isValid: false,\n        message: '请输入有效的URL地址'\n      };\n    }\n  }\n\n  // 身份证验证\n  static idCard(value: unknown): ValidationResult {\n    const idCardRegex = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\n    return Validator.pattern(value, idCardRegex, '请输入有效的身份证号码');\n  }\n}\n\n// 表单验证器类\nexport class FormValidator {\n  private config: FormValidationConfig;\n  private errors: Record<string, string[]> = {};\n\n  constructor(config: FormValidationConfig) {\n    this.config = config;\n  }\n\n  // 验证单个字段\n  validateField(fieldName: string, value: unknown): ValidationResult {\n    const rules = this.config.fields[fieldName];\n    if (!rules) {\n      return { isValid: true };\n    }\n\n    const errors: string[] = [];\n\n    for (const rule of rules) {\n      let result: ValidationResult;\n\n      // 必填验证\n      if (rule.required) {\n        result = Validator.required(value);\n        if (!result.isValid && result.message) {\n          errors.push(result.message);\n          if (this.config.stopOnFirstError) break;\n        }\n      }\n\n      // 如果值为空且不是必填，跳过其他验证\n      if ((value === null || value === undefined || value === '') && !rule.required) {\n        continue;\n      }\n\n      // 长度验证\n       if (rule.minLength !== undefined || rule.maxLength !== undefined) {\n         result = Validator.validateLength(value, rule.minLength, rule.maxLength);\n         if (!result.isValid && result.message) {\n           errors.push(result.message);\n           if (this.config.stopOnFirstError) break;\n         }\n       }\n\n      // 正则验证\n      if (rule.pattern) {\n        result = Validator.pattern(value, rule.pattern);\n        if (!result.isValid && result.message) {\n          errors.push(result.message);\n          if (this.config.stopOnFirstError) break;\n        }\n      }\n\n      // 数值范围验证\n      if (rule.min !== undefined || rule.max !== undefined) {\n        result = Validator.range(value, rule.min, rule.max);\n        if (!result.isValid && result.message) {\n          errors.push(result.message);\n          if (this.config.stopOnFirstError) break;\n        }\n      }\n\n      // 自定义验证\n      if (rule.custom) {\n        result = rule.custom(value);\n        if (!result.isValid && result.message) {\n          errors.push(result.message);\n          if (this.config.stopOnFirstError) break;\n        }\n      }\n    }\n\n    // 更新错误状态\n    if (errors.length > 0) {\n      this.errors[fieldName] = errors;\n    } else {\n      delete this.errors[fieldName];\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors: errors.length > 0 ? errors : undefined\n    };\n  }\n\n  // 验证整个表单\n  validateForm(data: Record<string, unknown>): ValidationResult {\n    this.errors = {};\n    const allErrors: string[] = [];\n\n    for (const fieldName in this.config.fields) {\n      const result = this.validateField(fieldName, data[fieldName]);\n      if (!result.isValid && result.errors) {\n        allErrors.push(...result.errors);\n      }\n    }\n\n    return {\n      isValid: allErrors.length === 0,\n      errors: allErrors.length > 0 ? allErrors : undefined\n    };\n  }\n\n  // 获取字段错误\n  getFieldErrors(fieldName: string): string[] {\n    return this.errors[fieldName] || [];\n  }\n\n  // 获取所有错误\n  getAllErrors(): Record<string, string[]> {\n    return { ...this.errors };\n  }\n\n  // 清除错误\n  clearErrors(fieldName?: string): void {\n    if (fieldName) {\n      delete this.errors[fieldName];\n    } else {\n      this.errors = {};\n    }\n  }\n\n  // 检查是否有错误\n  hasErrors(fieldName?: string): boolean {\n    if (fieldName) {\n      return this.errors[fieldName]?.length > 0;\n    }\n    return Object.keys(this.errors).length > 0;\n  }\n}\n\n// 预定义验证规则\nexport const ValidationRules = {\n  // 用户名规则\n  username: [\n    { required: true },\n    { minLength: 3, maxLength: 20 },\n    { pattern: /^[a-zA-Z0-9_]+$/ }\n  ],\n\n  // 密码规则\n  password: [\n    { required: true },\n    { minLength: 8, maxLength: 50 },\n    { pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/ }\n  ],\n\n  // 邮箱规则\n  email: [\n    { required: true },\n    { custom: Validator.email }\n  ],\n\n  // 手机号规则\n  phone: [\n    { required: true },\n    { custom: Validator.phone }\n  ],\n\n  // 工单标题规则\n  ticketTitle: [\n    { required: true },\n    { minLength: 5, maxLength: 100 }\n  ],\n\n  // 工单描述规则\n  ticketDescription: [\n    { required: true },\n    { minLength: 10, maxLength: 2000 }\n  ]\n};\n\n// 异步验证器接口\nexport interface AsyncValidator {\n  validate: (value: unknown) => Promise<ValidationResult>;\n  debounceMs?: number;\n}\n\n// 异步验证器类\nexport class AsyncFormValidator {\n  private validators: Record<string, AsyncValidator> = {};\n  private debounceTimers: Record<string, NodeJS.Timeout> = {};\n\n  // 注册异步验证器\n  registerValidator(fieldName: string, validator: AsyncValidator): void {\n    this.validators[fieldName] = validator;\n  }\n\n  // 异步验证字段\n  async validateFieldAsync(fieldName: string, value: unknown): Promise<ValidationResult> {\n    const validator = this.validators[fieldName];\n    if (!validator) {\n      return { isValid: true };\n    }\n\n    // 清除之前的定时器\n    if (this.debounceTimers[fieldName]) {\n      clearTimeout(this.debounceTimers[fieldName]);\n    }\n\n    // 防抖处理\n    return new Promise((resolve) => {\n      const debounceMs = validator.debounceMs || 300;\n      \n      this.debounceTimers[fieldName] = setTimeout(async () => {\n        try {\n          const result = await validator.validate(value);\n          resolve(result);\n        } catch {\n           resolve({\n             isValid: false,\n             message: '验证过程中发生错误'\n           });\n         }\n      }, debounceMs);\n    });\n  }\n\n  // 清理定时器\n  cleanup(): void {\n    Object.values(this.debounceTimers).forEach(timer => {\n      clearTimeout(timer);\n    });\n    this.debounceTimers = {};\n  }\n}\n\n// 常用异步验证器\nexport const AsyncValidators = {\n  // 用户名唯一性验证\n  uniqueUsername: {\n    validate: async (value: unknown): Promise<ValidationResult> => {\n      if (!value || typeof value !== 'string') {\n        return { isValid: true };\n      }\n\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // 这里应该调用实际的API\n      const isUnique = !['admin', 'root', 'test'].includes(value.toLowerCase());\n      \n      return {\n        isValid: isUnique,\n        message: isUnique ? undefined : '用户名已存在'\n      };\n    },\n    debounceMs: 500\n  },\n\n  // 邮箱唯一性验证\n  uniqueEmail: {\n    validate: async (value: unknown): Promise<ValidationResult> => {\n      if (!value || typeof value !== 'string') {\n        return { isValid: true };\n      }\n\n      // 先进行格式验证\n      const formatResult = Validator.email(value);\n      if (!formatResult.isValid) {\n        return formatResult;\n      }\n\n      // 模拟API调用\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // 这里应该调用实际的API\n      const isUnique = !value.includes('test@');\n      \n      return {\n        isValid: isUnique,\n        message: isUnique ? undefined : '邮箱已被注册'\n      };\n    },\n    debounceMs: 500\n  }\n};\n\n// 验证工具函数\nexport const ValidationUtils = {\n  // 创建表单验证器\n  createFormValidator: (fields: FieldValidation): FormValidator => {\n    return new FormValidator({\n      fields,\n      validateOnChange: true,\n      validateOnBlur: true,\n      stopOnFirstError: false\n    });\n  },\n\n  // 验证单个值\n  validateValue: (value: unknown, rules: ValidationRule[]): ValidationResult => {\n    const validator = new FormValidator({\n      fields: { temp: rules }\n    });\n    return validator.validateField('temp', value);\n  },\n\n  // 合并验证结果\n  mergeValidationResults: (...results: ValidationResult[]): ValidationResult => {\n    const allErrors: string[] = [];\n    let isValid = true;\n\n    for (const result of results) {\n      if (!result.isValid) {\n        isValid = false;\n        if (result.message) {\n          allErrors.push(result.message);\n        }\n        if (result.errors) {\n          allErrors.push(...result.errors);\n        }\n      }\n    }\n\n    return {\n      isValid,\n      errors: allErrors.length > 0 ? allErrors : undefined\n    };\n  }\n};"],"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","ignoreList":[]}