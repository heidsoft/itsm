{"version":3,"names":["config","cov_b2s6zod2w","f","s","middleware","protectedRoutes","publicRoutes","apiRoutes","request","pathname","nextUrl","token","cookies","get","value","some","route","startsWith","b","_server","NextResponse","next","isProtectedRoute","isPublicRoute","loginUrl","URL","url","searchParams","set","redirect","matcher"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// 需要认证的路由\nconst protectedRoutes = [\n  '/dashboard',\n  '/tickets',\n  '/incidents',\n  '/problems',\n  '/changes',\n  '/assets',\n  '/users',\n  '/settings',\n  '/reports',\n];\n\n// 公开路由（不需要认证）\nconst publicRoutes = [\n  '/login',\n  '/register',\n  '/forgot-password',\n  '/reset-password',\n];\n\n// API路由（需要特殊处理）\nconst apiRoutes = [\n  '/api',\n];\n\n/**\n * Next.js 中间件\n * 处理路由保护和认证检查\n */\nexport function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const token = request.cookies.get('auth-token')?.value;\n\n  // 检查是否为API路由\n  if (apiRoutes.some(route => pathname.startsWith(route))) {\n    // API路由的认证检查由后端处理\n    return NextResponse.next();\n  }\n\n  // 检查是否为受保护的路由\n  const isProtectedRoute = protectedRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // 检查是否为公开路由\n  const isPublicRoute = publicRoutes.some(route => \n    pathname.startsWith(route)\n  );\n\n  // 如果是受保护的路由但没有token，重定向到登录页\n  if (isProtectedRoute && !token) {\n    const loginUrl = new URL('/login', request.url);\n    loginUrl.searchParams.set('redirect', pathname);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // 如果已登录用户访问公开路由，重定向到仪表盘\n  if (isPublicRoute && token) {\n    return NextResponse.redirect(new URL('/dashboard', request.url));\n  }\n\n  // 根路径重定向\n  if (pathname === '/') {\n    if (token) {\n      return NextResponse.redirect(new URL('/dashboard', request.url));\n    } else {\n      return NextResponse.redirect(new URL('/login', request.url));\n    }\n  }\n\n  return NextResponse.next();\n}\n\n// 配置中间件匹配的路径\nexport const config = {\n  matcher: [\n    /*\n     * 匹配所有路径除了:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|public).*)',\n  ],\n};"],"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","ignoreList":[]}