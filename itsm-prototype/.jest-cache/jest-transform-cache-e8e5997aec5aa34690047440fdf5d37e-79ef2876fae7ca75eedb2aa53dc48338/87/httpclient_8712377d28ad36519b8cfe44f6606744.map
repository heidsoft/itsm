{"version":3,"names":["API_CONFIG","cov_fdxeq77sb","f","s","HttpError","TokenManager","api","getApiUrl","httpClient","Error","constructor","status","code","message","response","name","BASE_URL","b","process","env","NEXT_PUBLIC_API_URL","VERSION","TIMEOUT","MAX_RETRIES","RETRY_DELAY","endpoint","baseUrl","replace","cleanEndpoint","startsWith","TOKEN_KEY","REFRESH_TOKEN_KEY","getToken","window","localStorage","getItem","setToken","token","setItem","getRefreshToken","setRefreshToken","clearTokens","removeItem","HttpClient","createHeaders","config","headers","Authorization","handleResponse","contentType","get","isJson","includes","responseData","json","text","ok","statusText","data","error","location","href","delay","ms","Promise","resolve","setTimeout","executeRequest","url","options","maxRetries","retries","defaultConfig","lastError","attempt","console","log","method","controller","AbortController","timeoutId","abort","timeout","fetch","signal","clearTimeout","Object","fromEntries","entries","retryDelay","Math","pow","params","URL","forEach","key","value","undefined","searchParams","append","String","toString","post","body","JSON","stringify","put","patch","delete","upload","file","formData","FormData"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/lib/http-client.ts"],"sourcesContent":["/**\n * HTTP客户端 - 统一的API请求处理\n * \n * 功能特性：\n * - 统一的请求/响应拦截\n * - 自动错误处理\n * - JWT Token 自动添加\n * - 请求重试机制\n * - 请求/响应日志\n */\n\n// API响应接口\nexport interface ApiResponse<T = unknown> {\n  code: number;\n  message: string;\n  data: T;\n}\n\n// 请求配置接口\nexport interface RequestConfig {\n  headers?: Record<string, string>;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n// HTTP错误类\nexport class HttpError extends Error {\n  constructor(\n    public status: number,\n    public code: number,\n    message: string,\n    public response?: Response\n  ) {\n    super(message);\n    this.name = 'HttpError';\n  }\n}\n\n// API配置\nexport const API_CONFIG = {\n  BASE_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080',\n  VERSION: 'v1',\n  TIMEOUT: 30000, // 30秒超时\n  MAX_RETRIES: 3,\n  RETRY_DELAY: 1000, // 1秒重试延迟\n};\n\n// 获取API URL\nexport const getApiUrl = (endpoint: string): string => {\n  const baseUrl = API_CONFIG.BASE_URL.replace(/\\/$/, '');\n  const cleanEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  return `${baseUrl}/api/${API_CONFIG.VERSION}${cleanEndpoint}`;\n};\n\n// Token管理\nclass TokenManager {\n  private static readonly TOKEN_KEY = 'auth_token';\n  private static readonly REFRESH_TOKEN_KEY = 'refresh_token';\n\n  static getToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  static setToken(token: string): void {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  static getRefreshToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n  }\n\n  static setRefreshToken(token: string): void {\n    if (typeof window === 'undefined') return;\n    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\n  }\n\n  static clearTokens(): void {\n    if (typeof window === 'undefined') return;\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n  }\n}\n\n// HTTP客户端类\nclass HttpClient {\n  private defaultConfig: RequestConfig = {\n    timeout: API_CONFIG.TIMEOUT,\n    retries: API_CONFIG.MAX_RETRIES,\n    retryDelay: API_CONFIG.RETRY_DELAY,\n  };\n\n  // 创建请求头\n  private createHeaders(config?: RequestConfig): Record<string, string> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...config?.headers,\n    };\n\n    // 添加认证头\n    const token = TokenManager.getToken();\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    return headers;\n  }\n\n  // 处理响应\n  private async handleResponse<T>(response: Response): Promise<T> {\n    const contentType = response.headers.get('content-type');\n    const isJson = contentType?.includes('application/json');\n\n    let responseData: ApiResponse<T>;\n    \n    try {\n      if (isJson) {\n        responseData = await response.json();\n      } else {\n        // 非JSON响应，包装为标准格式\n        const text = await response.text();\n        responseData = {\n          code: response.ok ? 0 : response.status,\n          message: response.ok ? 'success' : text || response.statusText,\n          data: text as T,\n        };\n      }\n    } catch (error) {\n      throw new HttpError(\n        response.status,\n        response.status,\n        `Failed to parse response: ${error}`,\n        response\n      );\n    }\n\n    // 检查HTTP状态码\n    if (!response.ok) {\n      throw new HttpError(\n        response.status,\n        responseData.code || response.status,\n        responseData.message || response.statusText,\n        response\n      );\n    }\n\n    // 检查业务状态码\n    if (responseData.code !== 0) {\n      // 处理认证失败\n      if (responseData.code === 2001) {\n        TokenManager.clearTokens();\n        // 可以在这里触发重新登录\n        if (typeof window !== 'undefined') {\n          window.location.href = '/login';\n        }\n      }\n      \n      throw new HttpError(\n        response.status,\n        responseData.code,\n        responseData.message || '请求失败',\n        response\n      );\n    }\n\n    return responseData.data;\n  }\n\n  // 延迟函数\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // 执行请求（带重试）\n  private async executeRequest<T>(\n    url: string,\n    options: RequestInit,\n    config: RequestConfig\n  ): Promise<T> {\n    const maxRetries = config.retries || this.defaultConfig.retries || 0;\n    let lastError: Error;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`HTTP Request [${options.method}] ${url}`, {\n          attempt: attempt + 1,\n          maxRetries: maxRetries + 1,\n          headers: options.headers,\n        });\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => {\n          controller.abort();\n        }, config.timeout || this.defaultConfig.timeout);\n\n        const response = await fetch(url, {\n          ...options,\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeoutId);\n\n        console.log(`HTTP Response [${response.status}] ${url}`, {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries()),\n        });\n\n        return await this.handleResponse<T>(response);\n      } catch (error) {\n        lastError = error as Error;\n        \n        console.error(`HTTP Request failed [${options.method}] ${url}`, {\n          attempt: attempt + 1,\n          error: lastError.message,\n        });\n\n        // 最后一次尝试，不再重试\n        if (attempt === maxRetries) {\n          break;\n        }\n\n        // 只对特定错误进行重试\n        if (error instanceof HttpError) {\n          // 4xx错误不重试（除了429）\n          if (error.status >= 400 && error.status < 500 && error.status !== 429) {\n            break;\n          }\n        }\n\n        // 等待后重试\n        const retryDelay = config.retryDelay || this.defaultConfig.retryDelay || 1000;\n        await this.delay(retryDelay * Math.pow(2, attempt)); // 指数退避\n      }\n    }\n\n    throw lastError!;\n  }\n\n  // GET请求\n  async get<T>(endpoint: string, params?: Record<string, unknown>, config?: RequestConfig): Promise<T> {\n    const url = new URL(getApiUrl(endpoint));\n    \n    // 添加查询参数\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, String(value));\n        }\n      });\n    }\n\n    return this.executeRequest<T>(\n      url.toString(),\n      {\n        method: 'GET',\n        headers: this.createHeaders(config),\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n\n  // POST请求\n  async post<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {\n    return this.executeRequest<T>(\n      getApiUrl(endpoint),\n      {\n        method: 'POST',\n        headers: this.createHeaders(config),\n        body: data ? JSON.stringify(data) : undefined,\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n\n  // PUT请求\n  async put<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {\n    return this.executeRequest<T>(\n      getApiUrl(endpoint),\n      {\n        method: 'PUT',\n        headers: this.createHeaders(config),\n        body: data ? JSON.stringify(data) : undefined,\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n\n  // PATCH请求\n  async patch<T>(endpoint: string, data?: unknown, config?: RequestConfig): Promise<T> {\n    return this.executeRequest<T>(\n      getApiUrl(endpoint),\n      {\n        method: 'PATCH',\n        headers: this.createHeaders(config),\n        body: data ? JSON.stringify(data) : undefined,\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n\n  // DELETE请求\n  async delete<T>(endpoint: string, config?: RequestConfig): Promise<T> {\n    return this.executeRequest<T>(\n      getApiUrl(endpoint),\n      {\n        method: 'DELETE',\n        headers: this.createHeaders(config),\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n\n  // 上传文件\n  async upload<T>(endpoint: string, file: File, config?: RequestConfig): Promise<T> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const headers = this.createHeaders(config);\n    // 删除Content-Type，让浏览器自动设置\n    delete headers['Content-Type'];\n\n    return this.executeRequest<T>(\n      getApiUrl(endpoint),\n      {\n        method: 'POST',\n        headers,\n        body: formData,\n      },\n      { ...this.defaultConfig, ...config }\n    );\n  }\n}\n\n// 导出单例实例\nexport const httpClient = new HttpClient();\n\n// 导出Token管理器\nexport { TokenManager };\n\n// 便捷方法\nexport const api = {\n  get: <T>(endpoint: string, params?: Record<string, unknown>, config?: RequestConfig) =>\n    httpClient.get<T>(endpoint, params, config),\n  \n  post: <T>(endpoint: string, data?: unknown, config?: RequestConfig) =>\n    httpClient.post<T>(endpoint, data, config),\n  \n  put: <T>(endpoint: string, data?: unknown, config?: RequestConfig) =>\n    httpClient.put<T>(endpoint, data, config),\n  \n  patch: <T>(endpoint: string, data?: unknown, config?: RequestConfig) =>\n    httpClient.patch<T>(endpoint, data, config),\n  \n  delete: <T>(endpoint: string, config?: RequestConfig) =>\n    httpClient.delete<T>(endpoint, config),\n  \n  upload: <T>(endpoint: string, file: File, config?: RequestConfig) =>\n    httpClient.upload<T>(endpoint, file, config),\n};"],"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","ignoreList":[]}