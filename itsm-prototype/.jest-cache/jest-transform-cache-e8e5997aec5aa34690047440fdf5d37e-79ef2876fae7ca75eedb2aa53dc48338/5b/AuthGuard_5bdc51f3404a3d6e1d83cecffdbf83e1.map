{"version":3,"names":["cov_2875t0y8zg","actualCoverage","s","AuthGuard","children","f","router","_navigation","useRouter","pathname","usePathname","isLoading","setIsLoading","_react","useState","isAuthenticated","setIsAuthenticated","hasChecked","setHasChecked","useEffect","checkAuth","console","log","authenticated","_authservice","AuthService","b","push","timer","setTimeout","clearTimeout","_jsxruntime","jsx","className","Fragment"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/components/AuthGuard.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter, usePathname } from \"next/navigation\";\nimport { AuthService } from \"../lib/auth-service\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport function AuthGuard({ children }: AuthGuardProps) {\n  const router = useRouter();\n  const pathname = usePathname();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [hasChecked, setHasChecked] = useState(false);\n\n  useEffect(() => {\n    const checkAuth = () => {\n      console.log(\"AuthGuard: 检查认证状态\", { pathname });\n\n      const authenticated = AuthService.isAuthenticated();\n      console.log(\"AuthGuard: 认证状态\", { authenticated, pathname });\n\n      setIsAuthenticated(authenticated);\n      setIsLoading(false);\n      setHasChecked(true);\n\n      // 只有在已经检查过且状态稳定时才进行重定向\n      if (hasChecked) {\n        // 如果未认证且不在登录页面，重定向到登录页\n        if (\n          !authenticated &&\n          pathname !== \"/login\" &&\n          pathname !== \"/simple-test\"\n        ) {\n          console.log(\"AuthGuard: 未认证，重定向到登录页\");\n          router.push(\"/login\");\n          return;\n        }\n\n        // 如果已认证且在登录页面，重定向到dashboard\n        if (authenticated && pathname === \"/login\") {\n          console.log(\"AuthGuard: 已认证且在登录页，重定向到dashboard\");\n          router.push(\"/dashboard\");\n          return;\n        }\n      }\n\n      console.log(\"AuthGuard: 状态正常，显示内容\");\n    };\n\n    // 添加延迟确保状态更新\n    const timer = setTimeout(checkAuth, 200);\n    return () => clearTimeout(timer);\n  }, [router, pathname, hasChecked]);\n\n  if (isLoading) {\n    console.log(\"AuthGuard: 显示加载状态\");\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // 如果在登录页面，直接显示内容\n  if (pathname === \"/login\") {\n    console.log(\"AuthGuard: 在登录页面，直接显示内容\");\n    return <>{children}</>;\n  }\n\n  // 如果已认证，显示内容\n  if (isAuthenticated) {\n    console.log(\"AuthGuard: 已认证，显示内容\");\n    return <>{children}</>;\n  }\n\n  // 其他情况显示加载状态\n  console.log(\"AuthGuard: 其他情况，显示加载状态\");\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}