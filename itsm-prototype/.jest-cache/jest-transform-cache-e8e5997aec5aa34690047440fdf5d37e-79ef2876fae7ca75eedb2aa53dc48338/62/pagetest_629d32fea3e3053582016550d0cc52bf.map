{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/login/__tests__/page.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport LoginPage from '../page';\nimport { authService } from '@/lib/auth';\nimport { useNotifications } from '@/lib/store/ui-store';\n\n// Mock dependencies\njest.mock('@/lib/auth', () => ({\n  authService: {\n    login: jest.fn(),\n  },\n}));\njest.mock('@/lib/store/ui-store');\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n  }),\n}));\n\n// Mock Ant Design components with proper types\njest.mock('antd', () => ({\n  Form: ({ children, onFinish, ...props }: { children: React.ReactNode; onFinish?: (values: Record<string, string>) => void; [key: string]: unknown }) => (\n    <form onSubmit={(e) => { e.preventDefault(); onFinish?.({}); }} {...props}>\n      {children}\n    </form>\n  ),\n  Input: ({ placeholder, type, ...props }: { placeholder?: string; type?: string; [key: string]: unknown }) => (\n    <input \n      placeholder={placeholder} \n      type={type || 'text'} \n      data-testid={`input-${placeholder?.toLowerCase()}`}\n      {...props} \n    />\n  ),\n  Button: ({ children, loading, htmlType, ...props }: { children: React.ReactNode; loading?: boolean; htmlType?: 'button' | 'submit' | 'reset'; [key: string]: unknown }) => (\n    <button \n      type={htmlType || 'button'} \n      disabled={loading}\n      data-testid=\"login-button\"\n      {...props}\n    >\n      {loading ? 'Loading...' : children}\n    </button>\n  ),\n  Card: ({ children, title, ...props }: { children: React.ReactNode; title?: string; [key: string]: unknown }) => (\n    <div data-testid=\"login-card\" {...props}>\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  ),\n  Typography: {\n    Title: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (\n      <h1 data-testid=\"login-title\" {...props}>{children}</h1>\n    ),\n    Text: ({ children, type, ...props }: { children: React.ReactNode; type?: string; [key: string]: unknown }) => (\n      <span data-testid={`text-${type || 'default'}`} {...props}>{children}</span>\n    ),\n  },\n  Space: ({ children, ...props }: { children: React.ReactNode; [key: string]: unknown }) => (\n    <div data-testid=\"space\" {...props}>{children}</div>\n  ),\n}));\n\n// Mock Lucide React icons\njest.mock('lucide-react', () => ({\n  Lock: () => <div data-testid=\"lock-icon\">Lock</div>,\n  User: () => <div data-testid=\"user-icon\">User</div>,\n}));\n\nconst mockAuthService = authService as jest.Mocked<typeof authService>;\nconst mockUseNotifications = useNotifications as jest.MockedFunction<typeof useNotifications>;\n\ndescribe('LoginPage', () => {\n  const mockNotifications = {\n    success: jest.fn(),\n    error: jest.fn(),\n    warning: jest.fn(),\n    info: jest.fn(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseNotifications.mockReturnValue(mockNotifications);\n  });\n\n  describe('Rendering', () => {\n    it('should render login form with all required elements', () => {\n      render(<LoginPage />);\n      \n      expect(screen.getByTestId('login-card')).toBeInTheDocument();\n      expect(screen.getByTestId('login-title')).toHaveTextContent('登录');\n      expect(screen.getByTestId('input-用户名')).toBeInTheDocument();\n      expect(screen.getByTestId('input-密码')).toBeInTheDocument();\n      expect(screen.getByTestId('login-button')).toBeInTheDocument();\n    });\n\n    it('should render icons for username and password fields', () => {\n      render(<LoginPage />);\n      \n      expect(screen.getByTestId('user-icon')).toBeInTheDocument();\n      expect(screen.getByTestId('lock-icon')).toBeInTheDocument();\n    });\n\n    it('should have proper form structure', () => {\n      render(<LoginPage />);\n      \n      const form = screen.getByRole('form');\n      expect(form).toBeInTheDocument();\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      \n      expect(usernameInput).toHaveAttribute('placeholder', '用户名');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n      expect(passwordInput).toHaveAttribute('placeholder', '密码');\n    });\n  });\n\n  describe('Form Interaction', () => {\n    it('should allow user to type in username and password fields', async () => {\n      const user = userEvent.setup();\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      \n      expect(usernameInput).toHaveValue('testuser');\n      expect(passwordInput).toHaveValue('testpass');\n    });\n\n    it('should handle form submission', async () => {\n      const user = userEvent.setup();\n      mockAuthService.login = jest.fn().mockResolvedValue({\n        success: true,\n        user: { id: 1, username: 'testuser' },\n        token: 'mock-token'\n      });\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      await user.click(loginButton);\n      \n      expect(mockAuthService.login).toHaveBeenCalledWith('testuser', 'testpass');\n    });\n  });\n\n  describe('Authentication Flow', () => {\n    it('should show loading state during login', async () => {\n      const user = userEvent.setup();\n      mockAuthService.login = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(resolve, 100))\n      );\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      await user.click(loginButton);\n      \n      expect(loginButton).toHaveTextContent('Loading...');\n      expect(loginButton).toBeDisabled();\n    });\n\n    it('should handle successful login', async () => {\n      const user = userEvent.setup();\n      mockAuthService.login = jest.fn().mockResolvedValue({\n        success: true,\n        user: { id: 1, username: 'testuser' },\n        token: 'mock-token'\n      });\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      await user.click(loginButton);\n      \n      await waitFor(() => {\n        expect(mockNotifications.success).toHaveBeenCalledWith('登录成功');\n      });\n    });\n\n    it('should handle login failure with error message', async () => {\n      const user = userEvent.setup();\n      const errorMessage = '用户名或密码错误';\n      mockAuthService.login = jest.fn().mockRejectedValue(new Error(errorMessage));\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'wronguser');\n      await user.type(passwordInput, 'wrongpass');\n      await user.click(loginButton);\n      \n      await waitFor(() => {\n        expect(mockNotifications.error).toHaveBeenCalledWith(errorMessage);\n      });\n    });\n\n    it('should handle network error gracefully', async () => {\n      const user = userEvent.setup();\n      mockAuthService.login = jest.fn().mockRejectedValue(new Error('Network Error'));\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      await user.click(loginButton);\n      \n      await waitFor(() => {\n        expect(mockNotifications.error).toHaveBeenCalledWith('Network Error');\n      });\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should handle empty form submission', async () => {\n      const user = userEvent.setup();\n      render(<LoginPage />);\n      \n      const loginButton = screen.getByTestId('login-button');\n      await user.click(loginButton);\n      \n      // Form should still be submittable but AuthService should handle validation\n      expect(mockAuthService.login).toHaveBeenCalledWith('', '');\n    });\n\n    it('should handle partial form data', async () => {\n      const user = userEvent.setup();\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.click(loginButton);\n      \n      expect(mockAuthService.login).toHaveBeenCalledWith('testuser', '');\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper form accessibility', () => {\n      render(<LoginPage />);\n      \n      const form = screen.getByRole('form');\n      expect(form).toBeInTheDocument();\n      \n      const loginButton = screen.getByRole('button');\n      expect(loginButton).toBeInTheDocument();\n    });\n\n    it('should have proper input types for security', () => {\n      render(<LoginPage />);\n      \n      const passwordInput = screen.getByTestId('input-密码');\n      expect(passwordInput).toHaveAttribute('type', 'password');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle AuthService returning undefined', async () => {\n      const user = userEvent.setup();\n      mockAuthService.login = jest.fn().mockResolvedValue(undefined);\n\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      const loginButton = screen.getByTestId('login-button');\n      \n      await user.type(usernameInput, 'testuser');\n      await user.type(passwordInput, 'testpass');\n      await user.click(loginButton);\n      \n      await waitFor(() => {\n        expect(mockAuthService.login).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle very long input values', async () => {\n      const user = userEvent.setup();\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const longUsername = 'a'.repeat(1000);\n      \n      await user.type(usernameInput, longUsername);\n      expect(usernameInput).toHaveValue(longUsername);\n    });\n\n    it('should handle special characters in input', async () => {\n      const user = userEvent.setup();\n      render(<LoginPage />);\n      \n      const usernameInput = screen.getByTestId('input-用户名');\n      const passwordInput = screen.getByTestId('input-密码');\n      \n      const specialUsername = 'user@domain.com';\n      const specialPassword = 'P@ssw0rd!#$';\n      \n      await user.type(usernameInput, specialUsername);\n      await user.type(passwordInput, specialPassword);\n      \n      expect(usernameInput).toHaveValue(specialUsername);\n      expect(passwordInput).toHaveValue(specialPassword);\n    });\n  });\n});"],"names":["jest","mock","authService","login","fn","useRouter","push","replace","Form","children","onFinish","props","form","onSubmit","e","preventDefault","Input","placeholder","type","input","data-testid","toLowerCase","Button","loading","htmlType","button","disabled","Card","title","div","h2","Typography","Title","h1","Text","span","Space","Lock","User","mockAuthService","mockUseNotifications","useNotifications","describe","mockNotifications","success","error","warning","info","beforeEach","clearAllMocks","mockReturnValue","it","render","LoginPage","expect","screen","getByTestId","toBeInTheDocument","toHaveTextContent","getByRole","usernameInput","passwordInput","toHaveAttribute","user","userEvent","setup","toHaveValue","mockResolvedValue","id","username","token","loginButton","click","toHaveBeenCalledWith","mockImplementation","Promise","resolve","setTimeout","toBeDisabled","waitFor","errorMessage","mockRejectedValue","Error","undefined","toHaveBeenCalled","longUsername","repeat","specialUsername","specialPassword"],"mappings":"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"}