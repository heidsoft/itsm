f2e6dfa42adc5ecbed22e8bb650c28ab
// 安全工具库
// XSS防护
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    contentSecurity: function() {
        return contentSecurity;
    },
    csrfProtection: function() {
        return csrfProtection;
    },
    encryption: function() {
        return encryption;
    },
    inputSanitization: function() {
        return inputSanitization;
    },
    networkSecurity: function() {
        return networkSecurity;
    },
    passwordSecurity: function() {
        return passwordSecurity;
    },
    security: function() {
        return security;
    },
    securityConfig: function() {
        return securityConfig;
    },
    securityLogger: function() {
        return securityLogger;
    },
    sessionSecurity: function() {
        return sessionSecurity;
    },
    xssProtection: function() {
        return xssProtection;
    }
});
const xssProtection = {
    // HTML转义
    escapeHtml: (text)=>{
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;',
            '/': '&#x2F;'
        };
        return text.replace(/[&<>"'\/]/g, (s)=>map[s]);
    },
    // HTML反转义
    unescapeHtml: (text)=>{
        const map = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'",
            '&#x2F;': '/'
        };
        return text.replace(/&(amp|lt|gt|quot|#39|#x2F);/g, (s)=>map[s]);
    },
    // 清理HTML标签
    stripHtml: (html)=>{
        return html.replace(/<[^>]*>/g, '');
    },
    // 安全的innerHTML设置
    safeInnerHTML: (element, html)=>{
        element.innerHTML = xssProtection.escapeHtml(html);
    }
};
const csrfProtection = {
    // 生成CSRF令牌
    generateToken: ()=>{
        const array = new Uint8Array(32);
        crypto.getRandomValues(array);
        return Array.from(array, (byte)=>byte.toString(16).padStart(2, '0')).join('');
    },
    // 验证CSRF令牌
    validateToken: (token, expectedToken)=>{
        if (!token || !expectedToken) return false;
        return token === expectedToken;
    },
    // 从meta标签获取CSRF令牌
    getTokenFromMeta: ()=>{
        const metaTag = document.querySelector('meta[name="csrf-token"]');
        return metaTag ? metaTag.getAttribute('content') : null;
    }
};
const inputSanitization = {
    // 清理用户输入
    sanitizeInput: (input)=>{
        return input.trim().replace(/[<>"'&]/g, '') // 移除潜在的XSS字符
        .substring(0, 1000); // 限制长度
    },
    // 验证邮箱格式
    isValidEmail: (email)=>{
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email) && email.length <= 254;
    },
    // 验证URL格式
    isValidUrl: (url)=>{
        try {
            const urlObj = new URL(url);
            return [
                'http:',
                'https:'
            ].includes(urlObj.protocol);
        } catch  {
            return false;
        }
    },
    // 验证文件类型
    isValidFileType: (fileName, allowedTypes)=>{
        const extension = fileName.split('.').pop()?.toLowerCase();
        return extension ? allowedTypes.includes(extension) : false;
    },
    // 验证文件大小
    isValidFileSize: (fileSize, maxSizeInMB)=>{
        const maxSizeInBytes = maxSizeInMB * 1024 * 1024;
        return fileSize <= maxSizeInBytes;
    }
};
const passwordSecurity = {
    // 密码强度检查
    checkPasswordStrength: (password)=>{
        const feedback = [];
        let score = 0;
        // 长度检查
        if (password.length >= 8) {
            score += 1;
        } else {
            feedback.push('密码长度至少需要8个字符');
        }
        // 包含小写字母
        if (/[a-z]/.test(password)) {
            score += 1;
        } else {
            feedback.push('密码需要包含小写字母');
        }
        // 包含大写字母
        if (/[A-Z]/.test(password)) {
            score += 1;
        } else {
            feedback.push('密码需要包含大写字母');
        }
        // 包含数字
        if (/\d/.test(password)) {
            score += 1;
        } else {
            feedback.push('密码需要包含数字');
        }
        // 包含特殊字符
        if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
            score += 1;
        } else {
            feedback.push('密码需要包含特殊字符');
        }
        // 不包含常见弱密码
        const commonPasswords = [
            '123456',
            'password',
            '123456789',
            'qwerty',
            'abc123'
        ];
        if (commonPasswords.includes(password.toLowerCase())) {
            score = 0;
            feedback.push('请不要使用常见的弱密码');
        }
        return {
            score,
            feedback,
            isStrong: score >= 4
        };
    },
    // 生成随机密码
    generateRandomPassword: (length = 12)=>{
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';
        let password = '';
        for(let i = 0; i < length; i++){
            const randomIndex = Math.floor(Math.random() * charset.length);
            password += charset[randomIndex];
        }
        return password;
    }
};
const sessionSecurity = {
    // 检查会话是否过期
    isSessionExpired: (expirationTime)=>{
        return Date.now() > expirationTime;
    },
    // 生成会话ID
    generateSessionId: ()=>{
        const array = new Uint8Array(16);
        crypto.getRandomValues(array);
        return Array.from(array, (byte)=>byte.toString(16).padStart(2, '0')).join('');
    },
    // 安全的localStorage操作
    secureStorage: {
        setItem: (key, value, expirationMinutes)=>{
            const item = {
                value,
                timestamp: Date.now(),
                expiration: expirationMinutes ? Date.now() + expirationMinutes * 60 * 1000 : null
            };
            localStorage.setItem(key, JSON.stringify(item));
        },
        getItem: (key)=>{
            try {
                const itemStr = localStorage.getItem(key);
                if (!itemStr) return null;
                const item = JSON.parse(itemStr);
                // 检查是否过期
                if (item.expiration && Date.now() > item.expiration) {
                    localStorage.removeItem(key);
                    return null;
                }
                return item.value;
            } catch  {
                return null;
            }
        },
        removeItem: (key)=>{
            localStorage.removeItem(key);
        },
        clear: ()=>{
            localStorage.clear();
        }
    }
};
const contentSecurity = {
    // 验证内容类型
    validateContentType: (contentType, allowedTypes)=>{
        return allowedTypes.some((type)=>contentType.includes(type));
    },
    // 检查恶意脚本
    containsMaliciousScript: (content)=>{
        const maliciousPatterns = [
            /<script[^>]*>.*?<\/script>/gi,
            /javascript:/gi,
            /on\w+\s*=/gi,
            /eval\s*\(/gi,
            /document\.write/gi
        ];
        return maliciousPatterns.some((pattern)=>pattern.test(content));
    },
    // 清理危险内容
    sanitizeContent: (content)=>{
        return content.replace(/<script[^>]*>.*?<\/script>/gi, '').replace(/javascript:/gi, '').replace(/on\w+\s*=/gi, '').replace(/eval\s*\(/gi, '').replace(/document\.write/gi, '');
    }
};
const networkSecurity = {
    // 检查是否为HTTPS
    isHttps: ()=>{
        return window.location.protocol === 'https:';
    },
    // 验证请求来源
    validateOrigin: (origin, allowedOrigins)=>{
        return allowedOrigins.includes(origin);
    },
    // 生成安全的请求头
    getSecureHeaders: (csrfToken)=>{
        const headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        };
        if (csrfToken) {
            headers['X-CSRF-Token'] = csrfToken;
        }
        return headers;
    }
};
const encryption = {
    // Base64编码
    base64Encode: (text)=>{
        return btoa(unescape(encodeURIComponent(text)));
    },
    // Base64解码
    base64Decode: (encodedText)=>{
        return decodeURIComponent(escape(atob(encodedText)));
    },
    // 简单的字符串混淆（不是真正的加密）
    obfuscate: (text, key)=>{
        let result = '';
        for(let i = 0; i < text.length; i++){
            const textChar = text.charCodeAt(i);
            const keyChar = key.charCodeAt(i % key.length);
            result += String.fromCharCode(textChar ^ keyChar);
        }
        return encryption.base64Encode(result);
    },
    // 简单的字符串反混淆
    deobfuscate: (obfuscatedText, key)=>{
        const decodedText = encryption.base64Decode(obfuscatedText);
        let result = '';
        for(let i = 0; i < decodedText.length; i++){
            const textChar = decodedText.charCodeAt(i);
            const keyChar = key.charCodeAt(i % key.length);
            result += String.fromCharCode(textChar ^ keyChar);
        }
        return result;
    }
};
const securityConfig = {
    // 默认安全配置
    defaults: {
        maxFileSize: 10,
        allowedFileTypes: [
            'jpg',
            'jpeg',
            'png',
            'gif',
            'pdf',
            'doc',
            'docx'
        ],
        sessionTimeout: 30,
        maxLoginAttempts: 5,
        passwordMinLength: 8,
        csrfTokenExpiry: 60
    },
    // 获取配置值
    get: (key)=>{
        return securityConfig.defaults[key];
    },
    // 设置配置值
    set: (key, value)=>{
        securityConfig.defaults[key] = value;
    }
};
const securityLogger = {
    // 记录安全事件
    logSecurityEvent: (event, details)=>{
        const logEntry = {
            timestamp: new Date().toISOString(),
            event,
            details,
            userAgent: navigator.userAgent,
            url: window.location.href
        };
        // 在开发环境下输出到控制台
        if (process.env.NODE_ENV === 'development') {
            console.warn('[Security Event]', logEntry);
        }
        // 在生产环境下可以发送到安全监控服务
        if (process.env.NODE_ENV === 'production') {
        // TODO: 发送到安全监控服务
        // sendToSecurityService(logEntry);
        }
    },
    // 记录登录尝试
    logLoginAttempt: (success, username)=>{
        securityLogger.logSecurityEvent('login_attempt', {
            success,
            username: username ? `${username.substring(0, 3)}***` : 'unknown'
        });
    },
    // 记录可疑活动
    logSuspiciousActivity: (activity, details)=>{
        securityLogger.logSecurityEvent('suspicious_activity', {
            activity,
            ...details
        });
    }
};
const security = {
    xss: xssProtection,
    csrf: csrfProtection,
    input: inputSanitization,
    password: passwordSecurity,
    session: sessionSecurity,
    content: contentSecurity,
    network: networkSecurity,
    encryption,
    config: securityConfig,
    logger: securityLogger
};

//# sourceMappingURL=data:application/json;base64,