{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/security.ts"],"sourcesContent":["// 安全工具库\n\n// XSS防护\nexport const xssProtection = {\n  // HTML转义\n  escapeHtml: (text: string): string => {\n    const map: Record<string, string> = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;',\n      '/': '&#x2F;',\n    };\n    return text.replace(/[&<>\"'\\/]/g, (s) => map[s]);\n  },\n\n  // HTML反转义\n  unescapeHtml: (text: string): string => {\n    const map: Record<string, string> = {\n      '&amp;': '&',\n      '&lt;': '<',\n      '&gt;': '>',\n      '&quot;': '\"',\n      '&#39;': \"'\",\n      '&#x2F;': '/',\n    };\n    return text.replace(/&(amp|lt|gt|quot|#39|#x2F);/g, (s) => map[s]);\n  },\n\n  // 清理HTML标签\n  stripHtml: (html: string): string => {\n    return html.replace(/<[^>]*>/g, '');\n  },\n\n  // 安全的innerHTML设置\n  safeInnerHTML: (element: HTMLElement, html: string): void => {\n    element.innerHTML = xssProtection.escapeHtml(html);\n  },\n};\n\n// CSRF防护\nexport const csrfProtection = {\n  // 生成CSRF令牌\n  generateToken: (): string => {\n    const array = new Uint8Array(32);\n    crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n\n  // 验证CSRF令牌\n  validateToken: (token: string, expectedToken: string): boolean => {\n    if (!token || !expectedToken) return false;\n    return token === expectedToken;\n  },\n\n  // 从meta标签获取CSRF令牌\n  getTokenFromMeta: (): string | null => {\n    const metaTag = document.querySelector('meta[name=\"csrf-token\"]');\n    return metaTag ? metaTag.getAttribute('content') : null;\n  },\n};\n\n// 输入验证和清理\nexport const inputSanitization = {\n  // 清理用户输入\n  sanitizeInput: (input: string): string => {\n    return input\n      .trim()\n      .replace(/[<>\"'&]/g, '') // 移除潜在的XSS字符\n      .substring(0, 1000); // 限制长度\n  },\n\n  // 验证邮箱格式\n  isValidEmail: (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email) && email.length <= 254;\n  },\n\n  // 验证URL格式\n  isValidUrl: (url: string): boolean => {\n    try {\n      const urlObj = new URL(url);\n      return ['http:', 'https:'].includes(urlObj.protocol);\n    } catch {\n      return false;\n    }\n  },\n\n  // 验证文件类型\n  isValidFileType: (fileName: string, allowedTypes: string[]): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return extension ? allowedTypes.includes(extension) : false;\n  },\n\n  // 验证文件大小\n  isValidFileSize: (fileSize: number, maxSizeInMB: number): boolean => {\n    const maxSizeInBytes = maxSizeInMB * 1024 * 1024;\n    return fileSize <= maxSizeInBytes;\n  },\n};\n\n// 密码安全\nexport const passwordSecurity = {\n  // 密码强度检查\n  checkPasswordStrength: (password: string): {\n    score: number;\n    feedback: string[];\n    isStrong: boolean;\n  } => {\n    const feedback: string[] = [];\n    let score = 0;\n\n    // 长度检查\n    if (password.length >= 8) {\n      score += 1;\n    } else {\n      feedback.push('密码长度至少需要8个字符');\n    }\n\n    // 包含小写字母\n    if (/[a-z]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含小写字母');\n    }\n\n    // 包含大写字母\n    if (/[A-Z]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含大写字母');\n    }\n\n    // 包含数字\n    if (/\\d/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含数字');\n    }\n\n    // 包含特殊字符\n    if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      score += 1;\n    } else {\n      feedback.push('密码需要包含特殊字符');\n    }\n\n    // 不包含常见弱密码\n    const commonPasswords = ['123456', 'password', '123456789', 'qwerty', 'abc123'];\n    if (commonPasswords.includes(password.toLowerCase())) {\n      score = 0;\n      feedback.push('请不要使用常见的弱密码');\n    }\n\n    return {\n      score,\n      feedback,\n      isStrong: score >= 4,\n    };\n  },\n\n  // 生成随机密码\n  generateRandomPassword: (length = 12): string => {\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = Math.floor(Math.random() * charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  },\n};\n\n// 会话安全\nexport const sessionSecurity = {\n  // 检查会话是否过期\n  isSessionExpired: (expirationTime: number): boolean => {\n    return Date.now() > expirationTime;\n  },\n\n  // 生成会话ID\n  generateSessionId: (): string => {\n    const array = new Uint8Array(16);\n    crypto.getRandomValues(array);\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n\n  // 安全的localStorage操作\n  secureStorage: {\n    setItem: (key: string, value: string, expirationMinutes?: number): void => {\n      const item = {\n        value,\n        timestamp: Date.now(),\n        expiration: expirationMinutes ? Date.now() + (expirationMinutes * 60 * 1000) : null,\n      };\n      localStorage.setItem(key, JSON.stringify(item));\n    },\n\n    getItem: (key: string): string | null => {\n      try {\n        const itemStr = localStorage.getItem(key);\n        if (!itemStr) return null;\n\n        const item = JSON.parse(itemStr);\n        \n        // 检查是否过期\n        if (item.expiration && Date.now() > item.expiration) {\n          localStorage.removeItem(key);\n          return null;\n        }\n\n        return item.value;\n      } catch {\n        return null;\n      }\n    },\n\n    removeItem: (key: string): void => {\n      localStorage.removeItem(key);\n    },\n\n    clear: (): void => {\n      localStorage.clear();\n    },\n  },\n};\n\n// 内容安全策略\nexport const contentSecurity = {\n  // 验证内容类型\n  validateContentType: (contentType: string, allowedTypes: string[]): boolean => {\n    return allowedTypes.some(type => contentType.includes(type));\n  },\n\n  // 检查恶意脚本\n  containsMaliciousScript: (content: string): boolean => {\n    const maliciousPatterns = [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n      /eval\\s*\\(/gi,\n      /document\\.write/gi,\n    ];\n    \n    return maliciousPatterns.some(pattern => pattern.test(content));\n  },\n\n  // 清理危险内容\n  sanitizeContent: (content: string): string => {\n    return content\n      .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '')\n      .replace(/eval\\s*\\(/gi, '')\n      .replace(/document\\.write/gi, '');\n  },\n};\n\n// 网络安全\nexport const networkSecurity = {\n  // 检查是否为HTTPS\n  isHttps: (): boolean => {\n    return window.location.protocol === 'https:';\n  },\n\n  // 验证请求来源\n  validateOrigin: (origin: string, allowedOrigins: string[]): boolean => {\n    return allowedOrigins.includes(origin);\n  },\n\n  // 生成安全的请求头\n  getSecureHeaders: (csrfToken?: string): Record<string, string> => {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n    };\n\n    if (csrfToken) {\n      headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    return headers;\n  },\n};\n\n// 数据加密（简单实现，生产环境建议使用专业加密库）\nexport const encryption = {\n  // Base64编码\n  base64Encode: (text: string): string => {\n    return btoa(unescape(encodeURIComponent(text)));\n  },\n\n  // Base64解码\n  base64Decode: (encodedText: string): string => {\n    return decodeURIComponent(escape(atob(encodedText)));\n  },\n\n  // 简单的字符串混淆（不是真正的加密）\n  obfuscate: (text: string, key: string): string => {\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      const textChar = text.charCodeAt(i);\n      const keyChar = key.charCodeAt(i % key.length);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return encryption.base64Encode(result);\n  },\n\n  // 简单的字符串反混淆\n  deobfuscate: (obfuscatedText: string, key: string): string => {\n    const decodedText = encryption.base64Decode(obfuscatedText);\n    let result = '';\n    for (let i = 0; i < decodedText.length; i++) {\n      const textChar = decodedText.charCodeAt(i);\n      const keyChar = key.charCodeAt(i % key.length);\n      result += String.fromCharCode(textChar ^ keyChar);\n    }\n    return result;\n  },\n};\n\n// 安全配置类型定义\ninterface SecurityDefaults {\n  maxFileSize: number;\n  allowedFileTypes: string[];\n  sessionTimeout: number;\n  maxLoginAttempts: number;\n  passwordMinLength: number;\n  csrfTokenExpiry: number;\n}\n\n// 安全配置\nexport const securityConfig: {\n  defaults: SecurityDefaults;\n  get: (key: keyof SecurityDefaults) => number | string[];\n  set: (key: keyof SecurityDefaults, value: number | string[]) => void;\n} = {\n  // 默认安全配置\n  defaults: {\n    maxFileSize: 10, // MB\n    allowedFileTypes: ['jpg', 'jpeg', 'png', 'gif', 'pdf', 'doc', 'docx'],\n    sessionTimeout: 30, // 分钟\n    maxLoginAttempts: 5,\n    passwordMinLength: 8,\n    csrfTokenExpiry: 60, // 分钟\n  },\n\n  // 获取配置值\n  get: (key: keyof SecurityDefaults) => {\n    return securityConfig.defaults[key];\n  },\n\n  // 设置配置值\n  set: (key: keyof SecurityDefaults, value: number | string[]) => {\n    (securityConfig.defaults as unknown as Record<string, number | string[]>)[key] = value;\n  },\n}\n\n// 安全事件日志\nexport const securityLogger = {\n  // 记录安全事件\n  logSecurityEvent: (event: string, details: Record<string, unknown>): void => {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      event,\n      details,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    // 在开发环境下输出到控制台\n    if (process.env.NODE_ENV === 'development') {\n      console.warn('[Security Event]', logEntry);\n    }\n\n    // 在生产环境下可以发送到安全监控服务\n    if (process.env.NODE_ENV === 'production') {\n      // TODO: 发送到安全监控服务\n      // sendToSecurityService(logEntry);\n    }\n  },\n\n  // 记录登录尝试\n  logLoginAttempt: (success: boolean, username?: string): void => {\n    securityLogger.logSecurityEvent('login_attempt', {\n      success,\n      username: username ? `${username.substring(0, 3)}***` : 'unknown',\n    });\n  },\n\n  // 记录可疑活动\n  logSuspiciousActivity: (activity: string, details: Record<string, unknown>): void => {\n    securityLogger.logSecurityEvent('suspicious_activity', {\n      activity,\n      ...details,\n    });\n  },\n};\n\n// 导出所有安全工具\nexport const security = {\n  xss: xssProtection,\n  csrf: csrfProtection,\n  input: inputSanitization,\n  password: passwordSecurity,\n  session: sessionSecurity,\n  content: contentSecurity,\n  network: networkSecurity,\n  encryption,\n  config: securityConfig,\n  logger: securityLogger,\n};"],"names":["contentSecurity","csrfProtection","encryption","inputSanitization","networkSecurity","passwordSecurity","security","securityConfig","securityLogger","sessionSecurity","xssProtection","escapeHtml","text","map","replace","s","unescapeHtml","stripHtml","html","safeInnerHTML","element","innerHTML","generateToken","array","Uint8Array","crypto","getRandomValues","Array","from","byte","toString","padStart","join","validateToken","token","expectedToken","getTokenFromMeta","metaTag","document","querySelector","getAttribute","sanitizeInput","input","trim","substring","isValidEmail","email","emailRegex","test","length","isValidUrl","url","urlObj","URL","includes","protocol","isValidFileType","fileName","allowedTypes","extension","split","pop","toLowerCase","isValidFileSize","fileSize","maxSizeInMB","maxSizeInBytes","checkPasswordStrength","password","feedback","score","push","commonPasswords","isStrong","generateRandomPassword","charset","i","randomIndex","Math","floor","random","isSessionExpired","expirationTime","Date","now","generateSessionId","secureStorage","setItem","key","value","expirationMinutes","item","timestamp","expiration","localStorage","JSON","stringify","getItem","itemStr","parse","removeItem","clear","validateContentType","contentType","some","type","containsMaliciousScript","content","maliciousPatterns","pattern","sanitizeContent","isHttps","window","location","validateOrigin","origin","allowedOrigins","getSecureHeaders","csrfToken","headers","base64Encode","btoa","unescape","encodeURIComponent","base64Decode","encodedText","decodeURIComponent","escape","atob","obfuscate","result","textChar","charCodeAt","keyChar","String","fromCharCode","deobfuscate","obfuscatedText","decodedText","defaults","maxFileSize","allowedFileTypes","sessionTimeout","maxLoginAttempts","passwordMinLength","csrfTokenExpiry","get","set","logSecurityEvent","event","details","logEntry","toISOString","userAgent","navigator","href","process","env","NODE_ENV","console","warn","logLoginAttempt","success","username","logSuspiciousActivity","activity","xss","csrf","session","network","config","logger"],"mappings":"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"}