7951364d7b21bb132ffd5b97344be3e8
"use strict";
// Mock dependencies
jest.mock('@/lib/auth', ()=>({
        authService: {
            login: jest.fn()
        }
    }));
jest.mock('@/lib/store/ui-store');
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn()
            })
    }));
// Mock Ant Design components with proper types
jest.mock('antd', ()=>({
        Form: ({ children, onFinish, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                onSubmit: (e)=>{
                    e.preventDefault();
                    onFinish?.({});
                },
                ...props,
                children: children
            }),
        Input: ({ placeholder, type, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                placeholder: placeholder,
                type: type || 'text',
                "data-testid": `input-${placeholder?.toLowerCase()}`,
                ...props
            }),
        Button: ({ children, loading, htmlType, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: htmlType || 'button',
                disabled: loading,
                "data-testid": "login-button",
                ...props,
                children: loading ? 'Loading...' : children
            }),
        Card: ({ children, title, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "login-card",
                ...props,
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        children: title
                    }),
                    children
                ]
            }),
        Typography: {
            Title: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                    "data-testid": "login-title",
                    ...props,
                    children: children
                }),
            Text: ({ children, type, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    "data-testid": `text-${type || 'default'}`,
                    ...props,
                    children: children
                })
        },
        Space: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "space",
                ...props,
                children: children
            })
    }));
// Mock Lucide React icons
jest.mock('lucide-react', ()=>({
        Lock: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "lock-icon",
                children: "Lock"
            }),
        User: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-icon",
                children: "User"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../page"));
const _auth = require("../../../lib/auth");
const _uistore = require("../../../lib/store/ui-store");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockAuthService = _auth.authService;
const mockUseNotifications = _uistore.useNotifications;
describe('LoginPage', ()=>{
    const mockNotifications = {
        success: jest.fn(),
        error: jest.fn(),
        warning: jest.fn(),
        info: jest.fn()
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUseNotifications.mockReturnValue(mockNotifications);
    });
    describe('Rendering', ()=>{
        it('should render login form with all required elements', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(_react1.screen.getByTestId('login-card')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('login-title')).toHaveTextContent('登录');
            expect(_react1.screen.getByTestId('input-用户名')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('input-密码')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('login-button')).toBeInTheDocument();
        });
        it('should render icons for username and password fields', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            expect(_react1.screen.getByTestId('user-icon')).toBeInTheDocument();
            expect(_react1.screen.getByTestId('lock-icon')).toBeInTheDocument();
        });
        it('should have proper form structure', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const form = _react1.screen.getByRole('form');
            expect(form).toBeInTheDocument();
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            expect(usernameInput).toHaveAttribute('placeholder', '用户名');
            expect(passwordInput).toHaveAttribute('type', 'password');
            expect(passwordInput).toHaveAttribute('placeholder', '密码');
        });
    });
    describe('Form Interaction', ()=>{
        it('should allow user to type in username and password fields', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            expect(usernameInput).toHaveValue('testuser');
            expect(passwordInput).toHaveValue('testpass');
        });
        it('should handle form submission', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login = jest.fn().mockResolvedValue({
                success: true,
                user: {
                    id: 1,
                    username: 'testuser'
                },
                token: 'mock-token'
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            await user.click(loginButton);
            expect(mockAuthService.login).toHaveBeenCalledWith('testuser', 'testpass');
        });
    });
    describe('Authentication Flow', ()=>{
        it('should show loading state during login', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login = jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 100)));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            await user.click(loginButton);
            expect(loginButton).toHaveTextContent('Loading...');
            expect(loginButton).toBeDisabled();
        });
        it('should handle successful login', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login = jest.fn().mockResolvedValue({
                success: true,
                user: {
                    id: 1,
                    username: 'testuser'
                },
                token: 'mock-token'
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            await user.click(loginButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockNotifications.success).toHaveBeenCalledWith('登录成功');
            });
        });
        it('should handle login failure with error message', async ()=>{
            const user = _userevent.default.setup();
            const errorMessage = '用户名或密码错误';
            mockAuthService.login = jest.fn().mockRejectedValue(new Error(errorMessage));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'wronguser');
            await user.type(passwordInput, 'wrongpass');
            await user.click(loginButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockNotifications.error).toHaveBeenCalledWith(errorMessage);
            });
        });
        it('should handle network error gracefully', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login = jest.fn().mockRejectedValue(new Error('Network Error'));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            await user.click(loginButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockNotifications.error).toHaveBeenCalledWith('Network Error');
            });
        });
    });
    describe('Form Validation', ()=>{
        it('should handle empty form submission', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.click(loginButton);
            // Form should still be submittable but AuthService should handle validation
            expect(mockAuthService.login).toHaveBeenCalledWith('', '');
        });
        it('should handle partial form data', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.click(loginButton);
            expect(mockAuthService.login).toHaveBeenCalledWith('testuser', '');
        });
    });
    describe('Accessibility', ()=>{
        it('should have proper form accessibility', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const form = _react1.screen.getByRole('form');
            expect(form).toBeInTheDocument();
            const loginButton = _react1.screen.getByRole('button');
            expect(loginButton).toBeInTheDocument();
        });
        it('should have proper input types for security', ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const passwordInput = _react1.screen.getByTestId('input-密码');
            expect(passwordInput).toHaveAttribute('type', 'password');
        });
    });
    describe('Edge Cases', ()=>{
        it('should handle AuthService returning undefined', async ()=>{
            const user = _userevent.default.setup();
            mockAuthService.login = jest.fn().mockResolvedValue(undefined);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const loginButton = _react1.screen.getByTestId('login-button');
            await user.type(usernameInput, 'testuser');
            await user.type(passwordInput, 'testpass');
            await user.click(loginButton);
            await (0, _react1.waitFor)(()=>{
                expect(mockAuthService.login).toHaveBeenCalled();
            });
        });
        it('should handle very long input values', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const longUsername = 'a'.repeat(1000);
            await user.type(usernameInput, longUsername);
            expect(usernameInput).toHaveValue(longUsername);
        });
        it('should handle special characters in input', async ()=>{
            const user = _userevent.default.setup();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
            const usernameInput = _react1.screen.getByTestId('input-用户名');
            const passwordInput = _react1.screen.getByTestId('input-密码');
            const specialUsername = 'user@domain.com';
            const specialPassword = 'P@ssw0rd!#$';
            await user.type(usernameInput, specialUsername);
            await user.type(passwordInput, specialPassword);
            expect(usernameInput).toHaveValue(specialUsername);
            expect(passwordInput).toHaveValue(specialPassword);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,