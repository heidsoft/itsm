{"version":3,"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/__tests__/performance/performance.test.tsx"],"sourcesContent":["/**\n * 性能测试\n * 测试组件渲染性能、内存使用、大数据处理等性能相关功能\n */\n\nimport React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ConfigProvider } from 'antd';\nimport zhCN from 'antd/locale/zh_CN';\n\n// Mock performance API\nconst mockPerformance = {\n  now: jest.fn(() => Date.now()),\n  mark: jest.fn(),\n  measure: jest.fn(),\n  getEntriesByType: jest.fn(() => []),\n  getEntriesByName: jest.fn(() => []),\n};\n\nObject.defineProperty(window, 'performance', {\n  value: mockPerformance,\n  writable: true,\n});\n\n// Mock ResizeObserver\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Performance monitoring utilities\nclass PerformanceMonitor {\n  private startTime: number = 0;\n  private endTime: number = 0;\n\n  start() {\n    this.startTime = performance.now();\n  }\n\n  end() {\n    this.endTime = performance.now();\n    return this.endTime - this.startTime;\n  }\n\n  getDuration() {\n    return this.endTime - this.startTime;\n  }\n}\n\n// Mock heavy computation component\nconst HeavyComputationComponent: React.FC<{ itemCount: number }> = ({ itemCount }) => {\n  const [items, setItems] = React.useState<number[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    const generateItems = () => {\n      const newItems = Array.from({ length: itemCount }, (_, i) => i);\n      setItems(newItems);\n      setIsLoading(false);\n    };\n\n    // Simulate heavy computation\n    const timer = setTimeout(generateItems, 100);\n    return () => clearTimeout(timer);\n  }, [itemCount]);\n\n  if (isLoading) {\n    return <div data-testid=\"loading\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"heavy-component\">\n      <div data-testid=\"item-count\">{items.length} items</div>\n      <div data-testid=\"items-container\">\n        {items.map(item => (\n          <div key={item} data-testid={`item-${item}`} className=\"item\">\n            Item {item}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Mock virtualized list component\nconst VirtualizedList: React.FC<{ \n  items: unknown[]; \n  itemHeight: number; \n  containerHeight: number;\n}> = ({ items, itemHeight, containerHeight }) => {\n  const [scrollTop, setScrollTop] = React.useState(0);\n  const [visibleItems, setVisibleItems] = React.useState<unknown[]>([]);\n\n  React.useEffect(() => {\n    const startIndex = Math.floor(scrollTop / itemHeight);\n    const endIndex = Math.min(\n      startIndex + Math.ceil(containerHeight / itemHeight) + 1,\n      items.length\n    );\n    \n    setVisibleItems(items.slice(startIndex, endIndex));\n  }, [scrollTop, items, itemHeight, containerHeight]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    setScrollTop(e.currentTarget.scrollTop);\n  };\n\n  return (\n    <div \n      data-testid=\"virtualized-list\"\n      style={{ height: containerHeight, overflow: 'auto' }}\n      onScroll={handleScroll}\n    >\n      <div style={{ height: items.length * itemHeight, position: 'relative' }}>\n        {visibleItems.map((_, index) => {\n          const actualIndex = Math.floor(scrollTop / itemHeight) + index;\n          return (\n            <div\n              key={actualIndex}\n              data-testid={`virtual-item-${actualIndex}`}\n              style={{\n                position: 'absolute',\n                top: actualIndex * itemHeight,\n                height: itemHeight,\n                width: '100%',\n              }}\n            >\n              Virtual Item {actualIndex}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// Mock memoized component\nconst MemoizedComponent = React.memo<{ \n  data: { id: number; name: string }[];\n  onItemClick: (id: number) => void;\n}>(({ data, onItemClick }) => {\n  const renderCount = React.useRef(0);\n  renderCount.current += 1;\n\n  return (\n    <div data-testid=\"memoized-component\">\n      <div data-testid=\"render-count\">{renderCount.current}</div>\n      {data.map(item => (\n        <div \n          key={item.id} \n          data-testid={`memoized-item-${item.id}`}\n          onClick={() => onItemClick(item.id)}\n          className=\"cursor-pointer p-2 hover:bg-gray-100\"\n        >\n          {item.name}\n        </div>\n      ))}\n    </div>\n  );\n});\n\nMemoizedComponent.displayName = 'MemoizedComponent';\n\n// Mock lazy loaded component\nconst LazyComponent = React.lazy(() => \n  Promise.resolve({\n    default: () => (\n      <div data-testid=\"lazy-component\">\n        Lazy loaded content\n      </div>\n    )\n  })\n);\n\n// Test wrapper\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return (\n    <ConfigProvider locale={zhCN}>\n      {children}\n    </ConfigProvider>\n  );\n};\n\ndescribe('性能测试', () => {\n  let performanceMonitor: PerformanceMonitor;\n\n  beforeEach(() => {\n    performanceMonitor = new PerformanceMonitor();\n    jest.clearAllMocks();\n  });\n\n  describe('渲染性能测试', () => {\n    it('应该在合理时间内渲染小型组件', () => {\n      performanceMonitor.start();\n      \n      render(\n        <TestWrapper>\n          <div data-testid=\"simple-component\">Simple Component</div>\n        </TestWrapper>\n      );\n\n      const renderTime = performanceMonitor.end();\n\n      // 验证渲染时间小于50ms\n      expect(renderTime).toBeLessThan(50);\n      expect(screen.getByTestId('simple-component')).toBeInTheDocument();\n    });\n\n    it('应该高效渲染中等复杂度组件', async () => {\n      performanceMonitor.start();\n      \n      render(\n        <TestWrapper>\n          <HeavyComputationComponent itemCount={100} />\n        </TestWrapper>\n      );\n\n      // 等待组件加载完成\n      await waitFor(() => {\n        expect(screen.getByTestId('heavy-component')).toBeInTheDocument();\n      });\n\n      const renderTime = performanceMonitor.end();\n\n      // 验证渲染时间小于200ms\n      expect(renderTime).toBeLessThan(200);\n      expect(screen.getByTestId('item-count')).toHaveTextContent('100 items');\n    });\n\n    it('应该处理大量数据的渲染', async () => {\n      const largeDataset = Array.from({ length: 10000 }, (_, i) => i);\n      \n      performanceMonitor.start();\n      \n      render(\n        <TestWrapper>\n          <VirtualizedList \n            items={largeDataset}\n            itemHeight={50}\n            containerHeight={400}\n          />\n        </TestWrapper>\n      );\n\n      const renderTime = performanceMonitor.end();\n\n      // 验证虚拟化列表渲染时间\n      expect(renderTime).toBeLessThan(100);\n      expect(screen.getByTestId('virtualized-list')).toBeInTheDocument();\n      \n      // 验证只渲染可见项目\n      const visibleItems = screen.getAllByTestId(/virtual-item-/);\n      expect(visibleItems.length).toBeLessThan(20); // 只渲染可见的项目\n    });\n\n    it('应该优化重复渲染', async () => {\n      const mockData = [\n        { id: 1, name: 'Item 1' },\n        { id: 2, name: 'Item 2' },\n        { id: 3, name: 'Item 3' },\n      ];\n      const mockOnClick = jest.fn();\n\n      const { rerender } = render(\n        <TestWrapper>\n          <MemoizedComponent data={mockData} onItemClick={mockOnClick} />\n        </TestWrapper>\n      );\n\n      // 验证初始渲染\n      expect(screen.getByTestId('render-count')).toHaveTextContent('1');\n\n      // 使用相同props重新渲染\n      rerender(\n        <TestWrapper>\n          <MemoizedComponent data={mockData} onItemClick={mockOnClick} />\n        </TestWrapper>\n      );\n\n      // 验证没有重新渲染（由于React.memo）\n      expect(screen.getByTestId('render-count')).toHaveTextContent('1');\n\n      // 使用不同props重新渲染\n      const newData = [...mockData, { id: 4, name: 'Item 4' }];\n      rerender(\n        <TestWrapper>\n          <MemoizedComponent data={newData} onItemClick={mockOnClick} />\n        </TestWrapper>\n      );\n\n      // 验证重新渲染\n      expect(screen.getByTestId('render-count')).toHaveTextContent('2');\n    });\n  });\n\n  describe('内存使用测试', () => {\n    it('应该正确清理事件监听器', () => {\n      const mockAddEventListener = jest.spyOn(window, 'addEventListener');\n      const mockRemoveEventListener = jest.spyOn(window, 'removeEventListener');\n\n      const ComponentWithEventListener = () => {\n        React.useEffect(() => {\n          const handleResize = () => {\n            // Handle resize\n          };\n\n          window.addEventListener('resize', handleResize);\n          return () => window.removeEventListener('resize', handleResize);\n        }, []);\n\n        return <div data-testid=\"event-component\">Component with event listener</div>;\n      };\n\n      const { unmount } = render(\n        <TestWrapper>\n          <ComponentWithEventListener />\n        </TestWrapper>\n      );\n\n      expect(mockAddEventListener).toHaveBeenCalledWith('resize', expect.any(Function));\n\n      // 卸载组件\n      unmount();\n\n      expect(mockRemoveEventListener).toHaveBeenCalledWith('resize', expect.any(Function));\n\n      mockAddEventListener.mockRestore();\n      mockRemoveEventListener.mockRestore();\n    });\n\n    it('应该正确清理定时器', () => {\n      jest.useFakeTimers();\n      const mockClearTimeout = jest.spyOn(global, 'clearTimeout');\n\n      const ComponentWithTimer = () => {\n        const [count, setCount] = React.useState(0);\n\n        React.useEffect(() => {\n          const timer = setTimeout(() => {\n            setCount(1);\n          }, 1000);\n\n          return () => clearTimeout(timer);\n        }, []);\n\n        return <div data-testid=\"timer-component\">{count}</div>;\n      };\n\n      const { unmount } = render(\n        <TestWrapper>\n          <ComponentWithTimer />\n        </TestWrapper>\n      );\n\n      // 卸载组件\n      unmount();\n\n      expect(mockClearTimeout).toHaveBeenCalled();\n\n      jest.useRealTimers();\n      mockClearTimeout.mockRestore();\n    });\n\n    it('应该避免内存泄漏', () => {\n      const ComponentWithState = () => {\n        const [data, setData] = React.useState<number[]>([]);\n\n        React.useEffect(() => {\n          // 模拟大量数据\n          const largeArray = Array.from({ length: 10000 }, (_, i) => i);\n          setData(largeArray);\n\n          return () => {\n            // 清理数据\n            setData([]);\n          };\n        }, []);\n\n        return (\n          <div data-testid=\"state-component\">\n            Data length: {data.length}\n          </div>\n        );\n      };\n\n      const { unmount } = render(\n        <TestWrapper>\n          <ComponentWithState />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('state-component')).toHaveTextContent('Data length: 10000');\n\n      // 卸载组件应该清理状态\n      unmount();\n\n      // 验证组件已卸载\n      expect(screen.queryByTestId('state-component')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('异步加载性能测试', () => {\n    it('应该高效处理懒加载组件', async () => {\n      performanceMonitor.start();\n\n      render(\n        <TestWrapper>\n          <React.Suspense fallback={<div data-testid=\"suspense-loading\">Loading...</div>}>\n            <LazyComponent />\n          </React.Suspense>\n        </TestWrapper>\n      );\n\n      // 验证Suspense fallback显示\n      expect(screen.getByTestId('suspense-loading')).toBeInTheDocument();\n\n      // 等待懒加载组件加载\n      await waitFor(() => {\n        expect(screen.getByTestId('lazy-component')).toBeInTheDocument();\n      });\n\n      const loadTime = performanceMonitor.end();\n\n      // 验证加载时间\n      expect(loadTime).toBeLessThan(500);\n      expect(screen.queryByTestId('suspense-loading')).not.toBeInTheDocument();\n    });\n\n    it('应该优化并发请求', async () => {\n      const mockFetch = jest.fn().mockImplementation(() =>\n        Promise.resolve({\n          json: () => Promise.resolve({ data: 'test' }),\n        })\n      );\n\n      global.fetch = mockFetch as jest.MockedFunction<typeof fetch>;\n\n      const ConcurrentRequestComponent = () => {\n        const [data, setData] = React.useState<unknown[]>([]);\n        const [loading, setLoading] = React.useState(true);\n\n        React.useEffect(() => {\n          const fetchData = async () => {\n            try {\n              // 并发请求\n              const promises = Array.from({ length: 5 }, (_, i) =>\n                fetch(`/api/data/${i}`)\n              );\n\n              const responses = await Promise.all(promises);\n              const results = await Promise.all(\n                responses.map(response => response.json())\n              );\n\n              setData(results);\n            } catch (error) {\n              console.error('Fetch error:', error);\n            } finally {\n              setLoading(false);\n            }\n          };\n\n          fetchData();\n        }, []);\n\n        if (loading) {\n          return <div data-testid=\"concurrent-loading\">Loading...</div>;\n        }\n\n        return (\n          <div data-testid=\"concurrent-data\">\n            Data count: {data.length}\n          </div>\n        );\n      };\n\n      performanceMonitor.start();\n\n      render(\n        <TestWrapper>\n          <ConcurrentRequestComponent />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('concurrent-data')).toBeInTheDocument();\n      });\n\n      const loadTime = performanceMonitor.end();\n\n      // 验证并发请求性能\n      expect(loadTime).toBeLessThan(1000);\n      expect(mockFetch).toHaveBeenCalledTimes(5);\n      expect(screen.getByTestId('concurrent-data')).toHaveTextContent('Data count: 5');\n    });\n  });\n\n  describe('用户交互性能测试', () => {\n    it('应该快速响应用户点击', async () => {\n      const user = userEvent.setup();\n      const mockClick = jest.fn();\n\n      render(\n        <TestWrapper>\n          <button data-testid=\"performance-button\" onClick={mockClick}>\n            Click me\n          </button>\n        </TestWrapper>\n      );\n\n      performanceMonitor.start();\n      \n      await user.click(screen.getByTestId('performance-button'));\n      \n      const responseTime = performanceMonitor.end();\n\n      // 验证响应时间小于100ms\n      expect(responseTime).toBeLessThan(100);\n      expect(mockClick).toHaveBeenCalledTimes(1);\n    });\n\n    it('应该高效处理输入事件', async () => {\n      const user = userEvent.setup();\n      const mockChange = jest.fn();\n\n      render(\n        <TestWrapper>\n          <input \n            data-testid=\"performance-input\"\n            onChange={mockChange}\n            placeholder=\"Type here...\"\n          />\n        </TestWrapper>\n      );\n\n      performanceMonitor.start();\n      \n      await user.type(screen.getByTestId('performance-input'), 'test input');\n      \n      const inputTime = performanceMonitor.end();\n\n      // 验证输入响应时间\n      expect(inputTime).toBeLessThan(200);\n      expect(mockChange).toHaveBeenCalled();\n    });\n\n    it('应该优化滚动性能', () => {\n      const items = Array.from({ length: 1000 }, (_, i) => i);\n\n      render(\n        <TestWrapper>\n          <div \n            data-testid=\"scrollable-container\"\n            style={{ height: '400px', overflow: 'auto' }}\n          >\n            {items.map(item => (\n              <div key={item} style={{ height: '50px', padding: '10px' }}>\n                Item {item}\n              </div>\n            ))}\n          </div>\n        </TestWrapper>\n      );\n\n      const container = screen.getByTestId('scrollable-container');\n      \n      performanceMonitor.start();\n      \n      // 模拟滚动\n      container.scrollTop = 1000;\n      \n      const scrollTime = performanceMonitor.end();\n\n      // 验证滚动性能\n      expect(scrollTime).toBeLessThan(50);\n      expect(container.scrollTop).toBe(1000);\n    });\n  });\n\n  describe('资源加载性能测试', () => {\n    it('应该优化图片加载', () => {\n      const mockImage = {\n        onload: null as (() => void) | null,\n        onerror: null as (() => void) | null,\n        src: '',\n      };\n\n      // Mock Image constructor\n      global.Image = jest.fn().mockImplementation(() => mockImage);\n\n      const ImageComponent = () => {\n        const [loaded, setLoaded] = React.useState(false);\n        const [error, setError] = React.useState(false);\n\n        React.useEffect(() => {\n          const img = new Image();\n          img.onload = () => setLoaded(true);\n          img.onerror = () => setError(true);\n          img.src = '/test-image.jpg';\n        }, []);\n\n        if (error) {\n          return <div data-testid=\"image-error\">Image failed to load</div>;\n        }\n\n        if (!loaded) {\n          return <div data-testid=\"image-loading\">Loading image...</div>;\n        }\n\n        return <div data-testid=\"image-loaded\">Image loaded</div>;\n      };\n\n      render(\n        <TestWrapper>\n          <ImageComponent />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('image-loading')).toBeInTheDocument();\n\n      // 模拟图片加载成功\n      if (mockImage.onload) {\n        mockImage.onload();\n      }\n\n      expect(screen.getByTestId('image-loaded')).toBeInTheDocument();\n    });\n\n    it('应该实现资源预加载', () => {\n      const mockLink = {\n        rel: '',\n        href: '',\n        as: '',\n      };\n\n      const mockCreateElement = jest.spyOn(document, 'createElement').mockImplementation((tagName) => {\n        if (tagName === 'link') {\n          return mockLink as unknown as HTMLLinkElement;\n        }\n        return document.createElement(tagName);\n      });\n\n      const mockAppendChild = jest.spyOn(document.head, 'appendChild').mockImplementation(() => mockLink as unknown as Node);\n\n      const PreloadComponent = () => {\n        React.useEffect(() => {\n          // 预加载关键资源\n          const preloadLink = document.createElement('link');\n          preloadLink.rel = 'preload';\n          preloadLink.href = '/critical-resource.js';\n          preloadLink.as = 'script';\n          document.head.appendChild(preloadLink);\n        }, []);\n\n        return <div data-testid=\"preload-component\">Component with preload</div>;\n      };\n\n      render(\n        <TestWrapper>\n          <PreloadComponent />\n        </TestWrapper>\n      );\n\n      expect(mockCreateElement).toHaveBeenCalledWith('link');\n      expect(mockAppendChild).toHaveBeenCalled();\n      expect(mockLink.rel).toBe('preload');\n      expect(mockLink.href).toBe('/critical-resource.js');\n      expect(mockLink.as).toBe('script');\n\n      mockCreateElement.mockRestore();\n      mockAppendChild.mockRestore();\n    });\n  });\n\n  describe('Bundle大小优化测试', () => {\n    it('应该支持代码分割', async () => {\n      const DynamicImportComponent = () => {\n        const [Component, setComponent] = React.useState<React.ComponentType | null>(null);\n\n        React.useEffect(() => {\n          // 动态导入\n          import('./mock-module').then((module) => {\n            setComponent(() => module.default);\n          }).catch(() => {\n            setComponent(() => () => <div>Failed to load</div>);\n          });\n        }, []);\n\n        if (!Component) {\n          return <div data-testid=\"dynamic-loading\">Loading dynamic component...</div>;\n        }\n\n        return <Component />;\n      };\n\n      render(\n        <TestWrapper>\n          <DynamicImportComponent />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('dynamic-loading')).toBeInTheDocument();\n    });\n\n    it('应该优化依赖包大小', () => {\n      // 验证只导入需要的模块\n      const mockLodash = {\n        debounce: jest.fn(),\n        throttle: jest.fn(),\n      };\n\n      // 模拟tree-shaking优化\n      const { debounce } = mockLodash;\n      \n      const DebouncedComponent = () => {\n        const [value, setValue] = React.useState('');\n        \n        const debouncedSetValue = React.useMemo(\n          () => debounce((newValue: string) => setValue(newValue), 300),\n          [debounce]\n        );\n\n        return (\n          <div data-testid=\"debounced-component\">\n            <input \n              onChange={(e) => debouncedSetValue(e.target.value)}\n              placeholder=\"Debounced input\"\n            />\n            <div data-testid=\"debounced-value\">{value}</div>\n          </div>\n        );\n      };\n\n      render(\n        <TestWrapper>\n          <DebouncedComponent />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('debounced-component')).toBeInTheDocument();\n      // 验证只使用了需要的函数\n      expect(debounce).toBeDefined();\n    });\n  });\n\n  describe('缓存策略测试', () => {\n    it('应该实现组件级缓存', () => {\n      const expensiveCalculation = jest.fn((n: number) => {\n        // 模拟昂贵计算\n        let result = 0;\n        for (let i = 0; i < n; i++) {\n          result += i;\n        }\n        return result;\n      });\n\n      const CachedComponent: React.FC<{ input: number }> = ({ input }) => {\n        const result = React.useMemo(() => expensiveCalculation(input), [input]);\n\n        return (\n          <div data-testid=\"cached-component\">\n            Result: {result}\n          </div>\n        );\n      };\n\n      CachedComponent.displayName = 'CachedComponent';\n\n      const { rerender } = render(\n        <TestWrapper>\n          <CachedComponent input={1000} />\n        </TestWrapper>\n      );\n\n      expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n\n      // 使用相同输入重新渲染\n      rerender(\n        <TestWrapper>\n          <CachedComponent input={1000} />\n        </TestWrapper>\n      );\n\n      // 验证缓存生效，没有重新计算\n      expect(expensiveCalculation).toHaveBeenCalledTimes(1);\n\n      // 使用不同输入重新渲染\n      rerender(\n        <TestWrapper>\n          <CachedComponent input={2000} />\n        </TestWrapper>\n      );\n\n      // 验证重新计算\n      expect(expensiveCalculation).toHaveBeenCalledTimes(2);\n    });\n\n    it('应该实现请求缓存', async () => {\n      const mockFetch = jest.fn().mockResolvedValue({\n        json: () => Promise.resolve({ data: 'cached data' }),\n      });\n\n      global.fetch = mockFetch as jest.MockedFunction<typeof fetch>;\n\n      // 简单的请求缓存实现\n      const requestCache = new Map<string, Promise<unknown>>();\n\n      const cachedFetch = (url: string) => {\n        if (requestCache.has(url)) {\n          return requestCache.get(url)!;\n        }\n\n        const promise = fetch(url).then(response => response.json());\n        requestCache.set(url, promise);\n        return promise;\n      };\n\n      const CachedRequestComponent = () => {\n        const [data, setData] = React.useState<unknown>(null);\n\n        React.useEffect(() => {\n          cachedFetch('/api/data').then(setData);\n        }, []);\n\n        return (\n          <div data-testid=\"cached-request\">\n            {data ? JSON.stringify(data) : 'Loading...'}\n          </div>\n        );\n      };\n\n      // 渲染第一个组件\n      render(\n        <TestWrapper>\n          <CachedRequestComponent />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('cached-request')).toHaveTextContent('cached data');\n      });\n\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n\n      // 渲染第二个相同的组件\n      render(\n        <TestWrapper>\n          <CachedRequestComponent />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getAllByTestId('cached-request')).toHaveLength(2);\n      });\n\n      // 验证缓存生效，没有发起新请求\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n  });\n});"],"names":["mockPerformance","now","jest","fn","Date","mark","measure","getEntriesByType","getEntriesByName","Object","defineProperty","window","value","writable","global","ResizeObserver","mockImplementation","observe","unobserve","disconnect","IntersectionObserver","PerformanceMonitor","start","startTime","performance","end","endTime","getDuration","HeavyComputationComponent","itemCount","items","setItems","React","useState","isLoading","setIsLoading","useEffect","generateItems","newItems","Array","from","length","_","i","timer","setTimeout","clearTimeout","div","data-testid","map","item","className","VirtualizedList","itemHeight","containerHeight","scrollTop","setScrollTop","visibleItems","setVisibleItems","startIndex","Math","floor","endIndex","min","ceil","slice","handleScroll","e","currentTarget","style","height","overflow","onScroll","position","index","actualIndex","top","width","MemoizedComponent","memo","data","onItemClick","renderCount","useRef","current","id","onClick","name","displayName","LazyComponent","lazy","Promise","resolve","default","TestWrapper","children","ConfigProvider","locale","zhCN","describe","performanceMonitor","beforeEach","clearAllMocks","it","render","renderTime","expect","toBeLessThan","screen","getByTestId","toBeInTheDocument","waitFor","toHaveTextContent","largeDataset","getAllByTestId","mockData","mockOnClick","rerender","newData","mockAddEventListener","spyOn","mockRemoveEventListener","ComponentWithEventListener","handleResize","addEventListener","removeEventListener","unmount","toHaveBeenCalledWith","any","Function","mockRestore","useFakeTimers","mockClearTimeout","ComponentWithTimer","count","setCount","toHaveBeenCalled","useRealTimers","ComponentWithState","setData","largeArray","queryByTestId","not","Suspense","fallback","loadTime","mockFetch","json","fetch","ConcurrentRequestComponent","loading","setLoading","fetchData","promises","responses","all","results","response","error","console","toHaveBeenCalledTimes","user","userEvent","setup","mockClick","button","click","responseTime","mockChange","input","onChange","placeholder","type","inputTime","padding","container","scrollTime","toBe","mockImage","onload","onerror","src","Image","ImageComponent","loaded","setLoaded","setError","img","mockLink","rel","href","as","mockCreateElement","document","tagName","createElement","mockAppendChild","head","PreloadComponent","preloadLink","appendChild","DynamicImportComponent","Component","setComponent","then","module","catch","mockLodash","debounce","throttle","DebouncedComponent","setValue","debouncedSetValue","useMemo","newValue","target","toBeDefined","expensiveCalculation","n","result","CachedComponent","mockResolvedValue","requestCache","Map","cachedFetch","url","has","get","promise","set","CachedRequestComponent","JSON","stringify","toHaveLength"],"mappings":"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"}