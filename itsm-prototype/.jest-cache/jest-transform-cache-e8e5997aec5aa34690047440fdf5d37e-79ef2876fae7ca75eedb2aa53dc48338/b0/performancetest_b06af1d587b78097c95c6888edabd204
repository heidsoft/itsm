e77f41f9a80ff0f1b5995506937489e4
/**
 * 性能测试
 * 测试组件渲染性能、内存使用、大数据处理等性能相关功能
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _antd = require("antd");
const _zh_CN = /*#__PURE__*/ _interop_require_default(require("antd/locale/zh_CN"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock performance API
const mockPerformance = {
    now: jest.fn(()=>Date.now()),
    mark: jest.fn(),
    measure: jest.fn(),
    getEntriesByType: jest.fn(()=>[]),
    getEntriesByName: jest.fn(()=>[])
};
Object.defineProperty(window, 'performance', {
    value: mockPerformance,
    writable: true
});
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Performance monitoring utilities
class PerformanceMonitor {
    start() {
        this.startTime = performance.now();
    }
    end() {
        this.endTime = performance.now();
        return this.endTime - this.startTime;
    }
    getDuration() {
        return this.endTime - this.startTime;
    }
    constructor(){
        this.startTime = 0;
        this.endTime = 0;
    }
}
// Mock heavy computation component
const HeavyComputationComponent = ({ itemCount })=>{
    const [items, setItems] = _react.default.useState([]);
    const [isLoading, setIsLoading] = _react.default.useState(true);
    _react.default.useEffect(()=>{
        const generateItems = ()=>{
            const newItems = Array.from({
                length: itemCount
            }, (_, i)=>i);
            setItems(newItems);
            setIsLoading(false);
        };
        // Simulate heavy computation
        const timer = setTimeout(generateItems, 100);
        return ()=>clearTimeout(timer);
    }, [
        itemCount
    ]);
    if (isLoading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "loading",
            children: "Loading..."
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "heavy-component",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "item-count",
                children: [
                    items.length,
                    " items"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "items-container",
                children: items.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": `item-${item}`,
                        className: "item",
                        children: [
                            "Item ",
                            item
                        ]
                    }, item))
            })
        ]
    });
};
// Mock virtualized list component
const VirtualizedList = ({ items, itemHeight, containerHeight })=>{
    const [scrollTop, setScrollTop] = _react.default.useState(0);
    const [visibleItems, setVisibleItems] = _react.default.useState([]);
    _react.default.useEffect(()=>{
        const startIndex = Math.floor(scrollTop / itemHeight);
        const endIndex = Math.min(startIndex + Math.ceil(containerHeight / itemHeight) + 1, items.length);
        setVisibleItems(items.slice(startIndex, endIndex));
    }, [
        scrollTop,
        items,
        itemHeight,
        containerHeight
    ]);
    const handleScroll = (e)=>{
        setScrollTop(e.currentTarget.scrollTop);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "virtualized-list",
        style: {
            height: containerHeight,
            overflow: 'auto'
        },
        onScroll: handleScroll,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            style: {
                height: items.length * itemHeight,
                position: 'relative'
            },
            children: visibleItems.map((_, index)=>{
                const actualIndex = Math.floor(scrollTop / itemHeight) + index;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `virtual-item-${actualIndex}`,
                    style: {
                        position: 'absolute',
                        top: actualIndex * itemHeight,
                        height: itemHeight,
                        width: '100%'
                    },
                    children: [
                        "Virtual Item ",
                        actualIndex
                    ]
                }, actualIndex);
            })
        })
    });
};
// Mock memoized component
const MemoizedComponent = /*#__PURE__*/ _react.default.memo(({ data, onItemClick })=>{
    const renderCount = _react.default.useRef(0);
    renderCount.current += 1;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "memoized-component",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "render-count",
                children: renderCount.current
            }),
            data.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": `memoized-item-${item.id}`,
                    onClick: ()=>onItemClick(item.id),
                    className: "cursor-pointer p-2 hover:bg-gray-100",
                    children: item.name
                }, item.id))
        ]
    });
});
MemoizedComponent.displayName = 'MemoizedComponent';
// Mock lazy loaded component
const LazyComponent = /*#__PURE__*/ _react.default.lazy(()=>Promise.resolve({
        default: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "lazy-component",
                children: "Lazy loaded content"
            })
    }));
// Test wrapper
const TestWrapper = ({ children })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_antd.ConfigProvider, {
        locale: _zh_CN.default,
        children: children
    });
};
describe('性能测试', ()=>{
    let performanceMonitor;
    beforeEach(()=>{
        performanceMonitor = new PerformanceMonitor();
        jest.clearAllMocks();
    });
    describe('渲染性能测试', ()=>{
        it('应该在合理时间内渲染小型组件', ()=>{
            performanceMonitor.start();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "simple-component",
                    children: "Simple Component"
                })
            }));
            const renderTime = performanceMonitor.end();
            // 验证渲染时间小于50ms
            expect(renderTime).toBeLessThan(50);
            expect(_react1.screen.getByTestId('simple-component')).toBeInTheDocument();
        });
        it('应该高效渲染中等复杂度组件', async ()=>{
            performanceMonitor.start();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(HeavyComputationComponent, {
                    itemCount: 100
                })
            }));
            // 等待组件加载完成
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('heavy-component')).toBeInTheDocument();
            });
            const renderTime = performanceMonitor.end();
            // 验证渲染时间小于200ms
            expect(renderTime).toBeLessThan(200);
            expect(_react1.screen.getByTestId('item-count')).toHaveTextContent('100 items');
        });
        it('应该处理大量数据的渲染', async ()=>{
            const largeDataset = Array.from({
                length: 10000
            }, (_, i)=>i);
            performanceMonitor.start();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(VirtualizedList, {
                    items: largeDataset,
                    itemHeight: 50,
                    containerHeight: 400
                })
            }));
            const renderTime = performanceMonitor.end();
            // 验证虚拟化列表渲染时间
            expect(renderTime).toBeLessThan(100);
            expect(_react1.screen.getByTestId('virtualized-list')).toBeInTheDocument();
            // 验证只渲染可见项目
            const visibleItems = _react1.screen.getAllByTestId(/virtual-item-/);
            expect(visibleItems.length).toBeLessThan(20); // 只渲染可见的项目
        });
        it('应该优化重复渲染', async ()=>{
            const mockData = [
                {
                    id: 1,
                    name: 'Item 1'
                },
                {
                    id: 2,
                    name: 'Item 2'
                },
                {
                    id: 3,
                    name: 'Item 3'
                }
            ];
            const mockOnClick = jest.fn();
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MemoizedComponent, {
                    data: mockData,
                    onItemClick: mockOnClick
                })
            }));
            // 验证初始渲染
            expect(_react1.screen.getByTestId('render-count')).toHaveTextContent('1');
            // 使用相同props重新渲染
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MemoizedComponent, {
                    data: mockData,
                    onItemClick: mockOnClick
                })
            }));
            // 验证没有重新渲染（由于React.memo）
            expect(_react1.screen.getByTestId('render-count')).toHaveTextContent('1');
            // 使用不同props重新渲染
            const newData = [
                ...mockData,
                {
                    id: 4,
                    name: 'Item 4'
                }
            ];
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MemoizedComponent, {
                    data: newData,
                    onItemClick: mockOnClick
                })
            }));
            // 验证重新渲染
            expect(_react1.screen.getByTestId('render-count')).toHaveTextContent('2');
        });
    });
    describe('内存使用测试', ()=>{
        it('应该正确清理事件监听器', ()=>{
            const mockAddEventListener = jest.spyOn(window, 'addEventListener');
            const mockRemoveEventListener = jest.spyOn(window, 'removeEventListener');
            const ComponentWithEventListener = ()=>{
                _react.default.useEffect(()=>{
                    const handleResize = ()=>{
                    // Handle resize
                    };
                    window.addEventListener('resize', handleResize);
                    return ()=>window.removeEventListener('resize', handleResize);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "event-component",
                    children: "Component with event listener"
                });
            };
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ComponentWithEventListener, {})
            }));
            expect(mockAddEventListener).toHaveBeenCalledWith('resize', expect.any(Function));
            // 卸载组件
            unmount();
            expect(mockRemoveEventListener).toHaveBeenCalledWith('resize', expect.any(Function));
            mockAddEventListener.mockRestore();
            mockRemoveEventListener.mockRestore();
        });
        it('应该正确清理定时器', ()=>{
            jest.useFakeTimers();
            const mockClearTimeout = jest.spyOn(global, 'clearTimeout');
            const ComponentWithTimer = ()=>{
                const [count, setCount] = _react.default.useState(0);
                _react.default.useEffect(()=>{
                    const timer = setTimeout(()=>{
                        setCount(1);
                    }, 1000);
                    return ()=>clearTimeout(timer);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "timer-component",
                    children: count
                });
            };
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ComponentWithTimer, {})
            }));
            // 卸载组件
            unmount();
            expect(mockClearTimeout).toHaveBeenCalled();
            jest.useRealTimers();
            mockClearTimeout.mockRestore();
        });
        it('应该避免内存泄漏', ()=>{
            const ComponentWithState = ()=>{
                const [data, setData] = _react.default.useState([]);
                _react.default.useEffect(()=>{
                    // 模拟大量数据
                    const largeArray = Array.from({
                        length: 10000
                    }, (_, i)=>i);
                    setData(largeArray);
                    return ()=>{
                        // 清理数据
                        setData([]);
                    };
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "state-component",
                    children: [
                        "Data length: ",
                        data.length
                    ]
                });
            };
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ComponentWithState, {})
            }));
            expect(_react1.screen.getByTestId('state-component')).toHaveTextContent('Data length: 10000');
            // 卸载组件应该清理状态
            unmount();
            // 验证组件已卸载
            expect(_react1.screen.queryByTestId('state-component')).not.toBeInTheDocument();
        });
    });
    describe('异步加载性能测试', ()=>{
        it('应该高效处理懒加载组件', async ()=>{
            performanceMonitor.start();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.default.Suspense, {
                    fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "suspense-loading",
                        children: "Loading..."
                    }),
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LazyComponent, {})
                })
            }));
            // 验证Suspense fallback显示
            expect(_react1.screen.getByTestId('suspense-loading')).toBeInTheDocument();
            // 等待懒加载组件加载
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('lazy-component')).toBeInTheDocument();
            });
            const loadTime = performanceMonitor.end();
            // 验证加载时间
            expect(loadTime).toBeLessThan(500);
            expect(_react1.screen.queryByTestId('suspense-loading')).not.toBeInTheDocument();
        });
        it('应该优化并发请求', async ()=>{
            const mockFetch = jest.fn().mockImplementation(()=>Promise.resolve({
                    json: ()=>Promise.resolve({
                            data: 'test'
                        })
                }));
            global.fetch = mockFetch;
            const ConcurrentRequestComponent = ()=>{
                const [data, setData] = _react.default.useState([]);
                const [loading, setLoading] = _react.default.useState(true);
                _react.default.useEffect(()=>{
                    const fetchData = async ()=>{
                        try {
                            // 并发请求
                            const promises = Array.from({
                                length: 5
                            }, (_, i)=>fetch(`/api/data/${i}`));
                            const responses = await Promise.all(promises);
                            const results = await Promise.all(responses.map((response)=>response.json()));
                            setData(results);
                        } catch (error) {
                            console.error('Fetch error:', error);
                        } finally{
                            setLoading(false);
                        }
                    };
                    fetchData();
                }, []);
                if (loading) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "concurrent-loading",
                        children: "Loading..."
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "concurrent-data",
                    children: [
                        "Data count: ",
                        data.length
                    ]
                });
            };
            performanceMonitor.start();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ConcurrentRequestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('concurrent-data')).toBeInTheDocument();
            });
            const loadTime = performanceMonitor.end();
            // 验证并发请求性能
            expect(loadTime).toBeLessThan(1000);
            expect(mockFetch).toHaveBeenCalledTimes(5);
            expect(_react1.screen.getByTestId('concurrent-data')).toHaveTextContent('Data count: 5');
        });
    });
    describe('用户交互性能测试', ()=>{
        it('应该快速响应用户点击', async ()=>{
            const user = _userevent.default.setup();
            const mockClick = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    "data-testid": "performance-button",
                    onClick: mockClick,
                    children: "Click me"
                })
            }));
            performanceMonitor.start();
            await user.click(_react1.screen.getByTestId('performance-button'));
            const responseTime = performanceMonitor.end();
            // 验证响应时间小于100ms
            expect(responseTime).toBeLessThan(100);
            expect(mockClick).toHaveBeenCalledTimes(1);
        });
        it('应该高效处理输入事件', async ()=>{
            const user = _userevent.default.setup();
            const mockChange = jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    "data-testid": "performance-input",
                    onChange: mockChange,
                    placeholder: "Type here..."
                })
            }));
            performanceMonitor.start();
            await user.type(_react1.screen.getByTestId('performance-input'), 'test input');
            const inputTime = performanceMonitor.end();
            // 验证输入响应时间
            expect(inputTime).toBeLessThan(200);
            expect(mockChange).toHaveBeenCalled();
        });
        it('应该优化滚动性能', ()=>{
            const items = Array.from({
                length: 1000
            }, (_, i)=>i);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "scrollable-container",
                    style: {
                        height: '400px',
                        overflow: 'auto'
                    },
                    children: items.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            style: {
                                height: '50px',
                                padding: '10px'
                            },
                            children: [
                                "Item ",
                                item
                            ]
                        }, item))
                })
            }));
            const container = _react1.screen.getByTestId('scrollable-container');
            performanceMonitor.start();
            // 模拟滚动
            container.scrollTop = 1000;
            const scrollTime = performanceMonitor.end();
            // 验证滚动性能
            expect(scrollTime).toBeLessThan(50);
            expect(container.scrollTop).toBe(1000);
        });
    });
    describe('资源加载性能测试', ()=>{
        it('应该优化图片加载', ()=>{
            const mockImage = {
                onload: null,
                onerror: null,
                src: ''
            };
            // Mock Image constructor
            global.Image = jest.fn().mockImplementation(()=>mockImage);
            const ImageComponent = ()=>{
                const [loaded, setLoaded] = _react.default.useState(false);
                const [error, setError] = _react.default.useState(false);
                _react.default.useEffect(()=>{
                    const img = new Image();
                    img.onload = ()=>setLoaded(true);
                    img.onerror = ()=>setError(true);
                    img.src = '/test-image.jpg';
                }, []);
                if (error) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "image-error",
                        children: "Image failed to load"
                    });
                }
                if (!loaded) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "image-loading",
                        children: "Loading image..."
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "image-loaded",
                    children: "Image loaded"
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageComponent, {})
            }));
            expect(_react1.screen.getByTestId('image-loading')).toBeInTheDocument();
            // 模拟图片加载成功
            if (mockImage.onload) {
                mockImage.onload();
            }
            expect(_react1.screen.getByTestId('image-loaded')).toBeInTheDocument();
        });
        it('应该实现资源预加载', ()=>{
            const mockLink = {
                rel: '',
                href: '',
                as: ''
            };
            const mockCreateElement = jest.spyOn(document, 'createElement').mockImplementation((tagName)=>{
                if (tagName === 'link') {
                    return mockLink;
                }
                return document.createElement(tagName);
            });
            const mockAppendChild = jest.spyOn(document.head, 'appendChild').mockImplementation(()=>mockLink);
            const PreloadComponent = ()=>{
                _react.default.useEffect(()=>{
                    // 预加载关键资源
                    const preloadLink = document.createElement('link');
                    preloadLink.rel = 'preload';
                    preloadLink.href = '/critical-resource.js';
                    preloadLink.as = 'script';
                    document.head.appendChild(preloadLink);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "preload-component",
                    children: "Component with preload"
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(PreloadComponent, {})
            }));
            expect(mockCreateElement).toHaveBeenCalledWith('link');
            expect(mockAppendChild).toHaveBeenCalled();
            expect(mockLink.rel).toBe('preload');
            expect(mockLink.href).toBe('/critical-resource.js');
            expect(mockLink.as).toBe('script');
            mockCreateElement.mockRestore();
            mockAppendChild.mockRestore();
        });
    });
    describe('Bundle大小优化测试', ()=>{
        it('应该支持代码分割', async ()=>{
            const DynamicImportComponent = ()=>{
                const [Component, setComponent] = _react.default.useState(null);
                _react.default.useEffect(()=>{
                    // 动态导入
                    Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./mock-module"))).then((module)=>{
                        setComponent(()=>module.default);
                    }).catch(()=>{
                        setComponent(()=>()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    children: "Failed to load"
                                }));
                    });
                }, []);
                if (!Component) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "dynamic-loading",
                        children: "Loading dynamic component..."
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {});
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(DynamicImportComponent, {})
            }));
            expect(_react1.screen.getByTestId('dynamic-loading')).toBeInTheDocument();
        });
        it('应该优化依赖包大小', ()=>{
            // 验证只导入需要的模块
            const mockLodash = {
                debounce: jest.fn(),
                throttle: jest.fn()
            };
            // 模拟tree-shaking优化
            const { debounce } = mockLodash;
            const DebouncedComponent = ()=>{
                const [value, setValue] = _react.default.useState('');
                const debouncedSetValue = _react.default.useMemo(()=>debounce((newValue)=>setValue(newValue), 300), [
                    debounce
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "debounced-component",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                            onChange: (e)=>debouncedSetValue(e.target.value),
                            placeholder: "Debounced input"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "debounced-value",
                            children: value
                        })
                    ]
                });
            };
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(DebouncedComponent, {})
            }));
            expect(_react1.screen.getByTestId('debounced-component')).toBeInTheDocument();
            // 验证只使用了需要的函数
            expect(debounce).toBeDefined();
        });
    });
    describe('缓存策略测试', ()=>{
        it('应该实现组件级缓存', ()=>{
            const expensiveCalculation = jest.fn((n)=>{
                // 模拟昂贵计算
                let result = 0;
                for(let i = 0; i < n; i++){
                    result += i;
                }
                return result;
            });
            const CachedComponent = ({ input })=>{
                const result = _react.default.useMemo(()=>expensiveCalculation(input), [
                    input
                ]);
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "cached-component",
                    children: [
                        "Result: ",
                        result
                    ]
                });
            };
            CachedComponent.displayName = 'CachedComponent';
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CachedComponent, {
                    input: 1000
                })
            }));
            expect(expensiveCalculation).toHaveBeenCalledTimes(1);
            // 使用相同输入重新渲染
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CachedComponent, {
                    input: 1000
                })
            }));
            // 验证缓存生效，没有重新计算
            expect(expensiveCalculation).toHaveBeenCalledTimes(1);
            // 使用不同输入重新渲染
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CachedComponent, {
                    input: 2000
                })
            }));
            // 验证重新计算
            expect(expensiveCalculation).toHaveBeenCalledTimes(2);
        });
        it('应该实现请求缓存', async ()=>{
            const mockFetch = jest.fn().mockResolvedValue({
                json: ()=>Promise.resolve({
                        data: 'cached data'
                    })
            });
            global.fetch = mockFetch;
            // 简单的请求缓存实现
            const requestCache = new Map();
            const cachedFetch = (url)=>{
                if (requestCache.has(url)) {
                    return requestCache.get(url);
                }
                const promise = fetch(url).then((response)=>response.json());
                requestCache.set(url, promise);
                return promise;
            };
            const CachedRequestComponent = ()=>{
                const [data, setData] = _react.default.useState(null);
                _react.default.useEffect(()=>{
                    cachedFetch('/api/data').then(setData);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "cached-request",
                    children: data ? JSON.stringify(data) : 'Loading...'
                });
            };
            // 渲染第一个组件
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CachedRequestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId('cached-request')).toHaveTextContent('cached data');
            });
            expect(mockFetch).toHaveBeenCalledTimes(1);
            // 渲染第二个相同的组件
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CachedRequestComponent, {})
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getAllByTestId('cached-request')).toHaveLength(2);
            });
            // 验证缓存生效，没有发起新请求
            expect(mockFetch).toHaveBeenCalledTimes(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,