{"version":3,"names":["cov_2i6iou3sdq","actualCoverage","s","UserApi","baseURL","getUsers","params","b","f","response","_httpclient","httpClient","get","data","createUser","userData","post","getUserById","id","updateUser","put","deleteUser","delete","changeUserStatus","active","resetPassword","newPassword","new_password","getUserStats","tenantId","tenant_id","batchUpdateUsers","request","searchUsers","exportUsers","filters","responseType","importUsers","file","formData","FormData","append","headers"],"sources":["/Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/user-api.ts"],"sourcesContent":["import { httpClient } from './http-client';\n\n// 用户相关的接口定义\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  name: string;\n  department: string;\n  phone: string;\n  active: boolean;\n  tenant_id: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreateUserRequest {\n  username: string;\n  email: string;\n  name: string;\n  department: string;\n  phone: string;\n  password: string;\n  tenant_id: number;\n}\n\nexport interface UpdateUserRequest {\n  username?: string;\n  email?: string;\n  name?: string;\n  department?: string;\n  phone?: string;\n}\n\nexport interface ListUsersParams {\n  page?: number;\n  page_size?: number;\n  tenant_id?: number;\n  status?: string;\n  department?: string;\n  search?: string;\n}\n\nexport interface PagedUsersResponse {\n  users: User[];\n  pagination: {\n    page: number;\n    page_size: number;\n    total: number;\n    total_page: number;\n  };\n}\n\nexport interface UserStatsResponse {\n  total: number;\n  active: number;\n  inactive: number;\n}\n\nexport interface BatchUpdateUsersRequest {\n  user_ids: number[];\n  action: 'activate' | 'deactivate' | 'department';\n  department?: string;\n}\n\nexport interface SearchUsersParams {\n  keyword: string;\n  tenant_id?: number;\n  limit?: number;\n}\n\nexport class UserApi {\n  private static baseURL = '/api/v1/users';\n\n  // 获取用户列表\n  static async getUsers(params: ListUsersParams = {}): Promise<PagedUsersResponse> {\n    const response = await httpClient.get<PagedUsersResponse>(this.baseURL, { params });\n    return response.data;\n  }\n\n  // 创建用户\n  static async createUser(userData: CreateUserRequest): Promise<User> {\n    const response = await httpClient.post<User>(this.baseURL, userData);\n    return response.data;\n  }\n\n  // 获取用户详情\n  static async getUserById(id: number): Promise<User> {\n    const response = await httpClient.get<User>(`${this.baseURL}/${id}`);\n    return response.data;\n  }\n\n  // 更新用户信息\n  static async updateUser(id: number, userData: UpdateUserRequest): Promise<User> {\n    const response = await httpClient.put<User>(`${this.baseURL}/${id}`, userData);\n    return response.data;\n  }\n\n  // 删除用户（软删除）\n  static async deleteUser(id: number): Promise<void> {\n    await httpClient.delete(`${this.baseURL}/${id}`);\n  }\n\n  // 更改用户状态\n  static async changeUserStatus(id: number, active: boolean): Promise<void> {\n    await httpClient.put(`${this.baseURL}/${id}/status`, { active });\n  }\n\n  // 重置用户密码\n  static async resetPassword(id: number, newPassword: string): Promise<void> {\n    await httpClient.put(`${this.baseURL}/${id}/reset-password`, { new_password: newPassword });\n  }\n\n  // 获取用户统计\n  static async getUserStats(tenantId?: number): Promise<UserStatsResponse> {\n    const params = tenantId ? { tenant_id: tenantId } : {};\n    const response = await httpClient.get<UserStatsResponse>(`${this.baseURL}/stats`, { params });\n    return response.data;\n  }\n\n  // 批量更新用户\n  static async batchUpdateUsers(request: BatchUpdateUsersRequest): Promise<void> {\n    await httpClient.put(`${this.baseURL}/batch`, request);\n  }\n\n  // 搜索用户\n  static async searchUsers(params: SearchUsersParams): Promise<User[]> {\n    const response = await httpClient.get<User[]>(`${this.baseURL}/search`, { params });\n    return response.data;\n  }\n\n  // 导出用户\n  static async exportUsers(filters?: Record<string, unknown>): Promise<Blob> {\n    const response = await httpClient.get(`${this.baseURL}/export`, {\n      params: filters,\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n\n  // 导入用户\n  static async importUsers(file: File): Promise<{\n    success: User[];\n    failed: Array<{ index: number; user: CreateUserRequest; error: string }>;\n    total: number;\n    processed: number;\n  }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await httpClient.post(`${this.baseURL}/import`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n}"],"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","ignoreList":[]}