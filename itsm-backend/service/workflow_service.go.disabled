package service

import (
	"context"
	"encoding/xml"
	"fmt"
	"itsm-backend/dto"
	"itsm-backend/ent"
	"strings"
	"time"

	"go.uber.org/zap"
)

// BPMN 2.0 基础结构
type BPMNProcess struct {
	XMLName           xml.Name               `xml:"process"`
	ID                string                 `xml:"id,attr"`
	Name              string                 `xml:"name,attr"`
	StartEvents       []BPMNStartEvent       `xml:"startEvent"`
	UserTasks         []BPMNUserTask         `xml:"userTask"`
	ServiceTasks      []BPMNServiceTask      `xml:"serviceTask"`
	EndEvents         []BPMNEndEvent         `xml:"endEvent"`
	SequenceFlows     []BPMNSequenceFlow     `xml:"sequenceFlow"`
	ExclusiveGateways []BPMNExclusiveGateway `xml:"exclusiveGateway"`
	ParallelGateways  []BPMNParallelGateway  `xml:"parallelGateway"`
}

type BPMNStartEvent struct {
	ID   string `xml:"id,attr"`
	Name string `xml:"name,attr"`
}

type BPMNUserTask struct {
	ID              string `xml:"id,attr"`
	Name            string `xml:"name,attr"`
	Assignee        string `xml:"assignee,attr"`
	CandidateUsers  string `xml:"candidateUsers,attr"`
	CandidateGroups string `xml:"candidateGroups,attr"`
}

type BPMNServiceTask struct {
	ID    string `xml:"id,attr"`
	Name  string `xml:"name,attr"`
	Class string `xml:"class,attr"`
}

type BPMNEndEvent struct {
	ID   string `xml:"id,attr"`
	Name string `xml:"name,attr"`
}

type BPMNSequenceFlow struct {
	ID                  string                   `xml:"id,attr"`
	SourceRef           string                   `xml:"sourceRef,attr"`
	TargetRef           string                   `xml:"targetRef,attr"`
	ConditionExpression *BPMNConditionExpression `xml:"conditionExpression"`
}

type BPMNConditionExpression struct {
	Type string `xml:"type,attr"`
	Text string `xml:",chardata"`
}

type BPMNExclusiveGateway struct {
	ID   string `xml:"id,attr"`
	Name string `xml:"name,attr"`
}

type BPMNParallelGateway struct {
	ID   string `xml:"id,attr"`
	Name string `xml:"name,attr"`
}

type WorkflowService struct {
	client *ent.Client
	logger *zap.SugaredLogger
}

func NewWorkflowService(client *ent.Client, logger *zap.SugaredLogger) *WorkflowService {
	return &WorkflowService{
		client: client,
		logger: logger,
	}
}

// CreateWorkflow 创建工作流
func (ws *WorkflowService) CreateWorkflow(ctx context.Context, req *dto.CreateWorkflowRequest, tenantID int) (*ent.Workflow, error) {
	ws.logger.Infow("Creating workflow", "name", req.Name, "tenant_id", tenantID)

	// 验证BPMN XML
	if err := ws.validateBPMN(req.BPMNXML); err != nil {
		return nil, fmt.Errorf("invalid BPMN XML: %w", err)
	}

	// 创建工作流
	workflow, err := ws.client.Workflow.Create().
		SetTenantID(tenantID).
		SetName(req.Name).
		SetDescription(req.Description).
		SetCategory(req.Category).
		SetBPMNXML(req.BPMNXML).
		SetProcessVariables(req.ProcessVariables).
		SetIsTemplate(req.IsTemplate).
		SetTemplateCategory(req.TemplateCategory).
		SetMetadata(req.Metadata).
		SetCreatedBy("system"). // TODO: 从上下文获取用户
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to create workflow", "error", err)
		return nil, fmt.Errorf("failed to create workflow: %w", err)
	}

	// 创建初始版本
	_, err = ws.client.WorkflowVersion.Create().
		SetTenantID(tenantID).
		SetWorkflowID(workflow.ID).
		SetVersion("1.0.0").
		SetBPMNXML(req.BPMNXML).
		SetProcessVariables(req.ProcessVariables).
		SetStatus("draft").
		SetCreatedBy("system").
		SetIsCurrent(true).
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to create workflow version", "error", err)
		return nil, fmt.Errorf("failed to create workflow version: %w", err)
	}

	ws.logAuditEvent(ctx, "workflow_created", workflow.ID, tenantID, map[string]interface{}{
		"name":     req.Name,
		"category": req.Category,
	})

	return workflow, nil
}

// UpdateWorkflow 更新工作流
func (ws *WorkflowService) UpdateWorkflow(ctx context.Context, workflowID int, req *dto.UpdateWorkflowRequest, tenantID int) (*ent.Workflow, error) {
	ws.logger.Infow("Updating workflow", "workflow_id", workflowID, "tenant_id", tenantID)

	// 检查工作流是否存在且属于当前租户
	existingWorkflow, err := ws.client.Workflow.Query().
		Where(workflow.ID(workflowID), workflow.TenantID(tenantID)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("workflow not found: %w", err)
	}

	// 如果更新了BPMN XML，需要验证
	if req.BPMNXML != "" {
		if err := ws.validateBPMN(req.BPMNXML); err != nil {
			return nil, fmt.Errorf("invalid BPMN XML: %w", err)
		}
	}

	updateQuery := ws.client.Workflow.UpdateOne(existingWorkflow)

	if req.Name != "" {
		updateQuery.SetName(req.Name)
	}
	if req.Description != "" {
		updateQuery.SetDescription(req.Description)
	}
	if req.Category != "" {
		updateQuery.SetCategory(req.Category)
	}
	if req.BPMNXML != "" {
		updateQuery.SetBPMNXML(req.BPMNXML)
	}
	if req.ProcessVariables != nil {
		updateQuery.SetProcessVariables(req.ProcessVariables)
	}
	if req.Status != "" {
		updateQuery.SetStatus(req.Status)
	}
	if req.Metadata != nil {
		updateQuery.SetMetadata(req.Metadata)
	}

	workflow, err := updateQuery.Save(ctx)
	if err != nil {
		ws.logger.Errorw("Failed to update workflow", "error", err)
		return nil, fmt.Errorf("failed to update workflow: %w", err)
	}

	ws.logAuditEvent(ctx, "workflow_updated", workflowID, tenantID, map[string]interface{}{
		"updated_fields": req,
	})

	return workflow, nil
}

// ListWorkflows 获取工作流列表
func (ws *WorkflowService) ListWorkflows(ctx context.Context, req *dto.ListWorkflowsRequest, tenantID int) (*dto.ListWorkflowsResponse, error) {
	ws.logger.Infow("Listing workflows", "tenant_id", tenantID, "filters", req)

	query := ws.client.Workflow.Query().
		Where(workflow.TenantID(tenantID))

	// 应用筛选条件
	if req.Category != "" {
		query.Where(workflow.Category(req.Category))
	}
	if req.Status != "" {
		query.Where(workflow.Status(req.Status))
	}
	if req.IsTemplate != nil {
		query.Where(workflow.IsTemplate(*req.IsTemplate))
	}
	if req.Keyword != "" {
		query.Where(workflow.Or(
			workflow.NameContains(req.Keyword),
			workflow.DescriptionContains(req.Keyword),
		))
	}

	// 获取总数
	total, err := query.Clone().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count workflows: %w", err)
	}

	// 应用分页和排序
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 20
	}

	offset := (req.Page - 1) * req.PageSize
	query = query.Offset(offset).Limit(req.PageSize)

	// 排序
	switch req.SortBy {
	case "created_at":
		if req.SortOrder == "desc" {
			query.Order(ent.Desc(workflow.FieldCreatedAt))
		} else {
			query.Order(ent.Asc(workflow.FieldCreatedAt))
		}
	case "name":
		if req.SortOrder == "desc" {
			query.Order(ent.Desc(workflow.FieldName))
		} else {
			query.Order(ent.Asc(workflow.FieldName))
		}
	default:
		query.Order(ent.Desc(workflow.FieldCreatedAt))
	}

	workflows, err := query.All(ctx)
	if err != nil {
		ws.logger.Errorw("Failed to list workflows", "error", err)
		return nil, fmt.Errorf("failed to list workflows: %w", err)
	}

	return &dto.ListWorkflowsResponse{
		Workflows: workflows,
		Total:     total,
		Page:      req.Page,
		PageSize:  req.PageSize,
	}, nil
}

// GetWorkflow 获取工作流详情
func (ws *WorkflowService) GetWorkflow(ctx context.Context, workflowID int, tenantID int) (*ent.Workflow, error) {
	workflow, err := ws.client.Workflow.Query().
		Where(workflow.ID(workflowID), workflow.TenantID(tenantID)).
		Only(ctx)

	if err != nil {
		return nil, fmt.Errorf("workflow not found: %w", err)
	}

	return workflow, nil
}

// StartWorkflow 启动工作流实例
func (ws *WorkflowService) StartWorkflow(ctx context.Context, req *dto.StartWorkflowRequest, tenantID int) (*dto.StartWorkflowResponse, error) {
	ws.logger.Infow("Starting workflow", "workflow_id", req.WorkflowID, "tenant_id", tenantID)

	// 检查工作流是否存在且为激活状态
	workflow, err := ws.client.Workflow.Query().
		Where(workflow.ID(req.WorkflowID), workflow.TenantID(tenantID), workflow.Status("active")).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("workflow not found or not active: %w", err)
	}

	// 解析BPMN XML
	bpmnProcess, err := ws.parseBPMN(workflow.BPMNXML)
	if err != nil {
		return nil, fmt.Errorf("failed to parse BPMN: %w", err)
	}

	// 生成实例ID
	instanceID := fmt.Sprintf("INST-%d-%d", req.WorkflowID, time.Now().Unix())

	// 创建工作流实例
	instance, err := ws.client.WorkflowInstance.Create().
		SetTenantID(tenantID).
		SetWorkflowID(req.WorkflowID).
		SetInstanceID(instanceID).
		SetBusinessKey(req.BusinessKey).
		SetStatus("running").
		SetVariables(req.Variables).
		SetStartedBy("system"). // TODO: 从上下文获取用户
		SetStartedAt(time.Now()).
		SetPriority(req.Priority).
		SetDueDate(req.DueDate).
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to create workflow instance", "error", err)
		return nil, fmt.Errorf("failed to create workflow instance: %w", err)
	}

	// 创建初始活动记录
	_, err = ws.client.WorkflowActivity.Create().
		SetTenantID(tenantID).
		SetInstanceID(instance.ID).
		SetActivityID("start").
		SetName("流程启动").
		SetType("startEvent").
		SetStatus("completed").
		SetStartedAt(time.Now()).
		SetCompletedAt(time.Now()).
		SetCompletedBy("system").
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to create workflow activity", "error", err)
	}

	// 创建第一个任务（如果有用户任务）
	var currentTask *dto.WorkflowTaskResponse
	if len(bpmnProcess.UserTasks) > 0 {
		firstTask := bpmnProcess.UserTasks[0]
		task, err := ws.createTask(ctx, instance.ID, firstTask, req.Assignee, tenantID)
		if err != nil {
			ws.logger.Errorw("Failed to create first task", "error", err)
		} else {
			currentTask = task
		}
	}

	ws.logAuditEvent(ctx, "workflow_started", instance.ID, tenantID, map[string]interface{}{
		"workflow_id":  req.WorkflowID,
		"instance_id":  instanceID,
		"business_key": req.BusinessKey,
	})

	return &dto.StartWorkflowResponse{
		InstanceID:  instanceID,
		BusinessKey: req.BusinessKey,
		Status:      "running",
		CurrentTask: currentTask,
		Variables:   req.Variables,
		StartedAt:   instance.StartedAt,
	}, nil
}

// CompleteTask 完成任务
func (ws *WorkflowService) CompleteTask(ctx context.Context, req *dto.CompleteTaskRequest, tenantID int) error {
	ws.logger.Infow("Completing task", "task_id", req.TaskID, "tenant_id", tenantID)

	// 查找任务
	task, err := ws.client.WorkflowTask.Query().
		Where(workflowtask.TaskID(req.TaskID)).
		Only(ctx)
	if err != nil {
		return fmt.Errorf("task not found: %w", err)
	}

	// 检查任务是否属于当前租户
	if task.TenantID != tenantID {
		return fmt.Errorf("task not accessible")
	}

	// 更新任务状态
	_, err = ws.client.WorkflowTask.UpdateOne(task).
		SetStatus("completed").
		SetCompletedAt(time.Now()).
		SetCompletedBy("system"). // TODO: 从上下文获取用户
		SetFormData(req.FormData).
		SetVariables(req.Variables).
		SetComment(req.Comment).
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to complete task", "error", err)
		return fmt.Errorf("failed to complete task: %w", err)
	}

	// 创建活动记录
	_, err = ws.client.WorkflowActivity.Create().
		SetTenantID(tenantID).
		SetInstanceID(task.InstanceID).
		SetActivityID(task.ActivityID).
		SetName(task.Name).
		SetType(task.Type).
		SetStatus("completed").
		SetStartedAt(task.CreatedAt).
		SetCompletedAt(time.Now()).
		SetCompletedBy("system").
		SetVariables(req.Variables).
		SetComment(req.Comment).
		Save(ctx)

	if err != nil {
		ws.logger.Errorw("Failed to create activity record", "error", err)
	}

	// TODO: 处理流程流转逻辑
	// 1. 查找下一个活动
	// 2. 创建下一个任务
	// 3. 检查是否到达结束节点

	ws.logAuditEvent(ctx, "task_completed", task.ID, tenantID, map[string]interface{}{
		"task_id": req.TaskID,
		"outcome": req.Outcome,
	})

	return nil
}

// ListWorkflowInstances 获取工作流实例列表
func (ws *WorkflowService) ListWorkflowInstances(ctx context.Context, req *dto.ListWorkflowInstancesRequest, tenantID int) (*dto.ListWorkflowInstancesResponse, error) {
	query := ws.client.WorkflowInstance.Query().
		Where(workflowinstance.TenantID(tenantID))

	// 应用筛选条件
	if req.WorkflowID != 0 {
		query.Where(workflowinstance.WorkflowID(req.WorkflowID))
	}
	if req.Status != "" {
		query.Where(workflowinstance.Status(req.Status))
	}
	if req.BusinessKey != "" {
		query.Where(workflowinstance.BusinessKey(req.BusinessKey))
	}
	if req.StartedBy != "" {
		query.Where(workflowinstance.StartedBy(req.StartedBy))
	}
	if req.DateFrom != nil {
		query.Where(workflowinstance.StartedAtGTE(*req.DateFrom))
	}
	if req.DateTo != nil {
		query.Where(workflowinstance.StartedAtLTE(*req.DateTo))
	}

	// 获取总数
	total, err := query.Clone().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count instances: %w", err)
	}

	// 应用分页和排序
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 20
	}

	offset := (req.Page - 1) * req.PageSize
	query = query.Offset(offset).Limit(req.PageSize)

	// 排序
	switch req.SortBy {
	case "started_at":
		if req.SortOrder == "desc" {
			query.Order(ent.Desc(workflowinstance.FieldStartedAt))
		} else {
			query.Order(ent.Asc(workflowinstance.FieldStartedAt))
		}
	default:
		query.Order(ent.Desc(workflowinstance.FieldStartedAt))
	}

	instances, err := query.All(ctx)
	if err != nil {
		ws.logger.Errorw("Failed to list workflow instances", "error", err)
		return nil, fmt.Errorf("failed to list workflow instances: %w", err)
	}

	return &dto.ListWorkflowInstancesResponse{
		Instances: instances,
		Total:     total,
		Page:      req.Page,
		PageSize:  req.PageSize,
	}, nil
}

// ListWorkflowTasks 获取工作流任务列表
func (ws *WorkflowService) ListWorkflowTasks(ctx context.Context, req *dto.ListWorkflowTasksRequest, tenantID int) (*dto.ListWorkflowTasksResponse, error) {
	query := ws.client.WorkflowTask.Query().
		Where(workflowtask.TenantID(tenantID))

	// 应用筛选条件
	if req.InstanceID != 0 {
		query.Where(workflowtask.InstanceID(req.InstanceID))
	}
	if req.Assignee != "" {
		query.Where(workflowtask.Assignee(req.Assignee))
	}
	if req.Status != "" {
		query.Where(workflowtask.Status(req.Status))
	}
	if req.Priority != "" {
		query.Where(workflowtask.Priority(req.Priority))
	}
	if req.DateFrom != nil {
		query.Where(workflowtask.CreatedAtGTE(*req.DateFrom))
	}
	if req.DateTo != nil {
		query.Where(workflowtask.CreatedAtLTE(*req.DateTo))
	}

	// 获取总数
	total, err := query.Clone().Count(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to count tasks: %w", err)
	}

	// 应用分页和排序
	if req.Page <= 0 {
		req.Page = 1
	}
	if req.PageSize <= 0 {
		req.PageSize = 20
	}

	offset := (req.Page - 1) * req.PageSize
	query = query.Offset(offset).Limit(req.PageSize)

	// 排序
	switch req.SortBy {
	case "created_at":
		if req.SortOrder == "desc" {
			query.Order(ent.Desc(workflowtask.FieldCreatedAt))
		} else {
			query.Order(ent.Asc(workflowtask.FieldCreatedAt))
		}
	case "due_date":
		if req.SortOrder == "desc" {
			query.Order(ent.Desc(workflowtask.FieldDueDate))
		} else {
			query.Order(ent.Asc(workflowtask.FieldDueDate))
		}
	default:
		query.Order(ent.Asc(workflowtask.FieldCreatedAt))
	}

	tasks, err := query.All(ctx)
	if err != nil {
		ws.logger.Errorw("Failed to list workflow tasks", "error", err)
		return nil, fmt.Errorf("failed to list workflow tasks: %w", err)
	}

	return &dto.ListWorkflowTasksResponse{
		Tasks:    tasks,
		Total:    total,
		Page:     req.Page,
		PageSize: req.PageSize,
	}, nil
}

// ValidateBPMN 验证BPMN XML
func (ws *WorkflowService) ValidateBPMN(bpmnXML string) error {
	// 检查XML格式
	var process BPMNProcess
	if err := xml.Unmarshal([]byte(bpmnXML), &process); err != nil {
		return fmt.Errorf("invalid XML format: %w", err)
	}

	// 检查必需元素
	if process.ID == "" {
		return fmt.Errorf("process ID is required")
	}

	if len(process.StartEvents) == 0 {
		return fmt.Errorf("at least one start event is required")
	}

	if len(process.EndEvents) == 0 {
		return fmt.Errorf("at least one end event is required")
	}

	// 检查序列流
	if len(process.SequenceFlows) == 0 {
		return fmt.Errorf("at least one sequence flow is required")
	}

	// TODO: 添加更多验证规则
	// 1. 检查所有节点是否都有对应的序列流
	// 2. 检查网关的输入输出
	// 3. 检查循环引用
	// 4. 检查死锁

	return nil
}

// parseBPMN 解析BPMN XML
func (ws *WorkflowService) parseBPMN(bpmnXML string) (*BPMNProcess, error) {
	var process BPMNProcess
	if err := xml.Unmarshal([]byte(bpmnXML), &process); err != nil {
		return nil, fmt.Errorf("failed to parse BPMN XML: %w", err)
	}
	return &process, nil
}

// createTask 创建任务
func (ws *WorkflowService) createTask(ctx context.Context, instanceID int, userTask BPMNUserTask, assignee string, tenantID int) (*dto.WorkflowTaskResponse, error) {
	taskID := fmt.Sprintf("TASK-%d-%s", instanceID, userTask.ID)

	task, err := ws.client.WorkflowTask.Create().
		SetTenantID(tenantID).
		SetInstanceID(instanceID).
		SetTaskID(taskID).
		SetActivityID(userTask.ID).
		SetName(userTask.Name).
		SetType("user_task").
		SetAssignee(assignee).
		SetCandidateUsers(userTask.CandidateUsers).
		SetCandidateGroups(userTask.CandidateGroups).
		SetStatus("pending").
		SetPriority("normal").
		SetCreatedAt(time.Now()).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to create task: %w", err)
	}

	return &dto.WorkflowTaskResponse{
		TaskID:          task.TaskID,
		ActivityID:      task.ActivityID,
		Name:            task.Name,
		Type:            task.Type,
		Assignee:        task.Assignee,
		CandidateUsers:  strings.Split(task.CandidateUsers, ","),
		CandidateGroups: strings.Split(task.CandidateGroups, ","),
		Status:          task.Status,
		Priority:        task.Priority,
		CreatedAt:       task.CreatedAt,
		DueDate:         task.DueDate,
		FormData:        task.FormData,
		Variables:       task.Variables,
	}, nil
}

// logAuditEvent 记录审计事件
func (ws *WorkflowService) logAuditEvent(ctx context.Context, event string, resourceID int, tenantID int, metadata map[string]interface{}) {
	ws.logger.Infow("Audit event",
		"event", event,
		"resource_id", resourceID,
		"tenant_id", tenantID,
		"metadata", metadata,
		"timestamp", time.Now(),
	)
}
