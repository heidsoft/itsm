// Code generated by ent, DO NOT EDIT.

package processinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processinstance type in the database.
	Label = "process_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrentActivityID holds the string denoting the current_activity_id field in the database.
	FieldCurrentActivityID = "current_activity_id"
	// FieldCurrentActivityName holds the string denoting the current_activity_name field in the database.
	FieldCurrentActivityName = "current_activity_name"
	// FieldVariables holds the string denoting the variables field in the database.
	FieldVariables = "variables"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldSuspendedTime holds the string denoting the suspended_time field in the database.
	FieldSuspendedTime = "suspended_time"
	// FieldSuspendedReason holds the string denoting the suspended_reason field in the database.
	FieldSuspendedReason = "suspended_reason"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldInitiator holds the string denoting the initiator field in the database.
	FieldInitiator = "initiator"
	// FieldParentProcessInstanceID holds the string denoting the parent_process_instance_id field in the database.
	FieldParentProcessInstanceID = "parent_process_instance_id"
	// FieldRootProcessInstanceID holds the string denoting the root_process_instance_id field in the database.
	FieldRootProcessInstanceID = "root_process_instance_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processinstance in the database.
	Table = "process_instances"
)

// Columns holds all SQL columns for processinstance fields.
var Columns = []string{
	FieldID,
	FieldProcessInstanceID,
	FieldBusinessKey,
	FieldProcessDefinitionKey,
	FieldProcessDefinitionID,
	FieldStatus,
	FieldCurrentActivityID,
	FieldCurrentActivityName,
	FieldVariables,
	FieldStartTime,
	FieldEndTime,
	FieldSuspendedTime,
	FieldSuspendedReason,
	FieldTenantID,
	FieldInitiator,
	FieldParentProcessInstanceID,
	FieldRootProcessInstanceID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ProcessInstanceIDValidator is a validator for the "process_instance_id" field. It is called by the builders before save.
	ProcessInstanceIDValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// ProcessDefinitionIDValidator is a validator for the "process_definition_id" field. It is called by the builders before save.
	ProcessDefinitionIDValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByBusinessKey orders the results by the business_key field.
func ByBusinessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessKey, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrentActivityID orders the results by the current_activity_id field.
func ByCurrentActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentActivityID, opts...).ToFunc()
}

// ByCurrentActivityName orders the results by the current_activity_name field.
func ByCurrentActivityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentActivityName, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// BySuspendedTime orders the results by the suspended_time field.
func BySuspendedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendedTime, opts...).ToFunc()
}

// BySuspendedReason orders the results by the suspended_reason field.
func BySuspendedReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendedReason, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByInitiator orders the results by the initiator field.
func ByInitiator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitiator, opts...).ToFunc()
}

// ByParentProcessInstanceID orders the results by the parent_process_instance_id field.
func ByParentProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentProcessInstanceID, opts...).ToFunc()
}

// ByRootProcessInstanceID orders the results by the root_process_instance_id field.
func ByRootProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootProcessInstanceID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
