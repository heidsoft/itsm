// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/ciattributedefinition"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIAttributeDefinitionCreate is the builder for creating a CIAttributeDefinition entity.
type CIAttributeDefinitionCreate struct {
	config
	mutation *CIAttributeDefinitionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cadc *CIAttributeDefinitionCreate) SetName(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetName(s)
	return cadc
}

// SetDisplayName sets the "display_name" field.
func (cadc *CIAttributeDefinitionCreate) SetDisplayName(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetDisplayName(s)
	return cadc
}

// SetDescription sets the "description" field.
func (cadc *CIAttributeDefinitionCreate) SetDescription(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetDescription(s)
	return cadc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableDescription(s *string) *CIAttributeDefinitionCreate {
	if s != nil {
		cadc.SetDescription(*s)
	}
	return cadc
}

// SetDataType sets the "data_type" field.
func (cadc *CIAttributeDefinitionCreate) SetDataType(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetDataType(s)
	return cadc
}

// SetIsRequired sets the "is_required" field.
func (cadc *CIAttributeDefinitionCreate) SetIsRequired(b bool) *CIAttributeDefinitionCreate {
	cadc.mutation.SetIsRequired(b)
	return cadc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableIsRequired(b *bool) *CIAttributeDefinitionCreate {
	if b != nil {
		cadc.SetIsRequired(*b)
	}
	return cadc
}

// SetIsUnique sets the "is_unique" field.
func (cadc *CIAttributeDefinitionCreate) SetIsUnique(b bool) *CIAttributeDefinitionCreate {
	cadc.mutation.SetIsUnique(b)
	return cadc
}

// SetNillableIsUnique sets the "is_unique" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableIsUnique(b *bool) *CIAttributeDefinitionCreate {
	if b != nil {
		cadc.SetIsUnique(*b)
	}
	return cadc
}

// SetDefaultValue sets the "default_value" field.
func (cadc *CIAttributeDefinitionCreate) SetDefaultValue(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetDefaultValue(s)
	return cadc
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableDefaultValue(s *string) *CIAttributeDefinitionCreate {
	if s != nil {
		cadc.SetDefaultValue(*s)
	}
	return cadc
}

// SetValidationRules sets the "validation_rules" field.
func (cadc *CIAttributeDefinitionCreate) SetValidationRules(m map[string]interface{}) *CIAttributeDefinitionCreate {
	cadc.mutation.SetValidationRules(m)
	return cadc
}

// SetEnumValues sets the "enum_values" field.
func (cadc *CIAttributeDefinitionCreate) SetEnumValues(s []string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetEnumValues(s)
	return cadc
}

// SetReferenceType sets the "reference_type" field.
func (cadc *CIAttributeDefinitionCreate) SetReferenceType(s string) *CIAttributeDefinitionCreate {
	cadc.mutation.SetReferenceType(s)
	return cadc
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableReferenceType(s *string) *CIAttributeDefinitionCreate {
	if s != nil {
		cadc.SetReferenceType(*s)
	}
	return cadc
}

// SetDisplayOrder sets the "display_order" field.
func (cadc *CIAttributeDefinitionCreate) SetDisplayOrder(i int) *CIAttributeDefinitionCreate {
	cadc.mutation.SetDisplayOrder(i)
	return cadc
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableDisplayOrder(i *int) *CIAttributeDefinitionCreate {
	if i != nil {
		cadc.SetDisplayOrder(*i)
	}
	return cadc
}

// SetIsSearchable sets the "is_searchable" field.
func (cadc *CIAttributeDefinitionCreate) SetIsSearchable(b bool) *CIAttributeDefinitionCreate {
	cadc.mutation.SetIsSearchable(b)
	return cadc
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableIsSearchable(b *bool) *CIAttributeDefinitionCreate {
	if b != nil {
		cadc.SetIsSearchable(*b)
	}
	return cadc
}

// SetIsSystem sets the "is_system" field.
func (cadc *CIAttributeDefinitionCreate) SetIsSystem(b bool) *CIAttributeDefinitionCreate {
	cadc.mutation.SetIsSystem(b)
	return cadc
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableIsSystem(b *bool) *CIAttributeDefinitionCreate {
	if b != nil {
		cadc.SetIsSystem(*b)
	}
	return cadc
}

// SetIsActive sets the "is_active" field.
func (cadc *CIAttributeDefinitionCreate) SetIsActive(b bool) *CIAttributeDefinitionCreate {
	cadc.mutation.SetIsActive(b)
	return cadc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableIsActive(b *bool) *CIAttributeDefinitionCreate {
	if b != nil {
		cadc.SetIsActive(*b)
	}
	return cadc
}

// SetCiTypeID sets the "ci_type_id" field.
func (cadc *CIAttributeDefinitionCreate) SetCiTypeID(i int) *CIAttributeDefinitionCreate {
	cadc.mutation.SetCiTypeID(i)
	return cadc
}

// SetTenantID sets the "tenant_id" field.
func (cadc *CIAttributeDefinitionCreate) SetTenantID(i int) *CIAttributeDefinitionCreate {
	cadc.mutation.SetTenantID(i)
	return cadc
}

// SetCreatedAt sets the "created_at" field.
func (cadc *CIAttributeDefinitionCreate) SetCreatedAt(t time.Time) *CIAttributeDefinitionCreate {
	cadc.mutation.SetCreatedAt(t)
	return cadc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableCreatedAt(t *time.Time) *CIAttributeDefinitionCreate {
	if t != nil {
		cadc.SetCreatedAt(*t)
	}
	return cadc
}

// SetUpdatedAt sets the "updated_at" field.
func (cadc *CIAttributeDefinitionCreate) SetUpdatedAt(t time.Time) *CIAttributeDefinitionCreate {
	cadc.mutation.SetUpdatedAt(t)
	return cadc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cadc *CIAttributeDefinitionCreate) SetNillableUpdatedAt(t *time.Time) *CIAttributeDefinitionCreate {
	if t != nil {
		cadc.SetUpdatedAt(*t)
	}
	return cadc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cadc *CIAttributeDefinitionCreate) SetTenant(t *Tenant) *CIAttributeDefinitionCreate {
	return cadc.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (cadc *CIAttributeDefinitionCreate) SetCiType(c *CIType) *CIAttributeDefinitionCreate {
	return cadc.SetCiTypeID(c.ID)
}

// Mutation returns the CIAttributeDefinitionMutation object of the builder.
func (cadc *CIAttributeDefinitionCreate) Mutation() *CIAttributeDefinitionMutation {
	return cadc.mutation
}

// Save creates the CIAttributeDefinition in the database.
func (cadc *CIAttributeDefinitionCreate) Save(ctx context.Context) (*CIAttributeDefinition, error) {
	cadc.defaults()
	return withHooks(ctx, cadc.sqlSave, cadc.mutation, cadc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cadc *CIAttributeDefinitionCreate) SaveX(ctx context.Context) *CIAttributeDefinition {
	v, err := cadc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cadc *CIAttributeDefinitionCreate) Exec(ctx context.Context) error {
	_, err := cadc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cadc *CIAttributeDefinitionCreate) ExecX(ctx context.Context) {
	if err := cadc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cadc *CIAttributeDefinitionCreate) defaults() {
	if _, ok := cadc.mutation.IsRequired(); !ok {
		v := ciattributedefinition.DefaultIsRequired
		cadc.mutation.SetIsRequired(v)
	}
	if _, ok := cadc.mutation.IsUnique(); !ok {
		v := ciattributedefinition.DefaultIsUnique
		cadc.mutation.SetIsUnique(v)
	}
	if _, ok := cadc.mutation.DisplayOrder(); !ok {
		v := ciattributedefinition.DefaultDisplayOrder
		cadc.mutation.SetDisplayOrder(v)
	}
	if _, ok := cadc.mutation.IsSearchable(); !ok {
		v := ciattributedefinition.DefaultIsSearchable
		cadc.mutation.SetIsSearchable(v)
	}
	if _, ok := cadc.mutation.IsSystem(); !ok {
		v := ciattributedefinition.DefaultIsSystem
		cadc.mutation.SetIsSystem(v)
	}
	if _, ok := cadc.mutation.IsActive(); !ok {
		v := ciattributedefinition.DefaultIsActive
		cadc.mutation.SetIsActive(v)
	}
	if _, ok := cadc.mutation.CreatedAt(); !ok {
		v := ciattributedefinition.DefaultCreatedAt()
		cadc.mutation.SetCreatedAt(v)
	}
	if _, ok := cadc.mutation.UpdatedAt(); !ok {
		v := ciattributedefinition.DefaultUpdatedAt()
		cadc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cadc *CIAttributeDefinitionCreate) check() error {
	if _, ok := cadc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CIAttributeDefinition.name"`)}
	}
	if v, ok := cadc.mutation.Name(); ok {
		if err := ciattributedefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.name": %w`, err)}
		}
	}
	if _, ok := cadc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "CIAttributeDefinition.display_name"`)}
	}
	if v, ok := cadc.mutation.DisplayName(); ok {
		if err := ciattributedefinition.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.display_name": %w`, err)}
		}
	}
	if _, ok := cadc.mutation.DataType(); !ok {
		return &ValidationError{Name: "data_type", err: errors.New(`ent: missing required field "CIAttributeDefinition.data_type"`)}
	}
	if v, ok := cadc.mutation.DataType(); ok {
		if err := ciattributedefinition.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.data_type": %w`, err)}
		}
	}
	if _, ok := cadc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "CIAttributeDefinition.is_required"`)}
	}
	if _, ok := cadc.mutation.IsUnique(); !ok {
		return &ValidationError{Name: "is_unique", err: errors.New(`ent: missing required field "CIAttributeDefinition.is_unique"`)}
	}
	if _, ok := cadc.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "CIAttributeDefinition.display_order"`)}
	}
	if _, ok := cadc.mutation.IsSearchable(); !ok {
		return &ValidationError{Name: "is_searchable", err: errors.New(`ent: missing required field "CIAttributeDefinition.is_searchable"`)}
	}
	if _, ok := cadc.mutation.IsSystem(); !ok {
		return &ValidationError{Name: "is_system", err: errors.New(`ent: missing required field "CIAttributeDefinition.is_system"`)}
	}
	if _, ok := cadc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "CIAttributeDefinition.is_active"`)}
	}
	if _, ok := cadc.mutation.CiTypeID(); !ok {
		return &ValidationError{Name: "ci_type_id", err: errors.New(`ent: missing required field "CIAttributeDefinition.ci_type_id"`)}
	}
	if _, ok := cadc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CIAttributeDefinition.tenant_id"`)}
	}
	if _, ok := cadc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CIAttributeDefinition.created_at"`)}
	}
	if _, ok := cadc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CIAttributeDefinition.updated_at"`)}
	}
	if len(cadc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CIAttributeDefinition.tenant"`)}
	}
	if len(cadc.mutation.CiTypeIDs()) == 0 {
		return &ValidationError{Name: "ci_type", err: errors.New(`ent: missing required edge "CIAttributeDefinition.ci_type"`)}
	}
	return nil
}

func (cadc *CIAttributeDefinitionCreate) sqlSave(ctx context.Context) (*CIAttributeDefinition, error) {
	if err := cadc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cadc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cadc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cadc.mutation.id = &_node.ID
	cadc.mutation.done = true
	return _node, nil
}

func (cadc *CIAttributeDefinitionCreate) createSpec() (*CIAttributeDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &CIAttributeDefinition{config: cadc.config}
		_spec = sqlgraph.NewCreateSpec(ciattributedefinition.Table, sqlgraph.NewFieldSpec(ciattributedefinition.FieldID, field.TypeInt))
	)
	if value, ok := cadc.mutation.Name(); ok {
		_spec.SetField(ciattributedefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cadc.mutation.DisplayName(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cadc.mutation.Description(); ok {
		_spec.SetField(ciattributedefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cadc.mutation.DataType(); ok {
		_spec.SetField(ciattributedefinition.FieldDataType, field.TypeString, value)
		_node.DataType = value
	}
	if value, ok := cadc.mutation.IsRequired(); ok {
		_spec.SetField(ciattributedefinition.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := cadc.mutation.IsUnique(); ok {
		_spec.SetField(ciattributedefinition.FieldIsUnique, field.TypeBool, value)
		_node.IsUnique = value
	}
	if value, ok := cadc.mutation.DefaultValue(); ok {
		_spec.SetField(ciattributedefinition.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = value
	}
	if value, ok := cadc.mutation.ValidationRules(); ok {
		_spec.SetField(ciattributedefinition.FieldValidationRules, field.TypeJSON, value)
		_node.ValidationRules = value
	}
	if value, ok := cadc.mutation.EnumValues(); ok {
		_spec.SetField(ciattributedefinition.FieldEnumValues, field.TypeJSON, value)
		_node.EnumValues = value
	}
	if value, ok := cadc.mutation.ReferenceType(); ok {
		_spec.SetField(ciattributedefinition.FieldReferenceType, field.TypeString, value)
		_node.ReferenceType = value
	}
	if value, ok := cadc.mutation.DisplayOrder(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if value, ok := cadc.mutation.IsSearchable(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSearchable, field.TypeBool, value)
		_node.IsSearchable = value
	}
	if value, ok := cadc.mutation.IsSystem(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSystem, field.TypeBool, value)
		_node.IsSystem = value
	}
	if value, ok := cadc.mutation.IsActive(); ok {
		_spec.SetField(ciattributedefinition.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := cadc.mutation.CreatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cadc.mutation.UpdatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cadc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.TenantTable,
			Columns: []string{ciattributedefinition.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cadc.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.CiTypeTable,
			Columns: []string{ciattributedefinition.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CiTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CIAttributeDefinitionCreateBulk is the builder for creating many CIAttributeDefinition entities in bulk.
type CIAttributeDefinitionCreateBulk struct {
	config
	err      error
	builders []*CIAttributeDefinitionCreate
}

// Save creates the CIAttributeDefinition entities in the database.
func (cadcb *CIAttributeDefinitionCreateBulk) Save(ctx context.Context) ([]*CIAttributeDefinition, error) {
	if cadcb.err != nil {
		return nil, cadcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cadcb.builders))
	nodes := make([]*CIAttributeDefinition, len(cadcb.builders))
	mutators := make([]Mutator, len(cadcb.builders))
	for i := range cadcb.builders {
		func(i int, root context.Context) {
			builder := cadcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CIAttributeDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cadcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cadcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cadcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cadcb *CIAttributeDefinitionCreateBulk) SaveX(ctx context.Context) []*CIAttributeDefinition {
	v, err := cadcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cadcb *CIAttributeDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := cadcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cadcb *CIAttributeDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := cadcb.Exec(ctx); err != nil {
		panic(err)
	}
}
