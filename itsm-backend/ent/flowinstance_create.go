// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FlowInstanceCreate is the builder for creating a FlowInstance entity.
type FlowInstanceCreate struct {
	config
	mutation *FlowInstanceMutation
	hooks    []Hook
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (fic *FlowInstanceCreate) SetFlowDefinitionID(s string) *FlowInstanceCreate {
	fic.mutation.SetFlowDefinitionID(s)
	return fic
}

// SetFlowName sets the "flow_name" field.
func (fic *FlowInstanceCreate) SetFlowName(s string) *FlowInstanceCreate {
	fic.mutation.SetFlowName(s)
	return fic
}

// SetFlowVersion sets the "flow_version" field.
func (fic *FlowInstanceCreate) SetFlowVersion(s string) *FlowInstanceCreate {
	fic.mutation.SetFlowVersion(s)
	return fic
}

// SetNillableFlowVersion sets the "flow_version" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableFlowVersion(s *string) *FlowInstanceCreate {
	if s != nil {
		fic.SetFlowVersion(*s)
	}
	return fic
}

// SetStatus sets the "status" field.
func (fic *FlowInstanceCreate) SetStatus(f flowinstance.Status) *FlowInstanceCreate {
	fic.mutation.SetStatus(f)
	return fic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableStatus(f *flowinstance.Status) *FlowInstanceCreate {
	if f != nil {
		fic.SetStatus(*f)
	}
	return fic
}

// SetCurrentStep sets the "current_step" field.
func (fic *FlowInstanceCreate) SetCurrentStep(i int) *FlowInstanceCreate {
	fic.mutation.SetCurrentStep(i)
	return fic
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableCurrentStep(i *int) *FlowInstanceCreate {
	if i != nil {
		fic.SetCurrentStep(*i)
	}
	return fic
}

// SetTotalSteps sets the "total_steps" field.
func (fic *FlowInstanceCreate) SetTotalSteps(i int) *FlowInstanceCreate {
	fic.mutation.SetTotalSteps(i)
	return fic
}

// SetStepConfig sets the "step_config" field.
func (fic *FlowInstanceCreate) SetStepConfig(m map[string]interface{}) *FlowInstanceCreate {
	fic.mutation.SetStepConfig(m)
	return fic
}

// SetVariables sets the "variables" field.
func (fic *FlowInstanceCreate) SetVariables(m map[string]interface{}) *FlowInstanceCreate {
	fic.mutation.SetVariables(m)
	return fic
}

// SetExecutionHistory sets the "execution_history" field.
func (fic *FlowInstanceCreate) SetExecutionHistory(m []map[string]interface{}) *FlowInstanceCreate {
	fic.mutation.SetExecutionHistory(m)
	return fic
}

// SetTicketID sets the "ticket_id" field.
func (fic *FlowInstanceCreate) SetTicketID(i int) *FlowInstanceCreate {
	fic.mutation.SetTicketID(i)
	return fic
}

// SetStartedAt sets the "started_at" field.
func (fic *FlowInstanceCreate) SetStartedAt(t time.Time) *FlowInstanceCreate {
	fic.mutation.SetStartedAt(t)
	return fic
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableStartedAt(t *time.Time) *FlowInstanceCreate {
	if t != nil {
		fic.SetStartedAt(*t)
	}
	return fic
}

// SetCompletedAt sets the "completed_at" field.
func (fic *FlowInstanceCreate) SetCompletedAt(t time.Time) *FlowInstanceCreate {
	fic.mutation.SetCompletedAt(t)
	return fic
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableCompletedAt(t *time.Time) *FlowInstanceCreate {
	if t != nil {
		fic.SetCompletedAt(*t)
	}
	return fic
}

// SetUpdatedAt sets the "updated_at" field.
func (fic *FlowInstanceCreate) SetUpdatedAt(t time.Time) *FlowInstanceCreate {
	fic.mutation.SetUpdatedAt(t)
	return fic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableUpdatedAt(t *time.Time) *FlowInstanceCreate {
	if t != nil {
		fic.SetUpdatedAt(*t)
	}
	return fic
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (fic *FlowInstanceCreate) SetTicket(t *Ticket) *FlowInstanceCreate {
	return fic.SetTicketID(t.ID)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fic *FlowInstanceCreate) Mutation() *FlowInstanceMutation {
	return fic.mutation
}

// Save creates the FlowInstance in the database.
func (fic *FlowInstanceCreate) Save(ctx context.Context) (*FlowInstance, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FlowInstanceCreate) SaveX(ctx context.Context) *FlowInstance {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FlowInstanceCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FlowInstanceCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FlowInstanceCreate) defaults() {
	if _, ok := fic.mutation.FlowVersion(); !ok {
		v := flowinstance.DefaultFlowVersion
		fic.mutation.SetFlowVersion(v)
	}
	if _, ok := fic.mutation.Status(); !ok {
		v := flowinstance.DefaultStatus
		fic.mutation.SetStatus(v)
	}
	if _, ok := fic.mutation.CurrentStep(); !ok {
		v := flowinstance.DefaultCurrentStep
		fic.mutation.SetCurrentStep(v)
	}
	if _, ok := fic.mutation.StartedAt(); !ok {
		v := flowinstance.DefaultStartedAt()
		fic.mutation.SetStartedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := flowinstance.DefaultUpdatedAt()
		fic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FlowInstanceCreate) check() error {
	if _, ok := fic.mutation.FlowDefinitionID(); !ok {
		return &ValidationError{Name: "flow_definition_id", err: errors.New(`ent: missing required field "FlowInstance.flow_definition_id"`)}
	}
	if v, ok := fic.mutation.FlowDefinitionID(); ok {
		if err := flowinstance.FlowDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_definition_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_definition_id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FlowName(); !ok {
		return &ValidationError{Name: "flow_name", err: errors.New(`ent: missing required field "FlowInstance.flow_name"`)}
	}
	if v, ok := fic.mutation.FlowName(); ok {
		if err := flowinstance.FlowNameValidator(v); err != nil {
			return &ValidationError{Name: "flow_name", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_name": %w`, err)}
		}
	}
	if v, ok := fic.mutation.FlowVersion(); ok {
		if err := flowinstance.FlowVersionValidator(v); err != nil {
			return &ValidationError{Name: "flow_version", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_version": %w`, err)}
		}
	}
	if _, ok := fic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FlowInstance.status"`)}
	}
	if v, ok := fic.mutation.Status(); ok {
		if err := flowinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.status": %w`, err)}
		}
	}
	if _, ok := fic.mutation.CurrentStep(); !ok {
		return &ValidationError{Name: "current_step", err: errors.New(`ent: missing required field "FlowInstance.current_step"`)}
	}
	if v, ok := fic.mutation.CurrentStep(); ok {
		if err := flowinstance.CurrentStepValidator(v); err != nil {
			return &ValidationError{Name: "current_step", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.current_step": %w`, err)}
		}
	}
	if _, ok := fic.mutation.TotalSteps(); !ok {
		return &ValidationError{Name: "total_steps", err: errors.New(`ent: missing required field "FlowInstance.total_steps"`)}
	}
	if v, ok := fic.mutation.TotalSteps(); ok {
		if err := flowinstance.TotalStepsValidator(v); err != nil {
			return &ValidationError{Name: "total_steps", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.total_steps": %w`, err)}
		}
	}
	if _, ok := fic.mutation.TicketID(); !ok {
		return &ValidationError{Name: "ticket_id", err: errors.New(`ent: missing required field "FlowInstance.ticket_id"`)}
	}
	if v, ok := fic.mutation.TicketID(); ok {
		if err := flowinstance.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ticket_id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "FlowInstance.started_at"`)}
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlowInstance.updated_at"`)}
	}
	if len(fic.mutation.TicketIDs()) == 0 {
		return &ValidationError{Name: "ticket", err: errors.New(`ent: missing required edge "FlowInstance.ticket"`)}
	}
	return nil
}

func (fic *FlowInstanceCreate) sqlSave(ctx context.Context) (*FlowInstance, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FlowInstanceCreate) createSpec() (*FlowInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowInstance{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(flowinstance.Table, sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt))
	)
	if value, ok := fic.mutation.FlowDefinitionID(); ok {
		_spec.SetField(flowinstance.FieldFlowDefinitionID, field.TypeString, value)
		_node.FlowDefinitionID = value
	}
	if value, ok := fic.mutation.FlowName(); ok {
		_spec.SetField(flowinstance.FieldFlowName, field.TypeString, value)
		_node.FlowName = value
	}
	if value, ok := fic.mutation.FlowVersion(); ok {
		_spec.SetField(flowinstance.FieldFlowVersion, field.TypeString, value)
		_node.FlowVersion = value
	}
	if value, ok := fic.mutation.Status(); ok {
		_spec.SetField(flowinstance.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := fic.mutation.CurrentStep(); ok {
		_spec.SetField(flowinstance.FieldCurrentStep, field.TypeInt, value)
		_node.CurrentStep = value
	}
	if value, ok := fic.mutation.TotalSteps(); ok {
		_spec.SetField(flowinstance.FieldTotalSteps, field.TypeInt, value)
		_node.TotalSteps = value
	}
	if value, ok := fic.mutation.StepConfig(); ok {
		_spec.SetField(flowinstance.FieldStepConfig, field.TypeJSON, value)
		_node.StepConfig = value
	}
	if value, ok := fic.mutation.Variables(); ok {
		_spec.SetField(flowinstance.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := fic.mutation.ExecutionHistory(); ok {
		_spec.SetField(flowinstance.FieldExecutionHistory, field.TypeJSON, value)
		_node.ExecutionHistory = value
	}
	if value, ok := fic.mutation.StartedAt(); ok {
		_spec.SetField(flowinstance.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := fic.mutation.CompletedAt(); ok {
		_spec.SetField(flowinstance.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.SetField(flowinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fic.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flowinstance.TicketTable,
			Columns: []string{flowinstance.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TicketID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlowInstanceCreateBulk is the builder for creating many FlowInstance entities in bulk.
type FlowInstanceCreateBulk struct {
	config
	err      error
	builders []*FlowInstanceCreate
}

// Save creates the FlowInstance entities in the database.
func (ficb *FlowInstanceCreateBulk) Save(ctx context.Context) ([]*FlowInstance, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FlowInstance, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FlowInstanceCreateBulk) SaveX(ctx context.Context) []*FlowInstance {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FlowInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FlowInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
