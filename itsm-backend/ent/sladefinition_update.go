// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/sladefinition"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLADefinitionUpdate is the builder for updating SLADefinition entities.
type SLADefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *SLADefinitionMutation
}

// Where appends a list predicates to the SLADefinitionUpdate builder.
func (sdu *SLADefinitionUpdate) Where(ps ...predicate.SLADefinition) *SLADefinitionUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetUpdateTime sets the "update_time" field.
func (sdu *SLADefinitionUpdate) SetUpdateTime(t time.Time) *SLADefinitionUpdate {
	sdu.mutation.SetUpdateTime(t)
	return sdu
}

// SetName sets the "name" field.
func (sdu *SLADefinitionUpdate) SetName(s string) *SLADefinitionUpdate {
	sdu.mutation.SetName(s)
	return sdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableName(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetName(*s)
	}
	return sdu
}

// SetDescription sets the "description" field.
func (sdu *SLADefinitionUpdate) SetDescription(s string) *SLADefinitionUpdate {
	sdu.mutation.SetDescription(s)
	return sdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableDescription(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetDescription(*s)
	}
	return sdu
}

// ClearDescription clears the value of the "description" field.
func (sdu *SLADefinitionUpdate) ClearDescription() *SLADefinitionUpdate {
	sdu.mutation.ClearDescription()
	return sdu
}

// SetServiceType sets the "service_type" field.
func (sdu *SLADefinitionUpdate) SetServiceType(s string) *SLADefinitionUpdate {
	sdu.mutation.SetServiceType(s)
	return sdu
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableServiceType(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetServiceType(*s)
	}
	return sdu
}

// SetPriority sets the "priority" field.
func (sdu *SLADefinitionUpdate) SetPriority(s string) *SLADefinitionUpdate {
	sdu.mutation.SetPriority(s)
	return sdu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillablePriority(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetPriority(*s)
	}
	return sdu
}

// SetImpact sets the "impact" field.
func (sdu *SLADefinitionUpdate) SetImpact(s string) *SLADefinitionUpdate {
	sdu.mutation.SetImpact(s)
	return sdu
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableImpact(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetImpact(*s)
	}
	return sdu
}

// SetResponseTime sets the "response_time" field.
func (sdu *SLADefinitionUpdate) SetResponseTime(i int) *SLADefinitionUpdate {
	sdu.mutation.ResetResponseTime()
	sdu.mutation.SetResponseTime(i)
	return sdu
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableResponseTime(i *int) *SLADefinitionUpdate {
	if i != nil {
		sdu.SetResponseTime(*i)
	}
	return sdu
}

// AddResponseTime adds i to the "response_time" field.
func (sdu *SLADefinitionUpdate) AddResponseTime(i int) *SLADefinitionUpdate {
	sdu.mutation.AddResponseTime(i)
	return sdu
}

// SetResolutionTime sets the "resolution_time" field.
func (sdu *SLADefinitionUpdate) SetResolutionTime(i int) *SLADefinitionUpdate {
	sdu.mutation.ResetResolutionTime()
	sdu.mutation.SetResolutionTime(i)
	return sdu
}

// SetNillableResolutionTime sets the "resolution_time" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableResolutionTime(i *int) *SLADefinitionUpdate {
	if i != nil {
		sdu.SetResolutionTime(*i)
	}
	return sdu
}

// AddResolutionTime adds i to the "resolution_time" field.
func (sdu *SLADefinitionUpdate) AddResolutionTime(i int) *SLADefinitionUpdate {
	sdu.mutation.AddResolutionTime(i)
	return sdu
}

// SetBusinessHours sets the "business_hours" field.
func (sdu *SLADefinitionUpdate) SetBusinessHours(s string) *SLADefinitionUpdate {
	sdu.mutation.SetBusinessHours(s)
	return sdu
}

// SetNillableBusinessHours sets the "business_hours" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableBusinessHours(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetBusinessHours(*s)
	}
	return sdu
}

// SetHolidays sets the "holidays" field.
func (sdu *SLADefinitionUpdate) SetHolidays(s string) *SLADefinitionUpdate {
	sdu.mutation.SetHolidays(s)
	return sdu
}

// SetNillableHolidays sets the "holidays" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableHolidays(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetHolidays(*s)
	}
	return sdu
}

// SetIsActive sets the "is_active" field.
func (sdu *SLADefinitionUpdate) SetIsActive(b bool) *SLADefinitionUpdate {
	sdu.mutation.SetIsActive(b)
	return sdu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableIsActive(b *bool) *SLADefinitionUpdate {
	if b != nil {
		sdu.SetIsActive(*b)
	}
	return sdu
}

// SetTenantID sets the "tenant_id" field.
func (sdu *SLADefinitionUpdate) SetTenantID(i int) *SLADefinitionUpdate {
	sdu.mutation.ResetTenantID()
	sdu.mutation.SetTenantID(i)
	return sdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableTenantID(i *int) *SLADefinitionUpdate {
	if i != nil {
		sdu.SetTenantID(*i)
	}
	return sdu
}

// AddTenantID adds i to the "tenant_id" field.
func (sdu *SLADefinitionUpdate) AddTenantID(i int) *SLADefinitionUpdate {
	sdu.mutation.AddTenantID(i)
	return sdu
}

// SetCreatedBy sets the "created_by" field.
func (sdu *SLADefinitionUpdate) SetCreatedBy(s string) *SLADefinitionUpdate {
	sdu.mutation.SetCreatedBy(s)
	return sdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableCreatedBy(s *string) *SLADefinitionUpdate {
	if s != nil {
		sdu.SetCreatedBy(*s)
	}
	return sdu
}

// SetCreatedAt sets the "created_at" field.
func (sdu *SLADefinitionUpdate) SetCreatedAt(t time.Time) *SLADefinitionUpdate {
	sdu.mutation.SetCreatedAt(t)
	return sdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableCreatedAt(t *time.Time) *SLADefinitionUpdate {
	if t != nil {
		sdu.SetCreatedAt(*t)
	}
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SLADefinitionUpdate) SetUpdatedAt(t time.Time) *SLADefinitionUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sdu *SLADefinitionUpdate) SetNillableUpdatedAt(t *time.Time) *SLADefinitionUpdate {
	if t != nil {
		sdu.SetUpdatedAt(*t)
	}
	return sdu
}

// Mutation returns the SLADefinitionMutation object of the builder.
func (sdu *SLADefinitionUpdate) Mutation() *SLADefinitionMutation {
	return sdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SLADefinitionUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SLADefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SLADefinitionUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SLADefinitionUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SLADefinitionUpdate) defaults() {
	if _, ok := sdu.mutation.UpdateTime(); !ok {
		v := sladefinition.UpdateDefaultUpdateTime()
		sdu.mutation.SetUpdateTime(v)
	}
}

func (sdu *SLADefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sladefinition.Table, sladefinition.Columns, sqlgraph.NewFieldSpec(sladefinition.FieldID, field.TypeInt))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.UpdateTime(); ok {
		_spec.SetField(sladefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.Name(); ok {
		_spec.SetField(sladefinition.FieldName, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Description(); ok {
		_spec.SetField(sladefinition.FieldDescription, field.TypeString, value)
	}
	if sdu.mutation.DescriptionCleared() {
		_spec.ClearField(sladefinition.FieldDescription, field.TypeString)
	}
	if value, ok := sdu.mutation.ServiceType(); ok {
		_spec.SetField(sladefinition.FieldServiceType, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Priority(); ok {
		_spec.SetField(sladefinition.FieldPriority, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Impact(); ok {
		_spec.SetField(sladefinition.FieldImpact, field.TypeString, value)
	}
	if value, ok := sdu.mutation.ResponseTime(); ok {
		_spec.SetField(sladefinition.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedResponseTime(); ok {
		_spec.AddField(sladefinition.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.ResolutionTime(); ok {
		_spec.SetField(sladefinition.FieldResolutionTime, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedResolutionTime(); ok {
		_spec.AddField(sladefinition.FieldResolutionTime, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.BusinessHours(); ok {
		_spec.SetField(sladefinition.FieldBusinessHours, field.TypeString, value)
	}
	if value, ok := sdu.mutation.Holidays(); ok {
		_spec.SetField(sladefinition.FieldHolidays, field.TypeString, value)
	}
	if value, ok := sdu.mutation.IsActive(); ok {
		_spec.SetField(sladefinition.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sdu.mutation.TenantID(); ok {
		_spec.SetField(sladefinition.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedTenantID(); ok {
		_spec.AddField(sladefinition.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.CreatedBy(); ok {
		_spec.SetField(sladefinition.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := sdu.mutation.CreatedAt(); ok {
		_spec.SetField(sladefinition.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(sladefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sladefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SLADefinitionUpdateOne is the builder for updating a single SLADefinition entity.
type SLADefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SLADefinitionMutation
}

// SetUpdateTime sets the "update_time" field.
func (sduo *SLADefinitionUpdateOne) SetUpdateTime(t time.Time) *SLADefinitionUpdateOne {
	sduo.mutation.SetUpdateTime(t)
	return sduo
}

// SetName sets the "name" field.
func (sduo *SLADefinitionUpdateOne) SetName(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetName(s)
	return sduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableName(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetName(*s)
	}
	return sduo
}

// SetDescription sets the "description" field.
func (sduo *SLADefinitionUpdateOne) SetDescription(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetDescription(s)
	return sduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableDescription(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetDescription(*s)
	}
	return sduo
}

// ClearDescription clears the value of the "description" field.
func (sduo *SLADefinitionUpdateOne) ClearDescription() *SLADefinitionUpdateOne {
	sduo.mutation.ClearDescription()
	return sduo
}

// SetServiceType sets the "service_type" field.
func (sduo *SLADefinitionUpdateOne) SetServiceType(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetServiceType(s)
	return sduo
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableServiceType(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetServiceType(*s)
	}
	return sduo
}

// SetPriority sets the "priority" field.
func (sduo *SLADefinitionUpdateOne) SetPriority(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetPriority(s)
	return sduo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillablePriority(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetPriority(*s)
	}
	return sduo
}

// SetImpact sets the "impact" field.
func (sduo *SLADefinitionUpdateOne) SetImpact(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetImpact(s)
	return sduo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableImpact(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetImpact(*s)
	}
	return sduo
}

// SetResponseTime sets the "response_time" field.
func (sduo *SLADefinitionUpdateOne) SetResponseTime(i int) *SLADefinitionUpdateOne {
	sduo.mutation.ResetResponseTime()
	sduo.mutation.SetResponseTime(i)
	return sduo
}

// SetNillableResponseTime sets the "response_time" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableResponseTime(i *int) *SLADefinitionUpdateOne {
	if i != nil {
		sduo.SetResponseTime(*i)
	}
	return sduo
}

// AddResponseTime adds i to the "response_time" field.
func (sduo *SLADefinitionUpdateOne) AddResponseTime(i int) *SLADefinitionUpdateOne {
	sduo.mutation.AddResponseTime(i)
	return sduo
}

// SetResolutionTime sets the "resolution_time" field.
func (sduo *SLADefinitionUpdateOne) SetResolutionTime(i int) *SLADefinitionUpdateOne {
	sduo.mutation.ResetResolutionTime()
	sduo.mutation.SetResolutionTime(i)
	return sduo
}

// SetNillableResolutionTime sets the "resolution_time" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableResolutionTime(i *int) *SLADefinitionUpdateOne {
	if i != nil {
		sduo.SetResolutionTime(*i)
	}
	return sduo
}

// AddResolutionTime adds i to the "resolution_time" field.
func (sduo *SLADefinitionUpdateOne) AddResolutionTime(i int) *SLADefinitionUpdateOne {
	sduo.mutation.AddResolutionTime(i)
	return sduo
}

// SetBusinessHours sets the "business_hours" field.
func (sduo *SLADefinitionUpdateOne) SetBusinessHours(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetBusinessHours(s)
	return sduo
}

// SetNillableBusinessHours sets the "business_hours" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableBusinessHours(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetBusinessHours(*s)
	}
	return sduo
}

// SetHolidays sets the "holidays" field.
func (sduo *SLADefinitionUpdateOne) SetHolidays(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetHolidays(s)
	return sduo
}

// SetNillableHolidays sets the "holidays" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableHolidays(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetHolidays(*s)
	}
	return sduo
}

// SetIsActive sets the "is_active" field.
func (sduo *SLADefinitionUpdateOne) SetIsActive(b bool) *SLADefinitionUpdateOne {
	sduo.mutation.SetIsActive(b)
	return sduo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableIsActive(b *bool) *SLADefinitionUpdateOne {
	if b != nil {
		sduo.SetIsActive(*b)
	}
	return sduo
}

// SetTenantID sets the "tenant_id" field.
func (sduo *SLADefinitionUpdateOne) SetTenantID(i int) *SLADefinitionUpdateOne {
	sduo.mutation.ResetTenantID()
	sduo.mutation.SetTenantID(i)
	return sduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableTenantID(i *int) *SLADefinitionUpdateOne {
	if i != nil {
		sduo.SetTenantID(*i)
	}
	return sduo
}

// AddTenantID adds i to the "tenant_id" field.
func (sduo *SLADefinitionUpdateOne) AddTenantID(i int) *SLADefinitionUpdateOne {
	sduo.mutation.AddTenantID(i)
	return sduo
}

// SetCreatedBy sets the "created_by" field.
func (sduo *SLADefinitionUpdateOne) SetCreatedBy(s string) *SLADefinitionUpdateOne {
	sduo.mutation.SetCreatedBy(s)
	return sduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableCreatedBy(s *string) *SLADefinitionUpdateOne {
	if s != nil {
		sduo.SetCreatedBy(*s)
	}
	return sduo
}

// SetCreatedAt sets the "created_at" field.
func (sduo *SLADefinitionUpdateOne) SetCreatedAt(t time.Time) *SLADefinitionUpdateOne {
	sduo.mutation.SetCreatedAt(t)
	return sduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableCreatedAt(t *time.Time) *SLADefinitionUpdateOne {
	if t != nil {
		sduo.SetCreatedAt(*t)
	}
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SLADefinitionUpdateOne) SetUpdatedAt(t time.Time) *SLADefinitionUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sduo *SLADefinitionUpdateOne) SetNillableUpdatedAt(t *time.Time) *SLADefinitionUpdateOne {
	if t != nil {
		sduo.SetUpdatedAt(*t)
	}
	return sduo
}

// Mutation returns the SLADefinitionMutation object of the builder.
func (sduo *SLADefinitionUpdateOne) Mutation() *SLADefinitionMutation {
	return sduo.mutation
}

// Where appends a list predicates to the SLADefinitionUpdate builder.
func (sduo *SLADefinitionUpdateOne) Where(ps ...predicate.SLADefinition) *SLADefinitionUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SLADefinitionUpdateOne) Select(field string, fields ...string) *SLADefinitionUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SLADefinition entity.
func (sduo *SLADefinitionUpdateOne) Save(ctx context.Context) (*SLADefinition, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SLADefinitionUpdateOne) SaveX(ctx context.Context) *SLADefinition {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SLADefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SLADefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SLADefinitionUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdateTime(); !ok {
		v := sladefinition.UpdateDefaultUpdateTime()
		sduo.mutation.SetUpdateTime(v)
	}
}

func (sduo *SLADefinitionUpdateOne) sqlSave(ctx context.Context) (_node *SLADefinition, err error) {
	_spec := sqlgraph.NewUpdateSpec(sladefinition.Table, sladefinition.Columns, sqlgraph.NewFieldSpec(sladefinition.FieldID, field.TypeInt))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SLADefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sladefinition.FieldID)
		for _, f := range fields {
			if !sladefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sladefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.UpdateTime(); ok {
		_spec.SetField(sladefinition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.Name(); ok {
		_spec.SetField(sladefinition.FieldName, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Description(); ok {
		_spec.SetField(sladefinition.FieldDescription, field.TypeString, value)
	}
	if sduo.mutation.DescriptionCleared() {
		_spec.ClearField(sladefinition.FieldDescription, field.TypeString)
	}
	if value, ok := sduo.mutation.ServiceType(); ok {
		_spec.SetField(sladefinition.FieldServiceType, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Priority(); ok {
		_spec.SetField(sladefinition.FieldPriority, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Impact(); ok {
		_spec.SetField(sladefinition.FieldImpact, field.TypeString, value)
	}
	if value, ok := sduo.mutation.ResponseTime(); ok {
		_spec.SetField(sladefinition.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedResponseTime(); ok {
		_spec.AddField(sladefinition.FieldResponseTime, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.ResolutionTime(); ok {
		_spec.SetField(sladefinition.FieldResolutionTime, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedResolutionTime(); ok {
		_spec.AddField(sladefinition.FieldResolutionTime, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.BusinessHours(); ok {
		_spec.SetField(sladefinition.FieldBusinessHours, field.TypeString, value)
	}
	if value, ok := sduo.mutation.Holidays(); ok {
		_spec.SetField(sladefinition.FieldHolidays, field.TypeString, value)
	}
	if value, ok := sduo.mutation.IsActive(); ok {
		_spec.SetField(sladefinition.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sduo.mutation.TenantID(); ok {
		_spec.SetField(sladefinition.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedTenantID(); ok {
		_spec.AddField(sladefinition.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.CreatedBy(); ok {
		_spec.SetField(sladefinition.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := sduo.mutation.CreatedAt(); ok {
		_spec.SetField(sladefinition.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sladefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &SLADefinition{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sladefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
