// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/sladefinition"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SLADefinition is the model entity for the SLADefinition schema.
type SLADefinition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SLA名称
	Name string `json:"name,omitempty"`
	// SLA描述
	Description string `json:"description,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SLADefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sladefinition.FieldID, sladefinition.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case sladefinition.FieldName, sladefinition.FieldDescription:
			values[i] = new(sql.NullString)
		case sladefinition.FieldCreatedAt, sladefinition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SLADefinition fields.
func (sd *SLADefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sladefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case sladefinition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = value.String
			}
		case sladefinition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sd.Description = value.String
			}
		case sladefinition.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sd.TenantID = int(value.Int64)
			}
		case sladefinition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sladefinition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SLADefinition.
// This includes values selected through modifiers, order, etc.
func (sd *SLADefinition) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// Update returns a builder for updating this SLADefinition.
// Note that you need to call SLADefinition.Unwrap() before calling this method if this SLADefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SLADefinition) Update() *SLADefinitionUpdateOne {
	return NewSLADefinitionClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SLADefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SLADefinition) Unwrap() *SLADefinition {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SLADefinition is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SLADefinition) String() string {
	var builder strings.Builder
	builder.WriteString("SLADefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("name=")
	builder.WriteString(sd.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sd.Description)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SLADefinitions is a parsable slice of SLADefinition.
type SLADefinitions []*SLADefinition
