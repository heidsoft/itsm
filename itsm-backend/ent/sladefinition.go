// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/sladefinition"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SLADefinition is the model entity for the SLADefinition schema.
type SLADefinition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// SLA名称
	Name string `json:"name,omitempty"`
	// SLA描述
	Description string `json:"description,omitempty"`
	// 服务类型：incident/service_request/problem/change
	ServiceType string `json:"service_type,omitempty"`
	// 优先级：low/medium/high/critical
	Priority string `json:"priority,omitempty"`
	// 影响范围：low/medium/high
	Impact string `json:"impact,omitempty"`
	// 响应时间（分钟）
	ResponseTime int `json:"response_time,omitempty"`
	// 解决时间（分钟）
	ResolutionTime int `json:"resolution_time,omitempty"`
	// 工作时间配置JSON
	BusinessHours string `json:"business_hours,omitempty"`
	// 节假日配置JSON
	Holidays string `json:"holidays,omitempty"`
	// 是否启用
	IsActive bool `json:"is_active,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建人
	CreatedBy string `json:"created_by,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SLADefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sladefinition.FieldIsActive:
			values[i] = new(sql.NullBool)
		case sladefinition.FieldID, sladefinition.FieldResponseTime, sladefinition.FieldResolutionTime, sladefinition.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case sladefinition.FieldName, sladefinition.FieldDescription, sladefinition.FieldServiceType, sladefinition.FieldPriority, sladefinition.FieldImpact, sladefinition.FieldBusinessHours, sladefinition.FieldHolidays, sladefinition.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case sladefinition.FieldCreateTime, sladefinition.FieldUpdateTime, sladefinition.FieldCreatedAt, sladefinition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SLADefinition fields.
func (sd *SLADefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sladefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sd.ID = int(value.Int64)
		case sladefinition.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sd.CreateTime = value.Time
			}
		case sladefinition.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sd.UpdateTime = value.Time
			}
		case sladefinition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = value.String
			}
		case sladefinition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sd.Description = value.String
			}
		case sladefinition.FieldServiceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_type", values[i])
			} else if value.Valid {
				sd.ServiceType = value.String
			}
		case sladefinition.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				sd.Priority = value.String
			}
		case sladefinition.FieldImpact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impact", values[i])
			} else if value.Valid {
				sd.Impact = value.String
			}
		case sladefinition.FieldResponseTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field response_time", values[i])
			} else if value.Valid {
				sd.ResponseTime = int(value.Int64)
			}
		case sladefinition.FieldResolutionTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resolution_time", values[i])
			} else if value.Valid {
				sd.ResolutionTime = int(value.Int64)
			}
		case sladefinition.FieldBusinessHours:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_hours", values[i])
			} else if value.Valid {
				sd.BusinessHours = value.String
			}
		case sladefinition.FieldHolidays:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field holidays", values[i])
			} else if value.Valid {
				sd.Holidays = value.String
			}
		case sladefinition.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sd.IsActive = value.Bool
			}
		case sladefinition.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sd.TenantID = int(value.Int64)
			}
		case sladefinition.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sd.CreatedBy = value.String
			}
		case sladefinition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sladefinition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SLADefinition.
// This includes values selected through modifiers, order, etc.
func (sd *SLADefinition) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// Update returns a builder for updating this SLADefinition.
// Note that you need to call SLADefinition.Unwrap() before calling this method if this SLADefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SLADefinition) Update() *SLADefinitionUpdateOne {
	return NewSLADefinitionClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SLADefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SLADefinition) Unwrap() *SLADefinition {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SLADefinition is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SLADefinition) String() string {
	var builder strings.Builder
	builder.WriteString("SLADefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sd.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sd.Description)
	builder.WriteString(", ")
	builder.WriteString("service_type=")
	builder.WriteString(sd.ServiceType)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(sd.Priority)
	builder.WriteString(", ")
	builder.WriteString("impact=")
	builder.WriteString(sd.Impact)
	builder.WriteString(", ")
	builder.WriteString("response_time=")
	builder.WriteString(fmt.Sprintf("%v", sd.ResponseTime))
	builder.WriteString(", ")
	builder.WriteString("resolution_time=")
	builder.WriteString(fmt.Sprintf("%v", sd.ResolutionTime))
	builder.WriteString(", ")
	builder.WriteString("business_hours=")
	builder.WriteString(sd.BusinessHours)
	builder.WriteString(", ")
	builder.WriteString("holidays=")
	builder.WriteString(sd.Holidays)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sd.IsActive))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sd.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SLADefinitions is a parsable slice of SLADefinition.
type SLADefinitions []*SLADefinition
