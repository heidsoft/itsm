// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processexecutionhistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessExecutionHistoryUpdate is the builder for updating ProcessExecutionHistory entities.
type ProcessExecutionHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessExecutionHistoryMutation
}

// Where appends a list predicates to the ProcessExecutionHistoryUpdate builder.
func (pehu *ProcessExecutionHistoryUpdate) Where(ps ...predicate.ProcessExecutionHistory) *ProcessExecutionHistoryUpdate {
	pehu.mutation.Where(ps...)
	return pehu
}

// SetHistoryID sets the "history_id" field.
func (pehu *ProcessExecutionHistoryUpdate) SetHistoryID(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetHistoryID(s)
	return pehu
}

// SetNillableHistoryID sets the "history_id" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableHistoryID(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetHistoryID(*s)
	}
	return pehu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pehu *ProcessExecutionHistoryUpdate) SetProcessInstanceID(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetProcessInstanceID(s)
	return pehu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableProcessInstanceID(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetProcessInstanceID(*s)
	}
	return pehu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (pehu *ProcessExecutionHistoryUpdate) SetProcessDefinitionKey(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetProcessDefinitionKey(s)
	return pehu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableProcessDefinitionKey(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetProcessDefinitionKey(*s)
	}
	return pehu
}

// SetActivityID sets the "activity_id" field.
func (pehu *ProcessExecutionHistoryUpdate) SetActivityID(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetActivityID(s)
	return pehu
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableActivityID(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetActivityID(*s)
	}
	return pehu
}

// ClearActivityID clears the value of the "activity_id" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearActivityID() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearActivityID()
	return pehu
}

// SetActivityName sets the "activity_name" field.
func (pehu *ProcessExecutionHistoryUpdate) SetActivityName(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetActivityName(s)
	return pehu
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableActivityName(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetActivityName(*s)
	}
	return pehu
}

// ClearActivityName clears the value of the "activity_name" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearActivityName() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearActivityName()
	return pehu
}

// SetActivityType sets the "activity_type" field.
func (pehu *ProcessExecutionHistoryUpdate) SetActivityType(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetActivityType(s)
	return pehu
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableActivityType(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetActivityType(*s)
	}
	return pehu
}

// SetEventType sets the "event_type" field.
func (pehu *ProcessExecutionHistoryUpdate) SetEventType(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetEventType(s)
	return pehu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableEventType(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetEventType(*s)
	}
	return pehu
}

// SetEventDetail sets the "event_detail" field.
func (pehu *ProcessExecutionHistoryUpdate) SetEventDetail(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetEventDetail(s)
	return pehu
}

// SetNillableEventDetail sets the "event_detail" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableEventDetail(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetEventDetail(*s)
	}
	return pehu
}

// ClearEventDetail clears the value of the "event_detail" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearEventDetail() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearEventDetail()
	return pehu
}

// SetVariables sets the "variables" field.
func (pehu *ProcessExecutionHistoryUpdate) SetVariables(m map[string]interface{}) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetVariables(m)
	return pehu
}

// ClearVariables clears the value of the "variables" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearVariables() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearVariables()
	return pehu
}

// SetUserID sets the "user_id" field.
func (pehu *ProcessExecutionHistoryUpdate) SetUserID(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetUserID(s)
	return pehu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableUserID(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetUserID(*s)
	}
	return pehu
}

// ClearUserID clears the value of the "user_id" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearUserID() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearUserID()
	return pehu
}

// SetUserName sets the "user_name" field.
func (pehu *ProcessExecutionHistoryUpdate) SetUserName(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetUserName(s)
	return pehu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableUserName(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetUserName(*s)
	}
	return pehu
}

// ClearUserName clears the value of the "user_name" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearUserName() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearUserName()
	return pehu
}

// SetTimestamp sets the "timestamp" field.
func (pehu *ProcessExecutionHistoryUpdate) SetTimestamp(t time.Time) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetTimestamp(t)
	return pehu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableTimestamp(t *time.Time) *ProcessExecutionHistoryUpdate {
	if t != nil {
		pehu.SetTimestamp(*t)
	}
	return pehu
}

// SetComment sets the "comment" field.
func (pehu *ProcessExecutionHistoryUpdate) SetComment(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetComment(s)
	return pehu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableComment(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetComment(*s)
	}
	return pehu
}

// ClearComment clears the value of the "comment" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearComment() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearComment()
	return pehu
}

// SetErrorMessage sets the "error_message" field.
func (pehu *ProcessExecutionHistoryUpdate) SetErrorMessage(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetErrorMessage(s)
	return pehu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableErrorMessage(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetErrorMessage(*s)
	}
	return pehu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearErrorMessage() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearErrorMessage()
	return pehu
}

// SetErrorCode sets the "error_code" field.
func (pehu *ProcessExecutionHistoryUpdate) SetErrorCode(s string) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetErrorCode(s)
	return pehu
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableErrorCode(s *string) *ProcessExecutionHistoryUpdate {
	if s != nil {
		pehu.SetErrorCode(*s)
	}
	return pehu
}

// ClearErrorCode clears the value of the "error_code" field.
func (pehu *ProcessExecutionHistoryUpdate) ClearErrorCode() *ProcessExecutionHistoryUpdate {
	pehu.mutation.ClearErrorCode()
	return pehu
}

// SetTenantID sets the "tenant_id" field.
func (pehu *ProcessExecutionHistoryUpdate) SetTenantID(i int) *ProcessExecutionHistoryUpdate {
	pehu.mutation.ResetTenantID()
	pehu.mutation.SetTenantID(i)
	return pehu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableTenantID(i *int) *ProcessExecutionHistoryUpdate {
	if i != nil {
		pehu.SetTenantID(*i)
	}
	return pehu
}

// AddTenantID adds i to the "tenant_id" field.
func (pehu *ProcessExecutionHistoryUpdate) AddTenantID(i int) *ProcessExecutionHistoryUpdate {
	pehu.mutation.AddTenantID(i)
	return pehu
}

// SetCreatedAt sets the "created_at" field.
func (pehu *ProcessExecutionHistoryUpdate) SetCreatedAt(t time.Time) *ProcessExecutionHistoryUpdate {
	pehu.mutation.SetCreatedAt(t)
	return pehu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pehu *ProcessExecutionHistoryUpdate) SetNillableCreatedAt(t *time.Time) *ProcessExecutionHistoryUpdate {
	if t != nil {
		pehu.SetCreatedAt(*t)
	}
	return pehu
}

// Mutation returns the ProcessExecutionHistoryMutation object of the builder.
func (pehu *ProcessExecutionHistoryUpdate) Mutation() *ProcessExecutionHistoryMutation {
	return pehu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pehu *ProcessExecutionHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pehu.sqlSave, pehu.mutation, pehu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pehu *ProcessExecutionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pehu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pehu *ProcessExecutionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := pehu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pehu *ProcessExecutionHistoryUpdate) ExecX(ctx context.Context) {
	if err := pehu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pehu *ProcessExecutionHistoryUpdate) check() error {
	if v, ok := pehu.mutation.HistoryID(); ok {
		if err := processexecutionhistory.HistoryIDValidator(v); err != nil {
			return &ValidationError{Name: "history_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.history_id": %w`, err)}
		}
	}
	if v, ok := pehu.mutation.ProcessInstanceID(); ok {
		if err := processexecutionhistory.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_instance_id": %w`, err)}
		}
	}
	if v, ok := pehu.mutation.ProcessDefinitionKey(); ok {
		if err := processexecutionhistory.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_definition_key": %w`, err)}
		}
	}
	if v, ok := pehu.mutation.ActivityType(); ok {
		if err := processexecutionhistory.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.activity_type": %w`, err)}
		}
	}
	if v, ok := pehu.mutation.EventType(); ok {
		if err := processexecutionhistory.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.event_type": %w`, err)}
		}
	}
	if v, ok := pehu.mutation.TenantID(); ok {
		if err := processexecutionhistory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pehu *ProcessExecutionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pehu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processexecutionhistory.Table, processexecutionhistory.Columns, sqlgraph.NewFieldSpec(processexecutionhistory.FieldID, field.TypeInt))
	if ps := pehu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pehu.mutation.HistoryID(); ok {
		_spec.SetField(processexecutionhistory.FieldHistoryID, field.TypeString, value)
	}
	if value, ok := pehu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := pehu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := pehu.mutation.ActivityID(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityID, field.TypeString, value)
	}
	if pehu.mutation.ActivityIDCleared() {
		_spec.ClearField(processexecutionhistory.FieldActivityID, field.TypeString)
	}
	if value, ok := pehu.mutation.ActivityName(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityName, field.TypeString, value)
	}
	if pehu.mutation.ActivityNameCleared() {
		_spec.ClearField(processexecutionhistory.FieldActivityName, field.TypeString)
	}
	if value, ok := pehu.mutation.ActivityType(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityType, field.TypeString, value)
	}
	if value, ok := pehu.mutation.EventType(); ok {
		_spec.SetField(processexecutionhistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := pehu.mutation.EventDetail(); ok {
		_spec.SetField(processexecutionhistory.FieldEventDetail, field.TypeString, value)
	}
	if pehu.mutation.EventDetailCleared() {
		_spec.ClearField(processexecutionhistory.FieldEventDetail, field.TypeString)
	}
	if value, ok := pehu.mutation.Variables(); ok {
		_spec.SetField(processexecutionhistory.FieldVariables, field.TypeJSON, value)
	}
	if pehu.mutation.VariablesCleared() {
		_spec.ClearField(processexecutionhistory.FieldVariables, field.TypeJSON)
	}
	if value, ok := pehu.mutation.UserID(); ok {
		_spec.SetField(processexecutionhistory.FieldUserID, field.TypeString, value)
	}
	if pehu.mutation.UserIDCleared() {
		_spec.ClearField(processexecutionhistory.FieldUserID, field.TypeString)
	}
	if value, ok := pehu.mutation.UserName(); ok {
		_spec.SetField(processexecutionhistory.FieldUserName, field.TypeString, value)
	}
	if pehu.mutation.UserNameCleared() {
		_spec.ClearField(processexecutionhistory.FieldUserName, field.TypeString)
	}
	if value, ok := pehu.mutation.Timestamp(); ok {
		_spec.SetField(processexecutionhistory.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := pehu.mutation.Comment(); ok {
		_spec.SetField(processexecutionhistory.FieldComment, field.TypeString, value)
	}
	if pehu.mutation.CommentCleared() {
		_spec.ClearField(processexecutionhistory.FieldComment, field.TypeString)
	}
	if value, ok := pehu.mutation.ErrorMessage(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorMessage, field.TypeString, value)
	}
	if pehu.mutation.ErrorMessageCleared() {
		_spec.ClearField(processexecutionhistory.FieldErrorMessage, field.TypeString)
	}
	if value, ok := pehu.mutation.ErrorCode(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorCode, field.TypeString, value)
	}
	if pehu.mutation.ErrorCodeCleared() {
		_spec.ClearField(processexecutionhistory.FieldErrorCode, field.TypeString)
	}
	if value, ok := pehu.mutation.TenantID(); ok {
		_spec.SetField(processexecutionhistory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pehu.mutation.AddedTenantID(); ok {
		_spec.AddField(processexecutionhistory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pehu.mutation.CreatedAt(); ok {
		_spec.SetField(processexecutionhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pehu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processexecutionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pehu.mutation.done = true
	return n, nil
}

// ProcessExecutionHistoryUpdateOne is the builder for updating a single ProcessExecutionHistory entity.
type ProcessExecutionHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessExecutionHistoryMutation
}

// SetHistoryID sets the "history_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetHistoryID(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetHistoryID(s)
	return pehuo
}

// SetNillableHistoryID sets the "history_id" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableHistoryID(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetHistoryID(*s)
	}
	return pehuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetProcessInstanceID(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetProcessInstanceID(s)
	return pehuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableProcessInstanceID(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetProcessInstanceID(*s)
	}
	return pehuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetProcessDefinitionKey(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetProcessDefinitionKey(s)
	return pehuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableProcessDefinitionKey(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetProcessDefinitionKey(*s)
	}
	return pehuo
}

// SetActivityID sets the "activity_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetActivityID(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetActivityID(s)
	return pehuo
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableActivityID(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetActivityID(*s)
	}
	return pehuo
}

// ClearActivityID clears the value of the "activity_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearActivityID() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearActivityID()
	return pehuo
}

// SetActivityName sets the "activity_name" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetActivityName(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetActivityName(s)
	return pehuo
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableActivityName(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetActivityName(*s)
	}
	return pehuo
}

// ClearActivityName clears the value of the "activity_name" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearActivityName() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearActivityName()
	return pehuo
}

// SetActivityType sets the "activity_type" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetActivityType(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetActivityType(s)
	return pehuo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableActivityType(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetActivityType(*s)
	}
	return pehuo
}

// SetEventType sets the "event_type" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetEventType(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetEventType(s)
	return pehuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableEventType(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetEventType(*s)
	}
	return pehuo
}

// SetEventDetail sets the "event_detail" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetEventDetail(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetEventDetail(s)
	return pehuo
}

// SetNillableEventDetail sets the "event_detail" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableEventDetail(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetEventDetail(*s)
	}
	return pehuo
}

// ClearEventDetail clears the value of the "event_detail" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearEventDetail() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearEventDetail()
	return pehuo
}

// SetVariables sets the "variables" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetVariables(m map[string]interface{}) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetVariables(m)
	return pehuo
}

// ClearVariables clears the value of the "variables" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearVariables() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearVariables()
	return pehuo
}

// SetUserID sets the "user_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetUserID(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetUserID(s)
	return pehuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableUserID(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetUserID(*s)
	}
	return pehuo
}

// ClearUserID clears the value of the "user_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearUserID() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearUserID()
	return pehuo
}

// SetUserName sets the "user_name" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetUserName(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetUserName(s)
	return pehuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableUserName(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetUserName(*s)
	}
	return pehuo
}

// ClearUserName clears the value of the "user_name" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearUserName() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearUserName()
	return pehuo
}

// SetTimestamp sets the "timestamp" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetTimestamp(t time.Time) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetTimestamp(t)
	return pehuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableTimestamp(t *time.Time) *ProcessExecutionHistoryUpdateOne {
	if t != nil {
		pehuo.SetTimestamp(*t)
	}
	return pehuo
}

// SetComment sets the "comment" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetComment(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetComment(s)
	return pehuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableComment(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetComment(*s)
	}
	return pehuo
}

// ClearComment clears the value of the "comment" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearComment() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearComment()
	return pehuo
}

// SetErrorMessage sets the "error_message" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetErrorMessage(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetErrorMessage(s)
	return pehuo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableErrorMessage(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetErrorMessage(*s)
	}
	return pehuo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearErrorMessage() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearErrorMessage()
	return pehuo
}

// SetErrorCode sets the "error_code" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetErrorCode(s string) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetErrorCode(s)
	return pehuo
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableErrorCode(s *string) *ProcessExecutionHistoryUpdateOne {
	if s != nil {
		pehuo.SetErrorCode(*s)
	}
	return pehuo
}

// ClearErrorCode clears the value of the "error_code" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) ClearErrorCode() *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ClearErrorCode()
	return pehuo
}

// SetTenantID sets the "tenant_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetTenantID(i int) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.ResetTenantID()
	pehuo.mutation.SetTenantID(i)
	return pehuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableTenantID(i *int) *ProcessExecutionHistoryUpdateOne {
	if i != nil {
		pehuo.SetTenantID(*i)
	}
	return pehuo
}

// AddTenantID adds i to the "tenant_id" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) AddTenantID(i int) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.AddTenantID(i)
	return pehuo
}

// SetCreatedAt sets the "created_at" field.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetCreatedAt(t time.Time) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.SetCreatedAt(t)
	return pehuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pehuo *ProcessExecutionHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessExecutionHistoryUpdateOne {
	if t != nil {
		pehuo.SetCreatedAt(*t)
	}
	return pehuo
}

// Mutation returns the ProcessExecutionHistoryMutation object of the builder.
func (pehuo *ProcessExecutionHistoryUpdateOne) Mutation() *ProcessExecutionHistoryMutation {
	return pehuo.mutation
}

// Where appends a list predicates to the ProcessExecutionHistoryUpdate builder.
func (pehuo *ProcessExecutionHistoryUpdateOne) Where(ps ...predicate.ProcessExecutionHistory) *ProcessExecutionHistoryUpdateOne {
	pehuo.mutation.Where(ps...)
	return pehuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pehuo *ProcessExecutionHistoryUpdateOne) Select(field string, fields ...string) *ProcessExecutionHistoryUpdateOne {
	pehuo.fields = append([]string{field}, fields...)
	return pehuo
}

// Save executes the query and returns the updated ProcessExecutionHistory entity.
func (pehuo *ProcessExecutionHistoryUpdateOne) Save(ctx context.Context) (*ProcessExecutionHistory, error) {
	return withHooks(ctx, pehuo.sqlSave, pehuo.mutation, pehuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pehuo *ProcessExecutionHistoryUpdateOne) SaveX(ctx context.Context) *ProcessExecutionHistory {
	node, err := pehuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pehuo *ProcessExecutionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pehuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pehuo *ProcessExecutionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := pehuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pehuo *ProcessExecutionHistoryUpdateOne) check() error {
	if v, ok := pehuo.mutation.HistoryID(); ok {
		if err := processexecutionhistory.HistoryIDValidator(v); err != nil {
			return &ValidationError{Name: "history_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.history_id": %w`, err)}
		}
	}
	if v, ok := pehuo.mutation.ProcessInstanceID(); ok {
		if err := processexecutionhistory.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_instance_id": %w`, err)}
		}
	}
	if v, ok := pehuo.mutation.ProcessDefinitionKey(); ok {
		if err := processexecutionhistory.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_definition_key": %w`, err)}
		}
	}
	if v, ok := pehuo.mutation.ActivityType(); ok {
		if err := processexecutionhistory.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.activity_type": %w`, err)}
		}
	}
	if v, ok := pehuo.mutation.EventType(); ok {
		if err := processexecutionhistory.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.event_type": %w`, err)}
		}
	}
	if v, ok := pehuo.mutation.TenantID(); ok {
		if err := processexecutionhistory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pehuo *ProcessExecutionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProcessExecutionHistory, err error) {
	if err := pehuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processexecutionhistory.Table, processexecutionhistory.Columns, sqlgraph.NewFieldSpec(processexecutionhistory.FieldID, field.TypeInt))
	id, ok := pehuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessExecutionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pehuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processexecutionhistory.FieldID)
		for _, f := range fields {
			if !processexecutionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processexecutionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pehuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pehuo.mutation.HistoryID(); ok {
		_spec.SetField(processexecutionhistory.FieldHistoryID, field.TypeString, value)
	}
	if value, ok := pehuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := pehuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := pehuo.mutation.ActivityID(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityID, field.TypeString, value)
	}
	if pehuo.mutation.ActivityIDCleared() {
		_spec.ClearField(processexecutionhistory.FieldActivityID, field.TypeString)
	}
	if value, ok := pehuo.mutation.ActivityName(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityName, field.TypeString, value)
	}
	if pehuo.mutation.ActivityNameCleared() {
		_spec.ClearField(processexecutionhistory.FieldActivityName, field.TypeString)
	}
	if value, ok := pehuo.mutation.ActivityType(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityType, field.TypeString, value)
	}
	if value, ok := pehuo.mutation.EventType(); ok {
		_spec.SetField(processexecutionhistory.FieldEventType, field.TypeString, value)
	}
	if value, ok := pehuo.mutation.EventDetail(); ok {
		_spec.SetField(processexecutionhistory.FieldEventDetail, field.TypeString, value)
	}
	if pehuo.mutation.EventDetailCleared() {
		_spec.ClearField(processexecutionhistory.FieldEventDetail, field.TypeString)
	}
	if value, ok := pehuo.mutation.Variables(); ok {
		_spec.SetField(processexecutionhistory.FieldVariables, field.TypeJSON, value)
	}
	if pehuo.mutation.VariablesCleared() {
		_spec.ClearField(processexecutionhistory.FieldVariables, field.TypeJSON)
	}
	if value, ok := pehuo.mutation.UserID(); ok {
		_spec.SetField(processexecutionhistory.FieldUserID, field.TypeString, value)
	}
	if pehuo.mutation.UserIDCleared() {
		_spec.ClearField(processexecutionhistory.FieldUserID, field.TypeString)
	}
	if value, ok := pehuo.mutation.UserName(); ok {
		_spec.SetField(processexecutionhistory.FieldUserName, field.TypeString, value)
	}
	if pehuo.mutation.UserNameCleared() {
		_spec.ClearField(processexecutionhistory.FieldUserName, field.TypeString)
	}
	if value, ok := pehuo.mutation.Timestamp(); ok {
		_spec.SetField(processexecutionhistory.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := pehuo.mutation.Comment(); ok {
		_spec.SetField(processexecutionhistory.FieldComment, field.TypeString, value)
	}
	if pehuo.mutation.CommentCleared() {
		_spec.ClearField(processexecutionhistory.FieldComment, field.TypeString)
	}
	if value, ok := pehuo.mutation.ErrorMessage(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorMessage, field.TypeString, value)
	}
	if pehuo.mutation.ErrorMessageCleared() {
		_spec.ClearField(processexecutionhistory.FieldErrorMessage, field.TypeString)
	}
	if value, ok := pehuo.mutation.ErrorCode(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorCode, field.TypeString, value)
	}
	if pehuo.mutation.ErrorCodeCleared() {
		_spec.ClearField(processexecutionhistory.FieldErrorCode, field.TypeString)
	}
	if value, ok := pehuo.mutation.TenantID(); ok {
		_spec.SetField(processexecutionhistory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pehuo.mutation.AddedTenantID(); ok {
		_spec.AddField(processexecutionhistory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pehuo.mutation.CreatedAt(); ok {
		_spec.SetField(processexecutionhistory.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &ProcessExecutionHistory{config: pehuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pehuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processexecutionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pehuo.mutation.done = true
	return _node, nil
}
