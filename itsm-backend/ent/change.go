// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/change"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Change is the model entity for the Change schema.
type Change struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 变更标题
	Title string `json:"title,omitempty"`
	// 变更描述
	Description string `json:"description,omitempty"`
	// 变更理由
	Justification string `json:"justification,omitempty"`
	// 变更类型
	Type string `json:"type,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 优先级
	Priority string `json:"priority,omitempty"`
	// 影响范围
	ImpactScope string `json:"impact_scope,omitempty"`
	// 风险等级
	RiskLevel string `json:"risk_level,omitempty"`
	// 处理人ID
	AssigneeID int `json:"assignee_id,omitempty"`
	// 创建人ID
	CreatedBy int `json:"created_by,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 计划开始时间
	PlannedStartDate time.Time `json:"planned_start_date,omitempty"`
	// 计划结束时间
	PlannedEndDate time.Time `json:"planned_end_date,omitempty"`
	// 实际开始时间
	ActualStartDate time.Time `json:"actual_start_date,omitempty"`
	// 实际结束时间
	ActualEndDate time.Time `json:"actual_end_date,omitempty"`
	// 实施计划
	ImplementationPlan string `json:"implementation_plan,omitempty"`
	// 回滚计划
	RollbackPlan string `json:"rollback_plan,omitempty"`
	// 受影响的配置项
	AffectedCis []string `json:"affected_cis,omitempty"`
	// 相关工单
	RelatedTickets []string `json:"related_tickets,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Change) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case change.FieldAffectedCis, change.FieldRelatedTickets:
			values[i] = new([]byte)
		case change.FieldID, change.FieldAssigneeID, change.FieldCreatedBy, change.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case change.FieldTitle, change.FieldDescription, change.FieldJustification, change.FieldType, change.FieldStatus, change.FieldPriority, change.FieldImpactScope, change.FieldRiskLevel, change.FieldImplementationPlan, change.FieldRollbackPlan:
			values[i] = new(sql.NullString)
		case change.FieldPlannedStartDate, change.FieldPlannedEndDate, change.FieldActualStartDate, change.FieldActualEndDate, change.FieldCreatedAt, change.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Change fields.
func (c *Change) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case change.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case change.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case change.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case change.FieldJustification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field justification", values[i])
			} else if value.Valid {
				c.Justification = value.String
			}
		case change.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = value.String
			}
		case change.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case change.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				c.Priority = value.String
			}
		case change.FieldImpactScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impact_scope", values[i])
			} else if value.Valid {
				c.ImpactScope = value.String
			}
		case change.FieldRiskLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field risk_level", values[i])
			} else if value.Valid {
				c.RiskLevel = value.String
			}
		case change.FieldAssigneeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[i])
			} else if value.Valid {
				c.AssigneeID = int(value.Int64)
			}
		case change.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = int(value.Int64)
			}
		case change.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				c.TenantID = int(value.Int64)
			}
		case change.FieldPlannedStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field planned_start_date", values[i])
			} else if value.Valid {
				c.PlannedStartDate = value.Time
			}
		case change.FieldPlannedEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field planned_end_date", values[i])
			} else if value.Valid {
				c.PlannedEndDate = value.Time
			}
		case change.FieldActualStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_start_date", values[i])
			} else if value.Valid {
				c.ActualStartDate = value.Time
			}
		case change.FieldActualEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field actual_end_date", values[i])
			} else if value.Valid {
				c.ActualEndDate = value.Time
			}
		case change.FieldImplementationPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_plan", values[i])
			} else if value.Valid {
				c.ImplementationPlan = value.String
			}
		case change.FieldRollbackPlan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rollback_plan", values[i])
			} else if value.Valid {
				c.RollbackPlan = value.String
			}
		case change.FieldAffectedCis:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field affected_cis", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.AffectedCis); err != nil {
					return fmt.Errorf("unmarshal field affected_cis: %w", err)
				}
			}
		case change.FieldRelatedTickets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field related_tickets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RelatedTickets); err != nil {
					return fmt.Errorf("unmarshal field related_tickets: %w", err)
				}
			}
		case change.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case change.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Change.
// This includes values selected through modifiers, order, etc.
func (c *Change) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Change.
// Note that you need to call Change.Unwrap() before calling this method if this Change
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Change) Update() *ChangeUpdateOne {
	return NewChangeClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Change entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Change) Unwrap() *Change {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Change is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Change) String() string {
	var builder strings.Builder
	builder.WriteString("Change(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("justification=")
	builder.WriteString(c.Justification)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(c.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(c.Priority)
	builder.WriteString(", ")
	builder.WriteString("impact_scope=")
	builder.WriteString(c.ImpactScope)
	builder.WriteString(", ")
	builder.WriteString("risk_level=")
	builder.WriteString(c.RiskLevel)
	builder.WriteString(", ")
	builder.WriteString("assignee_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AssigneeID))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantID))
	builder.WriteString(", ")
	builder.WriteString("planned_start_date=")
	builder.WriteString(c.PlannedStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("planned_end_date=")
	builder.WriteString(c.PlannedEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("actual_start_date=")
	builder.WriteString(c.ActualStartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("actual_end_date=")
	builder.WriteString(c.ActualEndDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("implementation_plan=")
	builder.WriteString(c.ImplementationPlan)
	builder.WriteString(", ")
	builder.WriteString("rollback_plan=")
	builder.WriteString(c.RollbackPlan)
	builder.WriteString(", ")
	builder.WriteString("affected_cis=")
	builder.WriteString(fmt.Sprintf("%v", c.AffectedCis))
	builder.WriteString(", ")
	builder.WriteString("related_tickets=")
	builder.WriteString(fmt.Sprintf("%v", c.RelatedTickets))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Changes is a parsable slice of Change.
type Changes []*Change
