// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIRelationshipUpdate is the builder for updating CIRelationship entities.
type CIRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *CIRelationshipMutation
}

// Where appends a list predicates to the CIRelationshipUpdate builder.
func (cru *CIRelationshipUpdate) Where(ps ...predicate.CIRelationship) *CIRelationshipUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetSourceCiID sets the "source_ci_id" field.
func (cru *CIRelationshipUpdate) SetSourceCiID(i int) *CIRelationshipUpdate {
	cru.mutation.ResetSourceCiID()
	cru.mutation.SetSourceCiID(i)
	return cru
}

// SetNillableSourceCiID sets the "source_ci_id" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableSourceCiID(i *int) *CIRelationshipUpdate {
	if i != nil {
		cru.SetSourceCiID(*i)
	}
	return cru
}

// AddSourceCiID adds i to the "source_ci_id" field.
func (cru *CIRelationshipUpdate) AddSourceCiID(i int) *CIRelationshipUpdate {
	cru.mutation.AddSourceCiID(i)
	return cru
}

// SetTargetCiID sets the "target_ci_id" field.
func (cru *CIRelationshipUpdate) SetTargetCiID(i int) *CIRelationshipUpdate {
	cru.mutation.ResetTargetCiID()
	cru.mutation.SetTargetCiID(i)
	return cru
}

// SetNillableTargetCiID sets the "target_ci_id" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableTargetCiID(i *int) *CIRelationshipUpdate {
	if i != nil {
		cru.SetTargetCiID(*i)
	}
	return cru
}

// AddTargetCiID adds i to the "target_ci_id" field.
func (cru *CIRelationshipUpdate) AddTargetCiID(i int) *CIRelationshipUpdate {
	cru.mutation.AddTargetCiID(i)
	return cru
}

// SetRelationshipTypeID sets the "relationship_type_id" field.
func (cru *CIRelationshipUpdate) SetRelationshipTypeID(i int) *CIRelationshipUpdate {
	cru.mutation.ResetRelationshipTypeID()
	cru.mutation.SetRelationshipTypeID(i)
	return cru
}

// SetNillableRelationshipTypeID sets the "relationship_type_id" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableRelationshipTypeID(i *int) *CIRelationshipUpdate {
	if i != nil {
		cru.SetRelationshipTypeID(*i)
	}
	return cru
}

// AddRelationshipTypeID adds i to the "relationship_type_id" field.
func (cru *CIRelationshipUpdate) AddRelationshipTypeID(i int) *CIRelationshipUpdate {
	cru.mutation.AddRelationshipTypeID(i)
	return cru
}

// SetDescription sets the "description" field.
func (cru *CIRelationshipUpdate) SetDescription(s string) *CIRelationshipUpdate {
	cru.mutation.SetDescription(s)
	return cru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableDescription(s *string) *CIRelationshipUpdate {
	if s != nil {
		cru.SetDescription(*s)
	}
	return cru
}

// ClearDescription clears the value of the "description" field.
func (cru *CIRelationshipUpdate) ClearDescription() *CIRelationshipUpdate {
	cru.mutation.ClearDescription()
	return cru
}

// SetTenantID sets the "tenant_id" field.
func (cru *CIRelationshipUpdate) SetTenantID(i int) *CIRelationshipUpdate {
	cru.mutation.ResetTenantID()
	cru.mutation.SetTenantID(i)
	return cru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableTenantID(i *int) *CIRelationshipUpdate {
	if i != nil {
		cru.SetTenantID(*i)
	}
	return cru
}

// AddTenantID adds i to the "tenant_id" field.
func (cru *CIRelationshipUpdate) AddTenantID(i int) *CIRelationshipUpdate {
	cru.mutation.AddTenantID(i)
	return cru
}

// SetCreatedAt sets the "created_at" field.
func (cru *CIRelationshipUpdate) SetCreatedAt(t time.Time) *CIRelationshipUpdate {
	cru.mutation.SetCreatedAt(t)
	return cru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cru *CIRelationshipUpdate) SetNillableCreatedAt(t *time.Time) *CIRelationshipUpdate {
	if t != nil {
		cru.SetCreatedAt(*t)
	}
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CIRelationshipUpdate) SetUpdatedAt(t time.Time) *CIRelationshipUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// Mutation returns the CIRelationshipMutation object of the builder.
func (cru *CIRelationshipUpdate) Mutation() *CIRelationshipMutation {
	return cru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CIRelationshipUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CIRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CIRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CIRelationshipUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CIRelationshipUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := cirelationship.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CIRelationshipUpdate) check() error {
	if v, ok := cru.mutation.SourceCiID(); ok {
		if err := cirelationship.SourceCiIDValidator(v); err != nil {
			return &ValidationError{Name: "source_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.source_ci_id": %w`, err)}
		}
	}
	if v, ok := cru.mutation.TargetCiID(); ok {
		if err := cirelationship.TargetCiIDValidator(v); err != nil {
			return &ValidationError{Name: "target_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.target_ci_id": %w`, err)}
		}
	}
	if v, ok := cru.mutation.RelationshipTypeID(); ok {
		if err := cirelationship.RelationshipTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.relationship_type_id": %w`, err)}
		}
	}
	if v, ok := cru.mutation.TenantID(); ok {
		if err := cirelationship.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (cru *CIRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cirelationship.Table, cirelationship.Columns, sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.SourceCiID(); ok {
		_spec.SetField(cirelationship.FieldSourceCiID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedSourceCiID(); ok {
		_spec.AddField(cirelationship.FieldSourceCiID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.TargetCiID(); ok {
		_spec.SetField(cirelationship.FieldTargetCiID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedTargetCiID(); ok {
		_spec.AddField(cirelationship.FieldTargetCiID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.RelationshipTypeID(); ok {
		_spec.SetField(cirelationship.FieldRelationshipTypeID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedRelationshipTypeID(); ok {
		_spec.AddField(cirelationship.FieldRelationshipTypeID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.Description(); ok {
		_spec.SetField(cirelationship.FieldDescription, field.TypeString, value)
	}
	if cru.mutation.DescriptionCleared() {
		_spec.ClearField(cirelationship.FieldDescription, field.TypeString)
	}
	if value, ok := cru.mutation.TenantID(); ok {
		_spec.SetField(cirelationship.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedTenantID(); ok {
		_spec.AddField(cirelationship.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cru.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cirelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CIRelationshipUpdateOne is the builder for updating a single CIRelationship entity.
type CIRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CIRelationshipMutation
}

// SetSourceCiID sets the "source_ci_id" field.
func (cruo *CIRelationshipUpdateOne) SetSourceCiID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.ResetSourceCiID()
	cruo.mutation.SetSourceCiID(i)
	return cruo
}

// SetNillableSourceCiID sets the "source_ci_id" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableSourceCiID(i *int) *CIRelationshipUpdateOne {
	if i != nil {
		cruo.SetSourceCiID(*i)
	}
	return cruo
}

// AddSourceCiID adds i to the "source_ci_id" field.
func (cruo *CIRelationshipUpdateOne) AddSourceCiID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.AddSourceCiID(i)
	return cruo
}

// SetTargetCiID sets the "target_ci_id" field.
func (cruo *CIRelationshipUpdateOne) SetTargetCiID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.ResetTargetCiID()
	cruo.mutation.SetTargetCiID(i)
	return cruo
}

// SetNillableTargetCiID sets the "target_ci_id" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableTargetCiID(i *int) *CIRelationshipUpdateOne {
	if i != nil {
		cruo.SetTargetCiID(*i)
	}
	return cruo
}

// AddTargetCiID adds i to the "target_ci_id" field.
func (cruo *CIRelationshipUpdateOne) AddTargetCiID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.AddTargetCiID(i)
	return cruo
}

// SetRelationshipTypeID sets the "relationship_type_id" field.
func (cruo *CIRelationshipUpdateOne) SetRelationshipTypeID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.ResetRelationshipTypeID()
	cruo.mutation.SetRelationshipTypeID(i)
	return cruo
}

// SetNillableRelationshipTypeID sets the "relationship_type_id" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableRelationshipTypeID(i *int) *CIRelationshipUpdateOne {
	if i != nil {
		cruo.SetRelationshipTypeID(*i)
	}
	return cruo
}

// AddRelationshipTypeID adds i to the "relationship_type_id" field.
func (cruo *CIRelationshipUpdateOne) AddRelationshipTypeID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.AddRelationshipTypeID(i)
	return cruo
}

// SetDescription sets the "description" field.
func (cruo *CIRelationshipUpdateOne) SetDescription(s string) *CIRelationshipUpdateOne {
	cruo.mutation.SetDescription(s)
	return cruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableDescription(s *string) *CIRelationshipUpdateOne {
	if s != nil {
		cruo.SetDescription(*s)
	}
	return cruo
}

// ClearDescription clears the value of the "description" field.
func (cruo *CIRelationshipUpdateOne) ClearDescription() *CIRelationshipUpdateOne {
	cruo.mutation.ClearDescription()
	return cruo
}

// SetTenantID sets the "tenant_id" field.
func (cruo *CIRelationshipUpdateOne) SetTenantID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.ResetTenantID()
	cruo.mutation.SetTenantID(i)
	return cruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableTenantID(i *int) *CIRelationshipUpdateOne {
	if i != nil {
		cruo.SetTenantID(*i)
	}
	return cruo
}

// AddTenantID adds i to the "tenant_id" field.
func (cruo *CIRelationshipUpdateOne) AddTenantID(i int) *CIRelationshipUpdateOne {
	cruo.mutation.AddTenantID(i)
	return cruo
}

// SetCreatedAt sets the "created_at" field.
func (cruo *CIRelationshipUpdateOne) SetCreatedAt(t time.Time) *CIRelationshipUpdateOne {
	cruo.mutation.SetCreatedAt(t)
	return cruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cruo *CIRelationshipUpdateOne) SetNillableCreatedAt(t *time.Time) *CIRelationshipUpdateOne {
	if t != nil {
		cruo.SetCreatedAt(*t)
	}
	return cruo
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CIRelationshipUpdateOne) SetUpdatedAt(t time.Time) *CIRelationshipUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// Mutation returns the CIRelationshipMutation object of the builder.
func (cruo *CIRelationshipUpdateOne) Mutation() *CIRelationshipMutation {
	return cruo.mutation
}

// Where appends a list predicates to the CIRelationshipUpdate builder.
func (cruo *CIRelationshipUpdateOne) Where(ps ...predicate.CIRelationship) *CIRelationshipUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CIRelationshipUpdateOne) Select(field string, fields ...string) *CIRelationshipUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CIRelationship entity.
func (cruo *CIRelationshipUpdateOne) Save(ctx context.Context) (*CIRelationship, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CIRelationshipUpdateOne) SaveX(ctx context.Context) *CIRelationship {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CIRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CIRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CIRelationshipUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := cirelationship.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CIRelationshipUpdateOne) check() error {
	if v, ok := cruo.mutation.SourceCiID(); ok {
		if err := cirelationship.SourceCiIDValidator(v); err != nil {
			return &ValidationError{Name: "source_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.source_ci_id": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.TargetCiID(); ok {
		if err := cirelationship.TargetCiIDValidator(v); err != nil {
			return &ValidationError{Name: "target_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.target_ci_id": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.RelationshipTypeID(); ok {
		if err := cirelationship.RelationshipTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.relationship_type_id": %w`, err)}
		}
	}
	if v, ok := cruo.mutation.TenantID(); ok {
		if err := cirelationship.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (cruo *CIRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *CIRelationship, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cirelationship.Table, cirelationship.Columns, sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cirelationship.FieldID)
		for _, f := range fields {
			if !cirelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cirelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.SourceCiID(); ok {
		_spec.SetField(cirelationship.FieldSourceCiID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedSourceCiID(); ok {
		_spec.AddField(cirelationship.FieldSourceCiID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.TargetCiID(); ok {
		_spec.SetField(cirelationship.FieldTargetCiID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedTargetCiID(); ok {
		_spec.AddField(cirelationship.FieldTargetCiID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.RelationshipTypeID(); ok {
		_spec.SetField(cirelationship.FieldRelationshipTypeID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedRelationshipTypeID(); ok {
		_spec.AddField(cirelationship.FieldRelationshipTypeID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.Description(); ok {
		_spec.SetField(cirelationship.FieldDescription, field.TypeString, value)
	}
	if cruo.mutation.DescriptionCleared() {
		_spec.ClearField(cirelationship.FieldDescription, field.TypeString)
	}
	if value, ok := cruo.mutation.TenantID(); ok {
		_spec.SetField(cirelationship.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedTenantID(); ok {
		_spec.AddField(cirelationship.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &CIRelationship{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cirelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
