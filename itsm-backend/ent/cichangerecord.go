// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIChangeRecord is the model entity for the CIChangeRecord schema.
type CIChangeRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CiID holds the value of the "ci_id" field.
	CiID int `json:"ci_id,omitempty"`
	// ChangeType holds the value of the "change_type" field.
	ChangeType string `json:"change_type,omitempty"`
	// OldValues holds the value of the "old_values" field.
	OldValues map[string]interface{} `json:"old_values,omitempty"`
	// NewValues holds the value of the "new_values" field.
	NewValues map[string]interface{} `json:"new_values,omitempty"`
	// ChangedBy holds the value of the "changed_by" field.
	ChangedBy string `json:"changed_by,omitempty"`
	// ChangeSource holds the value of the "change_source" field.
	ChangeSource string `json:"change_source,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// VersionBefore holds the value of the "version_before" field.
	VersionBefore string `json:"version_before,omitempty"`
	// VersionAfter holds the value of the "version_after" field.
	VersionAfter string `json:"version_after,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CIChangeRecordQuery when eager-loading is set.
	Edges        CIChangeRecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CIChangeRecordEdges holds the relations/edges for other nodes in the graph.
type CIChangeRecordEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ConfigurationItem holds the value of the configuration_item edge.
	ConfigurationItem *ConfigurationItem `json:"configuration_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIChangeRecordEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ConfigurationItemOrErr returns the ConfigurationItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIChangeRecordEdges) ConfigurationItemOrErr() (*ConfigurationItem, error) {
	if e.ConfigurationItem != nil {
		return e.ConfigurationItem, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: configurationitem.Label}
	}
	return nil, &NotLoadedError{edge: "configuration_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIChangeRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cichangerecord.FieldOldValues, cichangerecord.FieldNewValues:
			values[i] = new([]byte)
		case cichangerecord.FieldID, cichangerecord.FieldCiID, cichangerecord.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case cichangerecord.FieldChangeType, cichangerecord.FieldChangedBy, cichangerecord.FieldChangeSource, cichangerecord.FieldReason, cichangerecord.FieldVersionBefore, cichangerecord.FieldVersionAfter:
			values[i] = new(sql.NullString)
		case cichangerecord.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIChangeRecord fields.
func (ccr *CIChangeRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cichangerecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccr.ID = int(value.Int64)
		case cichangerecord.FieldCiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ci_id", values[i])
			} else if value.Valid {
				ccr.CiID = int(value.Int64)
			}
		case cichangerecord.FieldChangeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_type", values[i])
			} else if value.Valid {
				ccr.ChangeType = value.String
			}
		case cichangerecord.FieldOldValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field old_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ccr.OldValues); err != nil {
					return fmt.Errorf("unmarshal field old_values: %w", err)
				}
			}
		case cichangerecord.FieldNewValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field new_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ccr.NewValues); err != nil {
					return fmt.Errorf("unmarshal field new_values: %w", err)
				}
			}
		case cichangerecord.FieldChangedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changed_by", values[i])
			} else if value.Valid {
				ccr.ChangedBy = value.String
			}
		case cichangerecord.FieldChangeSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_source", values[i])
			} else if value.Valid {
				ccr.ChangeSource = value.String
			}
		case cichangerecord.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				ccr.Reason = value.String
			}
		case cichangerecord.FieldVersionBefore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_before", values[i])
			} else if value.Valid {
				ccr.VersionBefore = value.String
			}
		case cichangerecord.FieldVersionAfter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_after", values[i])
			} else if value.Valid {
				ccr.VersionAfter = value.String
			}
		case cichangerecord.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ccr.TenantID = int(value.Int64)
			}
		case cichangerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ccr.CreatedAt = value.Time
			}
		default:
			ccr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIChangeRecord.
// This includes values selected through modifiers, order, etc.
func (ccr *CIChangeRecord) Value(name string) (ent.Value, error) {
	return ccr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CIChangeRecord entity.
func (ccr *CIChangeRecord) QueryTenant() *TenantQuery {
	return NewCIChangeRecordClient(ccr.config).QueryTenant(ccr)
}

// QueryConfigurationItem queries the "configuration_item" edge of the CIChangeRecord entity.
func (ccr *CIChangeRecord) QueryConfigurationItem() *ConfigurationItemQuery {
	return NewCIChangeRecordClient(ccr.config).QueryConfigurationItem(ccr)
}

// Update returns a builder for updating this CIChangeRecord.
// Note that you need to call CIChangeRecord.Unwrap() before calling this method if this CIChangeRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccr *CIChangeRecord) Update() *CIChangeRecordUpdateOne {
	return NewCIChangeRecordClient(ccr.config).UpdateOne(ccr)
}

// Unwrap unwraps the CIChangeRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccr *CIChangeRecord) Unwrap() *CIChangeRecord {
	_tx, ok := ccr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIChangeRecord is not a transactional entity")
	}
	ccr.config.driver = _tx.drv
	return ccr
}

// String implements the fmt.Stringer.
func (ccr *CIChangeRecord) String() string {
	var builder strings.Builder
	builder.WriteString("CIChangeRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccr.ID))
	builder.WriteString("ci_id=")
	builder.WriteString(fmt.Sprintf("%v", ccr.CiID))
	builder.WriteString(", ")
	builder.WriteString("change_type=")
	builder.WriteString(ccr.ChangeType)
	builder.WriteString(", ")
	builder.WriteString("old_values=")
	builder.WriteString(fmt.Sprintf("%v", ccr.OldValues))
	builder.WriteString(", ")
	builder.WriteString("new_values=")
	builder.WriteString(fmt.Sprintf("%v", ccr.NewValues))
	builder.WriteString(", ")
	builder.WriteString("changed_by=")
	builder.WriteString(ccr.ChangedBy)
	builder.WriteString(", ")
	builder.WriteString("change_source=")
	builder.WriteString(ccr.ChangeSource)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(ccr.Reason)
	builder.WriteString(", ")
	builder.WriteString("version_before=")
	builder.WriteString(ccr.VersionBefore)
	builder.WriteString(", ")
	builder.WriteString("version_after=")
	builder.WriteString(ccr.VersionAfter)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ccr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ccr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CIChangeRecords is a parsable slice of CIChangeRecord.
type CIChangeRecords []*CIChangeRecord
