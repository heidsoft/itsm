// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/slametrics"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SLAMetrics is the model entity for the SLAMetrics schema.
type SLAMetrics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 服务类型
	ServiceType string `json:"service_type,omitempty"`
	// 优先级
	Priority string `json:"priority,omitempty"`
	// 影响范围
	Impact string `json:"impact,omitempty"`
	// 总工单数
	TotalTickets int `json:"total_tickets,omitempty"`
	// 达标工单数
	MetSLATickets int `json:"met_sla_tickets,omitempty"`
	// 违规工单数
	ViolatedSLATickets int `json:"violated_sla_tickets,omitempty"`
	// SLA达标率
	SLAComplianceRate float64 `json:"sla_compliance_rate,omitempty"`
	// 平均响应时间（分钟）
	AvgResponseTime float64 `json:"avg_response_time,omitempty"`
	// 平均解决时间（分钟）
	AvgResolutionTime float64 `json:"avg_resolution_time,omitempty"`
	// 统计周期：daily/weekly/monthly
	Period string `json:"period,omitempty"`
	// 周期开始时间
	PeriodStart time.Time `json:"period_start,omitempty"`
	// 周期结束时间
	PeriodEnd time.Time `json:"period_end,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SLAMetrics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slametrics.FieldSLAComplianceRate, slametrics.FieldAvgResponseTime, slametrics.FieldAvgResolutionTime:
			values[i] = new(sql.NullFloat64)
		case slametrics.FieldID, slametrics.FieldTotalTickets, slametrics.FieldMetSLATickets, slametrics.FieldViolatedSLATickets, slametrics.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case slametrics.FieldServiceType, slametrics.FieldPriority, slametrics.FieldImpact, slametrics.FieldPeriod:
			values[i] = new(sql.NullString)
		case slametrics.FieldCreateTime, slametrics.FieldUpdateTime, slametrics.FieldPeriodStart, slametrics.FieldPeriodEnd, slametrics.FieldCreatedAt, slametrics.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SLAMetrics fields.
func (sm *SLAMetrics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slametrics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case slametrics.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sm.CreateTime = value.Time
			}
		case slametrics.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sm.UpdateTime = value.Time
			}
		case slametrics.FieldServiceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_type", values[i])
			} else if value.Valid {
				sm.ServiceType = value.String
			}
		case slametrics.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				sm.Priority = value.String
			}
		case slametrics.FieldImpact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impact", values[i])
			} else if value.Valid {
				sm.Impact = value.String
			}
		case slametrics.FieldTotalTickets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_tickets", values[i])
			} else if value.Valid {
				sm.TotalTickets = int(value.Int64)
			}
		case slametrics.FieldMetSLATickets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field met_sla_tickets", values[i])
			} else if value.Valid {
				sm.MetSLATickets = int(value.Int64)
			}
		case slametrics.FieldViolatedSLATickets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field violated_sla_tickets", values[i])
			} else if value.Valid {
				sm.ViolatedSLATickets = int(value.Int64)
			}
		case slametrics.FieldSLAComplianceRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sla_compliance_rate", values[i])
			} else if value.Valid {
				sm.SLAComplianceRate = value.Float64
			}
		case slametrics.FieldAvgResponseTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_response_time", values[i])
			} else if value.Valid {
				sm.AvgResponseTime = value.Float64
			}
		case slametrics.FieldAvgResolutionTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_resolution_time", values[i])
			} else if value.Valid {
				sm.AvgResolutionTime = value.Float64
			}
		case slametrics.FieldPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				sm.Period = value.String
			}
		case slametrics.FieldPeriodStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_start", values[i])
			} else if value.Valid {
				sm.PeriodStart = value.Time
			}
		case slametrics.FieldPeriodEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field period_end", values[i])
			} else if value.Valid {
				sm.PeriodEnd = value.Time
			}
		case slametrics.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sm.TenantID = int(value.Int64)
			}
		case slametrics.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case slametrics.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SLAMetrics.
// This includes values selected through modifiers, order, etc.
func (sm *SLAMetrics) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this SLAMetrics.
// Note that you need to call SLAMetrics.Unwrap() before calling this method if this SLAMetrics
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SLAMetrics) Update() *SLAMetricsUpdateOne {
	return NewSLAMetricsClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the SLAMetrics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SLAMetrics) Unwrap() *SLAMetrics {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SLAMetrics is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SLAMetrics) String() string {
	var builder strings.Builder
	builder.WriteString("SLAMetrics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("service_type=")
	builder.WriteString(sm.ServiceType)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(sm.Priority)
	builder.WriteString(", ")
	builder.WriteString("impact=")
	builder.WriteString(sm.Impact)
	builder.WriteString(", ")
	builder.WriteString("total_tickets=")
	builder.WriteString(fmt.Sprintf("%v", sm.TotalTickets))
	builder.WriteString(", ")
	builder.WriteString("met_sla_tickets=")
	builder.WriteString(fmt.Sprintf("%v", sm.MetSLATickets))
	builder.WriteString(", ")
	builder.WriteString("violated_sla_tickets=")
	builder.WriteString(fmt.Sprintf("%v", sm.ViolatedSLATickets))
	builder.WriteString(", ")
	builder.WriteString("sla_compliance_rate=")
	builder.WriteString(fmt.Sprintf("%v", sm.SLAComplianceRate))
	builder.WriteString(", ")
	builder.WriteString("avg_response_time=")
	builder.WriteString(fmt.Sprintf("%v", sm.AvgResponseTime))
	builder.WriteString(", ")
	builder.WriteString("avg_resolution_time=")
	builder.WriteString(fmt.Sprintf("%v", sm.AvgResolutionTime))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(sm.Period)
	builder.WriteString(", ")
	builder.WriteString("period_start=")
	builder.WriteString(sm.PeriodStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("period_end=")
	builder.WriteString(sm.PeriodEnd.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SLAMetricsSlice is a parsable slice of SLAMetrics.
type SLAMetricsSlice []*SLAMetrics
