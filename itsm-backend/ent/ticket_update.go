// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TicketUpdate) SetTitle(s string) *TicketUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTitle(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TicketUpdate) SetDescription(s string) *TicketUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableDescription(s *string) *TicketUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TicketUpdate) ClearDescription() *TicketUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TicketUpdate) SetStatus(s string) *TicketUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableStatus(s *string) *TicketUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TicketUpdate) SetPriority(s string) *TicketUpdate {
	tu.mutation.SetPriority(s)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TicketUpdate) SetNillablePriority(s *string) *TicketUpdate {
	if s != nil {
		tu.SetPriority(*s)
	}
	return tu
}

// SetTicketNumber sets the "ticket_number" field.
func (tu *TicketUpdate) SetTicketNumber(s string) *TicketUpdate {
	tu.mutation.SetTicketNumber(s)
	return tu
}

// SetNillableTicketNumber sets the "ticket_number" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketNumber(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTicketNumber(*s)
	}
	return tu
}

// SetRequesterID sets the "requester_id" field.
func (tu *TicketUpdate) SetRequesterID(i int) *TicketUpdate {
	tu.mutation.ResetRequesterID()
	tu.mutation.SetRequesterID(i)
	return tu
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableRequesterID(i *int) *TicketUpdate {
	if i != nil {
		tu.SetRequesterID(*i)
	}
	return tu
}

// AddRequesterID adds i to the "requester_id" field.
func (tu *TicketUpdate) AddRequesterID(i int) *TicketUpdate {
	tu.mutation.AddRequesterID(i)
	return tu
}

// SetAssigneeID sets the "assignee_id" field.
func (tu *TicketUpdate) SetAssigneeID(i int) *TicketUpdate {
	tu.mutation.ResetAssigneeID()
	tu.mutation.SetAssigneeID(i)
	return tu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableAssigneeID(i *int) *TicketUpdate {
	if i != nil {
		tu.SetAssigneeID(*i)
	}
	return tu
}

// AddAssigneeID adds i to the "assignee_id" field.
func (tu *TicketUpdate) AddAssigneeID(i int) *TicketUpdate {
	tu.mutation.AddAssigneeID(i)
	return tu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tu *TicketUpdate) ClearAssigneeID() *TicketUpdate {
	tu.mutation.ClearAssigneeID()
	return tu
}

// SetTenantID sets the "tenant_id" field.
func (tu *TicketUpdate) SetTenantID(i int) *TicketUpdate {
	tu.mutation.ResetTenantID()
	tu.mutation.SetTenantID(i)
	return tu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTenantID(i *int) *TicketUpdate {
	if i != nil {
		tu.SetTenantID(*i)
	}
	return tu
}

// AddTenantID adds i to the "tenant_id" field.
func (tu *TicketUpdate) AddTenantID(i int) *TicketUpdate {
	tu.mutation.AddTenantID(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TicketUpdate) SetCreatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableCreatedAt(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TicketUpdate) SetUpdatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TicketUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := ticket.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Ticket.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TicketNumber(); ok {
		if err := ticket.TicketNumberValidator(v); err != nil {
			return &ValidationError{Name: "ticket_number", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_number": %w`, err)}
		}
	}
	if v, ok := tu.mutation.RequesterID(); ok {
		if err := ticket.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.requester_id": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TenantID(); ok {
		if err := ticket.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(ticket.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(ticket.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeString, value)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(ticket.FieldPriority, field.TypeString, value)
	}
	if value, ok := tu.mutation.TicketNumber(); ok {
		_spec.SetField(ticket.FieldTicketNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.RequesterID(); ok {
		_spec.SetField(ticket.FieldRequesterID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedRequesterID(); ok {
		_spec.AddField(ticket.FieldRequesterID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AssigneeID(); ok {
		_spec.SetField(ticket.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAssigneeID(); ok {
		_spec.AddField(ticket.FieldAssigneeID, field.TypeInt, value)
	}
	if tu.mutation.AssigneeIDCleared() {
		_spec.ClearField(ticket.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := tu.mutation.TenantID(); ok {
		_spec.SetField(ticket.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTenantID(); ok {
		_spec.AddField(ticket.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetTitle sets the "title" field.
func (tuo *TicketUpdateOne) SetTitle(s string) *TicketUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTitle(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TicketUpdateOne) SetDescription(s string) *TicketUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableDescription(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TicketUpdateOne) ClearDescription() *TicketUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TicketUpdateOne) SetStatus(s string) *TicketUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableStatus(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TicketUpdateOne) SetPriority(s string) *TicketUpdateOne {
	tuo.mutation.SetPriority(s)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillablePriority(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetPriority(*s)
	}
	return tuo
}

// SetTicketNumber sets the "ticket_number" field.
func (tuo *TicketUpdateOne) SetTicketNumber(s string) *TicketUpdateOne {
	tuo.mutation.SetTicketNumber(s)
	return tuo
}

// SetNillableTicketNumber sets the "ticket_number" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketNumber(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTicketNumber(*s)
	}
	return tuo
}

// SetRequesterID sets the "requester_id" field.
func (tuo *TicketUpdateOne) SetRequesterID(i int) *TicketUpdateOne {
	tuo.mutation.ResetRequesterID()
	tuo.mutation.SetRequesterID(i)
	return tuo
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableRequesterID(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetRequesterID(*i)
	}
	return tuo
}

// AddRequesterID adds i to the "requester_id" field.
func (tuo *TicketUpdateOne) AddRequesterID(i int) *TicketUpdateOne {
	tuo.mutation.AddRequesterID(i)
	return tuo
}

// SetAssigneeID sets the "assignee_id" field.
func (tuo *TicketUpdateOne) SetAssigneeID(i int) *TicketUpdateOne {
	tuo.mutation.ResetAssigneeID()
	tuo.mutation.SetAssigneeID(i)
	return tuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableAssigneeID(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetAssigneeID(*i)
	}
	return tuo
}

// AddAssigneeID adds i to the "assignee_id" field.
func (tuo *TicketUpdateOne) AddAssigneeID(i int) *TicketUpdateOne {
	tuo.mutation.AddAssigneeID(i)
	return tuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (tuo *TicketUpdateOne) ClearAssigneeID() *TicketUpdateOne {
	tuo.mutation.ClearAssigneeID()
	return tuo
}

// SetTenantID sets the "tenant_id" field.
func (tuo *TicketUpdateOne) SetTenantID(i int) *TicketUpdateOne {
	tuo.mutation.ResetTenantID()
	tuo.mutation.SetTenantID(i)
	return tuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTenantID(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetTenantID(*i)
	}
	return tuo
}

// AddTenantID adds i to the "tenant_id" field.
func (tuo *TicketUpdateOne) AddTenantID(i int) *TicketUpdateOne {
	tuo.mutation.AddTenantID(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TicketUpdateOne) SetCreatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TicketUpdateOne) SetUpdatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TicketUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := ticket.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Ticket.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TicketNumber(); ok {
		if err := ticket.TicketNumberValidator(v); err != nil {
			return &ValidationError{Name: "ticket_number", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_number": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.RequesterID(); ok {
		if err := ticket.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.requester_id": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TenantID(); ok {
		if err := ticket.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(ticket.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(ticket.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(ticket.FieldPriority, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TicketNumber(); ok {
		_spec.SetField(ticket.FieldTicketNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.RequesterID(); ok {
		_spec.SetField(ticket.FieldRequesterID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedRequesterID(); ok {
		_spec.AddField(ticket.FieldRequesterID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AssigneeID(); ok {
		_spec.SetField(ticket.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAssigneeID(); ok {
		_spec.AddField(ticket.FieldAssigneeID, field.TypeInt, value)
	}
	if tuo.mutation.AssigneeIDCleared() {
		_spec.ClearField(ticket.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := tuo.mutation.TenantID(); ok {
		_spec.SetField(ticket.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTenantID(); ok {
		_spec.AddField(ticket.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
