// Code generated by ent, DO NOT EDIT.

package processdefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processdefinition type in the database.
	Label = "process_definition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldBpmnXML holds the string denoting the bpmn_xml field in the database.
	FieldBpmnXML = "bpmn_xml"
	// FieldProcessVariables holds the string denoting the process_variables field in the database.
	FieldProcessVariables = "process_variables"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldIsLatest holds the string denoting the is_latest field in the database.
	FieldIsLatest = "is_latest"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldDeploymentName holds the string denoting the deployment_name field in the database.
	FieldDeploymentName = "deployment_name"
	// FieldDeployedAt holds the string denoting the deployed_at field in the database.
	FieldDeployedAt = "deployed_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processdefinition in the database.
	Table = "process_definitions"
)

// Columns holds all SQL columns for processdefinition fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldName,
	FieldDescription,
	FieldVersion,
	FieldCategory,
	FieldBpmnXML,
	FieldProcessVariables,
	FieldIsActive,
	FieldIsLatest,
	FieldDeploymentID,
	FieldDeploymentName,
	FieldDeployedAt,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion string
	// DefaultCategory holds the default value on creation for the "category" field.
	DefaultCategory string
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultIsLatest holds the default value on creation for the "is_latest" field.
	DefaultIsLatest bool
	// DeploymentIDValidator is a validator for the "deployment_id" field. It is called by the builders before save.
	DeploymentIDValidator func(int) error
	// DefaultDeployedAt holds the default value on creation for the "deployed_at" field.
	DefaultDeployedAt func() time.Time
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessDefinition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByIsLatest orders the results by the is_latest field.
func ByIsLatest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsLatest, opts...).ToFunc()
}

// ByDeploymentID orders the results by the deployment_id field.
func ByDeploymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentID, opts...).ToFunc()
}

// ByDeploymentName orders the results by the deployment_name field.
func ByDeploymentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentName, opts...).ToFunc()
}

// ByDeployedAt orders the results by the deployed_at field.
func ByDeployedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
