// Code generated by ent, DO NOT EDIT.

package processdefinition

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldKey, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDescription, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldVersion, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCategory, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldIsActive, v))
}

// IsLatest applies equality check predicate on the "is_latest" field. It's identical to IsLatestEQ.
func IsLatest(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldIsLatest, v))
}

// DeploymentID applies equality check predicate on the "deployment_id" field. It's identical to DeploymentIDEQ.
func DeploymentID(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeploymentID, v))
}

// DeploymentName applies equality check predicate on the "deployment_name" field. It's identical to DeploymentNameEQ.
func DeploymentName(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeploymentName, v))
}

// DeployedAt applies equality check predicate on the "deployed_at" field. It's identical to DeployedAtEQ.
func DeployedAt(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeployedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldDescription, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldVersion, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldCategory, v))
}

// ProcessVariablesIsNil applies the IsNil predicate on the "process_variables" field.
func ProcessVariablesIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldProcessVariables))
}

// ProcessVariablesNotNil applies the NotNil predicate on the "process_variables" field.
func ProcessVariablesNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldProcessVariables))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldIsActive, v))
}

// IsLatestEQ applies the EQ predicate on the "is_latest" field.
func IsLatestEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldIsLatest, v))
}

// IsLatestNEQ applies the NEQ predicate on the "is_latest" field.
func IsLatestNEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldIsLatest, v))
}

// DeploymentIDEQ applies the EQ predicate on the "deployment_id" field.
func DeploymentIDEQ(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeploymentID, v))
}

// DeploymentIDNEQ applies the NEQ predicate on the "deployment_id" field.
func DeploymentIDNEQ(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDeploymentID, v))
}

// DeploymentIDIn applies the In predicate on the "deployment_id" field.
func DeploymentIDIn(vs ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDeploymentID, vs...))
}

// DeploymentIDNotIn applies the NotIn predicate on the "deployment_id" field.
func DeploymentIDNotIn(vs ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDeploymentID, vs...))
}

// DeploymentIDGT applies the GT predicate on the "deployment_id" field.
func DeploymentIDGT(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDeploymentID, v))
}

// DeploymentIDGTE applies the GTE predicate on the "deployment_id" field.
func DeploymentIDGTE(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDeploymentID, v))
}

// DeploymentIDLT applies the LT predicate on the "deployment_id" field.
func DeploymentIDLT(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDeploymentID, v))
}

// DeploymentIDLTE applies the LTE predicate on the "deployment_id" field.
func DeploymentIDLTE(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDeploymentID, v))
}

// DeploymentNameEQ applies the EQ predicate on the "deployment_name" field.
func DeploymentNameEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeploymentName, v))
}

// DeploymentNameNEQ applies the NEQ predicate on the "deployment_name" field.
func DeploymentNameNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDeploymentName, v))
}

// DeploymentNameIn applies the In predicate on the "deployment_name" field.
func DeploymentNameIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDeploymentName, vs...))
}

// DeploymentNameNotIn applies the NotIn predicate on the "deployment_name" field.
func DeploymentNameNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDeploymentName, vs...))
}

// DeploymentNameGT applies the GT predicate on the "deployment_name" field.
func DeploymentNameGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDeploymentName, v))
}

// DeploymentNameGTE applies the GTE predicate on the "deployment_name" field.
func DeploymentNameGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDeploymentName, v))
}

// DeploymentNameLT applies the LT predicate on the "deployment_name" field.
func DeploymentNameLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDeploymentName, v))
}

// DeploymentNameLTE applies the LTE predicate on the "deployment_name" field.
func DeploymentNameLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDeploymentName, v))
}

// DeploymentNameContains applies the Contains predicate on the "deployment_name" field.
func DeploymentNameContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldDeploymentName, v))
}

// DeploymentNameHasPrefix applies the HasPrefix predicate on the "deployment_name" field.
func DeploymentNameHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldDeploymentName, v))
}

// DeploymentNameHasSuffix applies the HasSuffix predicate on the "deployment_name" field.
func DeploymentNameHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldDeploymentName, v))
}

// DeploymentNameIsNil applies the IsNil predicate on the "deployment_name" field.
func DeploymentNameIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldDeploymentName))
}

// DeploymentNameNotNil applies the NotNil predicate on the "deployment_name" field.
func DeploymentNameNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldDeploymentName))
}

// DeploymentNameEqualFold applies the EqualFold predicate on the "deployment_name" field.
func DeploymentNameEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldDeploymentName, v))
}

// DeploymentNameContainsFold applies the ContainsFold predicate on the "deployment_name" field.
func DeploymentNameContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldDeploymentName, v))
}

// DeployedAtEQ applies the EQ predicate on the "deployed_at" field.
func DeployedAtEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeployedAt, v))
}

// DeployedAtNEQ applies the NEQ predicate on the "deployed_at" field.
func DeployedAtNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDeployedAt, v))
}

// DeployedAtIn applies the In predicate on the "deployed_at" field.
func DeployedAtIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDeployedAt, vs...))
}

// DeployedAtNotIn applies the NotIn predicate on the "deployed_at" field.
func DeployedAtNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDeployedAt, vs...))
}

// DeployedAtGT applies the GT predicate on the "deployed_at" field.
func DeployedAtGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDeployedAt, v))
}

// DeployedAtGTE applies the GTE predicate on the "deployed_at" field.
func DeployedAtGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDeployedAt, v))
}

// DeployedAtLT applies the LT predicate on the "deployed_at" field.
func DeployedAtLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDeployedAt, v))
}

// DeployedAtLTE applies the LTE predicate on the "deployed_at" field.
func DeployedAtLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDeployedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.NotPredicates(p))
}
