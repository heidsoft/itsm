// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/auditlog"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogMutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *AuditLogUpdate) SetCreatedAt(t time.Time) *AuditLogUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableCreatedAt(t *time.Time) *AuditLogUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// SetTenantID sets the "tenant_id" field.
func (alu *AuditLogUpdate) SetTenantID(i int) *AuditLogUpdate {
	alu.mutation.ResetTenantID()
	alu.mutation.SetTenantID(i)
	return alu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableTenantID(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetTenantID(*i)
	}
	return alu
}

// AddTenantID adds i to the "tenant_id" field.
func (alu *AuditLogUpdate) AddTenantID(i int) *AuditLogUpdate {
	alu.mutation.AddTenantID(i)
	return alu
}

// ClearTenantID clears the value of the "tenant_id" field.
func (alu *AuditLogUpdate) ClearTenantID() *AuditLogUpdate {
	alu.mutation.ClearTenantID()
	return alu
}

// SetUserID sets the "user_id" field.
func (alu *AuditLogUpdate) SetUserID(i int) *AuditLogUpdate {
	alu.mutation.ResetUserID()
	alu.mutation.SetUserID(i)
	return alu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableUserID(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetUserID(*i)
	}
	return alu
}

// AddUserID adds i to the "user_id" field.
func (alu *AuditLogUpdate) AddUserID(i int) *AuditLogUpdate {
	alu.mutation.AddUserID(i)
	return alu
}

// ClearUserID clears the value of the "user_id" field.
func (alu *AuditLogUpdate) ClearUserID() *AuditLogUpdate {
	alu.mutation.ClearUserID()
	return alu
}

// SetRequestID sets the "request_id" field.
func (alu *AuditLogUpdate) SetRequestID(s string) *AuditLogUpdate {
	alu.mutation.SetRequestID(s)
	return alu
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableRequestID(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetRequestID(*s)
	}
	return alu
}

// ClearRequestID clears the value of the "request_id" field.
func (alu *AuditLogUpdate) ClearRequestID() *AuditLogUpdate {
	alu.mutation.ClearRequestID()
	return alu
}

// SetIP sets the "ip" field.
func (alu *AuditLogUpdate) SetIP(s string) *AuditLogUpdate {
	alu.mutation.SetIP(s)
	return alu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableIP(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetIP(*s)
	}
	return alu
}

// SetResource sets the "resource" field.
func (alu *AuditLogUpdate) SetResource(s string) *AuditLogUpdate {
	alu.mutation.SetResource(s)
	return alu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableResource(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetResource(*s)
	}
	return alu
}

// SetAction sets the "action" field.
func (alu *AuditLogUpdate) SetAction(s string) *AuditLogUpdate {
	alu.mutation.SetAction(s)
	return alu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableAction(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetAction(*s)
	}
	return alu
}

// SetPath sets the "path" field.
func (alu *AuditLogUpdate) SetPath(s string) *AuditLogUpdate {
	alu.mutation.SetPath(s)
	return alu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillablePath(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetPath(*s)
	}
	return alu
}

// SetMethod sets the "method" field.
func (alu *AuditLogUpdate) SetMethod(s string) *AuditLogUpdate {
	alu.mutation.SetMethod(s)
	return alu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableMethod(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetMethod(*s)
	}
	return alu
}

// SetStatusCode sets the "status_code" field.
func (alu *AuditLogUpdate) SetStatusCode(i int) *AuditLogUpdate {
	alu.mutation.ResetStatusCode()
	alu.mutation.SetStatusCode(i)
	return alu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableStatusCode(i *int) *AuditLogUpdate {
	if i != nil {
		alu.SetStatusCode(*i)
	}
	return alu
}

// AddStatusCode adds i to the "status_code" field.
func (alu *AuditLogUpdate) AddStatusCode(i int) *AuditLogUpdate {
	alu.mutation.AddStatusCode(i)
	return alu
}

// SetRequestBody sets the "request_body" field.
func (alu *AuditLogUpdate) SetRequestBody(s string) *AuditLogUpdate {
	alu.mutation.SetRequestBody(s)
	return alu
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableRequestBody(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetRequestBody(*s)
	}
	return alu
}

// ClearRequestBody clears the value of the "request_body" field.
func (alu *AuditLogUpdate) ClearRequestBody() *AuditLogUpdate {
	alu.mutation.ClearRequestBody()
	return alu
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedTenantID(); ok {
		_spec.AddField(auditlog.FieldTenantID, field.TypeInt, value)
	}
	if alu.mutation.TenantIDCleared() {
		_spec.ClearField(auditlog.FieldTenantID, field.TypeInt)
	}
	if value, ok := alu.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedUserID(); ok {
		_spec.AddField(auditlog.FieldUserID, field.TypeInt, value)
	}
	if alu.mutation.UserIDCleared() {
		_spec.ClearField(auditlog.FieldUserID, field.TypeInt)
	}
	if value, ok := alu.mutation.RequestID(); ok {
		_spec.SetField(auditlog.FieldRequestID, field.TypeString, value)
	}
	if alu.mutation.RequestIDCleared() {
		_spec.ClearField(auditlog.FieldRequestID, field.TypeString)
	}
	if value, ok := alu.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if value, ok := alu.mutation.Resource(); ok {
		_spec.SetField(auditlog.FieldResource, field.TypeString, value)
	}
	if value, ok := alu.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := alu.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
	}
	if value, ok := alu.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
	}
	if value, ok := alu.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedStatusCode(); ok {
		_spec.AddField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := alu.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
	}
	if alu.mutation.RequestBodyCleared() {
		_spec.ClearField(auditlog.FieldRequestBody, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogMutation
}

// SetCreatedAt sets the "created_at" field.
func (aluo *AuditLogUpdateOne) SetCreatedAt(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableCreatedAt(t *time.Time) *AuditLogUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// SetTenantID sets the "tenant_id" field.
func (aluo *AuditLogUpdateOne) SetTenantID(i int) *AuditLogUpdateOne {
	aluo.mutation.ResetTenantID()
	aluo.mutation.SetTenantID(i)
	return aluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableTenantID(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetTenantID(*i)
	}
	return aluo
}

// AddTenantID adds i to the "tenant_id" field.
func (aluo *AuditLogUpdateOne) AddTenantID(i int) *AuditLogUpdateOne {
	aluo.mutation.AddTenantID(i)
	return aluo
}

// ClearTenantID clears the value of the "tenant_id" field.
func (aluo *AuditLogUpdateOne) ClearTenantID() *AuditLogUpdateOne {
	aluo.mutation.ClearTenantID()
	return aluo
}

// SetUserID sets the "user_id" field.
func (aluo *AuditLogUpdateOne) SetUserID(i int) *AuditLogUpdateOne {
	aluo.mutation.ResetUserID()
	aluo.mutation.SetUserID(i)
	return aluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableUserID(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetUserID(*i)
	}
	return aluo
}

// AddUserID adds i to the "user_id" field.
func (aluo *AuditLogUpdateOne) AddUserID(i int) *AuditLogUpdateOne {
	aluo.mutation.AddUserID(i)
	return aluo
}

// ClearUserID clears the value of the "user_id" field.
func (aluo *AuditLogUpdateOne) ClearUserID() *AuditLogUpdateOne {
	aluo.mutation.ClearUserID()
	return aluo
}

// SetRequestID sets the "request_id" field.
func (aluo *AuditLogUpdateOne) SetRequestID(s string) *AuditLogUpdateOne {
	aluo.mutation.SetRequestID(s)
	return aluo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableRequestID(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetRequestID(*s)
	}
	return aluo
}

// ClearRequestID clears the value of the "request_id" field.
func (aluo *AuditLogUpdateOne) ClearRequestID() *AuditLogUpdateOne {
	aluo.mutation.ClearRequestID()
	return aluo
}

// SetIP sets the "ip" field.
func (aluo *AuditLogUpdateOne) SetIP(s string) *AuditLogUpdateOne {
	aluo.mutation.SetIP(s)
	return aluo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableIP(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetIP(*s)
	}
	return aluo
}

// SetResource sets the "resource" field.
func (aluo *AuditLogUpdateOne) SetResource(s string) *AuditLogUpdateOne {
	aluo.mutation.SetResource(s)
	return aluo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableResource(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetResource(*s)
	}
	return aluo
}

// SetAction sets the "action" field.
func (aluo *AuditLogUpdateOne) SetAction(s string) *AuditLogUpdateOne {
	aluo.mutation.SetAction(s)
	return aluo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableAction(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetAction(*s)
	}
	return aluo
}

// SetPath sets the "path" field.
func (aluo *AuditLogUpdateOne) SetPath(s string) *AuditLogUpdateOne {
	aluo.mutation.SetPath(s)
	return aluo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillablePath(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetPath(*s)
	}
	return aluo
}

// SetMethod sets the "method" field.
func (aluo *AuditLogUpdateOne) SetMethod(s string) *AuditLogUpdateOne {
	aluo.mutation.SetMethod(s)
	return aluo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableMethod(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetMethod(*s)
	}
	return aluo
}

// SetStatusCode sets the "status_code" field.
func (aluo *AuditLogUpdateOne) SetStatusCode(i int) *AuditLogUpdateOne {
	aluo.mutation.ResetStatusCode()
	aluo.mutation.SetStatusCode(i)
	return aluo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableStatusCode(i *int) *AuditLogUpdateOne {
	if i != nil {
		aluo.SetStatusCode(*i)
	}
	return aluo
}

// AddStatusCode adds i to the "status_code" field.
func (aluo *AuditLogUpdateOne) AddStatusCode(i int) *AuditLogUpdateOne {
	aluo.mutation.AddStatusCode(i)
	return aluo
}

// SetRequestBody sets the "request_body" field.
func (aluo *AuditLogUpdateOne) SetRequestBody(s string) *AuditLogUpdateOne {
	aluo.mutation.SetRequestBody(s)
	return aluo
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableRequestBody(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetRequestBody(*s)
	}
	return aluo
}

// ClearRequestBody clears the value of the "request_body" field.
func (aluo *AuditLogUpdateOne) ClearRequestBody() *AuditLogUpdateOne {
	aluo.mutation.ClearRequestBody()
	return aluo
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedTenantID(); ok {
		_spec.AddField(auditlog.FieldTenantID, field.TypeInt, value)
	}
	if aluo.mutation.TenantIDCleared() {
		_spec.ClearField(auditlog.FieldTenantID, field.TypeInt)
	}
	if value, ok := aluo.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedUserID(); ok {
		_spec.AddField(auditlog.FieldUserID, field.TypeInt, value)
	}
	if aluo.mutation.UserIDCleared() {
		_spec.ClearField(auditlog.FieldUserID, field.TypeInt)
	}
	if value, ok := aluo.mutation.RequestID(); ok {
		_spec.SetField(auditlog.FieldRequestID, field.TypeString, value)
	}
	if aluo.mutation.RequestIDCleared() {
		_spec.ClearField(auditlog.FieldRequestID, field.TypeString)
	}
	if value, ok := aluo.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Resource(); ok {
		_spec.SetField(auditlog.FieldResource, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
	}
	if value, ok := aluo.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedStatusCode(); ok {
		_spec.AddField(auditlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
	}
	if aluo.mutation.RequestBodyCleared() {
		_spec.ClearField(auditlog.FieldRequestBody, field.TypeString)
	}
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
