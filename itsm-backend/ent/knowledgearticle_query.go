// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KnowledgeArticleQuery is the builder for querying KnowledgeArticle entities.
type KnowledgeArticleQuery struct {
	config
	ctx        *QueryContext
	order      []knowledgearticle.OrderOption
	inters     []Interceptor
	predicates []predicate.KnowledgeArticle
	withTenant *TenantQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KnowledgeArticleQuery builder.
func (kaq *KnowledgeArticleQuery) Where(ps ...predicate.KnowledgeArticle) *KnowledgeArticleQuery {
	kaq.predicates = append(kaq.predicates, ps...)
	return kaq
}

// Limit the number of records to be returned by this query.
func (kaq *KnowledgeArticleQuery) Limit(limit int) *KnowledgeArticleQuery {
	kaq.ctx.Limit = &limit
	return kaq
}

// Offset to start from.
func (kaq *KnowledgeArticleQuery) Offset(offset int) *KnowledgeArticleQuery {
	kaq.ctx.Offset = &offset
	return kaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kaq *KnowledgeArticleQuery) Unique(unique bool) *KnowledgeArticleQuery {
	kaq.ctx.Unique = &unique
	return kaq
}

// Order specifies how the records should be ordered.
func (kaq *KnowledgeArticleQuery) Order(o ...knowledgearticle.OrderOption) *KnowledgeArticleQuery {
	kaq.order = append(kaq.order, o...)
	return kaq
}

// QueryTenant chains the current query on the "tenant" edge.
func (kaq *KnowledgeArticleQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: kaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(knowledgearticle.Table, knowledgearticle.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, knowledgearticle.TenantTable, knowledgearticle.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(kaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KnowledgeArticle entity from the query.
// Returns a *NotFoundError when no KnowledgeArticle was found.
func (kaq *KnowledgeArticleQuery) First(ctx context.Context) (*KnowledgeArticle, error) {
	nodes, err := kaq.Limit(1).All(setContextOp(ctx, kaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{knowledgearticle.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) FirstX(ctx context.Context) *KnowledgeArticle {
	node, err := kaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KnowledgeArticle ID from the query.
// Returns a *NotFoundError when no KnowledgeArticle ID was found.
func (kaq *KnowledgeArticleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kaq.Limit(1).IDs(setContextOp(ctx, kaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{knowledgearticle.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) FirstIDX(ctx context.Context) int {
	id, err := kaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KnowledgeArticle entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KnowledgeArticle entity is found.
// Returns a *NotFoundError when no KnowledgeArticle entities are found.
func (kaq *KnowledgeArticleQuery) Only(ctx context.Context) (*KnowledgeArticle, error) {
	nodes, err := kaq.Limit(2).All(setContextOp(ctx, kaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{knowledgearticle.Label}
	default:
		return nil, &NotSingularError{knowledgearticle.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) OnlyX(ctx context.Context) *KnowledgeArticle {
	node, err := kaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KnowledgeArticle ID in the query.
// Returns a *NotSingularError when more than one KnowledgeArticle ID is found.
// Returns a *NotFoundError when no entities are found.
func (kaq *KnowledgeArticleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kaq.Limit(2).IDs(setContextOp(ctx, kaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{knowledgearticle.Label}
	default:
		err = &NotSingularError{knowledgearticle.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) OnlyIDX(ctx context.Context) int {
	id, err := kaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KnowledgeArticles.
func (kaq *KnowledgeArticleQuery) All(ctx context.Context) ([]*KnowledgeArticle, error) {
	ctx = setContextOp(ctx, kaq.ctx, ent.OpQueryAll)
	if err := kaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KnowledgeArticle, *KnowledgeArticleQuery]()
	return withInterceptors[[]*KnowledgeArticle](ctx, kaq, qr, kaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) AllX(ctx context.Context) []*KnowledgeArticle {
	nodes, err := kaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KnowledgeArticle IDs.
func (kaq *KnowledgeArticleQuery) IDs(ctx context.Context) (ids []int, err error) {
	if kaq.ctx.Unique == nil && kaq.path != nil {
		kaq.Unique(true)
	}
	ctx = setContextOp(ctx, kaq.ctx, ent.OpQueryIDs)
	if err = kaq.Select(knowledgearticle.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) IDsX(ctx context.Context) []int {
	ids, err := kaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kaq *KnowledgeArticleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, kaq.ctx, ent.OpQueryCount)
	if err := kaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, kaq, querierCount[*KnowledgeArticleQuery](), kaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) CountX(ctx context.Context) int {
	count, err := kaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kaq *KnowledgeArticleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, kaq.ctx, ent.OpQueryExist)
	switch _, err := kaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (kaq *KnowledgeArticleQuery) ExistX(ctx context.Context) bool {
	exist, err := kaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KnowledgeArticleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kaq *KnowledgeArticleQuery) Clone() *KnowledgeArticleQuery {
	if kaq == nil {
		return nil
	}
	return &KnowledgeArticleQuery{
		config:     kaq.config,
		ctx:        kaq.ctx.Clone(),
		order:      append([]knowledgearticle.OrderOption{}, kaq.order...),
		inters:     append([]Interceptor{}, kaq.inters...),
		predicates: append([]predicate.KnowledgeArticle{}, kaq.predicates...),
		withTenant: kaq.withTenant.Clone(),
		// clone intermediate query.
		sql:  kaq.sql.Clone(),
		path: kaq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (kaq *KnowledgeArticleQuery) WithTenant(opts ...func(*TenantQuery)) *KnowledgeArticleQuery {
	query := (&TenantClient{config: kaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kaq.withTenant = query
	return kaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KnowledgeArticle.Query().
//		GroupBy(knowledgearticle.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (kaq *KnowledgeArticleQuery) GroupBy(field string, fields ...string) *KnowledgeArticleGroupBy {
	kaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KnowledgeArticleGroupBy{build: kaq}
	grbuild.flds = &kaq.ctx.Fields
	grbuild.label = knowledgearticle.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.KnowledgeArticle.Query().
//		Select(knowledgearticle.FieldTitle).
//		Scan(ctx, &v)
func (kaq *KnowledgeArticleQuery) Select(fields ...string) *KnowledgeArticleSelect {
	kaq.ctx.Fields = append(kaq.ctx.Fields, fields...)
	sbuild := &KnowledgeArticleSelect{KnowledgeArticleQuery: kaq}
	sbuild.label = knowledgearticle.Label
	sbuild.flds, sbuild.scan = &kaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KnowledgeArticleSelect configured with the given aggregations.
func (kaq *KnowledgeArticleQuery) Aggregate(fns ...AggregateFunc) *KnowledgeArticleSelect {
	return kaq.Select().Aggregate(fns...)
}

func (kaq *KnowledgeArticleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range kaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, kaq); err != nil {
				return err
			}
		}
	}
	for _, f := range kaq.ctx.Fields {
		if !knowledgearticle.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kaq.path != nil {
		prev, err := kaq.path(ctx)
		if err != nil {
			return err
		}
		kaq.sql = prev
	}
	return nil
}

func (kaq *KnowledgeArticleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KnowledgeArticle, error) {
	var (
		nodes       = []*KnowledgeArticle{}
		_spec       = kaq.querySpec()
		loadedTypes = [1]bool{
			kaq.withTenant != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KnowledgeArticle).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KnowledgeArticle{config: kaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := kaq.withTenant; query != nil {
		if err := kaq.loadTenant(ctx, query, nodes, nil,
			func(n *KnowledgeArticle, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (kaq *KnowledgeArticleQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*KnowledgeArticle, init func(*KnowledgeArticle), assign func(*KnowledgeArticle, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*KnowledgeArticle)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (kaq *KnowledgeArticleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kaq.querySpec()
	_spec.Node.Columns = kaq.ctx.Fields
	if len(kaq.ctx.Fields) > 0 {
		_spec.Unique = kaq.ctx.Unique != nil && *kaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, kaq.driver, _spec)
}

func (kaq *KnowledgeArticleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(knowledgearticle.Table, knowledgearticle.Columns, sqlgraph.NewFieldSpec(knowledgearticle.FieldID, field.TypeInt))
	_spec.From = kaq.sql
	if unique := kaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if kaq.path != nil {
		_spec.Unique = true
	}
	if fields := kaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, knowledgearticle.FieldID)
		for i := range fields {
			if fields[i] != knowledgearticle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if kaq.withTenant != nil {
			_spec.Node.AddColumnOnce(knowledgearticle.FieldTenantID)
		}
	}
	if ps := kaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kaq *KnowledgeArticleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kaq.driver.Dialect())
	t1 := builder.Table(knowledgearticle.Table)
	columns := kaq.ctx.Fields
	if len(columns) == 0 {
		columns = knowledgearticle.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kaq.sql != nil {
		selector = kaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kaq.ctx.Unique != nil && *kaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range kaq.predicates {
		p(selector)
	}
	for _, p := range kaq.order {
		p(selector)
	}
	if offset := kaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KnowledgeArticleGroupBy is the group-by builder for KnowledgeArticle entities.
type KnowledgeArticleGroupBy struct {
	selector
	build *KnowledgeArticleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kagb *KnowledgeArticleGroupBy) Aggregate(fns ...AggregateFunc) *KnowledgeArticleGroupBy {
	kagb.fns = append(kagb.fns, fns...)
	return kagb
}

// Scan applies the selector query and scans the result into the given value.
func (kagb *KnowledgeArticleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kagb.build.ctx, ent.OpQueryGroupBy)
	if err := kagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KnowledgeArticleQuery, *KnowledgeArticleGroupBy](ctx, kagb.build, kagb, kagb.build.inters, v)
}

func (kagb *KnowledgeArticleGroupBy) sqlScan(ctx context.Context, root *KnowledgeArticleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kagb.fns))
	for _, fn := range kagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kagb.flds)+len(kagb.fns))
		for _, f := range *kagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KnowledgeArticleSelect is the builder for selecting fields of KnowledgeArticle entities.
type KnowledgeArticleSelect struct {
	*KnowledgeArticleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kas *KnowledgeArticleSelect) Aggregate(fns ...AggregateFunc) *KnowledgeArticleSelect {
	kas.fns = append(kas.fns, fns...)
	return kas
}

// Scan applies the selector query and scans the result into the given value.
func (kas *KnowledgeArticleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kas.ctx, ent.OpQuerySelect)
	if err := kas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KnowledgeArticleQuery, *KnowledgeArticleSelect](ctx, kas.KnowledgeArticleQuery, kas, kas.inters, v)
}

func (kas *KnowledgeArticleSelect) sqlScan(ctx context.Context, root *KnowledgeArticleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kas.fns))
	for _, fn := range kas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
