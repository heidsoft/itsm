// Code generated by ent, DO NOT EDIT.

package slaviolation

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the slaviolation type in the database.
	Label = "sla_violation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldTicketType holds the string denoting the ticket_type field in the database.
	FieldTicketType = "ticket_type"
	// FieldViolationType holds the string denoting the violation_type field in the database.
	FieldViolationType = "violation_type"
	// FieldSLADefinitionID holds the string denoting the sla_definition_id field in the database.
	FieldSLADefinitionID = "sla_definition_id"
	// FieldSLAName holds the string denoting the sla_name field in the database.
	FieldSLAName = "sla_name"
	// FieldExpectedTime holds the string denoting the expected_time field in the database.
	FieldExpectedTime = "expected_time"
	// FieldActualTime holds the string denoting the actual_time field in the database.
	FieldActualTime = "actual_time"
	// FieldOverdueMinutes holds the string denoting the overdue_minutes field in the database.
	FieldOverdueMinutes = "overdue_minutes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAssignedTo holds the string denoting the assigned_to field in the database.
	FieldAssignedTo = "assigned_to"
	// FieldViolationOccurredAt holds the string denoting the violation_occurred_at field in the database.
	FieldViolationOccurredAt = "violation_occurred_at"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// FieldResolutionNote holds the string denoting the resolution_note field in the database.
	FieldResolutionNote = "resolution_note"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the slaviolation in the database.
	Table = "sla_violations"
)

// Columns holds all SQL columns for slaviolation fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTicketID,
	FieldTicketType,
	FieldViolationType,
	FieldSLADefinitionID,
	FieldSLAName,
	FieldExpectedTime,
	FieldActualTime,
	FieldOverdueMinutes,
	FieldStatus,
	FieldAssignedTo,
	FieldViolationOccurredAt,
	FieldResolvedAt,
	FieldResolutionNote,
	FieldTenantID,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the SLAViolation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByTicketType orders the results by the ticket_type field.
func ByTicketType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketType, opts...).ToFunc()
}

// ByViolationType orders the results by the violation_type field.
func ByViolationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViolationType, opts...).ToFunc()
}

// BySLADefinitionID orders the results by the sla_definition_id field.
func BySLADefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSLADefinitionID, opts...).ToFunc()
}

// BySLAName orders the results by the sla_name field.
func BySLAName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSLAName, opts...).ToFunc()
}

// ByExpectedTime orders the results by the expected_time field.
func ByExpectedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedTime, opts...).ToFunc()
}

// ByActualTime orders the results by the actual_time field.
func ByActualTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActualTime, opts...).ToFunc()
}

// ByOverdueMinutes orders the results by the overdue_minutes field.
func ByOverdueMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverdueMinutes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAssignedTo orders the results by the assigned_to field.
func ByAssignedTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedTo, opts...).ToFunc()
}

// ByViolationOccurredAt orders the results by the violation_occurred_at field.
func ByViolationOccurredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViolationOccurredAt, opts...).ToFunc()
}

// ByResolvedAt orders the results by the resolved_at field.
func ByResolvedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedAt, opts...).ToFunc()
}

// ByResolutionNote orders the results by the resolution_note field.
func ByResolutionNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolutionNote, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
