// Code generated by ent, DO NOT EDIT.

package slaviolation

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the slaviolation type in the database.
	Label = "sla_violation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSLADefinitionID holds the string denoting the sla_definition_id field in the database.
	FieldSLADefinitionID = "sla_definition_id"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldViolationType holds the string denoting the violation_type field in the database.
	FieldViolationType = "violation_type"
	// FieldViolationTime holds the string denoting the violation_time field in the database.
	FieldViolationTime = "violation_time"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the slaviolation in the database.
	Table = "sla_violations"
)

// Columns holds all SQL columns for slaviolation fields.
var Columns = []string{
	FieldID,
	FieldSLADefinitionID,
	FieldTicketID,
	FieldViolationType,
	FieldViolationTime,
	FieldDescription,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SLADefinitionIDValidator is a validator for the "sla_definition_id" field. It is called by the builders before save.
	SLADefinitionIDValidator func(int) error
	// TicketIDValidator is a validator for the "ticket_id" field. It is called by the builders before save.
	TicketIDValidator func(int) error
	// ViolationTypeValidator is a validator for the "violation_type" field. It is called by the builders before save.
	ViolationTypeValidator func(string) error
	// DefaultViolationTime holds the default value on creation for the "violation_time" field.
	DefaultViolationTime func() time.Time
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SLAViolation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySLADefinitionID orders the results by the sla_definition_id field.
func BySLADefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSLADefinitionID, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByViolationType orders the results by the violation_type field.
func ByViolationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViolationType, opts...).ToFunc()
}

// ByViolationTime orders the results by the violation_time field.
func ByViolationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViolationTime, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
