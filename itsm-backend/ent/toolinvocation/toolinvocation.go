// Code generated by ent, DO NOT EDIT.

package toolinvocation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the toolinvocation type in the database.
	Label = "tool_invocation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldConversationID holds the string denoting the conversation_id field in the database.
	FieldConversationID = "conversation_id"
	// FieldToolName holds the string denoting the tool_name field in the database.
	FieldToolName = "tool_name"
	// FieldArguments holds the string denoting the arguments field in the database.
	FieldArguments = "arguments"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// FieldNeedsApproval holds the string denoting the needs_approval field in the database.
	FieldNeedsApproval = "needs_approval"
	// FieldApprovalState holds the string denoting the approval_state field in the database.
	FieldApprovalState = "approval_state"
	// FieldApprovalReason holds the string denoting the approval_reason field in the database.
	FieldApprovalReason = "approval_reason"
	// FieldApprovedBy holds the string denoting the approved_by field in the database.
	FieldApprovedBy = "approved_by"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// FieldDryRun holds the string denoting the dry_run field in the database.
	FieldDryRun = "dry_run"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// Table holds the table name of the toolinvocation in the database.
	Table = "tool_invocations"
	// ConversationTable is the table that holds the conversation relation/edge.
	ConversationTable = "tool_invocations"
	// ConversationInverseTable is the table name for the Conversation entity.
	// It exists in this package in order to avoid circular dependency with the "conversation" package.
	ConversationInverseTable = "conversations"
	// ConversationColumn is the table column denoting the conversation relation/edge.
	ConversationColumn = "conversation_id"
)

// Columns holds all SQL columns for toolinvocation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldConversationID,
	FieldToolName,
	FieldArguments,
	FieldResult,
	FieldStatus,
	FieldRequestID,
	FieldNeedsApproval,
	FieldApprovalState,
	FieldApprovalReason,
	FieldApprovedBy,
	FieldApprovedAt,
	FieldDryRun,
	FieldError,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultArguments holds the default value on creation for the "arguments" field.
	DefaultArguments string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultNeedsApproval holds the default value on creation for the "needs_approval" field.
	DefaultNeedsApproval bool
	// DefaultApprovalState holds the default value on creation for the "approval_state" field.
	DefaultApprovalState string
	// DefaultApprovalReason holds the default value on creation for the "approval_reason" field.
	DefaultApprovalReason string
	// DefaultDryRun holds the default value on creation for the "dry_run" field.
	DefaultDryRun bool
)

// OrderOption defines the ordering options for the ToolInvocation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConversationID orders the results by the conversation_id field.
func ByConversationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversationID, opts...).ToFunc()
}

// ByToolName orders the results by the tool_name field.
func ByToolName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToolName, opts...).ToFunc()
}

// ByArguments orders the results by the arguments field.
func ByArguments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArguments, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByNeedsApproval orders the results by the needs_approval field.
func ByNeedsApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedsApproval, opts...).ToFunc()
}

// ByApprovalState orders the results by the approval_state field.
func ByApprovalState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalState, opts...).ToFunc()
}

// ByApprovalReason orders the results by the approval_reason field.
func ByApprovalReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalReason, opts...).ToFunc()
}

// ByApprovedBy orders the results by the approved_by field.
func ByApprovedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedBy, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByDryRun orders the results by the dry_run field.
func ByDryRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDryRun, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByConversationField orders the results by conversation field.
func ByConversationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationStep(), sql.OrderByField(field, opts...))
	}
}
func newConversationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConversationTable, ConversationColumn),
	)
}
