// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/incident"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IncidentCreate is the builder for creating a Incident entity.
type IncidentCreate struct {
	config
	mutation *IncidentMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ic *IncidentCreate) SetTitle(s string) *IncidentCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IncidentCreate) SetDescription(s string) *IncidentCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableDescription(s *string) *IncidentCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *IncidentCreate) SetStatus(s string) *IncidentCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableStatus(s *string) *IncidentCreate {
	if s != nil {
		ic.SetStatus(*s)
	}
	return ic
}

// SetPriority sets the "priority" field.
func (ic *IncidentCreate) SetPriority(s string) *IncidentCreate {
	ic.mutation.SetPriority(s)
	return ic
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ic *IncidentCreate) SetNillablePriority(s *string) *IncidentCreate {
	if s != nil {
		ic.SetPriority(*s)
	}
	return ic
}

// SetIncidentNumber sets the "incident_number" field.
func (ic *IncidentCreate) SetIncidentNumber(s string) *IncidentCreate {
	ic.mutation.SetIncidentNumber(s)
	return ic
}

// SetReporterID sets the "reporter_id" field.
func (ic *IncidentCreate) SetReporterID(i int) *IncidentCreate {
	ic.mutation.SetReporterID(i)
	return ic
}

// SetAssigneeID sets the "assignee_id" field.
func (ic *IncidentCreate) SetAssigneeID(i int) *IncidentCreate {
	ic.mutation.SetAssigneeID(i)
	return ic
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAssigneeID(i *int) *IncidentCreate {
	if i != nil {
		ic.SetAssigneeID(*i)
	}
	return ic
}

// SetConfigurationItemID sets the "configuration_item_id" field.
func (ic *IncidentCreate) SetConfigurationItemID(i int) *IncidentCreate {
	ic.mutation.SetConfigurationItemID(i)
	return ic
}

// SetNillableConfigurationItemID sets the "configuration_item_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableConfigurationItemID(i *int) *IncidentCreate {
	if i != nil {
		ic.SetConfigurationItemID(*i)
	}
	return ic
}

// SetResolvedAt sets the "resolved_at" field.
func (ic *IncidentCreate) SetResolvedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetResolvedAt(t)
	return ic
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableResolvedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetResolvedAt(*t)
	}
	return ic
}

// SetClosedAt sets the "closed_at" field.
func (ic *IncidentCreate) SetClosedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetClosedAt(t)
	return ic
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableClosedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetClosedAt(*t)
	}
	return ic
}

// SetTenantID sets the "tenant_id" field.
func (ic *IncidentCreate) SetTenantID(i int) *IncidentCreate {
	ic.mutation.SetTenantID(i)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IncidentCreate) SetCreatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableCreatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IncidentCreate) SetUpdatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableUpdatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// Mutation returns the IncidentMutation object of the builder.
func (ic *IncidentCreate) Mutation() *IncidentMutation {
	return ic.mutation
}

// Save creates the Incident in the database.
func (ic *IncidentCreate) Save(ctx context.Context) (*Incident, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IncidentCreate) SaveX(ctx context.Context) *Incident {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IncidentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IncidentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IncidentCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := incident.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Priority(); !ok {
		v := incident.DefaultPriority
		ic.mutation.SetPriority(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := incident.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := incident.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IncidentCreate) check() error {
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Incident.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := incident.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Incident.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Incident.status"`)}
	}
	if _, ok := ic.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Incident.priority"`)}
	}
	if _, ok := ic.mutation.IncidentNumber(); !ok {
		return &ValidationError{Name: "incident_number", err: errors.New(`ent: missing required field "Incident.incident_number"`)}
	}
	if v, ok := ic.mutation.IncidentNumber(); ok {
		if err := incident.IncidentNumberValidator(v); err != nil {
			return &ValidationError{Name: "incident_number", err: fmt.Errorf(`ent: validator failed for field "Incident.incident_number": %w`, err)}
		}
	}
	if _, ok := ic.mutation.ReporterID(); !ok {
		return &ValidationError{Name: "reporter_id", err: errors.New(`ent: missing required field "Incident.reporter_id"`)}
	}
	if v, ok := ic.mutation.ReporterID(); ok {
		if err := incident.ReporterIDValidator(v); err != nil {
			return &ValidationError{Name: "reporter_id", err: fmt.Errorf(`ent: validator failed for field "Incident.reporter_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Incident.tenant_id"`)}
	}
	if v, ok := ic.mutation.TenantID(); ok {
		if err := incident.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Incident.tenant_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Incident.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Incident.updated_at"`)}
	}
	return nil
}

func (ic *IncidentCreate) sqlSave(ctx context.Context) (*Incident, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IncidentCreate) createSpec() (*Incident, *sqlgraph.CreateSpec) {
	var (
		_node = &Incident{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(incident.Table, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(incident.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(incident.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.Priority(); ok {
		_spec.SetField(incident.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := ic.mutation.IncidentNumber(); ok {
		_spec.SetField(incident.FieldIncidentNumber, field.TypeString, value)
		_node.IncidentNumber = value
	}
	if value, ok := ic.mutation.ReporterID(); ok {
		_spec.SetField(incident.FieldReporterID, field.TypeInt, value)
		_node.ReporterID = value
	}
	if value, ok := ic.mutation.AssigneeID(); ok {
		_spec.SetField(incident.FieldAssigneeID, field.TypeInt, value)
		_node.AssigneeID = value
	}
	if value, ok := ic.mutation.ConfigurationItemID(); ok {
		_spec.SetField(incident.FieldConfigurationItemID, field.TypeInt, value)
		_node.ConfigurationItemID = value
	}
	if value, ok := ic.mutation.ResolvedAt(); ok {
		_spec.SetField(incident.FieldResolvedAt, field.TypeTime, value)
		_node.ResolvedAt = value
	}
	if value, ok := ic.mutation.ClosedAt(); ok {
		_spec.SetField(incident.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if value, ok := ic.mutation.TenantID(); ok {
		_spec.SetField(incident.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(incident.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// IncidentCreateBulk is the builder for creating many Incident entities in bulk.
type IncidentCreateBulk struct {
	config
	err      error
	builders []*IncidentCreate
}

// Save creates the Incident entities in the database.
func (icb *IncidentCreateBulk) Save(ctx context.Context) ([]*Incident, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Incident, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IncidentCreateBulk) SaveX(ctx context.Context) []*Incident {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IncidentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IncidentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
