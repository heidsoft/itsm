// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/incident"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IncidentCreate is the builder for creating a Incident entity.
type IncidentCreate struct {
	config
	mutation *IncidentMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ic *IncidentCreate) SetTitle(s string) *IncidentCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *IncidentCreate) SetDescription(s string) *IncidentCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableDescription(s *string) *IncidentCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *IncidentCreate) SetStatus(i incident.Status) *IncidentCreate {
	ic.mutation.SetStatus(i)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableStatus(i *incident.Status) *IncidentCreate {
	if i != nil {
		ic.SetStatus(*i)
	}
	return ic
}

// SetPriority sets the "priority" field.
func (ic *IncidentCreate) SetPriority(i incident.Priority) *IncidentCreate {
	ic.mutation.SetPriority(i)
	return ic
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ic *IncidentCreate) SetNillablePriority(i *incident.Priority) *IncidentCreate {
	if i != nil {
		ic.SetPriority(*i)
	}
	return ic
}

// SetSource sets the "source" field.
func (ic *IncidentCreate) SetSource(i incident.Source) *IncidentCreate {
	ic.mutation.SetSource(i)
	return ic
}

// SetType sets the "type" field.
func (ic *IncidentCreate) SetType(i incident.Type) *IncidentCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetIncidentNumber sets the "incident_number" field.
func (ic *IncidentCreate) SetIncidentNumber(s string) *IncidentCreate {
	ic.mutation.SetIncidentNumber(s)
	return ic
}

// SetIsMajorIncident sets the "is_major_incident" field.
func (ic *IncidentCreate) SetIsMajorIncident(b bool) *IncidentCreate {
	ic.mutation.SetIsMajorIncident(b)
	return ic
}

// SetNillableIsMajorIncident sets the "is_major_incident" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableIsMajorIncident(b *bool) *IncidentCreate {
	if b != nil {
		ic.SetIsMajorIncident(*b)
	}
	return ic
}

// SetReporterID sets the "reporter_id" field.
func (ic *IncidentCreate) SetReporterID(i int) *IncidentCreate {
	ic.mutation.SetReporterID(i)
	return ic
}

// SetAssigneeID sets the "assignee_id" field.
func (ic *IncidentCreate) SetAssigneeID(i int) *IncidentCreate {
	ic.mutation.SetAssigneeID(i)
	return ic
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAssigneeID(i *int) *IncidentCreate {
	if i != nil {
		ic.SetAssigneeID(*i)
	}
	return ic
}

// SetTenantID sets the "tenant_id" field.
func (ic *IncidentCreate) SetTenantID(i int) *IncidentCreate {
	ic.mutation.SetTenantID(i)
	return ic
}

// SetAlibabaCloudInstanceID sets the "alibaba_cloud_instance_id" field.
func (ic *IncidentCreate) SetAlibabaCloudInstanceID(s string) *IncidentCreate {
	ic.mutation.SetAlibabaCloudInstanceID(s)
	return ic
}

// SetNillableAlibabaCloudInstanceID sets the "alibaba_cloud_instance_id" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAlibabaCloudInstanceID(s *string) *IncidentCreate {
	if s != nil {
		ic.SetAlibabaCloudInstanceID(*s)
	}
	return ic
}

// SetAlibabaCloudRegion sets the "alibaba_cloud_region" field.
func (ic *IncidentCreate) SetAlibabaCloudRegion(s string) *IncidentCreate {
	ic.mutation.SetAlibabaCloudRegion(s)
	return ic
}

// SetNillableAlibabaCloudRegion sets the "alibaba_cloud_region" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAlibabaCloudRegion(s *string) *IncidentCreate {
	if s != nil {
		ic.SetAlibabaCloudRegion(*s)
	}
	return ic
}

// SetAlibabaCloudService sets the "alibaba_cloud_service" field.
func (ic *IncidentCreate) SetAlibabaCloudService(s string) *IncidentCreate {
	ic.mutation.SetAlibabaCloudService(s)
	return ic
}

// SetNillableAlibabaCloudService sets the "alibaba_cloud_service" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableAlibabaCloudService(s *string) *IncidentCreate {
	if s != nil {
		ic.SetAlibabaCloudService(*s)
	}
	return ic
}

// SetAlibabaCloudAlertData sets the "alibaba_cloud_alert_data" field.
func (ic *IncidentCreate) SetAlibabaCloudAlertData(m map[string]interface{}) *IncidentCreate {
	ic.mutation.SetAlibabaCloudAlertData(m)
	return ic
}

// SetAlibabaCloudMetrics sets the "alibaba_cloud_metrics" field.
func (ic *IncidentCreate) SetAlibabaCloudMetrics(m map[string]interface{}) *IncidentCreate {
	ic.mutation.SetAlibabaCloudMetrics(m)
	return ic
}

// SetSecurityEventType sets the "security_event_type" field.
func (ic *IncidentCreate) SetSecurityEventType(s string) *IncidentCreate {
	ic.mutation.SetSecurityEventType(s)
	return ic
}

// SetNillableSecurityEventType sets the "security_event_type" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableSecurityEventType(s *string) *IncidentCreate {
	if s != nil {
		ic.SetSecurityEventType(*s)
	}
	return ic
}

// SetSecurityEventSourceIP sets the "security_event_source_ip" field.
func (ic *IncidentCreate) SetSecurityEventSourceIP(s string) *IncidentCreate {
	ic.mutation.SetSecurityEventSourceIP(s)
	return ic
}

// SetNillableSecurityEventSourceIP sets the "security_event_source_ip" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableSecurityEventSourceIP(s *string) *IncidentCreate {
	if s != nil {
		ic.SetSecurityEventSourceIP(*s)
	}
	return ic
}

// SetSecurityEventTarget sets the "security_event_target" field.
func (ic *IncidentCreate) SetSecurityEventTarget(s string) *IncidentCreate {
	ic.mutation.SetSecurityEventTarget(s)
	return ic
}

// SetNillableSecurityEventTarget sets the "security_event_target" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableSecurityEventTarget(s *string) *IncidentCreate {
	if s != nil {
		ic.SetSecurityEventTarget(*s)
	}
	return ic
}

// SetSecurityEventDetails sets the "security_event_details" field.
func (ic *IncidentCreate) SetSecurityEventDetails(m map[string]interface{}) *IncidentCreate {
	ic.mutation.SetSecurityEventDetails(m)
	return ic
}

// SetDetectedAt sets the "detected_at" field.
func (ic *IncidentCreate) SetDetectedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetDetectedAt(t)
	return ic
}

// SetNillableDetectedAt sets the "detected_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableDetectedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetDetectedAt(*t)
	}
	return ic
}

// SetConfirmedAt sets the "confirmed_at" field.
func (ic *IncidentCreate) SetConfirmedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetConfirmedAt(t)
	return ic
}

// SetNillableConfirmedAt sets the "confirmed_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableConfirmedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetConfirmedAt(*t)
	}
	return ic
}

// SetResolvedAt sets the "resolved_at" field.
func (ic *IncidentCreate) SetResolvedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetResolvedAt(t)
	return ic
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableResolvedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetResolvedAt(*t)
	}
	return ic
}

// SetClosedAt sets the "closed_at" field.
func (ic *IncidentCreate) SetClosedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetClosedAt(t)
	return ic
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableClosedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetClosedAt(*t)
	}
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *IncidentCreate) SetCreatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableCreatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IncidentCreate) SetUpdatedAt(t time.Time) *IncidentCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IncidentCreate) SetNillableUpdatedAt(t *time.Time) *IncidentCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ic *IncidentCreate) SetTenant(t *Tenant) *IncidentCreate {
	return ic.SetTenantID(t.ID)
}

// SetReporter sets the "reporter" edge to the User entity.
func (ic *IncidentCreate) SetReporter(u *User) *IncidentCreate {
	return ic.SetReporterID(u.ID)
}

// SetAssignee sets the "assignee" edge to the User entity.
func (ic *IncidentCreate) SetAssignee(u *User) *IncidentCreate {
	return ic.SetAssigneeID(u.ID)
}

// AddAffectedConfigurationItemIDs adds the "affected_configuration_items" edge to the ConfigurationItem entity by IDs.
func (ic *IncidentCreate) AddAffectedConfigurationItemIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddAffectedConfigurationItemIDs(ids...)
	return ic
}

// AddAffectedConfigurationItems adds the "affected_configuration_items" edges to the ConfigurationItem entity.
func (ic *IncidentCreate) AddAffectedConfigurationItems(c ...*ConfigurationItem) *IncidentCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddAffectedConfigurationItemIDs(ids...)
}

// AddRelatedProblemIDs adds the "related_problems" edge to the Ticket entity by IDs.
func (ic *IncidentCreate) AddRelatedProblemIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddRelatedProblemIDs(ids...)
	return ic
}

// AddRelatedProblems adds the "related_problems" edges to the Ticket entity.
func (ic *IncidentCreate) AddRelatedProblems(t ...*Ticket) *IncidentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddRelatedProblemIDs(ids...)
}

// AddRelatedChangeIDs adds the "related_changes" edge to the Ticket entity by IDs.
func (ic *IncidentCreate) AddRelatedChangeIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddRelatedChangeIDs(ids...)
	return ic
}

// AddRelatedChanges adds the "related_changes" edges to the Ticket entity.
func (ic *IncidentCreate) AddRelatedChanges(t ...*Ticket) *IncidentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddRelatedChangeIDs(ids...)
}

// AddStatusLogIDs adds the "status_logs" edge to the StatusLog entity by IDs.
func (ic *IncidentCreate) AddStatusLogIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddStatusLogIDs(ids...)
	return ic
}

// AddStatusLogs adds the "status_logs" edges to the StatusLog entity.
func (ic *IncidentCreate) AddStatusLogs(s ...*StatusLog) *IncidentCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ic.AddStatusLogIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Ticket entity by IDs.
func (ic *IncidentCreate) AddCommentIDs(ids ...int) *IncidentCreate {
	ic.mutation.AddCommentIDs(ids...)
	return ic
}

// AddComments adds the "comments" edges to the Ticket entity.
func (ic *IncidentCreate) AddComments(t ...*Ticket) *IncidentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ic.AddCommentIDs(ids...)
}

// Mutation returns the IncidentMutation object of the builder.
func (ic *IncidentCreate) Mutation() *IncidentMutation {
	return ic.mutation
}

// Save creates the Incident in the database.
func (ic *IncidentCreate) Save(ctx context.Context) (*Incident, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IncidentCreate) SaveX(ctx context.Context) *Incident {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IncidentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IncidentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IncidentCreate) defaults() {
	if _, ok := ic.mutation.Status(); !ok {
		v := incident.DefaultStatus
		ic.mutation.SetStatus(v)
	}
	if _, ok := ic.mutation.Priority(); !ok {
		v := incident.DefaultPriority
		ic.mutation.SetPriority(v)
	}
	if _, ok := ic.mutation.IsMajorIncident(); !ok {
		v := incident.DefaultIsMajorIncident
		ic.mutation.SetIsMajorIncident(v)
	}
	if _, ok := ic.mutation.DetectedAt(); !ok {
		v := incident.DefaultDetectedAt()
		ic.mutation.SetDetectedAt(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := incident.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := incident.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IncidentCreate) check() error {
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Incident.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := incident.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Incident.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Incident.status"`)}
	}
	if v, ok := ic.mutation.Status(); ok {
		if err := incident.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Incident.status": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Incident.priority"`)}
	}
	if v, ok := ic.mutation.Priority(); ok {
		if err := incident.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Incident.priority": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Incident.source"`)}
	}
	if v, ok := ic.mutation.Source(); ok {
		if err := incident.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "Incident.source": %w`, err)}
		}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Incident.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := incident.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Incident.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.IncidentNumber(); !ok {
		return &ValidationError{Name: "incident_number", err: errors.New(`ent: missing required field "Incident.incident_number"`)}
	}
	if v, ok := ic.mutation.IncidentNumber(); ok {
		if err := incident.IncidentNumberValidator(v); err != nil {
			return &ValidationError{Name: "incident_number", err: fmt.Errorf(`ent: validator failed for field "Incident.incident_number": %w`, err)}
		}
	}
	if _, ok := ic.mutation.IsMajorIncident(); !ok {
		return &ValidationError{Name: "is_major_incident", err: errors.New(`ent: missing required field "Incident.is_major_incident"`)}
	}
	if _, ok := ic.mutation.ReporterID(); !ok {
		return &ValidationError{Name: "reporter_id", err: errors.New(`ent: missing required field "Incident.reporter_id"`)}
	}
	if v, ok := ic.mutation.ReporterID(); ok {
		if err := incident.ReporterIDValidator(v); err != nil {
			return &ValidationError{Name: "reporter_id", err: fmt.Errorf(`ent: validator failed for field "Incident.reporter_id": %w`, err)}
		}
	}
	if v, ok := ic.mutation.AssigneeID(); ok {
		if err := incident.AssigneeIDValidator(v); err != nil {
			return &ValidationError{Name: "assignee_id", err: fmt.Errorf(`ent: validator failed for field "Incident.assignee_id": %w`, err)}
		}
	}
	if _, ok := ic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Incident.tenant_id"`)}
	}
	if v, ok := ic.mutation.TenantID(); ok {
		if err := incident.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Incident.tenant_id": %w`, err)}
		}
	}
	if v, ok := ic.mutation.AlibabaCloudInstanceID(); ok {
		if err := incident.AlibabaCloudInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "alibaba_cloud_instance_id", err: fmt.Errorf(`ent: validator failed for field "Incident.alibaba_cloud_instance_id": %w`, err)}
		}
	}
	if v, ok := ic.mutation.AlibabaCloudRegion(); ok {
		if err := incident.AlibabaCloudRegionValidator(v); err != nil {
			return &ValidationError{Name: "alibaba_cloud_region", err: fmt.Errorf(`ent: validator failed for field "Incident.alibaba_cloud_region": %w`, err)}
		}
	}
	if v, ok := ic.mutation.AlibabaCloudService(); ok {
		if err := incident.AlibabaCloudServiceValidator(v); err != nil {
			return &ValidationError{Name: "alibaba_cloud_service", err: fmt.Errorf(`ent: validator failed for field "Incident.alibaba_cloud_service": %w`, err)}
		}
	}
	if v, ok := ic.mutation.SecurityEventType(); ok {
		if err := incident.SecurityEventTypeValidator(v); err != nil {
			return &ValidationError{Name: "security_event_type", err: fmt.Errorf(`ent: validator failed for field "Incident.security_event_type": %w`, err)}
		}
	}
	if v, ok := ic.mutation.SecurityEventSourceIP(); ok {
		if err := incident.SecurityEventSourceIPValidator(v); err != nil {
			return &ValidationError{Name: "security_event_source_ip", err: fmt.Errorf(`ent: validator failed for field "Incident.security_event_source_ip": %w`, err)}
		}
	}
	if v, ok := ic.mutation.SecurityEventTarget(); ok {
		if err := incident.SecurityEventTargetValidator(v); err != nil {
			return &ValidationError{Name: "security_event_target", err: fmt.Errorf(`ent: validator failed for field "Incident.security_event_target": %w`, err)}
		}
	}
	if _, ok := ic.mutation.DetectedAt(); !ok {
		return &ValidationError{Name: "detected_at", err: errors.New(`ent: missing required field "Incident.detected_at"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Incident.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Incident.updated_at"`)}
	}
	if len(ic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Incident.tenant"`)}
	}
	if len(ic.mutation.ReporterIDs()) == 0 {
		return &ValidationError{Name: "reporter", err: errors.New(`ent: missing required edge "Incident.reporter"`)}
	}
	return nil
}

func (ic *IncidentCreate) sqlSave(ctx context.Context) (*Incident, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IncidentCreate) createSpec() (*Incident, *sqlgraph.CreateSpec) {
	var (
		_node = &Incident{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(incident.Table, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(incident.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.SetField(incident.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ic.mutation.Priority(); ok {
		_spec.SetField(incident.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := ic.mutation.Source(); ok {
		_spec.SetField(incident.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(incident.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.IncidentNumber(); ok {
		_spec.SetField(incident.FieldIncidentNumber, field.TypeString, value)
		_node.IncidentNumber = value
	}
	if value, ok := ic.mutation.IsMajorIncident(); ok {
		_spec.SetField(incident.FieldIsMajorIncident, field.TypeBool, value)
		_node.IsMajorIncident = value
	}
	if value, ok := ic.mutation.AlibabaCloudInstanceID(); ok {
		_spec.SetField(incident.FieldAlibabaCloudInstanceID, field.TypeString, value)
		_node.AlibabaCloudInstanceID = value
	}
	if value, ok := ic.mutation.AlibabaCloudRegion(); ok {
		_spec.SetField(incident.FieldAlibabaCloudRegion, field.TypeString, value)
		_node.AlibabaCloudRegion = value
	}
	if value, ok := ic.mutation.AlibabaCloudService(); ok {
		_spec.SetField(incident.FieldAlibabaCloudService, field.TypeString, value)
		_node.AlibabaCloudService = value
	}
	if value, ok := ic.mutation.AlibabaCloudAlertData(); ok {
		_spec.SetField(incident.FieldAlibabaCloudAlertData, field.TypeJSON, value)
		_node.AlibabaCloudAlertData = value
	}
	if value, ok := ic.mutation.AlibabaCloudMetrics(); ok {
		_spec.SetField(incident.FieldAlibabaCloudMetrics, field.TypeJSON, value)
		_node.AlibabaCloudMetrics = value
	}
	if value, ok := ic.mutation.SecurityEventType(); ok {
		_spec.SetField(incident.FieldSecurityEventType, field.TypeString, value)
		_node.SecurityEventType = value
	}
	if value, ok := ic.mutation.SecurityEventSourceIP(); ok {
		_spec.SetField(incident.FieldSecurityEventSourceIP, field.TypeString, value)
		_node.SecurityEventSourceIP = value
	}
	if value, ok := ic.mutation.SecurityEventTarget(); ok {
		_spec.SetField(incident.FieldSecurityEventTarget, field.TypeString, value)
		_node.SecurityEventTarget = value
	}
	if value, ok := ic.mutation.SecurityEventDetails(); ok {
		_spec.SetField(incident.FieldSecurityEventDetails, field.TypeJSON, value)
		_node.SecurityEventDetails = value
	}
	if value, ok := ic.mutation.DetectedAt(); ok {
		_spec.SetField(incident.FieldDetectedAt, field.TypeTime, value)
		_node.DetectedAt = value
	}
	if value, ok := ic.mutation.ConfirmedAt(); ok {
		_spec.SetField(incident.FieldConfirmedAt, field.TypeTime, value)
		_node.ConfirmedAt = &value
	}
	if value, ok := ic.mutation.ResolvedAt(); ok {
		_spec.SetField(incident.FieldResolvedAt, field.TypeTime, value)
		_node.ResolvedAt = &value
	}
	if value, ok := ic.mutation.ClosedAt(); ok {
		_spec.SetField(incident.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = &value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(incident.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.TenantTable,
			Columns: []string{incident.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.ReporterTable,
			Columns: []string{incident.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReporterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   incident.AssigneeTable,
			Columns: []string{incident.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssigneeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.AffectedConfigurationItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.AffectedConfigurationItemsTable,
			Columns: []string{incident.AffectedConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.RelatedProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.RelatedProblemsTable,
			Columns: []string{incident.RelatedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.RelatedChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.RelatedChangesTable,
			Columns: []string{incident.RelatedChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.StatusLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.StatusLogsTable,
			Columns: []string{incident.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   incident.CommentsTable,
			Columns: []string{incident.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IncidentCreateBulk is the builder for creating many Incident entities in bulk.
type IncidentCreateBulk struct {
	config
	err      error
	builders []*IncidentCreate
}

// Save creates the Incident entities in the database.
func (icb *IncidentCreateBulk) Save(ctx context.Context) ([]*Incident, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Incident, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncidentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IncidentCreateBulk) SaveX(ctx context.Context) []*Incident {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IncidentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IncidentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
