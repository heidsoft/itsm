// Code generated by ent, DO NOT EDIT.

package processtask

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processtask type in the database.
	Label = "process_task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldTaskDefinitionKey holds the string denoting the task_definition_key field in the database.
	FieldTaskDefinitionKey = "task_definition_key"
	// FieldTaskName holds the string denoting the task_name field in the database.
	FieldTaskName = "task_name"
	// FieldTaskType holds the string denoting the task_type field in the database.
	FieldTaskType = "task_type"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldCandidateUsers holds the string denoting the candidate_users field in the database.
	FieldCandidateUsers = "candidate_users"
	// FieldCandidateGroups holds the string denoting the candidate_groups field in the database.
	FieldCandidateGroups = "candidate_groups"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldAssignedTime holds the string denoting the assigned_time field in the database.
	FieldAssignedTime = "assigned_time"
	// FieldStartedTime holds the string denoting the started_time field in the database.
	FieldStartedTime = "started_time"
	// FieldCompletedTime holds the string denoting the completed_time field in the database.
	FieldCompletedTime = "completed_time"
	// FieldFormKey holds the string denoting the form_key field in the database.
	FieldFormKey = "form_key"
	// FieldTaskVariables holds the string denoting the task_variables field in the database.
	FieldTaskVariables = "task_variables"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldParentTaskID holds the string denoting the parent_task_id field in the database.
	FieldParentTaskID = "parent_task_id"
	// FieldRootTaskID holds the string denoting the root_task_id field in the database.
	FieldRootTaskID = "root_task_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processtask in the database.
	Table = "process_tasks"
)

// Columns holds all SQL columns for processtask fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldProcessInstanceID,
	FieldProcessDefinitionKey,
	FieldTaskDefinitionKey,
	FieldTaskName,
	FieldTaskType,
	FieldAssignee,
	FieldCandidateUsers,
	FieldCandidateGroups,
	FieldStatus,
	FieldPriority,
	FieldDueDate,
	FieldCreatedTime,
	FieldAssignedTime,
	FieldStartedTime,
	FieldCompletedTime,
	FieldFormKey,
	FieldTaskVariables,
	FieldDescription,
	FieldParentTaskID,
	FieldRootTaskID,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TaskIDValidator is a validator for the "task_id" field. It is called by the builders before save.
	TaskIDValidator func(string) error
	// ProcessInstanceIDValidator is a validator for the "process_instance_id" field. It is called by the builders before save.
	ProcessInstanceIDValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// TaskDefinitionKeyValidator is a validator for the "task_definition_key" field. It is called by the builders before save.
	TaskDefinitionKeyValidator func(string) error
	// TaskNameValidator is a validator for the "task_name" field. It is called by the builders before save.
	TaskNameValidator func(string) error
	// DefaultTaskType holds the default value on creation for the "task_type" field.
	DefaultTaskType string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority string
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessTask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByTaskDefinitionKey orders the results by the task_definition_key field.
func ByTaskDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskDefinitionKey, opts...).ToFunc()
}

// ByTaskName orders the results by the task_name field.
func ByTaskName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskName, opts...).ToFunc()
}

// ByTaskType orders the results by the task_type field.
func ByTaskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskType, opts...).ToFunc()
}

// ByAssignee orders the results by the assignee field.
func ByAssignee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignee, opts...).ToFunc()
}

// ByCandidateUsers orders the results by the candidate_users field.
func ByCandidateUsers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateUsers, opts...).ToFunc()
}

// ByCandidateGroups orders the results by the candidate_groups field.
func ByCandidateGroups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandidateGroups, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByAssignedTime orders the results by the assigned_time field.
func ByAssignedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedTime, opts...).ToFunc()
}

// ByStartedTime orders the results by the started_time field.
func ByStartedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedTime, opts...).ToFunc()
}

// ByCompletedTime orders the results by the completed_time field.
func ByCompletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedTime, opts...).ToFunc()
}

// ByFormKey orders the results by the form_key field.
func ByFormKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormKey, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByParentTaskID orders the results by the parent_task_id field.
func ByParentTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentTaskID, opts...).ToFunc()
}

// ByRootTaskID orders the results by the root_task_id field.
func ByRootTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootTaskID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
