// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/knowledgearticle"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// KnowledgeArticle is the model entity for the KnowledgeArticle schema.
type KnowledgeArticle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 文章标题
	Title string `json:"title,omitempty"`
	// 文章内容
	Content string `json:"content,omitempty"`
	// 分类
	Category string `json:"category,omitempty"`
	// 标签
	Tags string `json:"tags,omitempty"`
	// 作者ID
	AuthorID int `json:"author_id,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 是否发布
	IsPublished bool `json:"is_published,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KnowledgeArticle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case knowledgearticle.FieldIsPublished:
			values[i] = new(sql.NullBool)
		case knowledgearticle.FieldID, knowledgearticle.FieldAuthorID, knowledgearticle.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case knowledgearticle.FieldTitle, knowledgearticle.FieldContent, knowledgearticle.FieldCategory, knowledgearticle.FieldTags:
			values[i] = new(sql.NullString)
		case knowledgearticle.FieldCreatedAt, knowledgearticle.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KnowledgeArticle fields.
func (ka *KnowledgeArticle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case knowledgearticle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ka.ID = int(value.Int64)
		case knowledgearticle.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ka.Title = value.String
			}
		case knowledgearticle.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ka.Content = value.String
			}
		case knowledgearticle.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ka.Category = value.String
			}
		case knowledgearticle.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				ka.Tags = value.String
			}
		case knowledgearticle.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				ka.AuthorID = int(value.Int64)
			}
		case knowledgearticle.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ka.TenantID = int(value.Int64)
			}
		case knowledgearticle.FieldIsPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_published", values[i])
			} else if value.Valid {
				ka.IsPublished = value.Bool
			}
		case knowledgearticle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ka.CreatedAt = value.Time
			}
		case knowledgearticle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ka.UpdatedAt = value.Time
			}
		default:
			ka.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KnowledgeArticle.
// This includes values selected through modifiers, order, etc.
func (ka *KnowledgeArticle) Value(name string) (ent.Value, error) {
	return ka.selectValues.Get(name)
}

// Update returns a builder for updating this KnowledgeArticle.
// Note that you need to call KnowledgeArticle.Unwrap() before calling this method if this KnowledgeArticle
// was returned from a transaction, and the transaction was committed or rolled back.
func (ka *KnowledgeArticle) Update() *KnowledgeArticleUpdateOne {
	return NewKnowledgeArticleClient(ka.config).UpdateOne(ka)
}

// Unwrap unwraps the KnowledgeArticle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ka *KnowledgeArticle) Unwrap() *KnowledgeArticle {
	_tx, ok := ka.config.driver.(*txDriver)
	if !ok {
		panic("ent: KnowledgeArticle is not a transactional entity")
	}
	ka.config.driver = _tx.drv
	return ka
}

// String implements the fmt.Stringer.
func (ka *KnowledgeArticle) String() string {
	var builder strings.Builder
	builder.WriteString("KnowledgeArticle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ka.ID))
	builder.WriteString("title=")
	builder.WriteString(ka.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ka.Content)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ka.Category)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(ka.Tags)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", ka.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ka.TenantID))
	builder.WriteString(", ")
	builder.WriteString("is_published=")
	builder.WriteString(fmt.Sprintf("%v", ka.IsPublished))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ka.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ka.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// KnowledgeArticles is a parsable slice of KnowledgeArticle.
type KnowledgeArticles []*KnowledgeArticle
