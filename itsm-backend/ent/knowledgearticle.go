// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// KnowledgeArticle is the model entity for the KnowledgeArticle schema.
type KnowledgeArticle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Views holds the value of the "views" field.
	Views int `json:"views,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KnowledgeArticleQuery when eager-loading is set.
	Edges        KnowledgeArticleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KnowledgeArticleEdges holds the relations/edges for other nodes in the graph.
type KnowledgeArticleEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KnowledgeArticleEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KnowledgeArticle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case knowledgearticle.FieldTags:
			values[i] = new([]byte)
		case knowledgearticle.FieldID, knowledgearticle.FieldViews, knowledgearticle.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case knowledgearticle.FieldTitle, knowledgearticle.FieldContent, knowledgearticle.FieldCategory, knowledgearticle.FieldStatus, knowledgearticle.FieldAuthor:
			values[i] = new(sql.NullString)
		case knowledgearticle.FieldCreatedAt, knowledgearticle.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KnowledgeArticle fields.
func (ka *KnowledgeArticle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case knowledgearticle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ka.ID = int(value.Int64)
		case knowledgearticle.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ka.Title = value.String
			}
		case knowledgearticle.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ka.Content = value.String
			}
		case knowledgearticle.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ka.Category = value.String
			}
		case knowledgearticle.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ka.Status = value.String
			}
		case knowledgearticle.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				ka.Author = value.String
			}
		case knowledgearticle.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				ka.Views = int(value.Int64)
			}
		case knowledgearticle.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ka.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case knowledgearticle.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ka.TenantID = int(value.Int64)
			}
		case knowledgearticle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ka.CreatedAt = value.Time
			}
		case knowledgearticle.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ka.UpdatedAt = value.Time
			}
		default:
			ka.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KnowledgeArticle.
// This includes values selected through modifiers, order, etc.
func (ka *KnowledgeArticle) Value(name string) (ent.Value, error) {
	return ka.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the KnowledgeArticle entity.
func (ka *KnowledgeArticle) QueryTenant() *TenantQuery {
	return NewKnowledgeArticleClient(ka.config).QueryTenant(ka)
}

// Update returns a builder for updating this KnowledgeArticle.
// Note that you need to call KnowledgeArticle.Unwrap() before calling this method if this KnowledgeArticle
// was returned from a transaction, and the transaction was committed or rolled back.
func (ka *KnowledgeArticle) Update() *KnowledgeArticleUpdateOne {
	return NewKnowledgeArticleClient(ka.config).UpdateOne(ka)
}

// Unwrap unwraps the KnowledgeArticle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ka *KnowledgeArticle) Unwrap() *KnowledgeArticle {
	_tx, ok := ka.config.driver.(*txDriver)
	if !ok {
		panic("ent: KnowledgeArticle is not a transactional entity")
	}
	ka.config.driver = _tx.drv
	return ka
}

// String implements the fmt.Stringer.
func (ka *KnowledgeArticle) String() string {
	var builder strings.Builder
	builder.WriteString("KnowledgeArticle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ka.ID))
	builder.WriteString("title=")
	builder.WriteString(ka.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ka.Content)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ka.Category)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ka.Status)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(ka.Author)
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", ka.Views))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", ka.Tags))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ka.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ka.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ka.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// KnowledgeArticles is a parsable slice of KnowledgeArticle.
type KnowledgeArticles []*KnowledgeArticle
