// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/processinstance"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessInstance is the model entity for the ProcessInstance schema.
type ProcessInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 流程实例ID，BPMN标准
	ProcessInstanceID string `json:"process_instance_id,omitempty"`
	// 业务键，关联业务实体
	BusinessKey string `json:"business_key,omitempty"`
	// 流程定义Key
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 流程定义ID
	ProcessDefinitionID string `json:"process_definition_id,omitempty"`
	// 实例状态：running, suspended, completed, terminated
	Status string `json:"status,omitempty"`
	// 当前活动ID
	CurrentActivityID string `json:"current_activity_id,omitempty"`
	// 当前活动名称
	CurrentActivityName string `json:"current_activity_name,omitempty"`
	// 流程变量
	Variables map[string]interface{} `json:"variables,omitempty"`
	// 开始时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime time.Time `json:"end_time,omitempty"`
	// 暂停时间
	SuspendedTime time.Time `json:"suspended_time,omitempty"`
	// 暂停原因
	SuspendedReason string `json:"suspended_reason,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 流程发起人
	Initiator string `json:"initiator,omitempty"`
	// 父流程实例ID
	ParentProcessInstanceID string `json:"parent_process_instance_id,omitempty"`
	// 根流程实例ID
	RootProcessInstanceID string `json:"root_process_instance_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processinstance.FieldVariables:
			values[i] = new([]byte)
		case processinstance.FieldID, processinstance.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processinstance.FieldProcessInstanceID, processinstance.FieldBusinessKey, processinstance.FieldProcessDefinitionKey, processinstance.FieldProcessDefinitionID, processinstance.FieldStatus, processinstance.FieldCurrentActivityID, processinstance.FieldCurrentActivityName, processinstance.FieldSuspendedReason, processinstance.FieldInitiator, processinstance.FieldParentProcessInstanceID, processinstance.FieldRootProcessInstanceID:
			values[i] = new(sql.NullString)
		case processinstance.FieldStartTime, processinstance.FieldEndTime, processinstance.FieldSuspendedTime, processinstance.FieldCreatedAt, processinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessInstance fields.
func (pi *ProcessInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case processinstance.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				pi.ProcessInstanceID = value.String
			}
		case processinstance.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				pi.BusinessKey = value.String
			}
		case processinstance.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionKey = value.String
			}
		case processinstance.FieldProcessDefinitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_id", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionID = value.String
			}
		case processinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pi.Status = value.String
			}
		case processinstance.FieldCurrentActivityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_activity_id", values[i])
			} else if value.Valid {
				pi.CurrentActivityID = value.String
			}
		case processinstance.FieldCurrentActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_activity_name", values[i])
			} else if value.Valid {
				pi.CurrentActivityName = value.String
			}
		case processinstance.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pi.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case processinstance.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				pi.StartTime = value.Time
			}
		case processinstance.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				pi.EndTime = value.Time
			}
		case processinstance.FieldSuspendedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field suspended_time", values[i])
			} else if value.Valid {
				pi.SuspendedTime = value.Time
			}
		case processinstance.FieldSuspendedReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suspended_reason", values[i])
			} else if value.Valid {
				pi.SuspendedReason = value.String
			}
		case processinstance.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pi.TenantID = int(value.Int64)
			}
		case processinstance.FieldInitiator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initiator", values[i])
			} else if value.Valid {
				pi.Initiator = value.String
			}
		case processinstance.FieldParentProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_process_instance_id", values[i])
			} else if value.Valid {
				pi.ParentProcessInstanceID = value.String
			}
		case processinstance.FieldRootProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_process_instance_id", values[i])
			} else if value.Valid {
				pi.RootProcessInstanceID = value.String
			}
		case processinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case processinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessInstance.
// This includes values selected through modifiers, order, etc.
func (pi *ProcessInstance) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessInstance.
// Note that you need to call ProcessInstance.Unwrap() before calling this method if this ProcessInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProcessInstance) Update() *ProcessInstanceUpdateOne {
	return NewProcessInstanceClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProcessInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProcessInstance) Unwrap() *ProcessInstance {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessInstance is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProcessInstance) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("process_instance_id=")
	builder.WriteString(pi.ProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(pi.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(pi.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_id=")
	builder.WriteString(pi.ProcessDefinitionID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pi.Status)
	builder.WriteString(", ")
	builder.WriteString("current_activity_id=")
	builder.WriteString(pi.CurrentActivityID)
	builder.WriteString(", ")
	builder.WriteString("current_activity_name=")
	builder.WriteString(pi.CurrentActivityName)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", pi.Variables))
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(pi.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(pi.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("suspended_time=")
	builder.WriteString(pi.SuspendedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("suspended_reason=")
	builder.WriteString(pi.SuspendedReason)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.TenantID))
	builder.WriteString(", ")
	builder.WriteString("initiator=")
	builder.WriteString(pi.Initiator)
	builder.WriteString(", ")
	builder.WriteString("parent_process_instance_id=")
	builder.WriteString(pi.ParentProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("root_process_instance_id=")
	builder.WriteString(pi.RootProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessInstances is a parsable slice of ProcessInstance.
type ProcessInstances []*ProcessInstance
