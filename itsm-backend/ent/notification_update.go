// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/notification"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NotificationUpdate) SetTitle(s string) *NotificationUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableTitle(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetTitle(*s)
	}
	return nu
}

// SetMessage sets the "message" field.
func (nu *NotificationUpdate) SetMessage(s string) *NotificationUpdate {
	nu.mutation.SetMessage(s)
	return nu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableMessage(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetMessage(*s)
	}
	return nu
}

// SetType sets the "type" field.
func (nu *NotificationUpdate) SetType(s string) *NotificationUpdate {
	nu.mutation.SetType(s)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableType(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetType(*s)
	}
	return nu
}

// SetRead sets the "read" field.
func (nu *NotificationUpdate) SetRead(b bool) *NotificationUpdate {
	nu.mutation.SetRead(b)
	return nu
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRead(b *bool) *NotificationUpdate {
	if b != nil {
		nu.SetRead(*b)
	}
	return nu
}

// SetActionURL sets the "action_url" field.
func (nu *NotificationUpdate) SetActionURL(s string) *NotificationUpdate {
	nu.mutation.SetActionURL(s)
	return nu
}

// SetNillableActionURL sets the "action_url" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableActionURL(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetActionURL(*s)
	}
	return nu
}

// ClearActionURL clears the value of the "action_url" field.
func (nu *NotificationUpdate) ClearActionURL() *NotificationUpdate {
	nu.mutation.ClearActionURL()
	return nu
}

// SetActionText sets the "action_text" field.
func (nu *NotificationUpdate) SetActionText(s string) *NotificationUpdate {
	nu.mutation.SetActionText(s)
	return nu
}

// SetNillableActionText sets the "action_text" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableActionText(s *string) *NotificationUpdate {
	if s != nil {
		nu.SetActionText(*s)
	}
	return nu
}

// ClearActionText clears the value of the "action_text" field.
func (nu *NotificationUpdate) ClearActionText() *NotificationUpdate {
	nu.mutation.ClearActionText()
	return nu
}

// SetUserID sets the "user_id" field.
func (nu *NotificationUpdate) SetUserID(i int) *NotificationUpdate {
	nu.mutation.ResetUserID()
	nu.mutation.SetUserID(i)
	return nu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableUserID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetUserID(*i)
	}
	return nu
}

// AddUserID adds i to the "user_id" field.
func (nu *NotificationUpdate) AddUserID(i int) *NotificationUpdate {
	nu.mutation.AddUserID(i)
	return nu
}

// SetTenantID sets the "tenant_id" field.
func (nu *NotificationUpdate) SetTenantID(i int) *NotificationUpdate {
	nu.mutation.ResetTenantID()
	nu.mutation.SetTenantID(i)
	return nu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableTenantID(i *int) *NotificationUpdate {
	if i != nil {
		nu.SetTenantID(*i)
	}
	return nu
}

// AddTenantID adds i to the "tenant_id" field.
func (nu *NotificationUpdate) AddTenantID(i int) *NotificationUpdate {
	nu.mutation.AddTenantID(i)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NotificationUpdate) SetCreatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableCreatedAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotificationUpdate) SetUpdatedAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotificationUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.Title(); ok {
		if err := notification.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Notification.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Message(); ok {
		if err := notification.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Notification.message": %w`, err)}
		}
	}
	if v, ok := nu.mutation.UserID(); ok {
		if err := notification.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Notification.user_id": %w`, err)}
		}
	}
	if v, ok := nu.mutation.TenantID(); ok {
		if err := notification.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Notification.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := nu.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeString, value)
	}
	if value, ok := nu.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nu.mutation.ActionURL(); ok {
		_spec.SetField(notification.FieldActionURL, field.TypeString, value)
	}
	if nu.mutation.ActionURLCleared() {
		_spec.ClearField(notification.FieldActionURL, field.TypeString)
	}
	if value, ok := nu.mutation.ActionText(); ok {
		_spec.SetField(notification.FieldActionText, field.TypeString, value)
	}
	if nu.mutation.ActionTextCleared() {
		_spec.ClearField(notification.FieldActionText, field.TypeString)
	}
	if value, ok := nu.mutation.UserID(); ok {
		_spec.SetField(notification.FieldUserID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedUserID(); ok {
		_spec.AddField(notification.FieldUserID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.TenantID(); ok {
		_spec.SetField(notification.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.AddedTenantID(); ok {
		_spec.AddField(notification.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetTitle sets the "title" field.
func (nuo *NotificationUpdateOne) SetTitle(s string) *NotificationUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableTitle(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetTitle(*s)
	}
	return nuo
}

// SetMessage sets the "message" field.
func (nuo *NotificationUpdateOne) SetMessage(s string) *NotificationUpdateOne {
	nuo.mutation.SetMessage(s)
	return nuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableMessage(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetMessage(*s)
	}
	return nuo
}

// SetType sets the "type" field.
func (nuo *NotificationUpdateOne) SetType(s string) *NotificationUpdateOne {
	nuo.mutation.SetType(s)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableType(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetType(*s)
	}
	return nuo
}

// SetRead sets the "read" field.
func (nuo *NotificationUpdateOne) SetRead(b bool) *NotificationUpdateOne {
	nuo.mutation.SetRead(b)
	return nuo
}

// SetNillableRead sets the "read" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRead(b *bool) *NotificationUpdateOne {
	if b != nil {
		nuo.SetRead(*b)
	}
	return nuo
}

// SetActionURL sets the "action_url" field.
func (nuo *NotificationUpdateOne) SetActionURL(s string) *NotificationUpdateOne {
	nuo.mutation.SetActionURL(s)
	return nuo
}

// SetNillableActionURL sets the "action_url" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableActionURL(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetActionURL(*s)
	}
	return nuo
}

// ClearActionURL clears the value of the "action_url" field.
func (nuo *NotificationUpdateOne) ClearActionURL() *NotificationUpdateOne {
	nuo.mutation.ClearActionURL()
	return nuo
}

// SetActionText sets the "action_text" field.
func (nuo *NotificationUpdateOne) SetActionText(s string) *NotificationUpdateOne {
	nuo.mutation.SetActionText(s)
	return nuo
}

// SetNillableActionText sets the "action_text" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableActionText(s *string) *NotificationUpdateOne {
	if s != nil {
		nuo.SetActionText(*s)
	}
	return nuo
}

// ClearActionText clears the value of the "action_text" field.
func (nuo *NotificationUpdateOne) ClearActionText() *NotificationUpdateOne {
	nuo.mutation.ClearActionText()
	return nuo
}

// SetUserID sets the "user_id" field.
func (nuo *NotificationUpdateOne) SetUserID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetUserID()
	nuo.mutation.SetUserID(i)
	return nuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableUserID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetUserID(*i)
	}
	return nuo
}

// AddUserID adds i to the "user_id" field.
func (nuo *NotificationUpdateOne) AddUserID(i int) *NotificationUpdateOne {
	nuo.mutation.AddUserID(i)
	return nuo
}

// SetTenantID sets the "tenant_id" field.
func (nuo *NotificationUpdateOne) SetTenantID(i int) *NotificationUpdateOne {
	nuo.mutation.ResetTenantID()
	nuo.mutation.SetTenantID(i)
	return nuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableTenantID(i *int) *NotificationUpdateOne {
	if i != nil {
		nuo.SetTenantID(*i)
	}
	return nuo
}

// AddTenantID adds i to the "tenant_id" field.
func (nuo *NotificationUpdateOne) AddTenantID(i int) *NotificationUpdateOne {
	nuo.mutation.AddTenantID(i)
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NotificationUpdateOne) SetCreatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableCreatedAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotificationUpdateOne) SetUpdatedAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotificationUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := notification.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.Title(); ok {
		if err := notification.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Notification.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Message(); ok {
		if err := notification.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Notification.message": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.UserID(); ok {
		if err := notification.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Notification.user_id": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.TenantID(); ok {
		if err := notification.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Notification.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.SetField(notification.FieldTitle, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Read(); ok {
		_spec.SetField(notification.FieldRead, field.TypeBool, value)
	}
	if value, ok := nuo.mutation.ActionURL(); ok {
		_spec.SetField(notification.FieldActionURL, field.TypeString, value)
	}
	if nuo.mutation.ActionURLCleared() {
		_spec.ClearField(notification.FieldActionURL, field.TypeString)
	}
	if value, ok := nuo.mutation.ActionText(); ok {
		_spec.SetField(notification.FieldActionText, field.TypeString, value)
	}
	if nuo.mutation.ActionTextCleared() {
		_spec.ClearField(notification.FieldActionText, field.TypeString)
	}
	if value, ok := nuo.mutation.UserID(); ok {
		_spec.SetField(notification.FieldUserID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedUserID(); ok {
		_spec.AddField(notification.FieldUserID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.TenantID(); ok {
		_spec.SetField(notification.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.AddedTenantID(); ok {
		_spec.AddField(notification.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(notification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notification.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
