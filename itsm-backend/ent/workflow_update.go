// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/workflow"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowUpdate is the builder for updating Workflow entities.
type WorkflowUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowMutation
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wu *WorkflowUpdate) Where(ps ...predicate.Workflow) *WorkflowUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetName sets the "name" field.
func (wu *WorkflowUpdate) SetName(s string) *WorkflowUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableName(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetType sets the "type" field.
func (wu *WorkflowUpdate) SetType(s string) *WorkflowUpdate {
	wu.mutation.SetType(s)
	return wu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableType(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetType(*s)
	}
	return wu
}

// SetDefinition sets the "definition" field.
func (wu *WorkflowUpdate) SetDefinition(m map[string]interface{}) *WorkflowUpdate {
	wu.mutation.SetDefinition(m)
	return wu
}

// SetStatus sets the "status" field.
func (wu *WorkflowUpdate) SetStatus(s string) *WorkflowUpdate {
	wu.mutation.SetStatus(s)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableStatus(s *string) *WorkflowUpdate {
	if s != nil {
		wu.SetStatus(*s)
	}
	return wu
}

// SetTenantID sets the "tenant_id" field.
func (wu *WorkflowUpdate) SetTenantID(i int) *WorkflowUpdate {
	wu.mutation.SetTenantID(i)
	return wu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableTenantID(i *int) *WorkflowUpdate {
	if i != nil {
		wu.SetTenantID(*i)
	}
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WorkflowUpdate) SetCreatedAt(t time.Time) *WorkflowUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WorkflowUpdate) SetNillableCreatedAt(t *time.Time) *WorkflowUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkflowUpdate) SetUpdatedAt(t time.Time) *WorkflowUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wu *WorkflowUpdate) SetTenant(t *Tenant) *WorkflowUpdate {
	return wu.SetTenantID(t.ID)
}

// AddFlowInstanceIDs adds the "flow_instances" edge to the FlowInstance entity by IDs.
func (wu *WorkflowUpdate) AddFlowInstanceIDs(ids ...int) *WorkflowUpdate {
	wu.mutation.AddFlowInstanceIDs(ids...)
	return wu
}

// AddFlowInstances adds the "flow_instances" edges to the FlowInstance entity.
func (wu *WorkflowUpdate) AddFlowInstances(f ...*FlowInstance) *WorkflowUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return wu.AddFlowInstanceIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wu *WorkflowUpdate) Mutation() *WorkflowMutation {
	return wu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wu *WorkflowUpdate) ClearTenant() *WorkflowUpdate {
	wu.mutation.ClearTenant()
	return wu
}

// ClearFlowInstances clears all "flow_instances" edges to the FlowInstance entity.
func (wu *WorkflowUpdate) ClearFlowInstances() *WorkflowUpdate {
	wu.mutation.ClearFlowInstances()
	return wu
}

// RemoveFlowInstanceIDs removes the "flow_instances" edge to FlowInstance entities by IDs.
func (wu *WorkflowUpdate) RemoveFlowInstanceIDs(ids ...int) *WorkflowUpdate {
	wu.mutation.RemoveFlowInstanceIDs(ids...)
	return wu
}

// RemoveFlowInstances removes "flow_instances" edges to FlowInstance entities.
func (wu *WorkflowUpdate) RemoveFlowInstances(f ...*FlowInstance) *WorkflowUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return wu.RemoveFlowInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkflowUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkflowUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkflowUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkflowUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkflowUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := workflow.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkflowUpdate) check() error {
	if v, ok := wu.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if v, ok := wu.mutation.GetType(); ok {
		if err := workflow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Workflow.type": %w`, err)}
		}
	}
	if wu.mutation.TenantCleared() && len(wu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workflow.tenant"`)
	}
	return nil
}

func (wu *WorkflowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeString, value)
	}
	if value, ok := wu.mutation.Definition(); ok {
		_spec.SetField(workflow.FieldDefinition, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(workflow.FieldStatus, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(workflow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.TenantTable,
			Columns: []string{workflow.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.TenantTable,
			Columns: []string{workflow.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.FlowInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedFlowInstancesIDs(); len(nodes) > 0 && !wu.mutation.FlowInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.FlowInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkflowUpdateOne is the builder for updating a single Workflow entity.
type WorkflowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowMutation
}

// SetName sets the "name" field.
func (wuo *WorkflowUpdateOne) SetName(s string) *WorkflowUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableName(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetType sets the "type" field.
func (wuo *WorkflowUpdateOne) SetType(s string) *WorkflowUpdateOne {
	wuo.mutation.SetType(s)
	return wuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableType(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetType(*s)
	}
	return wuo
}

// SetDefinition sets the "definition" field.
func (wuo *WorkflowUpdateOne) SetDefinition(m map[string]interface{}) *WorkflowUpdateOne {
	wuo.mutation.SetDefinition(m)
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WorkflowUpdateOne) SetStatus(s string) *WorkflowUpdateOne {
	wuo.mutation.SetStatus(s)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableStatus(s *string) *WorkflowUpdateOne {
	if s != nil {
		wuo.SetStatus(*s)
	}
	return wuo
}

// SetTenantID sets the "tenant_id" field.
func (wuo *WorkflowUpdateOne) SetTenantID(i int) *WorkflowUpdateOne {
	wuo.mutation.SetTenantID(i)
	return wuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableTenantID(i *int) *WorkflowUpdateOne {
	if i != nil {
		wuo.SetTenantID(*i)
	}
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WorkflowUpdateOne) SetCreatedAt(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WorkflowUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkflowUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkflowUpdateOne) SetUpdatedAt(t time.Time) *WorkflowUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wuo *WorkflowUpdateOne) SetTenant(t *Tenant) *WorkflowUpdateOne {
	return wuo.SetTenantID(t.ID)
}

// AddFlowInstanceIDs adds the "flow_instances" edge to the FlowInstance entity by IDs.
func (wuo *WorkflowUpdateOne) AddFlowInstanceIDs(ids ...int) *WorkflowUpdateOne {
	wuo.mutation.AddFlowInstanceIDs(ids...)
	return wuo
}

// AddFlowInstances adds the "flow_instances" edges to the FlowInstance entity.
func (wuo *WorkflowUpdateOne) AddFlowInstances(f ...*FlowInstance) *WorkflowUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return wuo.AddFlowInstanceIDs(ids...)
}

// Mutation returns the WorkflowMutation object of the builder.
func (wuo *WorkflowUpdateOne) Mutation() *WorkflowMutation {
	return wuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wuo *WorkflowUpdateOne) ClearTenant() *WorkflowUpdateOne {
	wuo.mutation.ClearTenant()
	return wuo
}

// ClearFlowInstances clears all "flow_instances" edges to the FlowInstance entity.
func (wuo *WorkflowUpdateOne) ClearFlowInstances() *WorkflowUpdateOne {
	wuo.mutation.ClearFlowInstances()
	return wuo
}

// RemoveFlowInstanceIDs removes the "flow_instances" edge to FlowInstance entities by IDs.
func (wuo *WorkflowUpdateOne) RemoveFlowInstanceIDs(ids ...int) *WorkflowUpdateOne {
	wuo.mutation.RemoveFlowInstanceIDs(ids...)
	return wuo
}

// RemoveFlowInstances removes "flow_instances" edges to FlowInstance entities.
func (wuo *WorkflowUpdateOne) RemoveFlowInstances(f ...*FlowInstance) *WorkflowUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return wuo.RemoveFlowInstanceIDs(ids...)
}

// Where appends a list predicates to the WorkflowUpdate builder.
func (wuo *WorkflowUpdateOne) Where(ps ...predicate.Workflow) *WorkflowUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkflowUpdateOne) Select(field string, fields ...string) *WorkflowUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workflow entity.
func (wuo *WorkflowUpdateOne) Save(ctx context.Context) (*Workflow, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) SaveX(ctx context.Context) *Workflow {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkflowUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkflowUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkflowUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := workflow.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkflowUpdateOne) check() error {
	if v, ok := wuo.mutation.Name(); ok {
		if err := workflow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Workflow.name": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.GetType(); ok {
		if err := workflow.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Workflow.type": %w`, err)}
		}
	}
	if wuo.mutation.TenantCleared() && len(wuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workflow.tenant"`)
	}
	return nil
}

func (wuo *WorkflowUpdateOne) sqlSave(ctx context.Context) (_node *Workflow, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflow.Table, workflow.Columns, sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workflow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflow.FieldID)
		for _, f := range fields {
			if !workflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workflow.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.GetType(); ok {
		_spec.SetField(workflow.FieldType, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Definition(); ok {
		_spec.SetField(workflow.FieldDefinition, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(workflow.FieldStatus, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(workflow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.TenantTable,
			Columns: []string{workflow.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflow.TenantTable,
			Columns: []string{workflow.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.FlowInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedFlowInstancesIDs(); len(nodes) > 0 && !wuo.mutation.FlowInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.FlowInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workflow.FlowInstancesTable,
			Columns: []string{workflow.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workflow{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
