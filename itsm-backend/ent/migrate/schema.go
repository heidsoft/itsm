// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ApprovalLogsColumns holds the columns for the "approval_logs" table.
	ApprovalLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "approved", "rejected", "skipped"}, Default: "pending"},
		{Name: "step_order", Type: field.TypeInt},
		{Name: "step_name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "approved_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "ticket_id", Type: field.TypeInt},
		{Name: "approver_id", Type: field.TypeInt},
	}
	// ApprovalLogsTable holds the schema information for the "approval_logs" table.
	ApprovalLogsTable = &schema.Table{
		Name:       "approval_logs",
		Columns:    ApprovalLogsColumns,
		PrimaryKey: []*schema.Column{ApprovalLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "approval_logs_tickets_approval_logs",
				Columns:    []*schema.Column{ApprovalLogsColumns[8]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "approval_logs_users_approval_logs",
				Columns:    []*schema.Column{ApprovalLogsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "approvallog_ticket_id",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[8]},
			},
			{
				Name:    "approvallog_approver_id",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[9]},
			},
			{
				Name:    "approvallog_status",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[2]},
			},
			{
				Name:    "approvallog_step_order",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[3]},
			},
			{
				Name:    "approvallog_ticket_id_step_order",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[8], ApprovalLogsColumns[3]},
			},
			{
				Name:    "approvallog_approver_id_status",
				Unique:  false,
				Columns: []*schema.Column{ApprovalLogsColumns[9], ApprovalLogsColumns[2]},
			},
		},
	}
	// FlowInstancesColumns holds the columns for the "flow_instances" table.
	FlowInstancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "flow_definition_id", Type: field.TypeString, Size: 100},
		{Name: "flow_name", Type: field.TypeString, Size: 200},
		{Name: "flow_version", Type: field.TypeString, Nullable: true, Size: 20, Default: "1.0"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "completed", "terminated", "suspended"}, Default: "active"},
		{Name: "current_step", Type: field.TypeInt, Default: 1},
		{Name: "total_steps", Type: field.TypeInt},
		{Name: "step_config", Type: field.TypeJSON, Nullable: true},
		{Name: "variables", Type: field.TypeJSON, Nullable: true},
		{Name: "execution_history", Type: field.TypeJSON, Nullable: true},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "ticket_id", Type: field.TypeInt, Unique: true},
	}
	// FlowInstancesTable holds the schema information for the "flow_instances" table.
	FlowInstancesTable = &schema.Table{
		Name:       "flow_instances",
		Columns:    FlowInstancesColumns,
		PrimaryKey: []*schema.Column{FlowInstancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "flow_instances_tickets_flow_instance",
				Columns:    []*schema.Column{FlowInstancesColumns[13]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "flowinstance_ticket_id",
				Unique:  false,
				Columns: []*schema.Column{FlowInstancesColumns[13]},
			},
			{
				Name:    "flowinstance_status",
				Unique:  false,
				Columns: []*schema.Column{FlowInstancesColumns[4]},
			},
			{
				Name:    "flowinstance_flow_definition_id",
				Unique:  false,
				Columns: []*schema.Column{FlowInstancesColumns[1]},
			},
			{
				Name:    "flowinstance_current_step",
				Unique:  false,
				Columns: []*schema.Column{FlowInstancesColumns[5]},
			},
			{
				Name:    "flowinstance_flow_definition_id_status",
				Unique:  false,
				Columns: []*schema.Column{FlowInstancesColumns[1], FlowInstancesColumns[4]},
			},
		},
	}
	// ServiceCatalogsColumns holds the columns for the "service_catalogs" table.
	ServiceCatalogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "category", Type: field.TypeString, Size: 100},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "delivery_time", Type: field.TypeString, Size: 50},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"enabled", "disabled"}, Default: "enabled"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// ServiceCatalogsTable holds the schema information for the "service_catalogs" table.
	ServiceCatalogsTable = &schema.Table{
		Name:       "service_catalogs",
		Columns:    ServiceCatalogsColumns,
		PrimaryKey: []*schema.Column{ServiceCatalogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_catalogs_tenants_service_catalogs",
				Columns:    []*schema.Column{ServiceCatalogsColumns[8]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "servicecatalog_category",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[2]},
			},
			{
				Name:    "servicecatalog_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[5]},
			},
			{
				Name:    "servicecatalog_created_at",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[6]},
			},
			{
				Name:    "servicecatalog_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[8]},
			},
			{
				Name:    "servicecatalog_tenant_id_category",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[8], ServiceCatalogsColumns[2]},
			},
			{
				Name:    "servicecatalog_category_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceCatalogsColumns[2], ServiceCatalogsColumns[5]},
			},
		},
	}
	// ServiceRequestsColumns holds the columns for the "service_requests" table.
	ServiceRequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "in_progress", "completed", "rejected"}, Default: "pending"},
		{Name: "reason", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "catalog_id", Type: field.TypeInt},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "requester_id", Type: field.TypeInt},
	}
	// ServiceRequestsTable holds the schema information for the "service_requests" table.
	ServiceRequestsTable = &schema.Table{
		Name:       "service_requests",
		Columns:    ServiceRequestsColumns,
		PrimaryKey: []*schema.Column{ServiceRequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_requests_service_catalogs_service_requests",
				Columns:    []*schema.Column{ServiceRequestsColumns[4]},
				RefColumns: []*schema.Column{ServiceCatalogsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "service_requests_tenants_service_requests",
				Columns:    []*schema.Column{ServiceRequestsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "service_requests_users_service_requests",
				Columns:    []*schema.Column{ServiceRequestsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "servicerequest_catalog_id",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[4]},
			},
			{
				Name:    "servicerequest_requester_id",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[6]},
			},
			{
				Name:    "servicerequest_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[1]},
			},
			{
				Name:    "servicerequest_created_at",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[3]},
			},
			{
				Name:    "servicerequest_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[5]},
			},
			{
				Name:    "servicerequest_tenant_id_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[5], ServiceRequestsColumns[1]},
			},
			{
				Name:    "servicerequest_tenant_id_requester_id",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[5], ServiceRequestsColumns[6]},
			},
			{
				Name:    "servicerequest_requester_id_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[6], ServiceRequestsColumns[1]},
			},
			{
				Name:    "servicerequest_catalog_id_status",
				Unique:  false,
				Columns: []*schema.Column{ServiceRequestsColumns[4], ServiceRequestsColumns[1]},
			},
		},
	}
	// StatusLogsColumns holds the columns for the "status_logs" table.
	StatusLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "from_status", Type: field.TypeString, Size: 50},
		{Name: "to_status", Type: field.TypeString, Size: 50},
		{Name: "reason", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "ticket_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// StatusLogsTable holds the schema information for the "status_logs" table.
	StatusLogsTable = &schema.Table{
		Name:       "status_logs",
		Columns:    StatusLogsColumns,
		PrimaryKey: []*schema.Column{StatusLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "status_logs_tickets_status_logs",
				Columns:    []*schema.Column{StatusLogsColumns[5]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "status_logs_users_status_logs",
				Columns:    []*schema.Column{StatusLogsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "statuslog_ticket_id",
				Unique:  false,
				Columns: []*schema.Column{StatusLogsColumns[5]},
			},
			{
				Name:    "statuslog_user_id",
				Unique:  false,
				Columns: []*schema.Column{StatusLogsColumns[6]},
			},
			{
				Name:    "statuslog_created_at",
				Unique:  false,
				Columns: []*schema.Column{StatusLogsColumns[4]},
			},
			{
				Name:    "statuslog_ticket_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{StatusLogsColumns[5], StatusLogsColumns[4]},
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "plan_name", Type: field.TypeString, Size: 50},
		{Name: "monthly_price", Type: field.TypeFloat64},
		{Name: "yearly_price", Type: field.TypeFloat64},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "expired", "canceled"}, Default: "active"},
		{Name: "starts_at", Type: field.TypeTime},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "features", Type: field.TypeJSON, Nullable: true},
		{Name: "quota", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_tenants_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[11]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "code", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "domain", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "suspended", "expired", "deleted"}, Default: "active"},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"trial", "standard", "professional", "enterprise"}, Default: "trial"},
		{Name: "settings", Type: field.TypeJSON, Nullable: true},
		{Name: "quota", Type: field.TypeJSON, Nullable: true},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tenant_code",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[2]},
			},
			{
				Name:    "tenant_status",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[4]},
			},
			{
				Name:    "tenant_type",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[5]},
			},
			{
				Name:    "tenant_domain",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[3]},
			},
			{
				Name:    "tenant_created_at",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[9]},
			},
			{
				Name:    "tenant_status_type",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[4], TenantsColumns[5]},
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"draft", "submitted", "in_progress", "pending", "approved", "rejected", "closed", "cancelled"}, Default: "draft"},
		{Name: "priority", Type: field.TypeEnum, Enums: []string{"low", "medium", "high", "critical"}, Default: "medium"},
		{Name: "form_fields", Type: field.TypeJSON, Nullable: true},
		{Name: "ticket_number", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "requester_id", Type: field.TypeInt},
		{Name: "assignee_id", Type: field.TypeInt, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_tenants_tickets",
				Columns:    []*schema.Column{TicketsColumns[9]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_users_submitted_tickets",
				Columns:    []*schema.Column{TicketsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tickets_users_assigned_tickets",
				Columns:    []*schema.Column{TicketsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "ticket_status",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[3]},
			},
			{
				Name:    "ticket_priority",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[4]},
			},
			{
				Name:    "ticket_requester_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[10]},
			},
			{
				Name:    "ticket_assignee_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[11]},
			},
			{
				Name:    "ticket_created_at",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[7]},
			},
			{
				Name:    "ticket_ticket_number",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[6]},
			},
			{
				Name:    "ticket_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[9]},
			},
			{
				Name:    "ticket_tenant_id_status",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[9], TicketsColumns[3]},
			},
			{
				Name:    "ticket_tenant_id_requester_id",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[9], TicketsColumns[10]},
			},
			{
				Name:    "ticket_status_priority",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[3], TicketsColumns[4]},
			},
			{
				Name:    "ticket_requester_id_status",
				Unique:  false,
				Columns: []*schema.Column{TicketsColumns[10], TicketsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "department", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "phone", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_tenants_users",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[2]},
			},
			{
				Name:    "user_username",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_department",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
			{
				Name:    "user_tenant_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[10]},
			},
			{
				Name:    "user_tenant_id_username",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[10], UsersColumns[1]},
			},
			{
				Name:    "user_tenant_id_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[10], UsersColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ApprovalLogsTable,
		FlowInstancesTable,
		ServiceCatalogsTable,
		ServiceRequestsTable,
		StatusLogsTable,
		SubscriptionsTable,
		TenantsTable,
		TicketsTable,
		UsersTable,
	}
)

func init() {
	ApprovalLogsTable.ForeignKeys[0].RefTable = TicketsTable
	ApprovalLogsTable.ForeignKeys[1].RefTable = UsersTable
	FlowInstancesTable.ForeignKeys[0].RefTable = TicketsTable
	ServiceCatalogsTable.ForeignKeys[0].RefTable = TenantsTable
	ServiceRequestsTable.ForeignKeys[0].RefTable = ServiceCatalogsTable
	ServiceRequestsTable.ForeignKeys[1].RefTable = TenantsTable
	ServiceRequestsTable.ForeignKeys[2].RefTable = UsersTable
	StatusLogsTable.ForeignKeys[0].RefTable = TicketsTable
	StatusLogsTable.ForeignKeys[1].RefTable = UsersTable
	SubscriptionsTable.ForeignKeys[0].RefTable = TenantsTable
	TicketsTable.ForeignKeys[0].RefTable = TenantsTable
	TicketsTable.ForeignKeys[1].RefTable = UsersTable
	TicketsTable.ForeignKeys[2].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = TenantsTable
}
