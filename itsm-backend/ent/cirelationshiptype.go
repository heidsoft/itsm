// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIRelationshipType is the model entity for the CIRelationshipType schema.
type CIRelationshipType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Direction holds the value of the "direction" field.
	Direction string `json:"direction,omitempty"`
	// Cardinality holds the value of the "cardinality" field.
	Cardinality string `json:"cardinality,omitempty"`
	// SourceCiTypes holds the value of the "source_ci_types" field.
	SourceCiTypes []string `json:"source_ci_types,omitempty"`
	// TargetCiTypes holds the value of the "target_ci_types" field.
	TargetCiTypes []string `json:"target_ci_types,omitempty"`
	// IsSystem holds the value of the "is_system" field.
	IsSystem bool `json:"is_system,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CIRelationshipTypeQuery when eager-loading is set.
	Edges                         CIRelationshipTypeEdges `json:"edges"`
	ci_type_allowed_relationships *int
	selectValues                  sql.SelectValues
}

// CIRelationshipTypeEdges holds the relations/edges for other nodes in the graph.
type CIRelationshipTypeEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Relationships holds the value of the relationships edge.
	Relationships []*CIRelationship `json:"relationships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIRelationshipTypeEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RelationshipsOrErr returns the Relationships value or an error if the edge
// was not loaded in eager-loading.
func (e CIRelationshipTypeEdges) RelationshipsOrErr() ([]*CIRelationship, error) {
	if e.loadedTypes[1] {
		return e.Relationships, nil
	}
	return nil, &NotLoadedError{edge: "relationships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIRelationshipType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cirelationshiptype.FieldSourceCiTypes, cirelationshiptype.FieldTargetCiTypes:
			values[i] = new([]byte)
		case cirelationshiptype.FieldIsSystem, cirelationshiptype.FieldIsActive:
			values[i] = new(sql.NullBool)
		case cirelationshiptype.FieldID, cirelationshiptype.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case cirelationshiptype.FieldName, cirelationshiptype.FieldDisplayName, cirelationshiptype.FieldDescription, cirelationshiptype.FieldDirection, cirelationshiptype.FieldCardinality:
			values[i] = new(sql.NullString)
		case cirelationshiptype.FieldCreatedAt, cirelationshiptype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cirelationshiptype.ForeignKeys[0]: // ci_type_allowed_relationships
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIRelationshipType fields.
func (crt *CIRelationshipType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cirelationshiptype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			crt.ID = int(value.Int64)
		case cirelationshiptype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				crt.Name = value.String
			}
		case cirelationshiptype.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				crt.DisplayName = value.String
			}
		case cirelationshiptype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				crt.Description = value.String
			}
		case cirelationshiptype.FieldDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field direction", values[i])
			} else if value.Valid {
				crt.Direction = value.String
			}
		case cirelationshiptype.FieldCardinality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cardinality", values[i])
			} else if value.Valid {
				crt.Cardinality = value.String
			}
		case cirelationshiptype.FieldSourceCiTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field source_ci_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &crt.SourceCiTypes); err != nil {
					return fmt.Errorf("unmarshal field source_ci_types: %w", err)
				}
			}
		case cirelationshiptype.FieldTargetCiTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field target_ci_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &crt.TargetCiTypes); err != nil {
					return fmt.Errorf("unmarshal field target_ci_types: %w", err)
				}
			}
		case cirelationshiptype.FieldIsSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_system", values[i])
			} else if value.Valid {
				crt.IsSystem = value.Bool
			}
		case cirelationshiptype.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				crt.IsActive = value.Bool
			}
		case cirelationshiptype.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				crt.TenantID = int(value.Int64)
			}
		case cirelationshiptype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				crt.CreatedAt = value.Time
			}
		case cirelationshiptype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				crt.UpdatedAt = value.Time
			}
		case cirelationshiptype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ci_type_allowed_relationships", value)
			} else if value.Valid {
				crt.ci_type_allowed_relationships = new(int)
				*crt.ci_type_allowed_relationships = int(value.Int64)
			}
		default:
			crt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIRelationshipType.
// This includes values selected through modifiers, order, etc.
func (crt *CIRelationshipType) Value(name string) (ent.Value, error) {
	return crt.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CIRelationshipType entity.
func (crt *CIRelationshipType) QueryTenant() *TenantQuery {
	return NewCIRelationshipTypeClient(crt.config).QueryTenant(crt)
}

// QueryRelationships queries the "relationships" edge of the CIRelationshipType entity.
func (crt *CIRelationshipType) QueryRelationships() *CIRelationshipQuery {
	return NewCIRelationshipTypeClient(crt.config).QueryRelationships(crt)
}

// Update returns a builder for updating this CIRelationshipType.
// Note that you need to call CIRelationshipType.Unwrap() before calling this method if this CIRelationshipType
// was returned from a transaction, and the transaction was committed or rolled back.
func (crt *CIRelationshipType) Update() *CIRelationshipTypeUpdateOne {
	return NewCIRelationshipTypeClient(crt.config).UpdateOne(crt)
}

// Unwrap unwraps the CIRelationshipType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (crt *CIRelationshipType) Unwrap() *CIRelationshipType {
	_tx, ok := crt.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIRelationshipType is not a transactional entity")
	}
	crt.config.driver = _tx.drv
	return crt
}

// String implements the fmt.Stringer.
func (crt *CIRelationshipType) String() string {
	var builder strings.Builder
	builder.WriteString("CIRelationshipType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", crt.ID))
	builder.WriteString("name=")
	builder.WriteString(crt.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(crt.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(crt.Description)
	builder.WriteString(", ")
	builder.WriteString("direction=")
	builder.WriteString(crt.Direction)
	builder.WriteString(", ")
	builder.WriteString("cardinality=")
	builder.WriteString(crt.Cardinality)
	builder.WriteString(", ")
	builder.WriteString("source_ci_types=")
	builder.WriteString(fmt.Sprintf("%v", crt.SourceCiTypes))
	builder.WriteString(", ")
	builder.WriteString("target_ci_types=")
	builder.WriteString(fmt.Sprintf("%v", crt.TargetCiTypes))
	builder.WriteString(", ")
	builder.WriteString("is_system=")
	builder.WriteString(fmt.Sprintf("%v", crt.IsSystem))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", crt.IsActive))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", crt.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(crt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(crt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CIRelationshipTypes is a parsable slice of CIRelationshipType.
type CIRelationshipTypes []*CIRelationshipType
