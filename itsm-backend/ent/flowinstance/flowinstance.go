// Code generated by ent, DO NOT EDIT.

package flowinstance

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the flowinstance type in the database.
	Label = "flow_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFlowDefinitionID holds the string denoting the flow_definition_id field in the database.
	FieldFlowDefinitionID = "flow_definition_id"
	// FieldFlowName holds the string denoting the flow_name field in the database.
	FieldFlowName = "flow_name"
	// FieldFlowVersion holds the string denoting the flow_version field in the database.
	FieldFlowVersion = "flow_version"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCurrentStep holds the string denoting the current_step field in the database.
	FieldCurrentStep = "current_step"
	// FieldTotalSteps holds the string denoting the total_steps field in the database.
	FieldTotalSteps = "total_steps"
	// FieldStepConfig holds the string denoting the step_config field in the database.
	FieldStepConfig = "step_config"
	// FieldVariables holds the string denoting the variables field in the database.
	FieldVariables = "variables"
	// FieldExecutionHistory holds the string denoting the execution_history field in the database.
	FieldExecutionHistory = "execution_history"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTicket holds the string denoting the ticket edge name in mutations.
	EdgeTicket = "ticket"
	// Table holds the table name of the flowinstance in the database.
	Table = "flow_instances"
	// TicketTable is the table that holds the ticket relation/edge.
	TicketTable = "flow_instances"
	// TicketInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketInverseTable = "tickets"
	// TicketColumn is the table column denoting the ticket relation/edge.
	TicketColumn = "ticket_id"
)

// Columns holds all SQL columns for flowinstance fields.
var Columns = []string{
	FieldID,
	FieldFlowDefinitionID,
	FieldFlowName,
	FieldFlowVersion,
	FieldStatus,
	FieldCurrentStep,
	FieldTotalSteps,
	FieldStepConfig,
	FieldVariables,
	FieldExecutionHistory,
	FieldTicketID,
	FieldStartedAt,
	FieldCompletedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "flow_instances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workflow_flow_instances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FlowDefinitionIDValidator is a validator for the "flow_definition_id" field. It is called by the builders before save.
	FlowDefinitionIDValidator func(string) error
	// FlowNameValidator is a validator for the "flow_name" field. It is called by the builders before save.
	FlowNameValidator func(string) error
	// DefaultFlowVersion holds the default value on creation for the "flow_version" field.
	DefaultFlowVersion string
	// FlowVersionValidator is a validator for the "flow_version" field. It is called by the builders before save.
	FlowVersionValidator func(string) error
	// DefaultCurrentStep holds the default value on creation for the "current_step" field.
	DefaultCurrentStep int
	// CurrentStepValidator is a validator for the "current_step" field. It is called by the builders before save.
	CurrentStepValidator func(int) error
	// TotalStepsValidator is a validator for the "total_steps" field. It is called by the builders before save.
	TotalStepsValidator func(int) error
	// TicketIDValidator is a validator for the "ticket_id" field. It is called by the builders before save.
	TicketIDValidator func(int) error
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive     Status = "active"
	StatusCompleted  Status = "completed"
	StatusTerminated Status = "terminated"
	StatusSuspended  Status = "suspended"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusCompleted, StatusTerminated, StatusSuspended:
		return nil
	default:
		return fmt.Errorf("flowinstance: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the FlowInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFlowDefinitionID orders the results by the flow_definition_id field.
func ByFlowDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowDefinitionID, opts...).ToFunc()
}

// ByFlowName orders the results by the flow_name field.
func ByFlowName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowName, opts...).ToFunc()
}

// ByFlowVersion orders the results by the flow_version field.
func ByFlowVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlowVersion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCurrentStep orders the results by the current_step field.
func ByCurrentStep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentStep, opts...).ToFunc()
}

// ByTotalSteps orders the results by the total_steps field.
func ByTotalSteps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalSteps, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTicketField orders the results by ticket field.
func ByTicketField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketStep(), sql.OrderByField(field, opts...))
	}
}
func newTicketStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TicketTable, TicketColumn),
	)
}
