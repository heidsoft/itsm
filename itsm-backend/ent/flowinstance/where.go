// Code generated by ent, DO NOT EDIT.

package flowinstance

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldID, id))
}

// FlowDefinitionID applies equality check predicate on the "flow_definition_id" field. It's identical to FlowDefinitionIDEQ.
func FlowDefinitionID(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowDefinitionID, v))
}

// FlowName applies equality check predicate on the "flow_name" field. It's identical to FlowNameEQ.
func FlowName(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowName, v))
}

// FlowVersion applies equality check predicate on the "flow_version" field. It's identical to FlowVersionEQ.
func FlowVersion(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowVersion, v))
}

// CurrentStep applies equality check predicate on the "current_step" field. It's identical to CurrentStepEQ.
func CurrentStep(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldCurrentStep, v))
}

// TotalSteps applies equality check predicate on the "total_steps" field. It's identical to TotalStepsEQ.
func TotalSteps(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldTotalSteps, v))
}

// TicketID applies equality check predicate on the "ticket_id" field. It's identical to TicketIDEQ.
func TicketID(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldTicketID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldCompletedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// FlowDefinitionIDEQ applies the EQ predicate on the "flow_definition_id" field.
func FlowDefinitionIDEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDNEQ applies the NEQ predicate on the "flow_definition_id" field.
func FlowDefinitionIDNEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDIn applies the In predicate on the "flow_definition_id" field.
func FlowDefinitionIDIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldFlowDefinitionID, vs...))
}

// FlowDefinitionIDNotIn applies the NotIn predicate on the "flow_definition_id" field.
func FlowDefinitionIDNotIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldFlowDefinitionID, vs...))
}

// FlowDefinitionIDGT applies the GT predicate on the "flow_definition_id" field.
func FlowDefinitionIDGT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDGTE applies the GTE predicate on the "flow_definition_id" field.
func FlowDefinitionIDGTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDLT applies the LT predicate on the "flow_definition_id" field.
func FlowDefinitionIDLT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDLTE applies the LTE predicate on the "flow_definition_id" field.
func FlowDefinitionIDLTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDContains applies the Contains predicate on the "flow_definition_id" field.
func FlowDefinitionIDContains(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContains(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDHasPrefix applies the HasPrefix predicate on the "flow_definition_id" field.
func FlowDefinitionIDHasPrefix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasPrefix(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDHasSuffix applies the HasSuffix predicate on the "flow_definition_id" field.
func FlowDefinitionIDHasSuffix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasSuffix(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDEqualFold applies the EqualFold predicate on the "flow_definition_id" field.
func FlowDefinitionIDEqualFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEqualFold(FieldFlowDefinitionID, v))
}

// FlowDefinitionIDContainsFold applies the ContainsFold predicate on the "flow_definition_id" field.
func FlowDefinitionIDContainsFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContainsFold(FieldFlowDefinitionID, v))
}

// FlowNameEQ applies the EQ predicate on the "flow_name" field.
func FlowNameEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowName, v))
}

// FlowNameNEQ applies the NEQ predicate on the "flow_name" field.
func FlowNameNEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldFlowName, v))
}

// FlowNameIn applies the In predicate on the "flow_name" field.
func FlowNameIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldFlowName, vs...))
}

// FlowNameNotIn applies the NotIn predicate on the "flow_name" field.
func FlowNameNotIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldFlowName, vs...))
}

// FlowNameGT applies the GT predicate on the "flow_name" field.
func FlowNameGT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldFlowName, v))
}

// FlowNameGTE applies the GTE predicate on the "flow_name" field.
func FlowNameGTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldFlowName, v))
}

// FlowNameLT applies the LT predicate on the "flow_name" field.
func FlowNameLT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldFlowName, v))
}

// FlowNameLTE applies the LTE predicate on the "flow_name" field.
func FlowNameLTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldFlowName, v))
}

// FlowNameContains applies the Contains predicate on the "flow_name" field.
func FlowNameContains(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContains(FieldFlowName, v))
}

// FlowNameHasPrefix applies the HasPrefix predicate on the "flow_name" field.
func FlowNameHasPrefix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasPrefix(FieldFlowName, v))
}

// FlowNameHasSuffix applies the HasSuffix predicate on the "flow_name" field.
func FlowNameHasSuffix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasSuffix(FieldFlowName, v))
}

// FlowNameEqualFold applies the EqualFold predicate on the "flow_name" field.
func FlowNameEqualFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEqualFold(FieldFlowName, v))
}

// FlowNameContainsFold applies the ContainsFold predicate on the "flow_name" field.
func FlowNameContainsFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContainsFold(FieldFlowName, v))
}

// FlowVersionEQ applies the EQ predicate on the "flow_version" field.
func FlowVersionEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldFlowVersion, v))
}

// FlowVersionNEQ applies the NEQ predicate on the "flow_version" field.
func FlowVersionNEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldFlowVersion, v))
}

// FlowVersionIn applies the In predicate on the "flow_version" field.
func FlowVersionIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldFlowVersion, vs...))
}

// FlowVersionNotIn applies the NotIn predicate on the "flow_version" field.
func FlowVersionNotIn(vs ...string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldFlowVersion, vs...))
}

// FlowVersionGT applies the GT predicate on the "flow_version" field.
func FlowVersionGT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldFlowVersion, v))
}

// FlowVersionGTE applies the GTE predicate on the "flow_version" field.
func FlowVersionGTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldFlowVersion, v))
}

// FlowVersionLT applies the LT predicate on the "flow_version" field.
func FlowVersionLT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldFlowVersion, v))
}

// FlowVersionLTE applies the LTE predicate on the "flow_version" field.
func FlowVersionLTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldFlowVersion, v))
}

// FlowVersionContains applies the Contains predicate on the "flow_version" field.
func FlowVersionContains(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContains(FieldFlowVersion, v))
}

// FlowVersionHasPrefix applies the HasPrefix predicate on the "flow_version" field.
func FlowVersionHasPrefix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasPrefix(FieldFlowVersion, v))
}

// FlowVersionHasSuffix applies the HasSuffix predicate on the "flow_version" field.
func FlowVersionHasSuffix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldHasSuffix(FieldFlowVersion, v))
}

// FlowVersionIsNil applies the IsNil predicate on the "flow_version" field.
func FlowVersionIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIsNull(FieldFlowVersion))
}

// FlowVersionNotNil applies the NotNil predicate on the "flow_version" field.
func FlowVersionNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotNull(FieldFlowVersion))
}

// FlowVersionEqualFold applies the EqualFold predicate on the "flow_version" field.
func FlowVersionEqualFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEqualFold(FieldFlowVersion, v))
}

// FlowVersionContainsFold applies the ContainsFold predicate on the "flow_version" field.
func FlowVersionContainsFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldContainsFold(FieldFlowVersion, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldStatus, vs...))
}

// CurrentStepEQ applies the EQ predicate on the "current_step" field.
func CurrentStepEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldCurrentStep, v))
}

// CurrentStepNEQ applies the NEQ predicate on the "current_step" field.
func CurrentStepNEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldCurrentStep, v))
}

// CurrentStepIn applies the In predicate on the "current_step" field.
func CurrentStepIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldCurrentStep, vs...))
}

// CurrentStepNotIn applies the NotIn predicate on the "current_step" field.
func CurrentStepNotIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldCurrentStep, vs...))
}

// CurrentStepGT applies the GT predicate on the "current_step" field.
func CurrentStepGT(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldCurrentStep, v))
}

// CurrentStepGTE applies the GTE predicate on the "current_step" field.
func CurrentStepGTE(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldCurrentStep, v))
}

// CurrentStepLT applies the LT predicate on the "current_step" field.
func CurrentStepLT(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldCurrentStep, v))
}

// CurrentStepLTE applies the LTE predicate on the "current_step" field.
func CurrentStepLTE(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldCurrentStep, v))
}

// TotalStepsEQ applies the EQ predicate on the "total_steps" field.
func TotalStepsEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldTotalSteps, v))
}

// TotalStepsNEQ applies the NEQ predicate on the "total_steps" field.
func TotalStepsNEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldTotalSteps, v))
}

// TotalStepsIn applies the In predicate on the "total_steps" field.
func TotalStepsIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldTotalSteps, vs...))
}

// TotalStepsNotIn applies the NotIn predicate on the "total_steps" field.
func TotalStepsNotIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldTotalSteps, vs...))
}

// TotalStepsGT applies the GT predicate on the "total_steps" field.
func TotalStepsGT(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldTotalSteps, v))
}

// TotalStepsGTE applies the GTE predicate on the "total_steps" field.
func TotalStepsGTE(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldTotalSteps, v))
}

// TotalStepsLT applies the LT predicate on the "total_steps" field.
func TotalStepsLT(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldTotalSteps, v))
}

// TotalStepsLTE applies the LTE predicate on the "total_steps" field.
func TotalStepsLTE(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldTotalSteps, v))
}

// StepConfigIsNil applies the IsNil predicate on the "step_config" field.
func StepConfigIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIsNull(FieldStepConfig))
}

// StepConfigNotNil applies the NotNil predicate on the "step_config" field.
func StepConfigNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotNull(FieldStepConfig))
}

// VariablesIsNil applies the IsNil predicate on the "variables" field.
func VariablesIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIsNull(FieldVariables))
}

// VariablesNotNil applies the NotNil predicate on the "variables" field.
func VariablesNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotNull(FieldVariables))
}

// ExecutionHistoryIsNil applies the IsNil predicate on the "execution_history" field.
func ExecutionHistoryIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIsNull(FieldExecutionHistory))
}

// ExecutionHistoryNotNil applies the NotNil predicate on the "execution_history" field.
func ExecutionHistoryNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotNull(FieldExecutionHistory))
}

// TicketIDEQ applies the EQ predicate on the "ticket_id" field.
func TicketIDEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldTicketID, v))
}

// TicketIDNEQ applies the NEQ predicate on the "ticket_id" field.
func TicketIDNEQ(v int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldTicketID, v))
}

// TicketIDIn applies the In predicate on the "ticket_id" field.
func TicketIDIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldTicketID, vs...))
}

// TicketIDNotIn applies the NotIn predicate on the "ticket_id" field.
func TicketIDNotIn(vs ...int) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldTicketID, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldStartedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotNull(FieldCompletedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FlowInstance {
	return predicate.FlowInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTicket applies the HasEdge predicate on the "ticket" edge.
func HasTicket() predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TicketTable, TicketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketWith applies the HasEdge predicate on the "ticket" edge with a given conditions (other predicates).
func HasTicketWith(preds ...predicate.Ticket) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := newTicketStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(sql.NotPredicates(p))
}
