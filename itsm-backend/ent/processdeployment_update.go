// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processdeployment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessDeploymentUpdate is the builder for updating ProcessDeployment entities.
type ProcessDeploymentUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessDeploymentMutation
}

// Where appends a list predicates to the ProcessDeploymentUpdate builder.
func (pdu *ProcessDeploymentUpdate) Where(ps ...predicate.ProcessDeployment) *ProcessDeploymentUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetDeploymentID sets the "deployment_id" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentID(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentID(s)
	return pdu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentID(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeploymentID(*s)
	}
	return pdu
}

// SetDeploymentName sets the "deployment_name" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentName(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentName(s)
	return pdu
}

// SetNillableDeploymentName sets the "deployment_name" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentName(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeploymentName(*s)
	}
	return pdu
}

// SetDeploymentSource sets the "deployment_source" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentSource(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentSource(s)
	return pdu
}

// SetNillableDeploymentSource sets the "deployment_source" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentSource(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeploymentSource(*s)
	}
	return pdu
}

// ClearDeploymentSource clears the value of the "deployment_source" field.
func (pdu *ProcessDeploymentUpdate) ClearDeploymentSource() *ProcessDeploymentUpdate {
	pdu.mutation.ClearDeploymentSource()
	return pdu
}

// SetDeploymentTime sets the "deployment_time" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentTime(t time.Time) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentTime(t)
	return pdu
}

// SetNillableDeploymentTime sets the "deployment_time" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentTime(t *time.Time) *ProcessDeploymentUpdate {
	if t != nil {
		pdu.SetDeploymentTime(*t)
	}
	return pdu
}

// SetDeployedBy sets the "deployed_by" field.
func (pdu *ProcessDeploymentUpdate) SetDeployedBy(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeployedBy(s)
	return pdu
}

// SetNillableDeployedBy sets the "deployed_by" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeployedBy(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeployedBy(*s)
	}
	return pdu
}

// ClearDeployedBy clears the value of the "deployed_by" field.
func (pdu *ProcessDeploymentUpdate) ClearDeployedBy() *ProcessDeploymentUpdate {
	pdu.mutation.ClearDeployedBy()
	return pdu
}

// SetDeploymentComment sets the "deployment_comment" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentComment(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentComment(s)
	return pdu
}

// SetNillableDeploymentComment sets the "deployment_comment" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentComment(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeploymentComment(*s)
	}
	return pdu
}

// ClearDeploymentComment clears the value of the "deployment_comment" field.
func (pdu *ProcessDeploymentUpdate) ClearDeploymentComment() *ProcessDeploymentUpdate {
	pdu.mutation.ClearDeploymentComment()
	return pdu
}

// SetIsActive sets the "is_active" field.
func (pdu *ProcessDeploymentUpdate) SetIsActive(b bool) *ProcessDeploymentUpdate {
	pdu.mutation.SetIsActive(b)
	return pdu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableIsActive(b *bool) *ProcessDeploymentUpdate {
	if b != nil {
		pdu.SetIsActive(*b)
	}
	return pdu
}

// SetDeploymentCategory sets the "deployment_category" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentCategory(s string) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentCategory(s)
	return pdu
}

// SetNillableDeploymentCategory sets the "deployment_category" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableDeploymentCategory(s *string) *ProcessDeploymentUpdate {
	if s != nil {
		pdu.SetDeploymentCategory(*s)
	}
	return pdu
}

// SetDeploymentMetadata sets the "deployment_metadata" field.
func (pdu *ProcessDeploymentUpdate) SetDeploymentMetadata(m map[string]interface{}) *ProcessDeploymentUpdate {
	pdu.mutation.SetDeploymentMetadata(m)
	return pdu
}

// ClearDeploymentMetadata clears the value of the "deployment_metadata" field.
func (pdu *ProcessDeploymentUpdate) ClearDeploymentMetadata() *ProcessDeploymentUpdate {
	pdu.mutation.ClearDeploymentMetadata()
	return pdu
}

// SetTenantID sets the "tenant_id" field.
func (pdu *ProcessDeploymentUpdate) SetTenantID(i int) *ProcessDeploymentUpdate {
	pdu.mutation.ResetTenantID()
	pdu.mutation.SetTenantID(i)
	return pdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableTenantID(i *int) *ProcessDeploymentUpdate {
	if i != nil {
		pdu.SetTenantID(*i)
	}
	return pdu
}

// AddTenantID adds i to the "tenant_id" field.
func (pdu *ProcessDeploymentUpdate) AddTenantID(i int) *ProcessDeploymentUpdate {
	pdu.mutation.AddTenantID(i)
	return pdu
}

// SetCreatedAt sets the "created_at" field.
func (pdu *ProcessDeploymentUpdate) SetCreatedAt(t time.Time) *ProcessDeploymentUpdate {
	pdu.mutation.SetCreatedAt(t)
	return pdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdu *ProcessDeploymentUpdate) SetNillableCreatedAt(t *time.Time) *ProcessDeploymentUpdate {
	if t != nil {
		pdu.SetCreatedAt(*t)
	}
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProcessDeploymentUpdate) SetUpdatedAt(t time.Time) *ProcessDeploymentUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// Mutation returns the ProcessDeploymentMutation object of the builder.
func (pdu *ProcessDeploymentUpdate) Mutation() *ProcessDeploymentMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcessDeploymentUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcessDeploymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcessDeploymentUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcessDeploymentUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProcessDeploymentUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := processdeployment.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProcessDeploymentUpdate) check() error {
	if v, ok := pdu.mutation.DeploymentID(); ok {
		if err := processdeployment.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_id": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.DeploymentName(); ok {
		if err := processdeployment.DeploymentNameValidator(v); err != nil {
			return &ValidationError{Name: "deployment_name", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_name": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.TenantID(); ok {
		if err := processdeployment.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pdu *ProcessDeploymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processdeployment.Table, processdeployment.Columns, sqlgraph.NewFieldSpec(processdeployment.FieldID, field.TypeInt))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.DeploymentID(); ok {
		_spec.SetField(processdeployment.FieldDeploymentID, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DeploymentName(); ok {
		_spec.SetField(processdeployment.FieldDeploymentName, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DeploymentSource(); ok {
		_spec.SetField(processdeployment.FieldDeploymentSource, field.TypeString, value)
	}
	if pdu.mutation.DeploymentSourceCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentSource, field.TypeString)
	}
	if value, ok := pdu.mutation.DeploymentTime(); ok {
		_spec.SetField(processdeployment.FieldDeploymentTime, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.DeployedBy(); ok {
		_spec.SetField(processdeployment.FieldDeployedBy, field.TypeString, value)
	}
	if pdu.mutation.DeployedByCleared() {
		_spec.ClearField(processdeployment.FieldDeployedBy, field.TypeString)
	}
	if value, ok := pdu.mutation.DeploymentComment(); ok {
		_spec.SetField(processdeployment.FieldDeploymentComment, field.TypeString, value)
	}
	if pdu.mutation.DeploymentCommentCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentComment, field.TypeString)
	}
	if value, ok := pdu.mutation.IsActive(); ok {
		_spec.SetField(processdeployment.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.DeploymentCategory(); ok {
		_spec.SetField(processdeployment.FieldDeploymentCategory, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DeploymentMetadata(); ok {
		_spec.SetField(processdeployment.FieldDeploymentMetadata, field.TypeJSON, value)
	}
	if pdu.mutation.DeploymentMetadataCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentMetadata, field.TypeJSON)
	}
	if value, ok := pdu.mutation.TenantID(); ok {
		_spec.SetField(processdeployment.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.AddedTenantID(); ok {
		_spec.AddField(processdeployment.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.CreatedAt(); ok {
		_spec.SetField(processdeployment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(processdeployment.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdeployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProcessDeploymentUpdateOne is the builder for updating a single ProcessDeployment entity.
type ProcessDeploymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessDeploymentMutation
}

// SetDeploymentID sets the "deployment_id" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentID(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentID(s)
	return pduo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentID(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeploymentID(*s)
	}
	return pduo
}

// SetDeploymentName sets the "deployment_name" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentName(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentName(s)
	return pduo
}

// SetNillableDeploymentName sets the "deployment_name" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentName(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeploymentName(*s)
	}
	return pduo
}

// SetDeploymentSource sets the "deployment_source" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentSource(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentSource(s)
	return pduo
}

// SetNillableDeploymentSource sets the "deployment_source" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentSource(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeploymentSource(*s)
	}
	return pduo
}

// ClearDeploymentSource clears the value of the "deployment_source" field.
func (pduo *ProcessDeploymentUpdateOne) ClearDeploymentSource() *ProcessDeploymentUpdateOne {
	pduo.mutation.ClearDeploymentSource()
	return pduo
}

// SetDeploymentTime sets the "deployment_time" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentTime(t time.Time) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentTime(t)
	return pduo
}

// SetNillableDeploymentTime sets the "deployment_time" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentTime(t *time.Time) *ProcessDeploymentUpdateOne {
	if t != nil {
		pduo.SetDeploymentTime(*t)
	}
	return pduo
}

// SetDeployedBy sets the "deployed_by" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeployedBy(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeployedBy(s)
	return pduo
}

// SetNillableDeployedBy sets the "deployed_by" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeployedBy(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeployedBy(*s)
	}
	return pduo
}

// ClearDeployedBy clears the value of the "deployed_by" field.
func (pduo *ProcessDeploymentUpdateOne) ClearDeployedBy() *ProcessDeploymentUpdateOne {
	pduo.mutation.ClearDeployedBy()
	return pduo
}

// SetDeploymentComment sets the "deployment_comment" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentComment(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentComment(s)
	return pduo
}

// SetNillableDeploymentComment sets the "deployment_comment" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentComment(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeploymentComment(*s)
	}
	return pduo
}

// ClearDeploymentComment clears the value of the "deployment_comment" field.
func (pduo *ProcessDeploymentUpdateOne) ClearDeploymentComment() *ProcessDeploymentUpdateOne {
	pduo.mutation.ClearDeploymentComment()
	return pduo
}

// SetIsActive sets the "is_active" field.
func (pduo *ProcessDeploymentUpdateOne) SetIsActive(b bool) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetIsActive(b)
	return pduo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableIsActive(b *bool) *ProcessDeploymentUpdateOne {
	if b != nil {
		pduo.SetIsActive(*b)
	}
	return pduo
}

// SetDeploymentCategory sets the "deployment_category" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentCategory(s string) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentCategory(s)
	return pduo
}

// SetNillableDeploymentCategory sets the "deployment_category" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableDeploymentCategory(s *string) *ProcessDeploymentUpdateOne {
	if s != nil {
		pduo.SetDeploymentCategory(*s)
	}
	return pduo
}

// SetDeploymentMetadata sets the "deployment_metadata" field.
func (pduo *ProcessDeploymentUpdateOne) SetDeploymentMetadata(m map[string]interface{}) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetDeploymentMetadata(m)
	return pduo
}

// ClearDeploymentMetadata clears the value of the "deployment_metadata" field.
func (pduo *ProcessDeploymentUpdateOne) ClearDeploymentMetadata() *ProcessDeploymentUpdateOne {
	pduo.mutation.ClearDeploymentMetadata()
	return pduo
}

// SetTenantID sets the "tenant_id" field.
func (pduo *ProcessDeploymentUpdateOne) SetTenantID(i int) *ProcessDeploymentUpdateOne {
	pduo.mutation.ResetTenantID()
	pduo.mutation.SetTenantID(i)
	return pduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableTenantID(i *int) *ProcessDeploymentUpdateOne {
	if i != nil {
		pduo.SetTenantID(*i)
	}
	return pduo
}

// AddTenantID adds i to the "tenant_id" field.
func (pduo *ProcessDeploymentUpdateOne) AddTenantID(i int) *ProcessDeploymentUpdateOne {
	pduo.mutation.AddTenantID(i)
	return pduo
}

// SetCreatedAt sets the "created_at" field.
func (pduo *ProcessDeploymentUpdateOne) SetCreatedAt(t time.Time) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetCreatedAt(t)
	return pduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pduo *ProcessDeploymentUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessDeploymentUpdateOne {
	if t != nil {
		pduo.SetCreatedAt(*t)
	}
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProcessDeploymentUpdateOne) SetUpdatedAt(t time.Time) *ProcessDeploymentUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// Mutation returns the ProcessDeploymentMutation object of the builder.
func (pduo *ProcessDeploymentUpdateOne) Mutation() *ProcessDeploymentMutation {
	return pduo.mutation
}

// Where appends a list predicates to the ProcessDeploymentUpdate builder.
func (pduo *ProcessDeploymentUpdateOne) Where(ps ...predicate.ProcessDeployment) *ProcessDeploymentUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcessDeploymentUpdateOne) Select(field string, fields ...string) *ProcessDeploymentUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcessDeployment entity.
func (pduo *ProcessDeploymentUpdateOne) Save(ctx context.Context) (*ProcessDeployment, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcessDeploymentUpdateOne) SaveX(ctx context.Context) *ProcessDeployment {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcessDeploymentUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcessDeploymentUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProcessDeploymentUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := processdeployment.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProcessDeploymentUpdateOne) check() error {
	if v, ok := pduo.mutation.DeploymentID(); ok {
		if err := processdeployment.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_id": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.DeploymentName(); ok {
		if err := processdeployment.DeploymentNameValidator(v); err != nil {
			return &ValidationError{Name: "deployment_name", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_name": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.TenantID(); ok {
		if err := processdeployment.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pduo *ProcessDeploymentUpdateOne) sqlSave(ctx context.Context) (_node *ProcessDeployment, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processdeployment.Table, processdeployment.Columns, sqlgraph.NewFieldSpec(processdeployment.FieldID, field.TypeInt))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessDeployment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processdeployment.FieldID)
		for _, f := range fields {
			if !processdeployment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processdeployment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.DeploymentID(); ok {
		_spec.SetField(processdeployment.FieldDeploymentID, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DeploymentName(); ok {
		_spec.SetField(processdeployment.FieldDeploymentName, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DeploymentSource(); ok {
		_spec.SetField(processdeployment.FieldDeploymentSource, field.TypeString, value)
	}
	if pduo.mutation.DeploymentSourceCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentSource, field.TypeString)
	}
	if value, ok := pduo.mutation.DeploymentTime(); ok {
		_spec.SetField(processdeployment.FieldDeploymentTime, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.DeployedBy(); ok {
		_spec.SetField(processdeployment.FieldDeployedBy, field.TypeString, value)
	}
	if pduo.mutation.DeployedByCleared() {
		_spec.ClearField(processdeployment.FieldDeployedBy, field.TypeString)
	}
	if value, ok := pduo.mutation.DeploymentComment(); ok {
		_spec.SetField(processdeployment.FieldDeploymentComment, field.TypeString, value)
	}
	if pduo.mutation.DeploymentCommentCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentComment, field.TypeString)
	}
	if value, ok := pduo.mutation.IsActive(); ok {
		_spec.SetField(processdeployment.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.DeploymentCategory(); ok {
		_spec.SetField(processdeployment.FieldDeploymentCategory, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DeploymentMetadata(); ok {
		_spec.SetField(processdeployment.FieldDeploymentMetadata, field.TypeJSON, value)
	}
	if pduo.mutation.DeploymentMetadataCleared() {
		_spec.ClearField(processdeployment.FieldDeploymentMetadata, field.TypeJSON)
	}
	if value, ok := pduo.mutation.TenantID(); ok {
		_spec.SetField(processdeployment.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.AddedTenantID(); ok {
		_spec.AddField(processdeployment.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.CreatedAt(); ok {
		_spec.SetField(processdeployment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(processdeployment.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessDeployment{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdeployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
