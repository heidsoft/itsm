// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/slametrics"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLAMetricsUpdate is the builder for updating SLAMetrics entities.
type SLAMetricsUpdate struct {
	config
	hooks    []Hook
	mutation *SLAMetricsMutation
}

// Where appends a list predicates to the SLAMetricsUpdate builder.
func (smu *SLAMetricsUpdate) Where(ps ...predicate.SLAMetrics) *SLAMetricsUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdateTime sets the "update_time" field.
func (smu *SLAMetricsUpdate) SetUpdateTime(t time.Time) *SLAMetricsUpdate {
	smu.mutation.SetUpdateTime(t)
	return smu
}

// SetServiceType sets the "service_type" field.
func (smu *SLAMetricsUpdate) SetServiceType(s string) *SLAMetricsUpdate {
	smu.mutation.SetServiceType(s)
	return smu
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableServiceType(s *string) *SLAMetricsUpdate {
	if s != nil {
		smu.SetServiceType(*s)
	}
	return smu
}

// SetPriority sets the "priority" field.
func (smu *SLAMetricsUpdate) SetPriority(s string) *SLAMetricsUpdate {
	smu.mutation.SetPriority(s)
	return smu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillablePriority(s *string) *SLAMetricsUpdate {
	if s != nil {
		smu.SetPriority(*s)
	}
	return smu
}

// SetImpact sets the "impact" field.
func (smu *SLAMetricsUpdate) SetImpact(s string) *SLAMetricsUpdate {
	smu.mutation.SetImpact(s)
	return smu
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableImpact(s *string) *SLAMetricsUpdate {
	if s != nil {
		smu.SetImpact(*s)
	}
	return smu
}

// SetTotalTickets sets the "total_tickets" field.
func (smu *SLAMetricsUpdate) SetTotalTickets(i int) *SLAMetricsUpdate {
	smu.mutation.ResetTotalTickets()
	smu.mutation.SetTotalTickets(i)
	return smu
}

// SetNillableTotalTickets sets the "total_tickets" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableTotalTickets(i *int) *SLAMetricsUpdate {
	if i != nil {
		smu.SetTotalTickets(*i)
	}
	return smu
}

// AddTotalTickets adds i to the "total_tickets" field.
func (smu *SLAMetricsUpdate) AddTotalTickets(i int) *SLAMetricsUpdate {
	smu.mutation.AddTotalTickets(i)
	return smu
}

// SetMetSLATickets sets the "met_sla_tickets" field.
func (smu *SLAMetricsUpdate) SetMetSLATickets(i int) *SLAMetricsUpdate {
	smu.mutation.ResetMetSLATickets()
	smu.mutation.SetMetSLATickets(i)
	return smu
}

// SetNillableMetSLATickets sets the "met_sla_tickets" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableMetSLATickets(i *int) *SLAMetricsUpdate {
	if i != nil {
		smu.SetMetSLATickets(*i)
	}
	return smu
}

// AddMetSLATickets adds i to the "met_sla_tickets" field.
func (smu *SLAMetricsUpdate) AddMetSLATickets(i int) *SLAMetricsUpdate {
	smu.mutation.AddMetSLATickets(i)
	return smu
}

// SetViolatedSLATickets sets the "violated_sla_tickets" field.
func (smu *SLAMetricsUpdate) SetViolatedSLATickets(i int) *SLAMetricsUpdate {
	smu.mutation.ResetViolatedSLATickets()
	smu.mutation.SetViolatedSLATickets(i)
	return smu
}

// SetNillableViolatedSLATickets sets the "violated_sla_tickets" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableViolatedSLATickets(i *int) *SLAMetricsUpdate {
	if i != nil {
		smu.SetViolatedSLATickets(*i)
	}
	return smu
}

// AddViolatedSLATickets adds i to the "violated_sla_tickets" field.
func (smu *SLAMetricsUpdate) AddViolatedSLATickets(i int) *SLAMetricsUpdate {
	smu.mutation.AddViolatedSLATickets(i)
	return smu
}

// SetSLAComplianceRate sets the "sla_compliance_rate" field.
func (smu *SLAMetricsUpdate) SetSLAComplianceRate(f float64) *SLAMetricsUpdate {
	smu.mutation.ResetSLAComplianceRate()
	smu.mutation.SetSLAComplianceRate(f)
	return smu
}

// SetNillableSLAComplianceRate sets the "sla_compliance_rate" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableSLAComplianceRate(f *float64) *SLAMetricsUpdate {
	if f != nil {
		smu.SetSLAComplianceRate(*f)
	}
	return smu
}

// AddSLAComplianceRate adds f to the "sla_compliance_rate" field.
func (smu *SLAMetricsUpdate) AddSLAComplianceRate(f float64) *SLAMetricsUpdate {
	smu.mutation.AddSLAComplianceRate(f)
	return smu
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (smu *SLAMetricsUpdate) SetAvgResponseTime(f float64) *SLAMetricsUpdate {
	smu.mutation.ResetAvgResponseTime()
	smu.mutation.SetAvgResponseTime(f)
	return smu
}

// SetNillableAvgResponseTime sets the "avg_response_time" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableAvgResponseTime(f *float64) *SLAMetricsUpdate {
	if f != nil {
		smu.SetAvgResponseTime(*f)
	}
	return smu
}

// AddAvgResponseTime adds f to the "avg_response_time" field.
func (smu *SLAMetricsUpdate) AddAvgResponseTime(f float64) *SLAMetricsUpdate {
	smu.mutation.AddAvgResponseTime(f)
	return smu
}

// SetAvgResolutionTime sets the "avg_resolution_time" field.
func (smu *SLAMetricsUpdate) SetAvgResolutionTime(f float64) *SLAMetricsUpdate {
	smu.mutation.ResetAvgResolutionTime()
	smu.mutation.SetAvgResolutionTime(f)
	return smu
}

// SetNillableAvgResolutionTime sets the "avg_resolution_time" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableAvgResolutionTime(f *float64) *SLAMetricsUpdate {
	if f != nil {
		smu.SetAvgResolutionTime(*f)
	}
	return smu
}

// AddAvgResolutionTime adds f to the "avg_resolution_time" field.
func (smu *SLAMetricsUpdate) AddAvgResolutionTime(f float64) *SLAMetricsUpdate {
	smu.mutation.AddAvgResolutionTime(f)
	return smu
}

// SetPeriod sets the "period" field.
func (smu *SLAMetricsUpdate) SetPeriod(s string) *SLAMetricsUpdate {
	smu.mutation.SetPeriod(s)
	return smu
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillablePeriod(s *string) *SLAMetricsUpdate {
	if s != nil {
		smu.SetPeriod(*s)
	}
	return smu
}

// SetPeriodStart sets the "period_start" field.
func (smu *SLAMetricsUpdate) SetPeriodStart(t time.Time) *SLAMetricsUpdate {
	smu.mutation.SetPeriodStart(t)
	return smu
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillablePeriodStart(t *time.Time) *SLAMetricsUpdate {
	if t != nil {
		smu.SetPeriodStart(*t)
	}
	return smu
}

// SetPeriodEnd sets the "period_end" field.
func (smu *SLAMetricsUpdate) SetPeriodEnd(t time.Time) *SLAMetricsUpdate {
	smu.mutation.SetPeriodEnd(t)
	return smu
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillablePeriodEnd(t *time.Time) *SLAMetricsUpdate {
	if t != nil {
		smu.SetPeriodEnd(*t)
	}
	return smu
}

// SetTenantID sets the "tenant_id" field.
func (smu *SLAMetricsUpdate) SetTenantID(i int) *SLAMetricsUpdate {
	smu.mutation.ResetTenantID()
	smu.mutation.SetTenantID(i)
	return smu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableTenantID(i *int) *SLAMetricsUpdate {
	if i != nil {
		smu.SetTenantID(*i)
	}
	return smu
}

// AddTenantID adds i to the "tenant_id" field.
func (smu *SLAMetricsUpdate) AddTenantID(i int) *SLAMetricsUpdate {
	smu.mutation.AddTenantID(i)
	return smu
}

// SetCreatedAt sets the "created_at" field.
func (smu *SLAMetricsUpdate) SetCreatedAt(t time.Time) *SLAMetricsUpdate {
	smu.mutation.SetCreatedAt(t)
	return smu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableCreatedAt(t *time.Time) *SLAMetricsUpdate {
	if t != nil {
		smu.SetCreatedAt(*t)
	}
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SLAMetricsUpdate) SetUpdatedAt(t time.Time) *SLAMetricsUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smu *SLAMetricsUpdate) SetNillableUpdatedAt(t *time.Time) *SLAMetricsUpdate {
	if t != nil {
		smu.SetUpdatedAt(*t)
	}
	return smu
}

// Mutation returns the SLAMetricsMutation object of the builder.
func (smu *SLAMetricsUpdate) Mutation() *SLAMetricsMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SLAMetricsUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SLAMetricsUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SLAMetricsUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SLAMetricsUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SLAMetricsUpdate) defaults() {
	if _, ok := smu.mutation.UpdateTime(); !ok {
		v := slametrics.UpdateDefaultUpdateTime()
		smu.mutation.SetUpdateTime(v)
	}
}

func (smu *SLAMetricsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(slametrics.Table, slametrics.Columns, sqlgraph.NewFieldSpec(slametrics.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.UpdateTime(); ok {
		_spec.SetField(slametrics.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := smu.mutation.ServiceType(); ok {
		_spec.SetField(slametrics.FieldServiceType, field.TypeString, value)
	}
	if value, ok := smu.mutation.Priority(); ok {
		_spec.SetField(slametrics.FieldPriority, field.TypeString, value)
	}
	if value, ok := smu.mutation.Impact(); ok {
		_spec.SetField(slametrics.FieldImpact, field.TypeString, value)
	}
	if value, ok := smu.mutation.TotalTickets(); ok {
		_spec.SetField(slametrics.FieldTotalTickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedTotalTickets(); ok {
		_spec.AddField(slametrics.FieldTotalTickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.MetSLATickets(); ok {
		_spec.SetField(slametrics.FieldMetSLATickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedMetSLATickets(); ok {
		_spec.AddField(slametrics.FieldMetSLATickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.ViolatedSLATickets(); ok {
		_spec.SetField(slametrics.FieldViolatedSLATickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedViolatedSLATickets(); ok {
		_spec.AddField(slametrics.FieldViolatedSLATickets, field.TypeInt, value)
	}
	if value, ok := smu.mutation.SLAComplianceRate(); ok {
		_spec.SetField(slametrics.FieldSLAComplianceRate, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AddedSLAComplianceRate(); ok {
		_spec.AddField(slametrics.FieldSLAComplianceRate, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AvgResponseTime(); ok {
		_spec.SetField(slametrics.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AddedAvgResponseTime(); ok {
		_spec.AddField(slametrics.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AvgResolutionTime(); ok {
		_spec.SetField(slametrics.FieldAvgResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.AddedAvgResolutionTime(); ok {
		_spec.AddField(slametrics.FieldAvgResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := smu.mutation.Period(); ok {
		_spec.SetField(slametrics.FieldPeriod, field.TypeString, value)
	}
	if value, ok := smu.mutation.PeriodStart(); ok {
		_spec.SetField(slametrics.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := smu.mutation.PeriodEnd(); ok {
		_spec.SetField(slametrics.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := smu.mutation.TenantID(); ok {
		_spec.SetField(slametrics.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedTenantID(); ok {
		_spec.AddField(slametrics.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := smu.mutation.CreatedAt(); ok {
		_spec.SetField(slametrics.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(slametrics.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slametrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SLAMetricsUpdateOne is the builder for updating a single SLAMetrics entity.
type SLAMetricsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SLAMetricsMutation
}

// SetUpdateTime sets the "update_time" field.
func (smuo *SLAMetricsUpdateOne) SetUpdateTime(t time.Time) *SLAMetricsUpdateOne {
	smuo.mutation.SetUpdateTime(t)
	return smuo
}

// SetServiceType sets the "service_type" field.
func (smuo *SLAMetricsUpdateOne) SetServiceType(s string) *SLAMetricsUpdateOne {
	smuo.mutation.SetServiceType(s)
	return smuo
}

// SetNillableServiceType sets the "service_type" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableServiceType(s *string) *SLAMetricsUpdateOne {
	if s != nil {
		smuo.SetServiceType(*s)
	}
	return smuo
}

// SetPriority sets the "priority" field.
func (smuo *SLAMetricsUpdateOne) SetPriority(s string) *SLAMetricsUpdateOne {
	smuo.mutation.SetPriority(s)
	return smuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillablePriority(s *string) *SLAMetricsUpdateOne {
	if s != nil {
		smuo.SetPriority(*s)
	}
	return smuo
}

// SetImpact sets the "impact" field.
func (smuo *SLAMetricsUpdateOne) SetImpact(s string) *SLAMetricsUpdateOne {
	smuo.mutation.SetImpact(s)
	return smuo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableImpact(s *string) *SLAMetricsUpdateOne {
	if s != nil {
		smuo.SetImpact(*s)
	}
	return smuo
}

// SetTotalTickets sets the "total_tickets" field.
func (smuo *SLAMetricsUpdateOne) SetTotalTickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.ResetTotalTickets()
	smuo.mutation.SetTotalTickets(i)
	return smuo
}

// SetNillableTotalTickets sets the "total_tickets" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableTotalTickets(i *int) *SLAMetricsUpdateOne {
	if i != nil {
		smuo.SetTotalTickets(*i)
	}
	return smuo
}

// AddTotalTickets adds i to the "total_tickets" field.
func (smuo *SLAMetricsUpdateOne) AddTotalTickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.AddTotalTickets(i)
	return smuo
}

// SetMetSLATickets sets the "met_sla_tickets" field.
func (smuo *SLAMetricsUpdateOne) SetMetSLATickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.ResetMetSLATickets()
	smuo.mutation.SetMetSLATickets(i)
	return smuo
}

// SetNillableMetSLATickets sets the "met_sla_tickets" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableMetSLATickets(i *int) *SLAMetricsUpdateOne {
	if i != nil {
		smuo.SetMetSLATickets(*i)
	}
	return smuo
}

// AddMetSLATickets adds i to the "met_sla_tickets" field.
func (smuo *SLAMetricsUpdateOne) AddMetSLATickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.AddMetSLATickets(i)
	return smuo
}

// SetViolatedSLATickets sets the "violated_sla_tickets" field.
func (smuo *SLAMetricsUpdateOne) SetViolatedSLATickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.ResetViolatedSLATickets()
	smuo.mutation.SetViolatedSLATickets(i)
	return smuo
}

// SetNillableViolatedSLATickets sets the "violated_sla_tickets" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableViolatedSLATickets(i *int) *SLAMetricsUpdateOne {
	if i != nil {
		smuo.SetViolatedSLATickets(*i)
	}
	return smuo
}

// AddViolatedSLATickets adds i to the "violated_sla_tickets" field.
func (smuo *SLAMetricsUpdateOne) AddViolatedSLATickets(i int) *SLAMetricsUpdateOne {
	smuo.mutation.AddViolatedSLATickets(i)
	return smuo
}

// SetSLAComplianceRate sets the "sla_compliance_rate" field.
func (smuo *SLAMetricsUpdateOne) SetSLAComplianceRate(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.ResetSLAComplianceRate()
	smuo.mutation.SetSLAComplianceRate(f)
	return smuo
}

// SetNillableSLAComplianceRate sets the "sla_compliance_rate" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableSLAComplianceRate(f *float64) *SLAMetricsUpdateOne {
	if f != nil {
		smuo.SetSLAComplianceRate(*f)
	}
	return smuo
}

// AddSLAComplianceRate adds f to the "sla_compliance_rate" field.
func (smuo *SLAMetricsUpdateOne) AddSLAComplianceRate(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.AddSLAComplianceRate(f)
	return smuo
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (smuo *SLAMetricsUpdateOne) SetAvgResponseTime(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.ResetAvgResponseTime()
	smuo.mutation.SetAvgResponseTime(f)
	return smuo
}

// SetNillableAvgResponseTime sets the "avg_response_time" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableAvgResponseTime(f *float64) *SLAMetricsUpdateOne {
	if f != nil {
		smuo.SetAvgResponseTime(*f)
	}
	return smuo
}

// AddAvgResponseTime adds f to the "avg_response_time" field.
func (smuo *SLAMetricsUpdateOne) AddAvgResponseTime(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.AddAvgResponseTime(f)
	return smuo
}

// SetAvgResolutionTime sets the "avg_resolution_time" field.
func (smuo *SLAMetricsUpdateOne) SetAvgResolutionTime(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.ResetAvgResolutionTime()
	smuo.mutation.SetAvgResolutionTime(f)
	return smuo
}

// SetNillableAvgResolutionTime sets the "avg_resolution_time" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableAvgResolutionTime(f *float64) *SLAMetricsUpdateOne {
	if f != nil {
		smuo.SetAvgResolutionTime(*f)
	}
	return smuo
}

// AddAvgResolutionTime adds f to the "avg_resolution_time" field.
func (smuo *SLAMetricsUpdateOne) AddAvgResolutionTime(f float64) *SLAMetricsUpdateOne {
	smuo.mutation.AddAvgResolutionTime(f)
	return smuo
}

// SetPeriod sets the "period" field.
func (smuo *SLAMetricsUpdateOne) SetPeriod(s string) *SLAMetricsUpdateOne {
	smuo.mutation.SetPeriod(s)
	return smuo
}

// SetNillablePeriod sets the "period" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillablePeriod(s *string) *SLAMetricsUpdateOne {
	if s != nil {
		smuo.SetPeriod(*s)
	}
	return smuo
}

// SetPeriodStart sets the "period_start" field.
func (smuo *SLAMetricsUpdateOne) SetPeriodStart(t time.Time) *SLAMetricsUpdateOne {
	smuo.mutation.SetPeriodStart(t)
	return smuo
}

// SetNillablePeriodStart sets the "period_start" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillablePeriodStart(t *time.Time) *SLAMetricsUpdateOne {
	if t != nil {
		smuo.SetPeriodStart(*t)
	}
	return smuo
}

// SetPeriodEnd sets the "period_end" field.
func (smuo *SLAMetricsUpdateOne) SetPeriodEnd(t time.Time) *SLAMetricsUpdateOne {
	smuo.mutation.SetPeriodEnd(t)
	return smuo
}

// SetNillablePeriodEnd sets the "period_end" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillablePeriodEnd(t *time.Time) *SLAMetricsUpdateOne {
	if t != nil {
		smuo.SetPeriodEnd(*t)
	}
	return smuo
}

// SetTenantID sets the "tenant_id" field.
func (smuo *SLAMetricsUpdateOne) SetTenantID(i int) *SLAMetricsUpdateOne {
	smuo.mutation.ResetTenantID()
	smuo.mutation.SetTenantID(i)
	return smuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableTenantID(i *int) *SLAMetricsUpdateOne {
	if i != nil {
		smuo.SetTenantID(*i)
	}
	return smuo
}

// AddTenantID adds i to the "tenant_id" field.
func (smuo *SLAMetricsUpdateOne) AddTenantID(i int) *SLAMetricsUpdateOne {
	smuo.mutation.AddTenantID(i)
	return smuo
}

// SetCreatedAt sets the "created_at" field.
func (smuo *SLAMetricsUpdateOne) SetCreatedAt(t time.Time) *SLAMetricsUpdateOne {
	smuo.mutation.SetCreatedAt(t)
	return smuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableCreatedAt(t *time.Time) *SLAMetricsUpdateOne {
	if t != nil {
		smuo.SetCreatedAt(*t)
	}
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SLAMetricsUpdateOne) SetUpdatedAt(t time.Time) *SLAMetricsUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smuo *SLAMetricsUpdateOne) SetNillableUpdatedAt(t *time.Time) *SLAMetricsUpdateOne {
	if t != nil {
		smuo.SetUpdatedAt(*t)
	}
	return smuo
}

// Mutation returns the SLAMetricsMutation object of the builder.
func (smuo *SLAMetricsUpdateOne) Mutation() *SLAMetricsMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SLAMetricsUpdate builder.
func (smuo *SLAMetricsUpdateOne) Where(ps ...predicate.SLAMetrics) *SLAMetricsUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SLAMetricsUpdateOne) Select(field string, fields ...string) *SLAMetricsUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SLAMetrics entity.
func (smuo *SLAMetricsUpdateOne) Save(ctx context.Context) (*SLAMetrics, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SLAMetricsUpdateOne) SaveX(ctx context.Context) *SLAMetrics {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SLAMetricsUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SLAMetricsUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SLAMetricsUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdateTime(); !ok {
		v := slametrics.UpdateDefaultUpdateTime()
		smuo.mutation.SetUpdateTime(v)
	}
}

func (smuo *SLAMetricsUpdateOne) sqlSave(ctx context.Context) (_node *SLAMetrics, err error) {
	_spec := sqlgraph.NewUpdateSpec(slametrics.Table, slametrics.Columns, sqlgraph.NewFieldSpec(slametrics.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SLAMetrics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slametrics.FieldID)
		for _, f := range fields {
			if !slametrics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slametrics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.UpdateTime(); ok {
		_spec.SetField(slametrics.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.ServiceType(); ok {
		_spec.SetField(slametrics.FieldServiceType, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Priority(); ok {
		_spec.SetField(slametrics.FieldPriority, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Impact(); ok {
		_spec.SetField(slametrics.FieldImpact, field.TypeString, value)
	}
	if value, ok := smuo.mutation.TotalTickets(); ok {
		_spec.SetField(slametrics.FieldTotalTickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedTotalTickets(); ok {
		_spec.AddField(slametrics.FieldTotalTickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.MetSLATickets(); ok {
		_spec.SetField(slametrics.FieldMetSLATickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedMetSLATickets(); ok {
		_spec.AddField(slametrics.FieldMetSLATickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.ViolatedSLATickets(); ok {
		_spec.SetField(slametrics.FieldViolatedSLATickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedViolatedSLATickets(); ok {
		_spec.AddField(slametrics.FieldViolatedSLATickets, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.SLAComplianceRate(); ok {
		_spec.SetField(slametrics.FieldSLAComplianceRate, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AddedSLAComplianceRate(); ok {
		_spec.AddField(slametrics.FieldSLAComplianceRate, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AvgResponseTime(); ok {
		_spec.SetField(slametrics.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AddedAvgResponseTime(); ok {
		_spec.AddField(slametrics.FieldAvgResponseTime, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AvgResolutionTime(); ok {
		_spec.SetField(slametrics.FieldAvgResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.AddedAvgResolutionTime(); ok {
		_spec.AddField(slametrics.FieldAvgResolutionTime, field.TypeFloat64, value)
	}
	if value, ok := smuo.mutation.Period(); ok {
		_spec.SetField(slametrics.FieldPeriod, field.TypeString, value)
	}
	if value, ok := smuo.mutation.PeriodStart(); ok {
		_spec.SetField(slametrics.FieldPeriodStart, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.PeriodEnd(); ok {
		_spec.SetField(slametrics.FieldPeriodEnd, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.TenantID(); ok {
		_spec.SetField(slametrics.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedTenantID(); ok {
		_spec.AddField(slametrics.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.CreatedAt(); ok {
		_spec.SetField(slametrics.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(slametrics.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &SLAMetrics{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slametrics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
