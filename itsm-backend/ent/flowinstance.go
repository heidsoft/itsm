// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/ticket"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FlowInstance is the model entity for the FlowInstance schema.
type FlowInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 流程定义ID
	FlowDefinitionID string `json:"flow_definition_id,omitempty"`
	// 流程名称
	FlowName string `json:"flow_name,omitempty"`
	// 流程版本
	FlowVersion string `json:"flow_version,omitempty"`
	// 流程状态
	Status flowinstance.Status `json:"status,omitempty"`
	// 当前步骤
	CurrentStep int `json:"current_step,omitempty"`
	// 总步骤数
	TotalSteps int `json:"total_steps,omitempty"`
	// 步骤配置信息
	StepConfig map[string]interface{} `json:"step_config,omitempty"`
	// 流程变量
	Variables map[string]interface{} `json:"variables,omitempty"`
	// 执行历史记录
	ExecutionHistory []map[string]interface{} `json:"execution_history,omitempty"`
	// 关联工单ID
	TicketID int `json:"ticket_id,omitempty"`
	// 开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 完成时间
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlowInstanceQuery when eager-loading is set.
	Edges        FlowInstanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FlowInstanceEdges holds the relations/edges for other nodes in the graph.
type FlowInstanceEdges struct {
	// Ticket holds the value of the ticket edge.
	Ticket *Ticket `json:"ticket,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlowInstanceEdges) TicketOrErr() (*Ticket, error) {
	if e.Ticket != nil {
		return e.Ticket, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ticket.Label}
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case flowinstance.FieldStepConfig, flowinstance.FieldVariables, flowinstance.FieldExecutionHistory:
			values[i] = new([]byte)
		case flowinstance.FieldID, flowinstance.FieldCurrentStep, flowinstance.FieldTotalSteps, flowinstance.FieldTicketID:
			values[i] = new(sql.NullInt64)
		case flowinstance.FieldFlowDefinitionID, flowinstance.FieldFlowName, flowinstance.FieldFlowVersion, flowinstance.FieldStatus:
			values[i] = new(sql.NullString)
		case flowinstance.FieldStartedAt, flowinstance.FieldCompletedAt, flowinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowInstance fields.
func (fi *FlowInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flowinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case flowinstance.FieldFlowDefinitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_definition_id", values[i])
			} else if value.Valid {
				fi.FlowDefinitionID = value.String
			}
		case flowinstance.FieldFlowName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_name", values[i])
			} else if value.Valid {
				fi.FlowName = value.String
			}
		case flowinstance.FieldFlowVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_version", values[i])
			} else if value.Valid {
				fi.FlowVersion = value.String
			}
		case flowinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fi.Status = flowinstance.Status(value.String)
			}
		case flowinstance.FieldCurrentStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_step", values[i])
			} else if value.Valid {
				fi.CurrentStep = int(value.Int64)
			}
		case flowinstance.FieldTotalSteps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_steps", values[i])
			} else if value.Valid {
				fi.TotalSteps = int(value.Int64)
			}
		case flowinstance.FieldStepConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field step_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.StepConfig); err != nil {
					return fmt.Errorf("unmarshal field step_config: %w", err)
				}
			}
		case flowinstance.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case flowinstance.FieldExecutionHistory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field execution_history", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.ExecutionHistory); err != nil {
					return fmt.Errorf("unmarshal field execution_history: %w", err)
				}
			}
		case flowinstance.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				fi.TicketID = int(value.Int64)
			}
		case flowinstance.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				fi.StartedAt = value.Time
			}
		case flowinstance.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				fi.CompletedAt = new(time.Time)
				*fi.CompletedAt = value.Time
			}
		case flowinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fi.UpdatedAt = value.Time
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FlowInstance.
// This includes values selected through modifiers, order, etc.
func (fi *FlowInstance) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryTicket queries the "ticket" edge of the FlowInstance entity.
func (fi *FlowInstance) QueryTicket() *TicketQuery {
	return NewFlowInstanceClient(fi.config).QueryTicket(fi)
}

// Update returns a builder for updating this FlowInstance.
// Note that you need to call FlowInstance.Unwrap() before calling this method if this FlowInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FlowInstance) Update() *FlowInstanceUpdateOne {
	return NewFlowInstanceClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FlowInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FlowInstance) Unwrap() *FlowInstance {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowInstance is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FlowInstance) String() string {
	var builder strings.Builder
	builder.WriteString("FlowInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("flow_definition_id=")
	builder.WriteString(fi.FlowDefinitionID)
	builder.WriteString(", ")
	builder.WriteString("flow_name=")
	builder.WriteString(fi.FlowName)
	builder.WriteString(", ")
	builder.WriteString("flow_version=")
	builder.WriteString(fi.FlowVersion)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fi.Status))
	builder.WriteString(", ")
	builder.WriteString("current_step=")
	builder.WriteString(fmt.Sprintf("%v", fi.CurrentStep))
	builder.WriteString(", ")
	builder.WriteString("total_steps=")
	builder.WriteString(fmt.Sprintf("%v", fi.TotalSteps))
	builder.WriteString(", ")
	builder.WriteString("step_config=")
	builder.WriteString(fmt.Sprintf("%v", fi.StepConfig))
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", fi.Variables))
	builder.WriteString(", ")
	builder.WriteString("execution_history=")
	builder.WriteString(fmt.Sprintf("%v", fi.ExecutionHistory))
	builder.WriteString(", ")
	builder.WriteString("ticket_id=")
	builder.WriteString(fmt.Sprintf("%v", fi.TicketID))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(fi.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fi.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FlowInstances is a parsable slice of FlowInstance.
type FlowInstances []*FlowInstance
