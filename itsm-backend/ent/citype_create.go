// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CITypeCreate is the builder for creating a CIType entity.
type CITypeCreate struct {
	config
	mutation *CITypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ctc *CITypeCreate) SetName(s string) *CITypeCreate {
	ctc.mutation.SetName(s)
	return ctc
}

// SetDisplayName sets the "display_name" field.
func (ctc *CITypeCreate) SetDisplayName(s string) *CITypeCreate {
	ctc.mutation.SetDisplayName(s)
	return ctc
}

// SetDescription sets the "description" field.
func (ctc *CITypeCreate) SetDescription(s string) *CITypeCreate {
	ctc.mutation.SetDescription(s)
	return ctc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableDescription(s *string) *CITypeCreate {
	if s != nil {
		ctc.SetDescription(*s)
	}
	return ctc
}

// SetCategory sets the "category" field.
func (ctc *CITypeCreate) SetCategory(s string) *CITypeCreate {
	ctc.mutation.SetCategory(s)
	return ctc
}

// SetIcon sets the "icon" field.
func (ctc *CITypeCreate) SetIcon(s string) *CITypeCreate {
	ctc.mutation.SetIcon(s)
	return ctc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableIcon(s *string) *CITypeCreate {
	if s != nil {
		ctc.SetIcon(*s)
	}
	return ctc
}

// SetAttributeSchema sets the "attribute_schema" field.
func (ctc *CITypeCreate) SetAttributeSchema(m map[string]interface{}) *CITypeCreate {
	ctc.mutation.SetAttributeSchema(m)
	return ctc
}

// SetValidationRules sets the "validation_rules" field.
func (ctc *CITypeCreate) SetValidationRules(m map[string]interface{}) *CITypeCreate {
	ctc.mutation.SetValidationRules(m)
	return ctc
}

// SetIsSystem sets the "is_system" field.
func (ctc *CITypeCreate) SetIsSystem(b bool) *CITypeCreate {
	ctc.mutation.SetIsSystem(b)
	return ctc
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableIsSystem(b *bool) *CITypeCreate {
	if b != nil {
		ctc.SetIsSystem(*b)
	}
	return ctc
}

// SetIsActive sets the "is_active" field.
func (ctc *CITypeCreate) SetIsActive(b bool) *CITypeCreate {
	ctc.mutation.SetIsActive(b)
	return ctc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableIsActive(b *bool) *CITypeCreate {
	if b != nil {
		ctc.SetIsActive(*b)
	}
	return ctc
}

// SetTenantID sets the "tenant_id" field.
func (ctc *CITypeCreate) SetTenantID(i int) *CITypeCreate {
	ctc.mutation.SetTenantID(i)
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *CITypeCreate) SetCreatedAt(t time.Time) *CITypeCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableCreatedAt(t *time.Time) *CITypeCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *CITypeCreate) SetUpdatedAt(t time.Time) *CITypeCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *CITypeCreate) SetNillableUpdatedAt(t *time.Time) *CITypeCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ctc *CITypeCreate) SetTenant(t *Tenant) *CITypeCreate {
	return ctc.SetTenantID(t.ID)
}

// AddConfigurationItemIDs adds the "configuration_items" edge to the ConfigurationItem entity by IDs.
func (ctc *CITypeCreate) AddConfigurationItemIDs(ids ...int) *CITypeCreate {
	ctc.mutation.AddConfigurationItemIDs(ids...)
	return ctc
}

// AddConfigurationItems adds the "configuration_items" edges to the ConfigurationItem entity.
func (ctc *CITypeCreate) AddConfigurationItems(c ...*ConfigurationItem) *CITypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddConfigurationItemIDs(ids...)
}

// AddAllowedRelationshipIDs adds the "allowed_relationships" edge to the CIRelationshipType entity by IDs.
func (ctc *CITypeCreate) AddAllowedRelationshipIDs(ids ...int) *CITypeCreate {
	ctc.mutation.AddAllowedRelationshipIDs(ids...)
	return ctc
}

// AddAllowedRelationships adds the "allowed_relationships" edges to the CIRelationshipType entity.
func (ctc *CITypeCreate) AddAllowedRelationships(c ...*CIRelationshipType) *CITypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddAllowedRelationshipIDs(ids...)
}

// Mutation returns the CITypeMutation object of the builder.
func (ctc *CITypeCreate) Mutation() *CITypeMutation {
	return ctc.mutation
}

// Save creates the CIType in the database.
func (ctc *CITypeCreate) Save(ctx context.Context) (*CIType, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CITypeCreate) SaveX(ctx context.Context) *CIType {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CITypeCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CITypeCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CITypeCreate) defaults() {
	if _, ok := ctc.mutation.IsSystem(); !ok {
		v := citype.DefaultIsSystem
		ctc.mutation.SetIsSystem(v)
	}
	if _, ok := ctc.mutation.IsActive(); !ok {
		v := citype.DefaultIsActive
		ctc.mutation.SetIsActive(v)
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := citype.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := citype.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CITypeCreate) check() error {
	if _, ok := ctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CIType.name"`)}
	}
	if v, ok := ctc.mutation.Name(); ok {
		if err := citype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIType.name": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "CIType.display_name"`)}
	}
	if v, ok := ctc.mutation.DisplayName(); ok {
		if err := citype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIType.display_name": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "CIType.category"`)}
	}
	if v, ok := ctc.mutation.Category(); ok {
		if err := citype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "CIType.category": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.IsSystem(); !ok {
		return &ValidationError{Name: "is_system", err: errors.New(`ent: missing required field "CIType.is_system"`)}
	}
	if _, ok := ctc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "CIType.is_active"`)}
	}
	if _, ok := ctc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CIType.tenant_id"`)}
	}
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CIType.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CIType.updated_at"`)}
	}
	if len(ctc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CIType.tenant"`)}
	}
	return nil
}

func (ctc *CITypeCreate) sqlSave(ctx context.Context) (*CIType, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CITypeCreate) createSpec() (*CIType, *sqlgraph.CreateSpec) {
	var (
		_node = &CIType{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(citype.Table, sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt))
	)
	if value, ok := ctc.mutation.Name(); ok {
		_spec.SetField(citype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ctc.mutation.DisplayName(); ok {
		_spec.SetField(citype.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := ctc.mutation.Description(); ok {
		_spec.SetField(citype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ctc.mutation.Category(); ok {
		_spec.SetField(citype.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ctc.mutation.Icon(); ok {
		_spec.SetField(citype.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := ctc.mutation.AttributeSchema(); ok {
		_spec.SetField(citype.FieldAttributeSchema, field.TypeJSON, value)
		_node.AttributeSchema = value
	}
	if value, ok := ctc.mutation.ValidationRules(); ok {
		_spec.SetField(citype.FieldValidationRules, field.TypeJSON, value)
		_node.ValidationRules = value
	}
	if value, ok := ctc.mutation.IsSystem(); ok {
		_spec.SetField(citype.FieldIsSystem, field.TypeBool, value)
		_node.IsSystem = value
	}
	if value, ok := ctc.mutation.IsActive(); ok {
		_spec.SetField(citype.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(citype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(citype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ctc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   citype.TenantTable,
			Columns: []string{citype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.ConfigurationItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ctc.mutation.AllowedRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CITypeCreateBulk is the builder for creating many CIType entities in bulk.
type CITypeCreateBulk struct {
	config
	err      error
	builders []*CITypeCreate
}

// Save creates the CIType entities in the database.
func (ctcb *CITypeCreateBulk) Save(ctx context.Context) ([]*CIType, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CIType, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CITypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CITypeCreateBulk) SaveX(ctx context.Context) []*CIType {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CITypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CITypeCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
