// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/slaviolation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLAViolationUpdate is the builder for updating SLAViolation entities.
type SLAViolationUpdate struct {
	config
	hooks    []Hook
	mutation *SLAViolationMutation
}

// Where appends a list predicates to the SLAViolationUpdate builder.
func (svu *SLAViolationUpdate) Where(ps ...predicate.SLAViolation) *SLAViolationUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetSLADefinitionID sets the "sla_definition_id" field.
func (svu *SLAViolationUpdate) SetSLADefinitionID(i int) *SLAViolationUpdate {
	svu.mutation.ResetSLADefinitionID()
	svu.mutation.SetSLADefinitionID(i)
	return svu
}

// SetNillableSLADefinitionID sets the "sla_definition_id" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableSLADefinitionID(i *int) *SLAViolationUpdate {
	if i != nil {
		svu.SetSLADefinitionID(*i)
	}
	return svu
}

// AddSLADefinitionID adds i to the "sla_definition_id" field.
func (svu *SLAViolationUpdate) AddSLADefinitionID(i int) *SLAViolationUpdate {
	svu.mutation.AddSLADefinitionID(i)
	return svu
}

// SetTicketID sets the "ticket_id" field.
func (svu *SLAViolationUpdate) SetTicketID(i int) *SLAViolationUpdate {
	svu.mutation.ResetTicketID()
	svu.mutation.SetTicketID(i)
	return svu
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableTicketID(i *int) *SLAViolationUpdate {
	if i != nil {
		svu.SetTicketID(*i)
	}
	return svu
}

// AddTicketID adds i to the "ticket_id" field.
func (svu *SLAViolationUpdate) AddTicketID(i int) *SLAViolationUpdate {
	svu.mutation.AddTicketID(i)
	return svu
}

// SetViolationType sets the "violation_type" field.
func (svu *SLAViolationUpdate) SetViolationType(s string) *SLAViolationUpdate {
	svu.mutation.SetViolationType(s)
	return svu
}

// SetNillableViolationType sets the "violation_type" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableViolationType(s *string) *SLAViolationUpdate {
	if s != nil {
		svu.SetViolationType(*s)
	}
	return svu
}

// SetViolationTime sets the "violation_time" field.
func (svu *SLAViolationUpdate) SetViolationTime(t time.Time) *SLAViolationUpdate {
	svu.mutation.SetViolationTime(t)
	return svu
}

// SetNillableViolationTime sets the "violation_time" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableViolationTime(t *time.Time) *SLAViolationUpdate {
	if t != nil {
		svu.SetViolationTime(*t)
	}
	return svu
}

// SetDescription sets the "description" field.
func (svu *SLAViolationUpdate) SetDescription(s string) *SLAViolationUpdate {
	svu.mutation.SetDescription(s)
	return svu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableDescription(s *string) *SLAViolationUpdate {
	if s != nil {
		svu.SetDescription(*s)
	}
	return svu
}

// ClearDescription clears the value of the "description" field.
func (svu *SLAViolationUpdate) ClearDescription() *SLAViolationUpdate {
	svu.mutation.ClearDescription()
	return svu
}

// SetTenantID sets the "tenant_id" field.
func (svu *SLAViolationUpdate) SetTenantID(i int) *SLAViolationUpdate {
	svu.mutation.ResetTenantID()
	svu.mutation.SetTenantID(i)
	return svu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableTenantID(i *int) *SLAViolationUpdate {
	if i != nil {
		svu.SetTenantID(*i)
	}
	return svu
}

// AddTenantID adds i to the "tenant_id" field.
func (svu *SLAViolationUpdate) AddTenantID(i int) *SLAViolationUpdate {
	svu.mutation.AddTenantID(i)
	return svu
}

// SetCreatedAt sets the "created_at" field.
func (svu *SLAViolationUpdate) SetCreatedAt(t time.Time) *SLAViolationUpdate {
	svu.mutation.SetCreatedAt(t)
	return svu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svu *SLAViolationUpdate) SetNillableCreatedAt(t *time.Time) *SLAViolationUpdate {
	if t != nil {
		svu.SetCreatedAt(*t)
	}
	return svu
}

// SetUpdatedAt sets the "updated_at" field.
func (svu *SLAViolationUpdate) SetUpdatedAt(t time.Time) *SLAViolationUpdate {
	svu.mutation.SetUpdatedAt(t)
	return svu
}

// Mutation returns the SLAViolationMutation object of the builder.
func (svu *SLAViolationUpdate) Mutation() *SLAViolationMutation {
	return svu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SLAViolationUpdate) Save(ctx context.Context) (int, error) {
	svu.defaults()
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SLAViolationUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SLAViolationUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SLAViolationUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svu *SLAViolationUpdate) defaults() {
	if _, ok := svu.mutation.UpdatedAt(); !ok {
		v := slaviolation.UpdateDefaultUpdatedAt()
		svu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SLAViolationUpdate) check() error {
	if v, ok := svu.mutation.SLADefinitionID(); ok {
		if err := slaviolation.SLADefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "sla_definition_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.sla_definition_id": %w`, err)}
		}
	}
	if v, ok := svu.mutation.TicketID(); ok {
		if err := slaviolation.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.ticket_id": %w`, err)}
		}
	}
	if v, ok := svu.mutation.ViolationType(); ok {
		if err := slaviolation.ViolationTypeValidator(v); err != nil {
			return &ValidationError{Name: "violation_type", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.violation_type": %w`, err)}
		}
	}
	if v, ok := svu.mutation.TenantID(); ok {
		if err := slaviolation.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (svu *SLAViolationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(slaviolation.Table, slaviolation.Columns, sqlgraph.NewFieldSpec(slaviolation.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.SLADefinitionID(); ok {
		_spec.SetField(slaviolation.FieldSLADefinitionID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedSLADefinitionID(); ok {
		_spec.AddField(slaviolation.FieldSLADefinitionID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.TicketID(); ok {
		_spec.SetField(slaviolation.FieldTicketID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedTicketID(); ok {
		_spec.AddField(slaviolation.FieldTicketID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.ViolationType(); ok {
		_spec.SetField(slaviolation.FieldViolationType, field.TypeString, value)
	}
	if value, ok := svu.mutation.ViolationTime(); ok {
		_spec.SetField(slaviolation.FieldViolationTime, field.TypeTime, value)
	}
	if value, ok := svu.mutation.Description(); ok {
		_spec.SetField(slaviolation.FieldDescription, field.TypeString, value)
	}
	if svu.mutation.DescriptionCleared() {
		_spec.ClearField(slaviolation.FieldDescription, field.TypeString)
	}
	if value, ok := svu.mutation.TenantID(); ok {
		_spec.SetField(slaviolation.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedTenantID(); ok {
		_spec.AddField(slaviolation.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := svu.mutation.CreatedAt(); ok {
		_spec.SetField(slaviolation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svu.mutation.UpdatedAt(); ok {
		_spec.SetField(slaviolation.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slaviolation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SLAViolationUpdateOne is the builder for updating a single SLAViolation entity.
type SLAViolationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SLAViolationMutation
}

// SetSLADefinitionID sets the "sla_definition_id" field.
func (svuo *SLAViolationUpdateOne) SetSLADefinitionID(i int) *SLAViolationUpdateOne {
	svuo.mutation.ResetSLADefinitionID()
	svuo.mutation.SetSLADefinitionID(i)
	return svuo
}

// SetNillableSLADefinitionID sets the "sla_definition_id" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableSLADefinitionID(i *int) *SLAViolationUpdateOne {
	if i != nil {
		svuo.SetSLADefinitionID(*i)
	}
	return svuo
}

// AddSLADefinitionID adds i to the "sla_definition_id" field.
func (svuo *SLAViolationUpdateOne) AddSLADefinitionID(i int) *SLAViolationUpdateOne {
	svuo.mutation.AddSLADefinitionID(i)
	return svuo
}

// SetTicketID sets the "ticket_id" field.
func (svuo *SLAViolationUpdateOne) SetTicketID(i int) *SLAViolationUpdateOne {
	svuo.mutation.ResetTicketID()
	svuo.mutation.SetTicketID(i)
	return svuo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableTicketID(i *int) *SLAViolationUpdateOne {
	if i != nil {
		svuo.SetTicketID(*i)
	}
	return svuo
}

// AddTicketID adds i to the "ticket_id" field.
func (svuo *SLAViolationUpdateOne) AddTicketID(i int) *SLAViolationUpdateOne {
	svuo.mutation.AddTicketID(i)
	return svuo
}

// SetViolationType sets the "violation_type" field.
func (svuo *SLAViolationUpdateOne) SetViolationType(s string) *SLAViolationUpdateOne {
	svuo.mutation.SetViolationType(s)
	return svuo
}

// SetNillableViolationType sets the "violation_type" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableViolationType(s *string) *SLAViolationUpdateOne {
	if s != nil {
		svuo.SetViolationType(*s)
	}
	return svuo
}

// SetViolationTime sets the "violation_time" field.
func (svuo *SLAViolationUpdateOne) SetViolationTime(t time.Time) *SLAViolationUpdateOne {
	svuo.mutation.SetViolationTime(t)
	return svuo
}

// SetNillableViolationTime sets the "violation_time" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableViolationTime(t *time.Time) *SLAViolationUpdateOne {
	if t != nil {
		svuo.SetViolationTime(*t)
	}
	return svuo
}

// SetDescription sets the "description" field.
func (svuo *SLAViolationUpdateOne) SetDescription(s string) *SLAViolationUpdateOne {
	svuo.mutation.SetDescription(s)
	return svuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableDescription(s *string) *SLAViolationUpdateOne {
	if s != nil {
		svuo.SetDescription(*s)
	}
	return svuo
}

// ClearDescription clears the value of the "description" field.
func (svuo *SLAViolationUpdateOne) ClearDescription() *SLAViolationUpdateOne {
	svuo.mutation.ClearDescription()
	return svuo
}

// SetTenantID sets the "tenant_id" field.
func (svuo *SLAViolationUpdateOne) SetTenantID(i int) *SLAViolationUpdateOne {
	svuo.mutation.ResetTenantID()
	svuo.mutation.SetTenantID(i)
	return svuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableTenantID(i *int) *SLAViolationUpdateOne {
	if i != nil {
		svuo.SetTenantID(*i)
	}
	return svuo
}

// AddTenantID adds i to the "tenant_id" field.
func (svuo *SLAViolationUpdateOne) AddTenantID(i int) *SLAViolationUpdateOne {
	svuo.mutation.AddTenantID(i)
	return svuo
}

// SetCreatedAt sets the "created_at" field.
func (svuo *SLAViolationUpdateOne) SetCreatedAt(t time.Time) *SLAViolationUpdateOne {
	svuo.mutation.SetCreatedAt(t)
	return svuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svuo *SLAViolationUpdateOne) SetNillableCreatedAt(t *time.Time) *SLAViolationUpdateOne {
	if t != nil {
		svuo.SetCreatedAt(*t)
	}
	return svuo
}

// SetUpdatedAt sets the "updated_at" field.
func (svuo *SLAViolationUpdateOne) SetUpdatedAt(t time.Time) *SLAViolationUpdateOne {
	svuo.mutation.SetUpdatedAt(t)
	return svuo
}

// Mutation returns the SLAViolationMutation object of the builder.
func (svuo *SLAViolationUpdateOne) Mutation() *SLAViolationMutation {
	return svuo.mutation
}

// Where appends a list predicates to the SLAViolationUpdate builder.
func (svuo *SLAViolationUpdateOne) Where(ps ...predicate.SLAViolation) *SLAViolationUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SLAViolationUpdateOne) Select(field string, fields ...string) *SLAViolationUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SLAViolation entity.
func (svuo *SLAViolationUpdateOne) Save(ctx context.Context) (*SLAViolation, error) {
	svuo.defaults()
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SLAViolationUpdateOne) SaveX(ctx context.Context) *SLAViolation {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SLAViolationUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SLAViolationUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svuo *SLAViolationUpdateOne) defaults() {
	if _, ok := svuo.mutation.UpdatedAt(); !ok {
		v := slaviolation.UpdateDefaultUpdatedAt()
		svuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SLAViolationUpdateOne) check() error {
	if v, ok := svuo.mutation.SLADefinitionID(); ok {
		if err := slaviolation.SLADefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "sla_definition_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.sla_definition_id": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.TicketID(); ok {
		if err := slaviolation.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.ticket_id": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.ViolationType(); ok {
		if err := slaviolation.ViolationTypeValidator(v); err != nil {
			return &ValidationError{Name: "violation_type", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.violation_type": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.TenantID(); ok {
		if err := slaviolation.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (svuo *SLAViolationUpdateOne) sqlSave(ctx context.Context) (_node *SLAViolation, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(slaviolation.Table, slaviolation.Columns, sqlgraph.NewFieldSpec(slaviolation.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SLAViolation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slaviolation.FieldID)
		for _, f := range fields {
			if !slaviolation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slaviolation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.SLADefinitionID(); ok {
		_spec.SetField(slaviolation.FieldSLADefinitionID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedSLADefinitionID(); ok {
		_spec.AddField(slaviolation.FieldSLADefinitionID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.TicketID(); ok {
		_spec.SetField(slaviolation.FieldTicketID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedTicketID(); ok {
		_spec.AddField(slaviolation.FieldTicketID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.ViolationType(); ok {
		_spec.SetField(slaviolation.FieldViolationType, field.TypeString, value)
	}
	if value, ok := svuo.mutation.ViolationTime(); ok {
		_spec.SetField(slaviolation.FieldViolationTime, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.Description(); ok {
		_spec.SetField(slaviolation.FieldDescription, field.TypeString, value)
	}
	if svuo.mutation.DescriptionCleared() {
		_spec.ClearField(slaviolation.FieldDescription, field.TypeString)
	}
	if value, ok := svuo.mutation.TenantID(); ok {
		_spec.SetField(slaviolation.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedTenantID(); ok {
		_spec.AddField(slaviolation.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.CreatedAt(); ok {
		_spec.SetField(slaviolation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.UpdatedAt(); ok {
		_spec.SetField(slaviolation.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &SLAViolation{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slaviolation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
