// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KnowledgeArticleDelete is the builder for deleting a KnowledgeArticle entity.
type KnowledgeArticleDelete struct {
	config
	hooks    []Hook
	mutation *KnowledgeArticleMutation
}

// Where appends a list predicates to the KnowledgeArticleDelete builder.
func (kad *KnowledgeArticleDelete) Where(ps ...predicate.KnowledgeArticle) *KnowledgeArticleDelete {
	kad.mutation.Where(ps...)
	return kad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kad *KnowledgeArticleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kad.sqlExec, kad.mutation, kad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kad *KnowledgeArticleDelete) ExecX(ctx context.Context) int {
	n, err := kad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kad *KnowledgeArticleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(knowledgearticle.Table, sqlgraph.NewFieldSpec(knowledgearticle.FieldID, field.TypeInt))
	if ps := kad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kad.mutation.done = true
	return affected, err
}

// KnowledgeArticleDeleteOne is the builder for deleting a single KnowledgeArticle entity.
type KnowledgeArticleDeleteOne struct {
	kad *KnowledgeArticleDelete
}

// Where appends a list predicates to the KnowledgeArticleDelete builder.
func (kado *KnowledgeArticleDeleteOne) Where(ps ...predicate.KnowledgeArticle) *KnowledgeArticleDeleteOne {
	kado.kad.mutation.Where(ps...)
	return kado
}

// Exec executes the deletion query.
func (kado *KnowledgeArticleDeleteOne) Exec(ctx context.Context) error {
	n, err := kado.kad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{knowledgearticle.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kado *KnowledgeArticleDeleteOne) ExecX(ctx context.Context) {
	if err := kado.Exec(ctx); err != nil {
		panic(err)
	}
}
