// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatusLogUpdate is the builder for updating StatusLog entities.
type StatusLogUpdate struct {
	config
	hooks    []Hook
	mutation *StatusLogMutation
}

// Where appends a list predicates to the StatusLogUpdate builder.
func (slu *StatusLogUpdate) Where(ps ...predicate.StatusLog) *StatusLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetTicketID sets the "ticket_id" field.
func (slu *StatusLogUpdate) SetTicketID(i int) *StatusLogUpdate {
	slu.mutation.SetTicketID(i)
	return slu
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (slu *StatusLogUpdate) SetNillableTicketID(i *int) *StatusLogUpdate {
	if i != nil {
		slu.SetTicketID(*i)
	}
	return slu
}

// SetFromStatus sets the "from_status" field.
func (slu *StatusLogUpdate) SetFromStatus(s string) *StatusLogUpdate {
	slu.mutation.SetFromStatus(s)
	return slu
}

// SetNillableFromStatus sets the "from_status" field if the given value is not nil.
func (slu *StatusLogUpdate) SetNillableFromStatus(s *string) *StatusLogUpdate {
	if s != nil {
		slu.SetFromStatus(*s)
	}
	return slu
}

// SetToStatus sets the "to_status" field.
func (slu *StatusLogUpdate) SetToStatus(s string) *StatusLogUpdate {
	slu.mutation.SetToStatus(s)
	return slu
}

// SetNillableToStatus sets the "to_status" field if the given value is not nil.
func (slu *StatusLogUpdate) SetNillableToStatus(s *string) *StatusLogUpdate {
	if s != nil {
		slu.SetToStatus(*s)
	}
	return slu
}

// SetUserID sets the "user_id" field.
func (slu *StatusLogUpdate) SetUserID(i int) *StatusLogUpdate {
	slu.mutation.SetUserID(i)
	return slu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slu *StatusLogUpdate) SetNillableUserID(i *int) *StatusLogUpdate {
	if i != nil {
		slu.SetUserID(*i)
	}
	return slu
}

// SetReason sets the "reason" field.
func (slu *StatusLogUpdate) SetReason(s string) *StatusLogUpdate {
	slu.mutation.SetReason(s)
	return slu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (slu *StatusLogUpdate) SetNillableReason(s *string) *StatusLogUpdate {
	if s != nil {
		slu.SetReason(*s)
	}
	return slu
}

// ClearReason clears the value of the "reason" field.
func (slu *StatusLogUpdate) ClearReason() *StatusLogUpdate {
	slu.mutation.ClearReason()
	return slu
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (slu *StatusLogUpdate) SetTicket(t *Ticket) *StatusLogUpdate {
	return slu.SetTicketID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (slu *StatusLogUpdate) SetUser(u *User) *StatusLogUpdate {
	return slu.SetUserID(u.ID)
}

// Mutation returns the StatusLogMutation object of the builder.
func (slu *StatusLogUpdate) Mutation() *StatusLogMutation {
	return slu.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (slu *StatusLogUpdate) ClearTicket() *StatusLogUpdate {
	slu.mutation.ClearTicket()
	return slu
}

// ClearUser clears the "user" edge to the User entity.
func (slu *StatusLogUpdate) ClearUser() *StatusLogUpdate {
	slu.mutation.ClearUser()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *StatusLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *StatusLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *StatusLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *StatusLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *StatusLogUpdate) check() error {
	if v, ok := slu.mutation.TicketID(); ok {
		if err := statuslog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.ticket_id": %w`, err)}
		}
	}
	if v, ok := slu.mutation.FromStatus(); ok {
		if err := statuslog.FromStatusValidator(v); err != nil {
			return &ValidationError{Name: "from_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.from_status": %w`, err)}
		}
	}
	if v, ok := slu.mutation.ToStatus(); ok {
		if err := statuslog.ToStatusValidator(v); err != nil {
			return &ValidationError{Name: "to_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.to_status": %w`, err)}
		}
	}
	if v, ok := slu.mutation.UserID(); ok {
		if err := statuslog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.user_id": %w`, err)}
		}
	}
	if slu.mutation.TicketCleared() && len(slu.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StatusLog.ticket"`)
	}
	if slu.mutation.UserCleared() && len(slu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StatusLog.user"`)
	}
	return nil
}

func (slu *StatusLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(statuslog.Table, statuslog.Columns, sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.FromStatus(); ok {
		_spec.SetField(statuslog.FieldFromStatus, field.TypeString, value)
	}
	if value, ok := slu.mutation.ToStatus(); ok {
		_spec.SetField(statuslog.FieldToStatus, field.TypeString, value)
	}
	if value, ok := slu.mutation.Reason(); ok {
		_spec.SetField(statuslog.FieldReason, field.TypeString, value)
	}
	if slu.mutation.ReasonCleared() {
		_spec.ClearField(statuslog.FieldReason, field.TypeString)
	}
	if slu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.TicketTable,
			Columns: []string{statuslog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.TicketTable,
			Columns: []string{statuslog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if slu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.UserTable,
			Columns: []string{statuslog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.UserTable,
			Columns: []string{statuslog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// StatusLogUpdateOne is the builder for updating a single StatusLog entity.
type StatusLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatusLogMutation
}

// SetTicketID sets the "ticket_id" field.
func (sluo *StatusLogUpdateOne) SetTicketID(i int) *StatusLogUpdateOne {
	sluo.mutation.SetTicketID(i)
	return sluo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (sluo *StatusLogUpdateOne) SetNillableTicketID(i *int) *StatusLogUpdateOne {
	if i != nil {
		sluo.SetTicketID(*i)
	}
	return sluo
}

// SetFromStatus sets the "from_status" field.
func (sluo *StatusLogUpdateOne) SetFromStatus(s string) *StatusLogUpdateOne {
	sluo.mutation.SetFromStatus(s)
	return sluo
}

// SetNillableFromStatus sets the "from_status" field if the given value is not nil.
func (sluo *StatusLogUpdateOne) SetNillableFromStatus(s *string) *StatusLogUpdateOne {
	if s != nil {
		sluo.SetFromStatus(*s)
	}
	return sluo
}

// SetToStatus sets the "to_status" field.
func (sluo *StatusLogUpdateOne) SetToStatus(s string) *StatusLogUpdateOne {
	sluo.mutation.SetToStatus(s)
	return sluo
}

// SetNillableToStatus sets the "to_status" field if the given value is not nil.
func (sluo *StatusLogUpdateOne) SetNillableToStatus(s *string) *StatusLogUpdateOne {
	if s != nil {
		sluo.SetToStatus(*s)
	}
	return sluo
}

// SetUserID sets the "user_id" field.
func (sluo *StatusLogUpdateOne) SetUserID(i int) *StatusLogUpdateOne {
	sluo.mutation.SetUserID(i)
	return sluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sluo *StatusLogUpdateOne) SetNillableUserID(i *int) *StatusLogUpdateOne {
	if i != nil {
		sluo.SetUserID(*i)
	}
	return sluo
}

// SetReason sets the "reason" field.
func (sluo *StatusLogUpdateOne) SetReason(s string) *StatusLogUpdateOne {
	sluo.mutation.SetReason(s)
	return sluo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (sluo *StatusLogUpdateOne) SetNillableReason(s *string) *StatusLogUpdateOne {
	if s != nil {
		sluo.SetReason(*s)
	}
	return sluo
}

// ClearReason clears the value of the "reason" field.
func (sluo *StatusLogUpdateOne) ClearReason() *StatusLogUpdateOne {
	sluo.mutation.ClearReason()
	return sluo
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (sluo *StatusLogUpdateOne) SetTicket(t *Ticket) *StatusLogUpdateOne {
	return sluo.SetTicketID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (sluo *StatusLogUpdateOne) SetUser(u *User) *StatusLogUpdateOne {
	return sluo.SetUserID(u.ID)
}

// Mutation returns the StatusLogMutation object of the builder.
func (sluo *StatusLogUpdateOne) Mutation() *StatusLogMutation {
	return sluo.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (sluo *StatusLogUpdateOne) ClearTicket() *StatusLogUpdateOne {
	sluo.mutation.ClearTicket()
	return sluo
}

// ClearUser clears the "user" edge to the User entity.
func (sluo *StatusLogUpdateOne) ClearUser() *StatusLogUpdateOne {
	sluo.mutation.ClearUser()
	return sluo
}

// Where appends a list predicates to the StatusLogUpdate builder.
func (sluo *StatusLogUpdateOne) Where(ps ...predicate.StatusLog) *StatusLogUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *StatusLogUpdateOne) Select(field string, fields ...string) *StatusLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated StatusLog entity.
func (sluo *StatusLogUpdateOne) Save(ctx context.Context) (*StatusLog, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *StatusLogUpdateOne) SaveX(ctx context.Context) *StatusLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *StatusLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *StatusLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *StatusLogUpdateOne) check() error {
	if v, ok := sluo.mutation.TicketID(); ok {
		if err := statuslog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.ticket_id": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.FromStatus(); ok {
		if err := statuslog.FromStatusValidator(v); err != nil {
			return &ValidationError{Name: "from_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.from_status": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.ToStatus(); ok {
		if err := statuslog.ToStatusValidator(v); err != nil {
			return &ValidationError{Name: "to_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.to_status": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.UserID(); ok {
		if err := statuslog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.user_id": %w`, err)}
		}
	}
	if sluo.mutation.TicketCleared() && len(sluo.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StatusLog.ticket"`)
	}
	if sluo.mutation.UserCleared() && len(sluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "StatusLog.user"`)
	}
	return nil
}

func (sluo *StatusLogUpdateOne) sqlSave(ctx context.Context) (_node *StatusLog, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(statuslog.Table, statuslog.Columns, sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StatusLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, statuslog.FieldID)
		for _, f := range fields {
			if !statuslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != statuslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.FromStatus(); ok {
		_spec.SetField(statuslog.FieldFromStatus, field.TypeString, value)
	}
	if value, ok := sluo.mutation.ToStatus(); ok {
		_spec.SetField(statuslog.FieldToStatus, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Reason(); ok {
		_spec.SetField(statuslog.FieldReason, field.TypeString, value)
	}
	if sluo.mutation.ReasonCleared() {
		_spec.ClearField(statuslog.FieldReason, field.TypeString)
	}
	if sluo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.TicketTable,
			Columns: []string{statuslog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.TicketTable,
			Columns: []string{statuslog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.UserTable,
			Columns: []string{statuslog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.UserTable,
			Columns: []string{statuslog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StatusLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{statuslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
