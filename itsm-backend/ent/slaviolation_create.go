// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/slaviolation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLAViolationCreate is the builder for creating a SLAViolation entity.
type SLAViolationCreate struct {
	config
	mutation *SLAViolationMutation
	hooks    []Hook
}

// SetSLADefinitionID sets the "sla_definition_id" field.
func (svc *SLAViolationCreate) SetSLADefinitionID(i int) *SLAViolationCreate {
	svc.mutation.SetSLADefinitionID(i)
	return svc
}

// SetTicketID sets the "ticket_id" field.
func (svc *SLAViolationCreate) SetTicketID(i int) *SLAViolationCreate {
	svc.mutation.SetTicketID(i)
	return svc
}

// SetViolationType sets the "violation_type" field.
func (svc *SLAViolationCreate) SetViolationType(s string) *SLAViolationCreate {
	svc.mutation.SetViolationType(s)
	return svc
}

// SetViolationTime sets the "violation_time" field.
func (svc *SLAViolationCreate) SetViolationTime(t time.Time) *SLAViolationCreate {
	svc.mutation.SetViolationTime(t)
	return svc
}

// SetNillableViolationTime sets the "violation_time" field if the given value is not nil.
func (svc *SLAViolationCreate) SetNillableViolationTime(t *time.Time) *SLAViolationCreate {
	if t != nil {
		svc.SetViolationTime(*t)
	}
	return svc
}

// SetDescription sets the "description" field.
func (svc *SLAViolationCreate) SetDescription(s string) *SLAViolationCreate {
	svc.mutation.SetDescription(s)
	return svc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (svc *SLAViolationCreate) SetNillableDescription(s *string) *SLAViolationCreate {
	if s != nil {
		svc.SetDescription(*s)
	}
	return svc
}

// SetTenantID sets the "tenant_id" field.
func (svc *SLAViolationCreate) SetTenantID(i int) *SLAViolationCreate {
	svc.mutation.SetTenantID(i)
	return svc
}

// SetCreatedAt sets the "created_at" field.
func (svc *SLAViolationCreate) SetCreatedAt(t time.Time) *SLAViolationCreate {
	svc.mutation.SetCreatedAt(t)
	return svc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svc *SLAViolationCreate) SetNillableCreatedAt(t *time.Time) *SLAViolationCreate {
	if t != nil {
		svc.SetCreatedAt(*t)
	}
	return svc
}

// SetUpdatedAt sets the "updated_at" field.
func (svc *SLAViolationCreate) SetUpdatedAt(t time.Time) *SLAViolationCreate {
	svc.mutation.SetUpdatedAt(t)
	return svc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (svc *SLAViolationCreate) SetNillableUpdatedAt(t *time.Time) *SLAViolationCreate {
	if t != nil {
		svc.SetUpdatedAt(*t)
	}
	return svc
}

// Mutation returns the SLAViolationMutation object of the builder.
func (svc *SLAViolationCreate) Mutation() *SLAViolationMutation {
	return svc.mutation
}

// Save creates the SLAViolation in the database.
func (svc *SLAViolationCreate) Save(ctx context.Context) (*SLAViolation, error) {
	svc.defaults()
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SLAViolationCreate) SaveX(ctx context.Context) *SLAViolation {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SLAViolationCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SLAViolationCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svc *SLAViolationCreate) defaults() {
	if _, ok := svc.mutation.ViolationTime(); !ok {
		v := slaviolation.DefaultViolationTime()
		svc.mutation.SetViolationTime(v)
	}
	if _, ok := svc.mutation.CreatedAt(); !ok {
		v := slaviolation.DefaultCreatedAt()
		svc.mutation.SetCreatedAt(v)
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		v := slaviolation.DefaultUpdatedAt()
		svc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SLAViolationCreate) check() error {
	if _, ok := svc.mutation.SLADefinitionID(); !ok {
		return &ValidationError{Name: "sla_definition_id", err: errors.New(`ent: missing required field "SLAViolation.sla_definition_id"`)}
	}
	if v, ok := svc.mutation.SLADefinitionID(); ok {
		if err := slaviolation.SLADefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "sla_definition_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.sla_definition_id": %w`, err)}
		}
	}
	if _, ok := svc.mutation.TicketID(); !ok {
		return &ValidationError{Name: "ticket_id", err: errors.New(`ent: missing required field "SLAViolation.ticket_id"`)}
	}
	if v, ok := svc.mutation.TicketID(); ok {
		if err := slaviolation.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.ticket_id": %w`, err)}
		}
	}
	if _, ok := svc.mutation.ViolationType(); !ok {
		return &ValidationError{Name: "violation_type", err: errors.New(`ent: missing required field "SLAViolation.violation_type"`)}
	}
	if v, ok := svc.mutation.ViolationType(); ok {
		if err := slaviolation.ViolationTypeValidator(v); err != nil {
			return &ValidationError{Name: "violation_type", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.violation_type": %w`, err)}
		}
	}
	if _, ok := svc.mutation.ViolationTime(); !ok {
		return &ValidationError{Name: "violation_time", err: errors.New(`ent: missing required field "SLAViolation.violation_time"`)}
	}
	if _, ok := svc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SLAViolation.tenant_id"`)}
	}
	if v, ok := svc.mutation.TenantID(); ok {
		if err := slaviolation.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SLAViolation.tenant_id": %w`, err)}
		}
	}
	if _, ok := svc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SLAViolation.created_at"`)}
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SLAViolation.updated_at"`)}
	}
	return nil
}

func (svc *SLAViolationCreate) sqlSave(ctx context.Context) (*SLAViolation, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SLAViolationCreate) createSpec() (*SLAViolation, *sqlgraph.CreateSpec) {
	var (
		_node = &SLAViolation{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(slaviolation.Table, sqlgraph.NewFieldSpec(slaviolation.FieldID, field.TypeInt))
	)
	if value, ok := svc.mutation.SLADefinitionID(); ok {
		_spec.SetField(slaviolation.FieldSLADefinitionID, field.TypeInt, value)
		_node.SLADefinitionID = value
	}
	if value, ok := svc.mutation.TicketID(); ok {
		_spec.SetField(slaviolation.FieldTicketID, field.TypeInt, value)
		_node.TicketID = value
	}
	if value, ok := svc.mutation.ViolationType(); ok {
		_spec.SetField(slaviolation.FieldViolationType, field.TypeString, value)
		_node.ViolationType = value
	}
	if value, ok := svc.mutation.ViolationTime(); ok {
		_spec.SetField(slaviolation.FieldViolationTime, field.TypeTime, value)
		_node.ViolationTime = value
	}
	if value, ok := svc.mutation.Description(); ok {
		_spec.SetField(slaviolation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := svc.mutation.TenantID(); ok {
		_spec.SetField(slaviolation.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := svc.mutation.CreatedAt(); ok {
		_spec.SetField(slaviolation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := svc.mutation.UpdatedAt(); ok {
		_spec.SetField(slaviolation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SLAViolationCreateBulk is the builder for creating many SLAViolation entities in bulk.
type SLAViolationCreateBulk struct {
	config
	err      error
	builders []*SLAViolationCreate
}

// Save creates the SLAViolation entities in the database.
func (svcb *SLAViolationCreateBulk) Save(ctx context.Context) ([]*SLAViolation, error) {
	if svcb.err != nil {
		return nil, svcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SLAViolation, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SLAViolationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SLAViolationCreateBulk) SaveX(ctx context.Context) []*SLAViolation {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SLAViolationCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SLAViolationCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
