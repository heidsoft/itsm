// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/citype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIType is the model entity for the CIType schema.
type CIType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 类型名称
	Name string `json:"name,omitempty"`
	// 类型描述
	Description string `json:"description,omitempty"`
	// 图标
	Icon string `json:"icon,omitempty"`
	// 颜色
	Color string `json:"color,omitempty"`
	// 属性模式定义
	AttributeSchema string `json:"attribute_schema,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 是否激活
	IsActive bool `json:"is_active,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case citype.FieldIsActive:
			values[i] = new(sql.NullBool)
		case citype.FieldID, citype.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case citype.FieldName, citype.FieldDescription, citype.FieldIcon, citype.FieldColor, citype.FieldAttributeSchema:
			values[i] = new(sql.NullString)
		case citype.FieldCreatedAt, citype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIType fields.
func (ct *CIType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case citype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case citype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ct.Name = value.String
			}
		case citype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ct.Description = value.String
			}
		case citype.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				ct.Icon = value.String
			}
		case citype.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				ct.Color = value.String
			}
		case citype.FieldAttributeSchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_schema", values[i])
			} else if value.Valid {
				ct.AttributeSchema = value.String
			}
		case citype.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ct.TenantID = int(value.Int64)
			}
		case citype.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				ct.IsActive = value.Bool
			}
		case citype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case citype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIType.
// This includes values selected through modifiers, order, etc.
func (ct *CIType) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// Update returns a builder for updating this CIType.
// Note that you need to call CIType.Unwrap() before calling this method if this CIType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CIType) Update() *CITypeUpdateOne {
	return NewCITypeClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CIType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CIType) Unwrap() *CIType {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIType is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CIType) String() string {
	var builder strings.Builder
	builder.WriteString("CIType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("name=")
	builder.WriteString(ct.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ct.Description)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(ct.Icon)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(ct.Color)
	builder.WriteString(", ")
	builder.WriteString("attribute_schema=")
	builder.WriteString(ct.AttributeSchema)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ct.TenantID))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", ct.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CITypes is a parsable slice of CIType.
type CITypes []*CIType
