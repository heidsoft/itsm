// Code generated by ent, DO NOT EDIT.

package cirelationshiptype

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDescription, v))
}

// Direction applies equality check predicate on the "direction" field. It's identical to DirectionEQ.
func Direction(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDirection, v))
}

// Cardinality applies equality check predicate on the "cardinality" field. It's identical to CardinalityEQ.
func Cardinality(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldCardinality, v))
}

// IsSystem applies equality check predicate on the "is_system" field. It's identical to IsSystemEQ.
func IsSystem(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldIsSystem, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldIsActive, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContainsFold(FieldDescription, v))
}

// DirectionEQ applies the EQ predicate on the "direction" field.
func DirectionEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldDirection, v))
}

// DirectionNEQ applies the NEQ predicate on the "direction" field.
func DirectionNEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldDirection, v))
}

// DirectionIn applies the In predicate on the "direction" field.
func DirectionIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldDirection, vs...))
}

// DirectionNotIn applies the NotIn predicate on the "direction" field.
func DirectionNotIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldDirection, vs...))
}

// DirectionGT applies the GT predicate on the "direction" field.
func DirectionGT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldDirection, v))
}

// DirectionGTE applies the GTE predicate on the "direction" field.
func DirectionGTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldDirection, v))
}

// DirectionLT applies the LT predicate on the "direction" field.
func DirectionLT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldDirection, v))
}

// DirectionLTE applies the LTE predicate on the "direction" field.
func DirectionLTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldDirection, v))
}

// DirectionContains applies the Contains predicate on the "direction" field.
func DirectionContains(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContains(FieldDirection, v))
}

// DirectionHasPrefix applies the HasPrefix predicate on the "direction" field.
func DirectionHasPrefix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasPrefix(FieldDirection, v))
}

// DirectionHasSuffix applies the HasSuffix predicate on the "direction" field.
func DirectionHasSuffix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasSuffix(FieldDirection, v))
}

// DirectionEqualFold applies the EqualFold predicate on the "direction" field.
func DirectionEqualFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEqualFold(FieldDirection, v))
}

// DirectionContainsFold applies the ContainsFold predicate on the "direction" field.
func DirectionContainsFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContainsFold(FieldDirection, v))
}

// CardinalityEQ applies the EQ predicate on the "cardinality" field.
func CardinalityEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldCardinality, v))
}

// CardinalityNEQ applies the NEQ predicate on the "cardinality" field.
func CardinalityNEQ(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldCardinality, v))
}

// CardinalityIn applies the In predicate on the "cardinality" field.
func CardinalityIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldCardinality, vs...))
}

// CardinalityNotIn applies the NotIn predicate on the "cardinality" field.
func CardinalityNotIn(vs ...string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldCardinality, vs...))
}

// CardinalityGT applies the GT predicate on the "cardinality" field.
func CardinalityGT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldCardinality, v))
}

// CardinalityGTE applies the GTE predicate on the "cardinality" field.
func CardinalityGTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldCardinality, v))
}

// CardinalityLT applies the LT predicate on the "cardinality" field.
func CardinalityLT(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldCardinality, v))
}

// CardinalityLTE applies the LTE predicate on the "cardinality" field.
func CardinalityLTE(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldCardinality, v))
}

// CardinalityContains applies the Contains predicate on the "cardinality" field.
func CardinalityContains(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContains(FieldCardinality, v))
}

// CardinalityHasPrefix applies the HasPrefix predicate on the "cardinality" field.
func CardinalityHasPrefix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasPrefix(FieldCardinality, v))
}

// CardinalityHasSuffix applies the HasSuffix predicate on the "cardinality" field.
func CardinalityHasSuffix(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldHasSuffix(FieldCardinality, v))
}

// CardinalityEqualFold applies the EqualFold predicate on the "cardinality" field.
func CardinalityEqualFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEqualFold(FieldCardinality, v))
}

// CardinalityContainsFold applies the ContainsFold predicate on the "cardinality" field.
func CardinalityContainsFold(v string) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldContainsFold(FieldCardinality, v))
}

// SourceCiTypesIsNil applies the IsNil predicate on the "source_ci_types" field.
func SourceCiTypesIsNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIsNull(FieldSourceCiTypes))
}

// SourceCiTypesNotNil applies the NotNil predicate on the "source_ci_types" field.
func SourceCiTypesNotNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotNull(FieldSourceCiTypes))
}

// TargetCiTypesIsNil applies the IsNil predicate on the "target_ci_types" field.
func TargetCiTypesIsNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIsNull(FieldTargetCiTypes))
}

// TargetCiTypesNotNil applies the NotNil predicate on the "target_ci_types" field.
func TargetCiTypesNotNil() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotNull(FieldTargetCiTypes))
}

// IsSystemEQ applies the EQ predicate on the "is_system" field.
func IsSystemEQ(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldIsSystem, v))
}

// IsSystemNEQ applies the NEQ predicate on the "is_system" field.
func IsSystemNEQ(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldIsSystem, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldIsActive, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldTenantID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelationships applies the HasEdge predicate on the "relationships" edge.
func HasRelationships() predicate.CIRelationshipType {
	return predicate.CIRelationshipType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RelationshipsTable, RelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationshipsWith applies the HasEdge predicate on the "relationships" edge with a given conditions (other predicates).
func HasRelationshipsWith(preds ...predicate.CIRelationship) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(func(s *sql.Selector) {
		step := newRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIRelationshipType) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIRelationshipType) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIRelationshipType) predicate.CIRelationshipType {
	return predicate.CIRelationshipType(sql.NotPredicates(p))
}
