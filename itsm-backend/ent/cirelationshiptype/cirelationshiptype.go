// Code generated by ent, DO NOT EDIT.

package cirelationshiptype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cirelationshiptype type in the database.
	Label = "ci_relationship_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// FieldCardinality holds the string denoting the cardinality field in the database.
	FieldCardinality = "cardinality"
	// FieldSourceCiTypes holds the string denoting the source_ci_types field in the database.
	FieldSourceCiTypes = "source_ci_types"
	// FieldTargetCiTypes holds the string denoting the target_ci_types field in the database.
	FieldTargetCiTypes = "target_ci_types"
	// FieldIsSystem holds the string denoting the is_system field in the database.
	FieldIsSystem = "is_system"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRelationships holds the string denoting the relationships edge name in mutations.
	EdgeRelationships = "relationships"
	// Table holds the table name of the cirelationshiptype in the database.
	Table = "ci_relationship_types"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "ci_relationship_types"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RelationshipsTable is the table that holds the relationships relation/edge.
	RelationshipsTable = "ci_relationships"
	// RelationshipsInverseTable is the table name for the CIRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "cirelationship" package.
	RelationshipsInverseTable = "ci_relationships"
	// RelationshipsColumn is the table column denoting the relationships relation/edge.
	RelationshipsColumn = "relationship_type_id"
)

// Columns holds all SQL columns for cirelationshiptype fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldDirection,
	FieldCardinality,
	FieldSourceCiTypes,
	FieldTargetCiTypes,
	FieldIsSystem,
	FieldIsActive,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ci_relationship_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ci_type_allowed_relationships",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultDirection holds the default value on creation for the "direction" field.
	DefaultDirection string
	// DefaultCardinality holds the default value on creation for the "cardinality" field.
	DefaultCardinality string
	// DefaultIsSystem holds the default value on creation for the "is_system" field.
	DefaultIsSystem bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CIRelationshipType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDirection orders the results by the direction field.
func ByDirection(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirection, opts...).ToFunc()
}

// ByCardinality orders the results by the cardinality field.
func ByCardinality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardinality, opts...).ToFunc()
}

// ByIsSystem orders the results by the is_system field.
func ByIsSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSystem, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelationshipsCount orders the results by relationships count.
func ByRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelationshipsStep(), opts...)
	}
}

// ByRelationships orders the results by relationships terms.
func ByRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RelationshipsTable, RelationshipsColumn),
	)
}
