// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTenantID, v))
}

// PlanName applies equality check predicate on the "plan_name" field. It's identical to PlanNameEQ.
func PlanName(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPlanName, v))
}

// MonthlyPrice applies equality check predicate on the "monthly_price" field. It's identical to MonthlyPriceEQ.
func MonthlyPrice(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMonthlyPrice, v))
}

// YearlyPrice applies equality check predicate on the "yearly_price" field. It's identical to YearlyPriceEQ.
func YearlyPrice(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldYearlyPrice, v))
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStartsAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTenantID, vs...))
}

// PlanNameEQ applies the EQ predicate on the "plan_name" field.
func PlanNameEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPlanName, v))
}

// PlanNameNEQ applies the NEQ predicate on the "plan_name" field.
func PlanNameNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPlanName, v))
}

// PlanNameIn applies the In predicate on the "plan_name" field.
func PlanNameIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPlanName, vs...))
}

// PlanNameNotIn applies the NotIn predicate on the "plan_name" field.
func PlanNameNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPlanName, vs...))
}

// PlanNameGT applies the GT predicate on the "plan_name" field.
func PlanNameGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPlanName, v))
}

// PlanNameGTE applies the GTE predicate on the "plan_name" field.
func PlanNameGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPlanName, v))
}

// PlanNameLT applies the LT predicate on the "plan_name" field.
func PlanNameLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPlanName, v))
}

// PlanNameLTE applies the LTE predicate on the "plan_name" field.
func PlanNameLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPlanName, v))
}

// PlanNameContains applies the Contains predicate on the "plan_name" field.
func PlanNameContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPlanName, v))
}

// PlanNameHasPrefix applies the HasPrefix predicate on the "plan_name" field.
func PlanNameHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPlanName, v))
}

// PlanNameHasSuffix applies the HasSuffix predicate on the "plan_name" field.
func PlanNameHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPlanName, v))
}

// PlanNameEqualFold applies the EqualFold predicate on the "plan_name" field.
func PlanNameEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPlanName, v))
}

// PlanNameContainsFold applies the ContainsFold predicate on the "plan_name" field.
func PlanNameContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPlanName, v))
}

// MonthlyPriceEQ applies the EQ predicate on the "monthly_price" field.
func MonthlyPriceEQ(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMonthlyPrice, v))
}

// MonthlyPriceNEQ applies the NEQ predicate on the "monthly_price" field.
func MonthlyPriceNEQ(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMonthlyPrice, v))
}

// MonthlyPriceIn applies the In predicate on the "monthly_price" field.
func MonthlyPriceIn(vs ...float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMonthlyPrice, vs...))
}

// MonthlyPriceNotIn applies the NotIn predicate on the "monthly_price" field.
func MonthlyPriceNotIn(vs ...float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMonthlyPrice, vs...))
}

// MonthlyPriceGT applies the GT predicate on the "monthly_price" field.
func MonthlyPriceGT(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMonthlyPrice, v))
}

// MonthlyPriceGTE applies the GTE predicate on the "monthly_price" field.
func MonthlyPriceGTE(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMonthlyPrice, v))
}

// MonthlyPriceLT applies the LT predicate on the "monthly_price" field.
func MonthlyPriceLT(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMonthlyPrice, v))
}

// MonthlyPriceLTE applies the LTE predicate on the "monthly_price" field.
func MonthlyPriceLTE(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMonthlyPrice, v))
}

// YearlyPriceEQ applies the EQ predicate on the "yearly_price" field.
func YearlyPriceEQ(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldYearlyPrice, v))
}

// YearlyPriceNEQ applies the NEQ predicate on the "yearly_price" field.
func YearlyPriceNEQ(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldYearlyPrice, v))
}

// YearlyPriceIn applies the In predicate on the "yearly_price" field.
func YearlyPriceIn(vs ...float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldYearlyPrice, vs...))
}

// YearlyPriceNotIn applies the NotIn predicate on the "yearly_price" field.
func YearlyPriceNotIn(vs ...float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldYearlyPrice, vs...))
}

// YearlyPriceGT applies the GT predicate on the "yearly_price" field.
func YearlyPriceGT(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldYearlyPrice, v))
}

// YearlyPriceGTE applies the GTE predicate on the "yearly_price" field.
func YearlyPriceGTE(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldYearlyPrice, v))
}

// YearlyPriceLT applies the LT predicate on the "yearly_price" field.
func YearlyPriceLT(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldYearlyPrice, v))
}

// YearlyPriceLTE applies the LTE predicate on the "yearly_price" field.
func YearlyPriceLTE(v float64) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldYearlyPrice, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStatus, vs...))
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldStartsAt, v))
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldStartsAt, v))
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldStartsAt, vs...))
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldStartsAt, vs...))
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldStartsAt, v))
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldStartsAt, v))
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldStartsAt, v))
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldStartsAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldExpiresAt, v))
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldFeatures))
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldFeatures))
}

// QuotaIsNil applies the IsNil predicate on the "quota" field.
func QuotaIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldQuota))
}

// QuotaNotNil applies the NotNil predicate on the "quota" field.
func QuotaNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldQuota))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}
