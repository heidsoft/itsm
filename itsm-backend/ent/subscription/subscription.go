// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPlanName holds the string denoting the plan_name field in the database.
	FieldPlanName = "plan_name"
	// FieldMonthlyPrice holds the string denoting the monthly_price field in the database.
	FieldMonthlyPrice = "monthly_price"
	// FieldYearlyPrice holds the string denoting the yearly_price field in the database.
	FieldYearlyPrice = "yearly_price"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartsAt holds the string denoting the starts_at field in the database.
	FieldStartsAt = "starts_at"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldQuota holds the string denoting the quota field in the database.
	FieldQuota = "quota"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "subscriptions"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldPlanName,
	FieldMonthlyPrice,
	FieldYearlyPrice,
	FieldStatus,
	FieldStartsAt,
	FieldExpiresAt,
	FieldFeatures,
	FieldQuota,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// PlanNameValidator is a validator for the "plan_name" field. It is called by the builders before save.
	PlanNameValidator func(string) error
	// MonthlyPriceValidator is a validator for the "monthly_price" field. It is called by the builders before save.
	MonthlyPriceValidator func(float64) error
	// YearlyPriceValidator is a validator for the "yearly_price" field. It is called by the builders before save.
	YearlyPriceValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusExpired  Status = "expired"
	StatusCanceled Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusExpired, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPlanName orders the results by the plan_name field.
func ByPlanName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanName, opts...).ToFunc()
}

// ByMonthlyPrice orders the results by the monthly_price field.
func ByMonthlyPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonthlyPrice, opts...).ToFunc()
}

// ByYearlyPrice orders the results by the yearly_price field.
func ByYearlyPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYearlyPrice, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartsAt orders the results by the starts_at field.
func ByStartsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartsAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
