// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/cirelationship"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIRelationship is the model entity for the CIRelationship schema.
type CIRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 源CI ID
	SourceCiID int `json:"source_ci_id,omitempty"`
	// 目标CI ID
	TargetCiID int `json:"target_ci_id,omitempty"`
	// 关系类型ID
	RelationshipTypeID int `json:"relationship_type_id,omitempty"`
	// 关系描述
	Description string `json:"description,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cirelationship.FieldID, cirelationship.FieldSourceCiID, cirelationship.FieldTargetCiID, cirelationship.FieldRelationshipTypeID, cirelationship.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case cirelationship.FieldDescription:
			values[i] = new(sql.NullString)
		case cirelationship.FieldCreatedAt, cirelationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIRelationship fields.
func (cr *CIRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cirelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case cirelationship.FieldSourceCiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_ci_id", values[i])
			} else if value.Valid {
				cr.SourceCiID = int(value.Int64)
			}
		case cirelationship.FieldTargetCiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_ci_id", values[i])
			} else if value.Valid {
				cr.TargetCiID = int(value.Int64)
			}
		case cirelationship.FieldRelationshipTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_type_id", values[i])
			} else if value.Valid {
				cr.RelationshipTypeID = int(value.Int64)
			}
		case cirelationship.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cr.Description = value.String
			}
		case cirelationship.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cr.TenantID = int(value.Int64)
			}
		case cirelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case cirelationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIRelationship.
// This includes values selected through modifiers, order, etc.
func (cr *CIRelationship) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// Update returns a builder for updating this CIRelationship.
// Note that you need to call CIRelationship.Unwrap() before calling this method if this CIRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CIRelationship) Update() *CIRelationshipUpdateOne {
	return NewCIRelationshipClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CIRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CIRelationship) Unwrap() *CIRelationship {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIRelationship is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CIRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("CIRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("source_ci_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.SourceCiID))
	builder.WriteString(", ")
	builder.WriteString("target_ci_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.TargetCiID))
	builder.WriteString(", ")
	builder.WriteString("relationship_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.RelationshipTypeID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cr.Description)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CIRelationships is a parsable slice of CIRelationship.
type CIRelationships []*CIRelationship
