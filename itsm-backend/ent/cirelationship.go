// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIRelationship is the model entity for the CIRelationship schema.
type CIRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceCiID holds the value of the "source_ci_id" field.
	SourceCiID int `json:"source_ci_id,omitempty"`
	// TargetCiID holds the value of the "target_ci_id" field.
	TargetCiID int `json:"target_ci_id,omitempty"`
	// RelationshipTypeID holds the value of the "relationship_type_id" field.
	RelationshipTypeID int `json:"relationship_type_id,omitempty"`
	// Properties holds the value of the "properties" field.
	Properties map[string]interface{} `json:"properties,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// EffectiveFrom holds the value of the "effective_from" field.
	EffectiveFrom time.Time `json:"effective_from,omitempty"`
	// EffectiveTo holds the value of the "effective_to" field.
	EffectiveTo time.Time `json:"effective_to,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CIRelationshipQuery when eager-loading is set.
	Edges        CIRelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CIRelationshipEdges holds the relations/edges for other nodes in the graph.
type CIRelationshipEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// SourceCi holds the value of the source_ci edge.
	SourceCi *ConfigurationItem `json:"source_ci,omitempty"`
	// TargetCi holds the value of the target_ci edge.
	TargetCi *ConfigurationItem `json:"target_ci,omitempty"`
	// RelationshipType holds the value of the relationship_type edge.
	RelationshipType *CIRelationshipType `json:"relationship_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIRelationshipEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// SourceCiOrErr returns the SourceCi value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIRelationshipEdges) SourceCiOrErr() (*ConfigurationItem, error) {
	if e.SourceCi != nil {
		return e.SourceCi, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: configurationitem.Label}
	}
	return nil, &NotLoadedError{edge: "source_ci"}
}

// TargetCiOrErr returns the TargetCi value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIRelationshipEdges) TargetCiOrErr() (*ConfigurationItem, error) {
	if e.TargetCi != nil {
		return e.TargetCi, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: configurationitem.Label}
	}
	return nil, &NotLoadedError{edge: "target_ci"}
}

// RelationshipTypeOrErr returns the RelationshipType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CIRelationshipEdges) RelationshipTypeOrErr() (*CIRelationshipType, error) {
	if e.RelationshipType != nil {
		return e.RelationshipType, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: cirelationshiptype.Label}
	}
	return nil, &NotLoadedError{edge: "relationship_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cirelationship.FieldProperties:
			values[i] = new([]byte)
		case cirelationship.FieldID, cirelationship.FieldSourceCiID, cirelationship.FieldTargetCiID, cirelationship.FieldRelationshipTypeID, cirelationship.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case cirelationship.FieldStatus:
			values[i] = new(sql.NullString)
		case cirelationship.FieldEffectiveFrom, cirelationship.FieldEffectiveTo, cirelationship.FieldCreatedAt, cirelationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIRelationship fields.
func (cr *CIRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cirelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case cirelationship.FieldSourceCiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source_ci_id", values[i])
			} else if value.Valid {
				cr.SourceCiID = int(value.Int64)
			}
		case cirelationship.FieldTargetCiID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_ci_id", values[i])
			} else if value.Valid {
				cr.TargetCiID = int(value.Int64)
			}
		case cirelationship.FieldRelationshipTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relationship_type_id", values[i])
			} else if value.Valid {
				cr.RelationshipTypeID = int(value.Int64)
			}
		case cirelationship.FieldProperties:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cr.Properties); err != nil {
					return fmt.Errorf("unmarshal field properties: %w", err)
				}
			}
		case cirelationship.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cr.Status = value.String
			}
		case cirelationship.FieldEffectiveFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_from", values[i])
			} else if value.Valid {
				cr.EffectiveFrom = value.Time
			}
		case cirelationship.FieldEffectiveTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_to", values[i])
			} else if value.Valid {
				cr.EffectiveTo = value.Time
			}
		case cirelationship.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cr.TenantID = int(value.Int64)
			}
		case cirelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case cirelationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIRelationship.
// This includes values selected through modifiers, order, etc.
func (cr *CIRelationship) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CIRelationship entity.
func (cr *CIRelationship) QueryTenant() *TenantQuery {
	return NewCIRelationshipClient(cr.config).QueryTenant(cr)
}

// QuerySourceCi queries the "source_ci" edge of the CIRelationship entity.
func (cr *CIRelationship) QuerySourceCi() *ConfigurationItemQuery {
	return NewCIRelationshipClient(cr.config).QuerySourceCi(cr)
}

// QueryTargetCi queries the "target_ci" edge of the CIRelationship entity.
func (cr *CIRelationship) QueryTargetCi() *ConfigurationItemQuery {
	return NewCIRelationshipClient(cr.config).QueryTargetCi(cr)
}

// QueryRelationshipType queries the "relationship_type" edge of the CIRelationship entity.
func (cr *CIRelationship) QueryRelationshipType() *CIRelationshipTypeQuery {
	return NewCIRelationshipClient(cr.config).QueryRelationshipType(cr)
}

// Update returns a builder for updating this CIRelationship.
// Note that you need to call CIRelationship.Unwrap() before calling this method if this CIRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CIRelationship) Update() *CIRelationshipUpdateOne {
	return NewCIRelationshipClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CIRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CIRelationship) Unwrap() *CIRelationship {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIRelationship is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CIRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("CIRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("source_ci_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.SourceCiID))
	builder.WriteString(", ")
	builder.WriteString("target_ci_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.TargetCiID))
	builder.WriteString(", ")
	builder.WriteString("relationship_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.RelationshipTypeID))
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(fmt.Sprintf("%v", cr.Properties))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cr.Status)
	builder.WriteString(", ")
	builder.WriteString("effective_from=")
	builder.WriteString(cr.EffectiveFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effective_to=")
	builder.WriteString(cr.EffectiveTo.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CIRelationships is a parsable slice of CIRelationship.
type CIRelationships []*CIRelationship
