// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIRelationshipTypeQuery is the builder for querying CIRelationshipType entities.
type CIRelationshipTypeQuery struct {
	config
	ctx               *QueryContext
	order             []cirelationshiptype.OrderOption
	inters            []Interceptor
	predicates        []predicate.CIRelationshipType
	withTenant        *TenantQuery
	withRelationships *CIRelationshipQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CIRelationshipTypeQuery builder.
func (crtq *CIRelationshipTypeQuery) Where(ps ...predicate.CIRelationshipType) *CIRelationshipTypeQuery {
	crtq.predicates = append(crtq.predicates, ps...)
	return crtq
}

// Limit the number of records to be returned by this query.
func (crtq *CIRelationshipTypeQuery) Limit(limit int) *CIRelationshipTypeQuery {
	crtq.ctx.Limit = &limit
	return crtq
}

// Offset to start from.
func (crtq *CIRelationshipTypeQuery) Offset(offset int) *CIRelationshipTypeQuery {
	crtq.ctx.Offset = &offset
	return crtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crtq *CIRelationshipTypeQuery) Unique(unique bool) *CIRelationshipTypeQuery {
	crtq.ctx.Unique = &unique
	return crtq
}

// Order specifies how the records should be ordered.
func (crtq *CIRelationshipTypeQuery) Order(o ...cirelationshiptype.OrderOption) *CIRelationshipTypeQuery {
	crtq.order = append(crtq.order, o...)
	return crtq
}

// QueryTenant chains the current query on the "tenant" edge.
func (crtq *CIRelationshipTypeQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: crtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationshiptype.Table, cirelationshiptype.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationshiptype.TenantTable, cirelationshiptype.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(crtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelationships chains the current query on the "relationships" edge.
func (crtq *CIRelationshipTypeQuery) QueryRelationships() *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: crtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationshiptype.Table, cirelationshiptype.FieldID, selector),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cirelationshiptype.RelationshipsTable, cirelationshiptype.RelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(crtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CIRelationshipType entity from the query.
// Returns a *NotFoundError when no CIRelationshipType was found.
func (crtq *CIRelationshipTypeQuery) First(ctx context.Context) (*CIRelationshipType, error) {
	nodes, err := crtq.Limit(1).All(setContextOp(ctx, crtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cirelationshiptype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) FirstX(ctx context.Context) *CIRelationshipType {
	node, err := crtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CIRelationshipType ID from the query.
// Returns a *NotFoundError when no CIRelationshipType ID was found.
func (crtq *CIRelationshipTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crtq.Limit(1).IDs(setContextOp(ctx, crtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cirelationshiptype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := crtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CIRelationshipType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CIRelationshipType entity is found.
// Returns a *NotFoundError when no CIRelationshipType entities are found.
func (crtq *CIRelationshipTypeQuery) Only(ctx context.Context) (*CIRelationshipType, error) {
	nodes, err := crtq.Limit(2).All(setContextOp(ctx, crtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cirelationshiptype.Label}
	default:
		return nil, &NotSingularError{cirelationshiptype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) OnlyX(ctx context.Context) *CIRelationshipType {
	node, err := crtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CIRelationshipType ID in the query.
// Returns a *NotSingularError when more than one CIRelationshipType ID is found.
// Returns a *NotFoundError when no entities are found.
func (crtq *CIRelationshipTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crtq.Limit(2).IDs(setContextOp(ctx, crtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cirelationshiptype.Label}
	default:
		err = &NotSingularError{cirelationshiptype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := crtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CIRelationshipTypes.
func (crtq *CIRelationshipTypeQuery) All(ctx context.Context) ([]*CIRelationshipType, error) {
	ctx = setContextOp(ctx, crtq.ctx, ent.OpQueryAll)
	if err := crtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CIRelationshipType, *CIRelationshipTypeQuery]()
	return withInterceptors[[]*CIRelationshipType](ctx, crtq, qr, crtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) AllX(ctx context.Context) []*CIRelationshipType {
	nodes, err := crtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CIRelationshipType IDs.
func (crtq *CIRelationshipTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if crtq.ctx.Unique == nil && crtq.path != nil {
		crtq.Unique(true)
	}
	ctx = setContextOp(ctx, crtq.ctx, ent.OpQueryIDs)
	if err = crtq.Select(cirelationshiptype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := crtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crtq *CIRelationshipTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, crtq.ctx, ent.OpQueryCount)
	if err := crtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, crtq, querierCount[*CIRelationshipTypeQuery](), crtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) CountX(ctx context.Context) int {
	count, err := crtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crtq *CIRelationshipTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, crtq.ctx, ent.OpQueryExist)
	switch _, err := crtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (crtq *CIRelationshipTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := crtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CIRelationshipTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crtq *CIRelationshipTypeQuery) Clone() *CIRelationshipTypeQuery {
	if crtq == nil {
		return nil
	}
	return &CIRelationshipTypeQuery{
		config:            crtq.config,
		ctx:               crtq.ctx.Clone(),
		order:             append([]cirelationshiptype.OrderOption{}, crtq.order...),
		inters:            append([]Interceptor{}, crtq.inters...),
		predicates:        append([]predicate.CIRelationshipType{}, crtq.predicates...),
		withTenant:        crtq.withTenant.Clone(),
		withRelationships: crtq.withRelationships.Clone(),
		// clone intermediate query.
		sql:  crtq.sql.Clone(),
		path: crtq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (crtq *CIRelationshipTypeQuery) WithTenant(opts ...func(*TenantQuery)) *CIRelationshipTypeQuery {
	query := (&TenantClient{config: crtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crtq.withTenant = query
	return crtq
}

// WithRelationships tells the query-builder to eager-load the nodes that are connected to
// the "relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (crtq *CIRelationshipTypeQuery) WithRelationships(opts ...func(*CIRelationshipQuery)) *CIRelationshipTypeQuery {
	query := (&CIRelationshipClient{config: crtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	crtq.withRelationships = query
	return crtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CIRelationshipType.Query().
//		GroupBy(cirelationshiptype.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (crtq *CIRelationshipTypeQuery) GroupBy(field string, fields ...string) *CIRelationshipTypeGroupBy {
	crtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CIRelationshipTypeGroupBy{build: crtq}
	grbuild.flds = &crtq.ctx.Fields
	grbuild.label = cirelationshiptype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.CIRelationshipType.Query().
//		Select(cirelationshiptype.FieldName).
//		Scan(ctx, &v)
func (crtq *CIRelationshipTypeQuery) Select(fields ...string) *CIRelationshipTypeSelect {
	crtq.ctx.Fields = append(crtq.ctx.Fields, fields...)
	sbuild := &CIRelationshipTypeSelect{CIRelationshipTypeQuery: crtq}
	sbuild.label = cirelationshiptype.Label
	sbuild.flds, sbuild.scan = &crtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CIRelationshipTypeSelect configured with the given aggregations.
func (crtq *CIRelationshipTypeQuery) Aggregate(fns ...AggregateFunc) *CIRelationshipTypeSelect {
	return crtq.Select().Aggregate(fns...)
}

func (crtq *CIRelationshipTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range crtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, crtq); err != nil {
				return err
			}
		}
	}
	for _, f := range crtq.ctx.Fields {
		if !cirelationshiptype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crtq.path != nil {
		prev, err := crtq.path(ctx)
		if err != nil {
			return err
		}
		crtq.sql = prev
	}
	return nil
}

func (crtq *CIRelationshipTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CIRelationshipType, error) {
	var (
		nodes       = []*CIRelationshipType{}
		withFKs     = crtq.withFKs
		_spec       = crtq.querySpec()
		loadedTypes = [2]bool{
			crtq.withTenant != nil,
			crtq.withRelationships != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, cirelationshiptype.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CIRelationshipType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CIRelationshipType{config: crtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, crtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := crtq.withTenant; query != nil {
		if err := crtq.loadTenant(ctx, query, nodes, nil,
			func(n *CIRelationshipType, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := crtq.withRelationships; query != nil {
		if err := crtq.loadRelationships(ctx, query, nodes,
			func(n *CIRelationshipType) { n.Edges.Relationships = []*CIRelationship{} },
			func(n *CIRelationshipType, e *CIRelationship) {
				n.Edges.Relationships = append(n.Edges.Relationships, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (crtq *CIRelationshipTypeQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*CIRelationshipType, init func(*CIRelationshipType), assign func(*CIRelationshipType, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CIRelationshipType)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (crtq *CIRelationshipTypeQuery) loadRelationships(ctx context.Context, query *CIRelationshipQuery, nodes []*CIRelationshipType, init func(*CIRelationshipType), assign func(*CIRelationshipType, *CIRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CIRelationshipType)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cirelationship.FieldRelationshipTypeID)
	}
	query.Where(predicate.CIRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(cirelationshiptype.RelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelationshipTypeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "relationship_type_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (crtq *CIRelationshipTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crtq.querySpec()
	_spec.Node.Columns = crtq.ctx.Fields
	if len(crtq.ctx.Fields) > 0 {
		_spec.Unique = crtq.ctx.Unique != nil && *crtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, crtq.driver, _spec)
}

func (crtq *CIRelationshipTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cirelationshiptype.Table, cirelationshiptype.Columns, sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt))
	_spec.From = crtq.sql
	if unique := crtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if crtq.path != nil {
		_spec.Unique = true
	}
	if fields := crtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cirelationshiptype.FieldID)
		for i := range fields {
			if fields[i] != cirelationshiptype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if crtq.withTenant != nil {
			_spec.Node.AddColumnOnce(cirelationshiptype.FieldTenantID)
		}
	}
	if ps := crtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crtq *CIRelationshipTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crtq.driver.Dialect())
	t1 := builder.Table(cirelationshiptype.Table)
	columns := crtq.ctx.Fields
	if len(columns) == 0 {
		columns = cirelationshiptype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crtq.sql != nil {
		selector = crtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crtq.ctx.Unique != nil && *crtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range crtq.predicates {
		p(selector)
	}
	for _, p := range crtq.order {
		p(selector)
	}
	if offset := crtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CIRelationshipTypeGroupBy is the group-by builder for CIRelationshipType entities.
type CIRelationshipTypeGroupBy struct {
	selector
	build *CIRelationshipTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crtgb *CIRelationshipTypeGroupBy) Aggregate(fns ...AggregateFunc) *CIRelationshipTypeGroupBy {
	crtgb.fns = append(crtgb.fns, fns...)
	return crtgb
}

// Scan applies the selector query and scans the result into the given value.
func (crtgb *CIRelationshipTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crtgb.build.ctx, ent.OpQueryGroupBy)
	if err := crtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CIRelationshipTypeQuery, *CIRelationshipTypeGroupBy](ctx, crtgb.build, crtgb, crtgb.build.inters, v)
}

func (crtgb *CIRelationshipTypeGroupBy) sqlScan(ctx context.Context, root *CIRelationshipTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(crtgb.fns))
	for _, fn := range crtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*crtgb.flds)+len(crtgb.fns))
		for _, f := range *crtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*crtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CIRelationshipTypeSelect is the builder for selecting fields of CIRelationshipType entities.
type CIRelationshipTypeSelect struct {
	*CIRelationshipTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (crts *CIRelationshipTypeSelect) Aggregate(fns ...AggregateFunc) *CIRelationshipTypeSelect {
	crts.fns = append(crts.fns, fns...)
	return crts
}

// Scan applies the selector query and scans the result into the given value.
func (crts *CIRelationshipTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, crts.ctx, ent.OpQuerySelect)
	if err := crts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CIRelationshipTypeQuery, *CIRelationshipTypeSelect](ctx, crts.CIRelationshipTypeQuery, crts, crts.inters, v)
}

func (crts *CIRelationshipTypeSelect) sqlScan(ctx context.Context, root *CIRelationshipTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(crts.fns))
	for _, fn := range crts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*crts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
