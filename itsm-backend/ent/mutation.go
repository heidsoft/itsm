// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApprovalLog    = "ApprovalLog"
	TypeFlowInstance   = "FlowInstance"
	TypeServiceCatalog = "ServiceCatalog"
	TypeServiceRequest = "ServiceRequest"
	TypeStatusLog      = "StatusLog"
	TypeTicket         = "Ticket"
	TypeUser           = "User"
)

// ApprovalLogMutation represents an operation that mutates the ApprovalLog nodes in the graph.
type ApprovalLogMutation struct {
	config
	op              Op
	typ             string
	id              *int
	comment         *string
	status          *approvallog.Status
	step_order      *int
	addstep_order   *int
	step_name       *string
	metadata        *map[string]interface{}
	approved_at     *time.Time
	created_at      *time.Time
	clearedFields   map[string]struct{}
	approver        *int
	clearedapprover bool
	ticket          *int
	clearedticket   bool
	done            bool
	oldValue        func(context.Context) (*ApprovalLog, error)
	predicates      []predicate.ApprovalLog
}

var _ ent.Mutation = (*ApprovalLogMutation)(nil)

// approvallogOption allows management of the mutation configuration using functional options.
type approvallogOption func(*ApprovalLogMutation)

// newApprovalLogMutation creates new mutation for the ApprovalLog entity.
func newApprovalLogMutation(c config, op Op, opts ...approvallogOption) *ApprovalLogMutation {
	m := &ApprovalLogMutation{
		config:        c,
		op:            op,
		typ:           TypeApprovalLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApprovalLogID sets the ID field of the mutation.
func withApprovalLogID(id int) approvallogOption {
	return func(m *ApprovalLogMutation) {
		var (
			err   error
			once  sync.Once
			value *ApprovalLog
		)
		m.oldValue = func(ctx context.Context) (*ApprovalLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ApprovalLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApprovalLog sets the old ApprovalLog of the mutation.
func withApprovalLog(node *ApprovalLog) approvallogOption {
	return func(m *ApprovalLogMutation) {
		m.oldValue = func(context.Context) (*ApprovalLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApprovalLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApprovalLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApprovalLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApprovalLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ApprovalLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApproverID sets the "approver_id" field.
func (m *ApprovalLogMutation) SetApproverID(i int) {
	m.approver = &i
}

// ApproverID returns the value of the "approver_id" field in the mutation.
func (m *ApprovalLogMutation) ApproverID() (r int, exists bool) {
	v := m.approver
	if v == nil {
		return
	}
	return *v, true
}

// OldApproverID returns the old "approver_id" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldApproverID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproverID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproverID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproverID: %w", err)
	}
	return oldValue.ApproverID, nil
}

// ResetApproverID resets all changes to the "approver_id" field.
func (m *ApprovalLogMutation) ResetApproverID() {
	m.approver = nil
}

// SetComment sets the "comment" field.
func (m *ApprovalLogMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *ApprovalLogMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *ApprovalLogMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[approvallog.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *ApprovalLogMutation) CommentCleared() bool {
	_, ok := m.clearedFields[approvallog.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *ApprovalLogMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, approvallog.FieldComment)
}

// SetStatus sets the "status" field.
func (m *ApprovalLogMutation) SetStatus(a approvallog.Status) {
	m.status = &a
}

// Status returns the value of the "status" field in the mutation.
func (m *ApprovalLogMutation) Status() (r approvallog.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldStatus(ctx context.Context) (v approvallog.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ApprovalLogMutation) ResetStatus() {
	m.status = nil
}

// SetTicketID sets the "ticket_id" field.
func (m *ApprovalLogMutation) SetTicketID(i int) {
	m.ticket = &i
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *ApprovalLogMutation) TicketID() (r int, exists bool) {
	v := m.ticket
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldTicketID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *ApprovalLogMutation) ResetTicketID() {
	m.ticket = nil
}

// SetStepOrder sets the "step_order" field.
func (m *ApprovalLogMutation) SetStepOrder(i int) {
	m.step_order = &i
	m.addstep_order = nil
}

// StepOrder returns the value of the "step_order" field in the mutation.
func (m *ApprovalLogMutation) StepOrder() (r int, exists bool) {
	v := m.step_order
	if v == nil {
		return
	}
	return *v, true
}

// OldStepOrder returns the old "step_order" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldStepOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStepOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStepOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepOrder: %w", err)
	}
	return oldValue.StepOrder, nil
}

// AddStepOrder adds i to the "step_order" field.
func (m *ApprovalLogMutation) AddStepOrder(i int) {
	if m.addstep_order != nil {
		*m.addstep_order += i
	} else {
		m.addstep_order = &i
	}
}

// AddedStepOrder returns the value that was added to the "step_order" field in this mutation.
func (m *ApprovalLogMutation) AddedStepOrder() (r int, exists bool) {
	v := m.addstep_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetStepOrder resets all changes to the "step_order" field.
func (m *ApprovalLogMutation) ResetStepOrder() {
	m.step_order = nil
	m.addstep_order = nil
}

// SetStepName sets the "step_name" field.
func (m *ApprovalLogMutation) SetStepName(s string) {
	m.step_name = &s
}

// StepName returns the value of the "step_name" field in the mutation.
func (m *ApprovalLogMutation) StepName() (r string, exists bool) {
	v := m.step_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStepName returns the old "step_name" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldStepName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStepName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStepName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepName: %w", err)
	}
	return oldValue.StepName, nil
}

// ClearStepName clears the value of the "step_name" field.
func (m *ApprovalLogMutation) ClearStepName() {
	m.step_name = nil
	m.clearedFields[approvallog.FieldStepName] = struct{}{}
}

// StepNameCleared returns if the "step_name" field was cleared in this mutation.
func (m *ApprovalLogMutation) StepNameCleared() bool {
	_, ok := m.clearedFields[approvallog.FieldStepName]
	return ok
}

// ResetStepName resets all changes to the "step_name" field.
func (m *ApprovalLogMutation) ResetStepName() {
	m.step_name = nil
	delete(m.clearedFields, approvallog.FieldStepName)
}

// SetMetadata sets the "metadata" field.
func (m *ApprovalLogMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *ApprovalLogMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *ApprovalLogMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[approvallog.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *ApprovalLogMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[approvallog.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *ApprovalLogMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, approvallog.FieldMetadata)
}

// SetApprovedAt sets the "approved_at" field.
func (m *ApprovalLogMutation) SetApprovedAt(t time.Time) {
	m.approved_at = &t
}

// ApprovedAt returns the value of the "approved_at" field in the mutation.
func (m *ApprovalLogMutation) ApprovedAt() (r time.Time, exists bool) {
	v := m.approved_at
	if v == nil {
		return
	}
	return *v, true
}

// OldApprovedAt returns the old "approved_at" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldApprovedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprovedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprovedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprovedAt: %w", err)
	}
	return oldValue.ApprovedAt, nil
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (m *ApprovalLogMutation) ClearApprovedAt() {
	m.approved_at = nil
	m.clearedFields[approvallog.FieldApprovedAt] = struct{}{}
}

// ApprovedAtCleared returns if the "approved_at" field was cleared in this mutation.
func (m *ApprovalLogMutation) ApprovedAtCleared() bool {
	_, ok := m.clearedFields[approvallog.FieldApprovedAt]
	return ok
}

// ResetApprovedAt resets all changes to the "approved_at" field.
func (m *ApprovalLogMutation) ResetApprovedAt() {
	m.approved_at = nil
	delete(m.clearedFields, approvallog.FieldApprovedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *ApprovalLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApprovalLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ApprovalLog entity.
// If the ApprovalLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApprovalLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApprovalLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearApprover clears the "approver" edge to the User entity.
func (m *ApprovalLogMutation) ClearApprover() {
	m.clearedapprover = true
	m.clearedFields[approvallog.FieldApproverID] = struct{}{}
}

// ApproverCleared reports if the "approver" edge to the User entity was cleared.
func (m *ApprovalLogMutation) ApproverCleared() bool {
	return m.clearedapprover
}

// ApproverIDs returns the "approver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApproverID instead. It exists only for internal usage by the builders.
func (m *ApprovalLogMutation) ApproverIDs() (ids []int) {
	if id := m.approver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApprover resets all changes to the "approver" edge.
func (m *ApprovalLogMutation) ResetApprover() {
	m.approver = nil
	m.clearedapprover = false
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *ApprovalLogMutation) ClearTicket() {
	m.clearedticket = true
	m.clearedFields[approvallog.FieldTicketID] = struct{}{}
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *ApprovalLogMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *ApprovalLogMutation) TicketIDs() (ids []int) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *ApprovalLogMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// Where appends a list predicates to the ApprovalLogMutation builder.
func (m *ApprovalLogMutation) Where(ps ...predicate.ApprovalLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApprovalLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApprovalLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ApprovalLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApprovalLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApprovalLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ApprovalLog).
func (m *ApprovalLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApprovalLogMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.approver != nil {
		fields = append(fields, approvallog.FieldApproverID)
	}
	if m.comment != nil {
		fields = append(fields, approvallog.FieldComment)
	}
	if m.status != nil {
		fields = append(fields, approvallog.FieldStatus)
	}
	if m.ticket != nil {
		fields = append(fields, approvallog.FieldTicketID)
	}
	if m.step_order != nil {
		fields = append(fields, approvallog.FieldStepOrder)
	}
	if m.step_name != nil {
		fields = append(fields, approvallog.FieldStepName)
	}
	if m.metadata != nil {
		fields = append(fields, approvallog.FieldMetadata)
	}
	if m.approved_at != nil {
		fields = append(fields, approvallog.FieldApprovedAt)
	}
	if m.created_at != nil {
		fields = append(fields, approvallog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApprovalLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case approvallog.FieldApproverID:
		return m.ApproverID()
	case approvallog.FieldComment:
		return m.Comment()
	case approvallog.FieldStatus:
		return m.Status()
	case approvallog.FieldTicketID:
		return m.TicketID()
	case approvallog.FieldStepOrder:
		return m.StepOrder()
	case approvallog.FieldStepName:
		return m.StepName()
	case approvallog.FieldMetadata:
		return m.Metadata()
	case approvallog.FieldApprovedAt:
		return m.ApprovedAt()
	case approvallog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApprovalLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case approvallog.FieldApproverID:
		return m.OldApproverID(ctx)
	case approvallog.FieldComment:
		return m.OldComment(ctx)
	case approvallog.FieldStatus:
		return m.OldStatus(ctx)
	case approvallog.FieldTicketID:
		return m.OldTicketID(ctx)
	case approvallog.FieldStepOrder:
		return m.OldStepOrder(ctx)
	case approvallog.FieldStepName:
		return m.OldStepName(ctx)
	case approvallog.FieldMetadata:
		return m.OldMetadata(ctx)
	case approvallog.FieldApprovedAt:
		return m.OldApprovedAt(ctx)
	case approvallog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ApprovalLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case approvallog.FieldApproverID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproverID(v)
		return nil
	case approvallog.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case approvallog.FieldStatus:
		v, ok := value.(approvallog.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case approvallog.FieldTicketID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	case approvallog.FieldStepOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepOrder(v)
		return nil
	case approvallog.FieldStepName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepName(v)
		return nil
	case approvallog.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case approvallog.FieldApprovedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprovedAt(v)
		return nil
	case approvallog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApprovalLogMutation) AddedFields() []string {
	var fields []string
	if m.addstep_order != nil {
		fields = append(fields, approvallog.FieldStepOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApprovalLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case approvallog.FieldStepOrder:
		return m.AddedStepOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApprovalLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case approvallog.FieldStepOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStepOrder(v)
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApprovalLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(approvallog.FieldComment) {
		fields = append(fields, approvallog.FieldComment)
	}
	if m.FieldCleared(approvallog.FieldStepName) {
		fields = append(fields, approvallog.FieldStepName)
	}
	if m.FieldCleared(approvallog.FieldMetadata) {
		fields = append(fields, approvallog.FieldMetadata)
	}
	if m.FieldCleared(approvallog.FieldApprovedAt) {
		fields = append(fields, approvallog.FieldApprovedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApprovalLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApprovalLogMutation) ClearField(name string) error {
	switch name {
	case approvallog.FieldComment:
		m.ClearComment()
		return nil
	case approvallog.FieldStepName:
		m.ClearStepName()
		return nil
	case approvallog.FieldMetadata:
		m.ClearMetadata()
		return nil
	case approvallog.FieldApprovedAt:
		m.ClearApprovedAt()
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApprovalLogMutation) ResetField(name string) error {
	switch name {
	case approvallog.FieldApproverID:
		m.ResetApproverID()
		return nil
	case approvallog.FieldComment:
		m.ResetComment()
		return nil
	case approvallog.FieldStatus:
		m.ResetStatus()
		return nil
	case approvallog.FieldTicketID:
		m.ResetTicketID()
		return nil
	case approvallog.FieldStepOrder:
		m.ResetStepOrder()
		return nil
	case approvallog.FieldStepName:
		m.ResetStepName()
		return nil
	case approvallog.FieldMetadata:
		m.ResetMetadata()
		return nil
	case approvallog.FieldApprovedAt:
		m.ResetApprovedAt()
		return nil
	case approvallog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApprovalLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.approver != nil {
		edges = append(edges, approvallog.EdgeApprover)
	}
	if m.ticket != nil {
		edges = append(edges, approvallog.EdgeTicket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApprovalLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case approvallog.EdgeApprover:
		if id := m.approver; id != nil {
			return []ent.Value{*id}
		}
	case approvallog.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApprovalLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApprovalLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApprovalLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapprover {
		edges = append(edges, approvallog.EdgeApprover)
	}
	if m.clearedticket {
		edges = append(edges, approvallog.EdgeTicket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApprovalLogMutation) EdgeCleared(name string) bool {
	switch name {
	case approvallog.EdgeApprover:
		return m.clearedapprover
	case approvallog.EdgeTicket:
		return m.clearedticket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApprovalLogMutation) ClearEdge(name string) error {
	switch name {
	case approvallog.EdgeApprover:
		m.ClearApprover()
		return nil
	case approvallog.EdgeTicket:
		m.ClearTicket()
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApprovalLogMutation) ResetEdge(name string) error {
	switch name {
	case approvallog.EdgeApprover:
		m.ResetApprover()
		return nil
	case approvallog.EdgeTicket:
		m.ResetTicket()
		return nil
	}
	return fmt.Errorf("unknown ApprovalLog edge %s", name)
}

// FlowInstanceMutation represents an operation that mutates the FlowInstance nodes in the graph.
type FlowInstanceMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	flow_definition_id      *string
	flow_name               *string
	flow_version            *string
	status                  *flowinstance.Status
	current_step            *int
	addcurrent_step         *int
	total_steps             *int
	addtotal_steps          *int
	step_config             *map[string]interface{}
	variables               *map[string]interface{}
	execution_history       *[]map[string]interface{}
	appendexecution_history []map[string]interface{}
	started_at              *time.Time
	completed_at            *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	ticket                  *int
	clearedticket           bool
	done                    bool
	oldValue                func(context.Context) (*FlowInstance, error)
	predicates              []predicate.FlowInstance
}

var _ ent.Mutation = (*FlowInstanceMutation)(nil)

// flowinstanceOption allows management of the mutation configuration using functional options.
type flowinstanceOption func(*FlowInstanceMutation)

// newFlowInstanceMutation creates new mutation for the FlowInstance entity.
func newFlowInstanceMutation(c config, op Op, opts ...flowinstanceOption) *FlowInstanceMutation {
	m := &FlowInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeFlowInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFlowInstanceID sets the ID field of the mutation.
func withFlowInstanceID(id int) flowinstanceOption {
	return func(m *FlowInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *FlowInstance
		)
		m.oldValue = func(ctx context.Context) (*FlowInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FlowInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFlowInstance sets the old FlowInstance of the mutation.
func withFlowInstance(node *FlowInstance) flowinstanceOption {
	return func(m *FlowInstanceMutation) {
		m.oldValue = func(context.Context) (*FlowInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FlowInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FlowInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FlowInstanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FlowInstanceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FlowInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (m *FlowInstanceMutation) SetFlowDefinitionID(s string) {
	m.flow_definition_id = &s
}

// FlowDefinitionID returns the value of the "flow_definition_id" field in the mutation.
func (m *FlowInstanceMutation) FlowDefinitionID() (r string, exists bool) {
	v := m.flow_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowDefinitionID returns the old "flow_definition_id" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldFlowDefinitionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowDefinitionID: %w", err)
	}
	return oldValue.FlowDefinitionID, nil
}

// ResetFlowDefinitionID resets all changes to the "flow_definition_id" field.
func (m *FlowInstanceMutation) ResetFlowDefinitionID() {
	m.flow_definition_id = nil
}

// SetFlowName sets the "flow_name" field.
func (m *FlowInstanceMutation) SetFlowName(s string) {
	m.flow_name = &s
}

// FlowName returns the value of the "flow_name" field in the mutation.
func (m *FlowInstanceMutation) FlowName() (r string, exists bool) {
	v := m.flow_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowName returns the old "flow_name" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldFlowName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowName: %w", err)
	}
	return oldValue.FlowName, nil
}

// ResetFlowName resets all changes to the "flow_name" field.
func (m *FlowInstanceMutation) ResetFlowName() {
	m.flow_name = nil
}

// SetFlowVersion sets the "flow_version" field.
func (m *FlowInstanceMutation) SetFlowVersion(s string) {
	m.flow_version = &s
}

// FlowVersion returns the value of the "flow_version" field in the mutation.
func (m *FlowInstanceMutation) FlowVersion() (r string, exists bool) {
	v := m.flow_version
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowVersion returns the old "flow_version" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldFlowVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowVersion: %w", err)
	}
	return oldValue.FlowVersion, nil
}

// ClearFlowVersion clears the value of the "flow_version" field.
func (m *FlowInstanceMutation) ClearFlowVersion() {
	m.flow_version = nil
	m.clearedFields[flowinstance.FieldFlowVersion] = struct{}{}
}

// FlowVersionCleared returns if the "flow_version" field was cleared in this mutation.
func (m *FlowInstanceMutation) FlowVersionCleared() bool {
	_, ok := m.clearedFields[flowinstance.FieldFlowVersion]
	return ok
}

// ResetFlowVersion resets all changes to the "flow_version" field.
func (m *FlowInstanceMutation) ResetFlowVersion() {
	m.flow_version = nil
	delete(m.clearedFields, flowinstance.FieldFlowVersion)
}

// SetStatus sets the "status" field.
func (m *FlowInstanceMutation) SetStatus(f flowinstance.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FlowInstanceMutation) Status() (r flowinstance.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldStatus(ctx context.Context) (v flowinstance.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FlowInstanceMutation) ResetStatus() {
	m.status = nil
}

// SetCurrentStep sets the "current_step" field.
func (m *FlowInstanceMutation) SetCurrentStep(i int) {
	m.current_step = &i
	m.addcurrent_step = nil
}

// CurrentStep returns the value of the "current_step" field in the mutation.
func (m *FlowInstanceMutation) CurrentStep() (r int, exists bool) {
	v := m.current_step
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentStep returns the old "current_step" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldCurrentStep(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentStep: %w", err)
	}
	return oldValue.CurrentStep, nil
}

// AddCurrentStep adds i to the "current_step" field.
func (m *FlowInstanceMutation) AddCurrentStep(i int) {
	if m.addcurrent_step != nil {
		*m.addcurrent_step += i
	} else {
		m.addcurrent_step = &i
	}
}

// AddedCurrentStep returns the value that was added to the "current_step" field in this mutation.
func (m *FlowInstanceMutation) AddedCurrentStep() (r int, exists bool) {
	v := m.addcurrent_step
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrentStep resets all changes to the "current_step" field.
func (m *FlowInstanceMutation) ResetCurrentStep() {
	m.current_step = nil
	m.addcurrent_step = nil
}

// SetTotalSteps sets the "total_steps" field.
func (m *FlowInstanceMutation) SetTotalSteps(i int) {
	m.total_steps = &i
	m.addtotal_steps = nil
}

// TotalSteps returns the value of the "total_steps" field in the mutation.
func (m *FlowInstanceMutation) TotalSteps() (r int, exists bool) {
	v := m.total_steps
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalSteps returns the old "total_steps" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldTotalSteps(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalSteps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalSteps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalSteps: %w", err)
	}
	return oldValue.TotalSteps, nil
}

// AddTotalSteps adds i to the "total_steps" field.
func (m *FlowInstanceMutation) AddTotalSteps(i int) {
	if m.addtotal_steps != nil {
		*m.addtotal_steps += i
	} else {
		m.addtotal_steps = &i
	}
}

// AddedTotalSteps returns the value that was added to the "total_steps" field in this mutation.
func (m *FlowInstanceMutation) AddedTotalSteps() (r int, exists bool) {
	v := m.addtotal_steps
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalSteps resets all changes to the "total_steps" field.
func (m *FlowInstanceMutation) ResetTotalSteps() {
	m.total_steps = nil
	m.addtotal_steps = nil
}

// SetStepConfig sets the "step_config" field.
func (m *FlowInstanceMutation) SetStepConfig(value map[string]interface{}) {
	m.step_config = &value
}

// StepConfig returns the value of the "step_config" field in the mutation.
func (m *FlowInstanceMutation) StepConfig() (r map[string]interface{}, exists bool) {
	v := m.step_config
	if v == nil {
		return
	}
	return *v, true
}

// OldStepConfig returns the old "step_config" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldStepConfig(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStepConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStepConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStepConfig: %w", err)
	}
	return oldValue.StepConfig, nil
}

// ClearStepConfig clears the value of the "step_config" field.
func (m *FlowInstanceMutation) ClearStepConfig() {
	m.step_config = nil
	m.clearedFields[flowinstance.FieldStepConfig] = struct{}{}
}

// StepConfigCleared returns if the "step_config" field was cleared in this mutation.
func (m *FlowInstanceMutation) StepConfigCleared() bool {
	_, ok := m.clearedFields[flowinstance.FieldStepConfig]
	return ok
}

// ResetStepConfig resets all changes to the "step_config" field.
func (m *FlowInstanceMutation) ResetStepConfig() {
	m.step_config = nil
	delete(m.clearedFields, flowinstance.FieldStepConfig)
}

// SetVariables sets the "variables" field.
func (m *FlowInstanceMutation) SetVariables(value map[string]interface{}) {
	m.variables = &value
}

// Variables returns the value of the "variables" field in the mutation.
func (m *FlowInstanceMutation) Variables() (r map[string]interface{}, exists bool) {
	v := m.variables
	if v == nil {
		return
	}
	return *v, true
}

// OldVariables returns the old "variables" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldVariables(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVariables is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVariables requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariables: %w", err)
	}
	return oldValue.Variables, nil
}

// ClearVariables clears the value of the "variables" field.
func (m *FlowInstanceMutation) ClearVariables() {
	m.variables = nil
	m.clearedFields[flowinstance.FieldVariables] = struct{}{}
}

// VariablesCleared returns if the "variables" field was cleared in this mutation.
func (m *FlowInstanceMutation) VariablesCleared() bool {
	_, ok := m.clearedFields[flowinstance.FieldVariables]
	return ok
}

// ResetVariables resets all changes to the "variables" field.
func (m *FlowInstanceMutation) ResetVariables() {
	m.variables = nil
	delete(m.clearedFields, flowinstance.FieldVariables)
}

// SetExecutionHistory sets the "execution_history" field.
func (m *FlowInstanceMutation) SetExecutionHistory(value []map[string]interface{}) {
	m.execution_history = &value
	m.appendexecution_history = nil
}

// ExecutionHistory returns the value of the "execution_history" field in the mutation.
func (m *FlowInstanceMutation) ExecutionHistory() (r []map[string]interface{}, exists bool) {
	v := m.execution_history
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutionHistory returns the old "execution_history" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldExecutionHistory(ctx context.Context) (v []map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutionHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutionHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutionHistory: %w", err)
	}
	return oldValue.ExecutionHistory, nil
}

// AppendExecutionHistory adds value to the "execution_history" field.
func (m *FlowInstanceMutation) AppendExecutionHistory(value []map[string]interface{}) {
	m.appendexecution_history = append(m.appendexecution_history, value...)
}

// AppendedExecutionHistory returns the list of values that were appended to the "execution_history" field in this mutation.
func (m *FlowInstanceMutation) AppendedExecutionHistory() ([]map[string]interface{}, bool) {
	if len(m.appendexecution_history) == 0 {
		return nil, false
	}
	return m.appendexecution_history, true
}

// ClearExecutionHistory clears the value of the "execution_history" field.
func (m *FlowInstanceMutation) ClearExecutionHistory() {
	m.execution_history = nil
	m.appendexecution_history = nil
	m.clearedFields[flowinstance.FieldExecutionHistory] = struct{}{}
}

// ExecutionHistoryCleared returns if the "execution_history" field was cleared in this mutation.
func (m *FlowInstanceMutation) ExecutionHistoryCleared() bool {
	_, ok := m.clearedFields[flowinstance.FieldExecutionHistory]
	return ok
}

// ResetExecutionHistory resets all changes to the "execution_history" field.
func (m *FlowInstanceMutation) ResetExecutionHistory() {
	m.execution_history = nil
	m.appendexecution_history = nil
	delete(m.clearedFields, flowinstance.FieldExecutionHistory)
}

// SetTicketID sets the "ticket_id" field.
func (m *FlowInstanceMutation) SetTicketID(i int) {
	m.ticket = &i
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *FlowInstanceMutation) TicketID() (r int, exists bool) {
	v := m.ticket
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldTicketID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *FlowInstanceMutation) ResetTicketID() {
	m.ticket = nil
}

// SetStartedAt sets the "started_at" field.
func (m *FlowInstanceMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *FlowInstanceMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *FlowInstanceMutation) ResetStartedAt() {
	m.started_at = nil
}

// SetCompletedAt sets the "completed_at" field.
func (m *FlowInstanceMutation) SetCompletedAt(t time.Time) {
	m.completed_at = &t
}

// CompletedAt returns the value of the "completed_at" field in the mutation.
func (m *FlowInstanceMutation) CompletedAt() (r time.Time, exists bool) {
	v := m.completed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedAt returns the old "completed_at" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldCompletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedAt: %w", err)
	}
	return oldValue.CompletedAt, nil
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (m *FlowInstanceMutation) ClearCompletedAt() {
	m.completed_at = nil
	m.clearedFields[flowinstance.FieldCompletedAt] = struct{}{}
}

// CompletedAtCleared returns if the "completed_at" field was cleared in this mutation.
func (m *FlowInstanceMutation) CompletedAtCleared() bool {
	_, ok := m.clearedFields[flowinstance.FieldCompletedAt]
	return ok
}

// ResetCompletedAt resets all changes to the "completed_at" field.
func (m *FlowInstanceMutation) ResetCompletedAt() {
	m.completed_at = nil
	delete(m.clearedFields, flowinstance.FieldCompletedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FlowInstanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FlowInstanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FlowInstance entity.
// If the FlowInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FlowInstanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FlowInstanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *FlowInstanceMutation) ClearTicket() {
	m.clearedticket = true
	m.clearedFields[flowinstance.FieldTicketID] = struct{}{}
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *FlowInstanceMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *FlowInstanceMutation) TicketIDs() (ids []int) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *FlowInstanceMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// Where appends a list predicates to the FlowInstanceMutation builder.
func (m *FlowInstanceMutation) Where(ps ...predicate.FlowInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FlowInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FlowInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FlowInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FlowInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FlowInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FlowInstance).
func (m *FlowInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FlowInstanceMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.flow_definition_id != nil {
		fields = append(fields, flowinstance.FieldFlowDefinitionID)
	}
	if m.flow_name != nil {
		fields = append(fields, flowinstance.FieldFlowName)
	}
	if m.flow_version != nil {
		fields = append(fields, flowinstance.FieldFlowVersion)
	}
	if m.status != nil {
		fields = append(fields, flowinstance.FieldStatus)
	}
	if m.current_step != nil {
		fields = append(fields, flowinstance.FieldCurrentStep)
	}
	if m.total_steps != nil {
		fields = append(fields, flowinstance.FieldTotalSteps)
	}
	if m.step_config != nil {
		fields = append(fields, flowinstance.FieldStepConfig)
	}
	if m.variables != nil {
		fields = append(fields, flowinstance.FieldVariables)
	}
	if m.execution_history != nil {
		fields = append(fields, flowinstance.FieldExecutionHistory)
	}
	if m.ticket != nil {
		fields = append(fields, flowinstance.FieldTicketID)
	}
	if m.started_at != nil {
		fields = append(fields, flowinstance.FieldStartedAt)
	}
	if m.completed_at != nil {
		fields = append(fields, flowinstance.FieldCompletedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, flowinstance.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FlowInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case flowinstance.FieldFlowDefinitionID:
		return m.FlowDefinitionID()
	case flowinstance.FieldFlowName:
		return m.FlowName()
	case flowinstance.FieldFlowVersion:
		return m.FlowVersion()
	case flowinstance.FieldStatus:
		return m.Status()
	case flowinstance.FieldCurrentStep:
		return m.CurrentStep()
	case flowinstance.FieldTotalSteps:
		return m.TotalSteps()
	case flowinstance.FieldStepConfig:
		return m.StepConfig()
	case flowinstance.FieldVariables:
		return m.Variables()
	case flowinstance.FieldExecutionHistory:
		return m.ExecutionHistory()
	case flowinstance.FieldTicketID:
		return m.TicketID()
	case flowinstance.FieldStartedAt:
		return m.StartedAt()
	case flowinstance.FieldCompletedAt:
		return m.CompletedAt()
	case flowinstance.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FlowInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case flowinstance.FieldFlowDefinitionID:
		return m.OldFlowDefinitionID(ctx)
	case flowinstance.FieldFlowName:
		return m.OldFlowName(ctx)
	case flowinstance.FieldFlowVersion:
		return m.OldFlowVersion(ctx)
	case flowinstance.FieldStatus:
		return m.OldStatus(ctx)
	case flowinstance.FieldCurrentStep:
		return m.OldCurrentStep(ctx)
	case flowinstance.FieldTotalSteps:
		return m.OldTotalSteps(ctx)
	case flowinstance.FieldStepConfig:
		return m.OldStepConfig(ctx)
	case flowinstance.FieldVariables:
		return m.OldVariables(ctx)
	case flowinstance.FieldExecutionHistory:
		return m.OldExecutionHistory(ctx)
	case flowinstance.FieldTicketID:
		return m.OldTicketID(ctx)
	case flowinstance.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case flowinstance.FieldCompletedAt:
		return m.OldCompletedAt(ctx)
	case flowinstance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown FlowInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlowInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case flowinstance.FieldFlowDefinitionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowDefinitionID(v)
		return nil
	case flowinstance.FieldFlowName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowName(v)
		return nil
	case flowinstance.FieldFlowVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowVersion(v)
		return nil
	case flowinstance.FieldStatus:
		v, ok := value.(flowinstance.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case flowinstance.FieldCurrentStep:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentStep(v)
		return nil
	case flowinstance.FieldTotalSteps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalSteps(v)
		return nil
	case flowinstance.FieldStepConfig:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStepConfig(v)
		return nil
	case flowinstance.FieldVariables:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariables(v)
		return nil
	case flowinstance.FieldExecutionHistory:
		v, ok := value.([]map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutionHistory(v)
		return nil
	case flowinstance.FieldTicketID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	case flowinstance.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case flowinstance.FieldCompletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedAt(v)
		return nil
	case flowinstance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown FlowInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FlowInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addcurrent_step != nil {
		fields = append(fields, flowinstance.FieldCurrentStep)
	}
	if m.addtotal_steps != nil {
		fields = append(fields, flowinstance.FieldTotalSteps)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FlowInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case flowinstance.FieldCurrentStep:
		return m.AddedCurrentStep()
	case flowinstance.FieldTotalSteps:
		return m.AddedTotalSteps()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FlowInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case flowinstance.FieldCurrentStep:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrentStep(v)
		return nil
	case flowinstance.FieldTotalSteps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalSteps(v)
		return nil
	}
	return fmt.Errorf("unknown FlowInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FlowInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(flowinstance.FieldFlowVersion) {
		fields = append(fields, flowinstance.FieldFlowVersion)
	}
	if m.FieldCleared(flowinstance.FieldStepConfig) {
		fields = append(fields, flowinstance.FieldStepConfig)
	}
	if m.FieldCleared(flowinstance.FieldVariables) {
		fields = append(fields, flowinstance.FieldVariables)
	}
	if m.FieldCleared(flowinstance.FieldExecutionHistory) {
		fields = append(fields, flowinstance.FieldExecutionHistory)
	}
	if m.FieldCleared(flowinstance.FieldCompletedAt) {
		fields = append(fields, flowinstance.FieldCompletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FlowInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FlowInstanceMutation) ClearField(name string) error {
	switch name {
	case flowinstance.FieldFlowVersion:
		m.ClearFlowVersion()
		return nil
	case flowinstance.FieldStepConfig:
		m.ClearStepConfig()
		return nil
	case flowinstance.FieldVariables:
		m.ClearVariables()
		return nil
	case flowinstance.FieldExecutionHistory:
		m.ClearExecutionHistory()
		return nil
	case flowinstance.FieldCompletedAt:
		m.ClearCompletedAt()
		return nil
	}
	return fmt.Errorf("unknown FlowInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FlowInstanceMutation) ResetField(name string) error {
	switch name {
	case flowinstance.FieldFlowDefinitionID:
		m.ResetFlowDefinitionID()
		return nil
	case flowinstance.FieldFlowName:
		m.ResetFlowName()
		return nil
	case flowinstance.FieldFlowVersion:
		m.ResetFlowVersion()
		return nil
	case flowinstance.FieldStatus:
		m.ResetStatus()
		return nil
	case flowinstance.FieldCurrentStep:
		m.ResetCurrentStep()
		return nil
	case flowinstance.FieldTotalSteps:
		m.ResetTotalSteps()
		return nil
	case flowinstance.FieldStepConfig:
		m.ResetStepConfig()
		return nil
	case flowinstance.FieldVariables:
		m.ResetVariables()
		return nil
	case flowinstance.FieldExecutionHistory:
		m.ResetExecutionHistory()
		return nil
	case flowinstance.FieldTicketID:
		m.ResetTicketID()
		return nil
	case flowinstance.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case flowinstance.FieldCompletedAt:
		m.ResetCompletedAt()
		return nil
	case flowinstance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown FlowInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FlowInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ticket != nil {
		edges = append(edges, flowinstance.EdgeTicket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FlowInstanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case flowinstance.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FlowInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FlowInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FlowInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedticket {
		edges = append(edges, flowinstance.EdgeTicket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FlowInstanceMutation) EdgeCleared(name string) bool {
	switch name {
	case flowinstance.EdgeTicket:
		return m.clearedticket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FlowInstanceMutation) ClearEdge(name string) error {
	switch name {
	case flowinstance.EdgeTicket:
		m.ClearTicket()
		return nil
	}
	return fmt.Errorf("unknown FlowInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FlowInstanceMutation) ResetEdge(name string) error {
	switch name {
	case flowinstance.EdgeTicket:
		m.ResetTicket()
		return nil
	}
	return fmt.Errorf("unknown FlowInstance edge %s", name)
}

// ServiceCatalogMutation represents an operation that mutates the ServiceCatalog nodes in the graph.
type ServiceCatalogMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	category                *string
	description             *string
	delivery_time           *string
	status                  *servicecatalog.Status
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	service_requests        map[int]struct{}
	removedservice_requests map[int]struct{}
	clearedservice_requests bool
	done                    bool
	oldValue                func(context.Context) (*ServiceCatalog, error)
	predicates              []predicate.ServiceCatalog
}

var _ ent.Mutation = (*ServiceCatalogMutation)(nil)

// servicecatalogOption allows management of the mutation configuration using functional options.
type servicecatalogOption func(*ServiceCatalogMutation)

// newServiceCatalogMutation creates new mutation for the ServiceCatalog entity.
func newServiceCatalogMutation(c config, op Op, opts ...servicecatalogOption) *ServiceCatalogMutation {
	m := &ServiceCatalogMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceCatalog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceCatalogID sets the ID field of the mutation.
func withServiceCatalogID(id int) servicecatalogOption {
	return func(m *ServiceCatalogMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceCatalog
		)
		m.oldValue = func(ctx context.Context) (*ServiceCatalog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceCatalog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceCatalog sets the old ServiceCatalog of the mutation.
func withServiceCatalog(node *ServiceCatalog) servicecatalogOption {
	return func(m *ServiceCatalogMutation) {
		m.oldValue = func(context.Context) (*ServiceCatalog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceCatalogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceCatalogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceCatalogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceCatalogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceCatalog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ServiceCatalogMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ServiceCatalogMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ServiceCatalogMutation) ResetName() {
	m.name = nil
}

// SetCategory sets the "category" field.
func (m *ServiceCatalogMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *ServiceCatalogMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *ServiceCatalogMutation) ResetCategory() {
	m.category = nil
}

// SetDescription sets the "description" field.
func (m *ServiceCatalogMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ServiceCatalogMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ServiceCatalogMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[servicecatalog.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ServiceCatalogMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[servicecatalog.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ServiceCatalogMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, servicecatalog.FieldDescription)
}

// SetDeliveryTime sets the "delivery_time" field.
func (m *ServiceCatalogMutation) SetDeliveryTime(s string) {
	m.delivery_time = &s
}

// DeliveryTime returns the value of the "delivery_time" field in the mutation.
func (m *ServiceCatalogMutation) DeliveryTime() (r string, exists bool) {
	v := m.delivery_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveryTime returns the old "delivery_time" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldDeliveryTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeliveryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeliveryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveryTime: %w", err)
	}
	return oldValue.DeliveryTime, nil
}

// ResetDeliveryTime resets all changes to the "delivery_time" field.
func (m *ServiceCatalogMutation) ResetDeliveryTime() {
	m.delivery_time = nil
}

// SetStatus sets the "status" field.
func (m *ServiceCatalogMutation) SetStatus(s servicecatalog.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ServiceCatalogMutation) Status() (r servicecatalog.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldStatus(ctx context.Context) (v servicecatalog.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ServiceCatalogMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ServiceCatalogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServiceCatalogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServiceCatalogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ServiceCatalogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ServiceCatalogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ServiceCatalog entity.
// If the ServiceCatalog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceCatalogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ServiceCatalogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by ids.
func (m *ServiceCatalogMutation) AddServiceRequestIDs(ids ...int) {
	if m.service_requests == nil {
		m.service_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.service_requests[ids[i]] = struct{}{}
	}
}

// ClearServiceRequests clears the "service_requests" edge to the ServiceRequest entity.
func (m *ServiceCatalogMutation) ClearServiceRequests() {
	m.clearedservice_requests = true
}

// ServiceRequestsCleared reports if the "service_requests" edge to the ServiceRequest entity was cleared.
func (m *ServiceCatalogMutation) ServiceRequestsCleared() bool {
	return m.clearedservice_requests
}

// RemoveServiceRequestIDs removes the "service_requests" edge to the ServiceRequest entity by IDs.
func (m *ServiceCatalogMutation) RemoveServiceRequestIDs(ids ...int) {
	if m.removedservice_requests == nil {
		m.removedservice_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.service_requests, ids[i])
		m.removedservice_requests[ids[i]] = struct{}{}
	}
}

// RemovedServiceRequests returns the removed IDs of the "service_requests" edge to the ServiceRequest entity.
func (m *ServiceCatalogMutation) RemovedServiceRequestsIDs() (ids []int) {
	for id := range m.removedservice_requests {
		ids = append(ids, id)
	}
	return
}

// ServiceRequestsIDs returns the "service_requests" edge IDs in the mutation.
func (m *ServiceCatalogMutation) ServiceRequestsIDs() (ids []int) {
	for id := range m.service_requests {
		ids = append(ids, id)
	}
	return
}

// ResetServiceRequests resets all changes to the "service_requests" edge.
func (m *ServiceCatalogMutation) ResetServiceRequests() {
	m.service_requests = nil
	m.clearedservice_requests = false
	m.removedservice_requests = nil
}

// Where appends a list predicates to the ServiceCatalogMutation builder.
func (m *ServiceCatalogMutation) Where(ps ...predicate.ServiceCatalog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceCatalogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceCatalogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ServiceCatalog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceCatalogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceCatalogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ServiceCatalog).
func (m *ServiceCatalogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceCatalogMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, servicecatalog.FieldName)
	}
	if m.category != nil {
		fields = append(fields, servicecatalog.FieldCategory)
	}
	if m.description != nil {
		fields = append(fields, servicecatalog.FieldDescription)
	}
	if m.delivery_time != nil {
		fields = append(fields, servicecatalog.FieldDeliveryTime)
	}
	if m.status != nil {
		fields = append(fields, servicecatalog.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, servicecatalog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, servicecatalog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceCatalogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case servicecatalog.FieldName:
		return m.Name()
	case servicecatalog.FieldCategory:
		return m.Category()
	case servicecatalog.FieldDescription:
		return m.Description()
	case servicecatalog.FieldDeliveryTime:
		return m.DeliveryTime()
	case servicecatalog.FieldStatus:
		return m.Status()
	case servicecatalog.FieldCreatedAt:
		return m.CreatedAt()
	case servicecatalog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceCatalogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case servicecatalog.FieldName:
		return m.OldName(ctx)
	case servicecatalog.FieldCategory:
		return m.OldCategory(ctx)
	case servicecatalog.FieldDescription:
		return m.OldDescription(ctx)
	case servicecatalog.FieldDeliveryTime:
		return m.OldDeliveryTime(ctx)
	case servicecatalog.FieldStatus:
		return m.OldStatus(ctx)
	case servicecatalog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case servicecatalog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceCatalog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceCatalogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case servicecatalog.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case servicecatalog.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case servicecatalog.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case servicecatalog.FieldDeliveryTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveryTime(v)
		return nil
	case servicecatalog.FieldStatus:
		v, ok := value.(servicecatalog.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case servicecatalog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case servicecatalog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceCatalog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceCatalogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceCatalogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceCatalogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ServiceCatalog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceCatalogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(servicecatalog.FieldDescription) {
		fields = append(fields, servicecatalog.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceCatalogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceCatalogMutation) ClearField(name string) error {
	switch name {
	case servicecatalog.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown ServiceCatalog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceCatalogMutation) ResetField(name string) error {
	switch name {
	case servicecatalog.FieldName:
		m.ResetName()
		return nil
	case servicecatalog.FieldCategory:
		m.ResetCategory()
		return nil
	case servicecatalog.FieldDescription:
		m.ResetDescription()
		return nil
	case servicecatalog.FieldDeliveryTime:
		m.ResetDeliveryTime()
		return nil
	case servicecatalog.FieldStatus:
		m.ResetStatus()
		return nil
	case servicecatalog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case servicecatalog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ServiceCatalog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceCatalogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.service_requests != nil {
		edges = append(edges, servicecatalog.EdgeServiceRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceCatalogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case servicecatalog.EdgeServiceRequests:
		ids := make([]ent.Value, 0, len(m.service_requests))
		for id := range m.service_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceCatalogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedservice_requests != nil {
		edges = append(edges, servicecatalog.EdgeServiceRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceCatalogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case servicecatalog.EdgeServiceRequests:
		ids := make([]ent.Value, 0, len(m.removedservice_requests))
		for id := range m.removedservice_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceCatalogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedservice_requests {
		edges = append(edges, servicecatalog.EdgeServiceRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceCatalogMutation) EdgeCleared(name string) bool {
	switch name {
	case servicecatalog.EdgeServiceRequests:
		return m.clearedservice_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceCatalogMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ServiceCatalog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceCatalogMutation) ResetEdge(name string) error {
	switch name {
	case servicecatalog.EdgeServiceRequests:
		m.ResetServiceRequests()
		return nil
	}
	return fmt.Errorf("unknown ServiceCatalog edge %s", name)
}

// ServiceRequestMutation represents an operation that mutates the ServiceRequest nodes in the graph.
type ServiceRequestMutation struct {
	config
	op               Op
	typ              string
	id               *int
	status           *servicerequest.Status
	reason           *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	catalog          *int
	clearedcatalog   bool
	requester        *int
	clearedrequester bool
	done             bool
	oldValue         func(context.Context) (*ServiceRequest, error)
	predicates       []predicate.ServiceRequest
}

var _ ent.Mutation = (*ServiceRequestMutation)(nil)

// servicerequestOption allows management of the mutation configuration using functional options.
type servicerequestOption func(*ServiceRequestMutation)

// newServiceRequestMutation creates new mutation for the ServiceRequest entity.
func newServiceRequestMutation(c config, op Op, opts ...servicerequestOption) *ServiceRequestMutation {
	m := &ServiceRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceRequestID sets the ID field of the mutation.
func withServiceRequestID(id int) servicerequestOption {
	return func(m *ServiceRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceRequest
		)
		m.oldValue = func(ctx context.Context) (*ServiceRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceRequest sets the old ServiceRequest of the mutation.
func withServiceRequest(node *ServiceRequest) servicerequestOption {
	return func(m *ServiceRequestMutation) {
		m.oldValue = func(context.Context) (*ServiceRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCatalogID sets the "catalog_id" field.
func (m *ServiceRequestMutation) SetCatalogID(i int) {
	m.catalog = &i
}

// CatalogID returns the value of the "catalog_id" field in the mutation.
func (m *ServiceRequestMutation) CatalogID() (r int, exists bool) {
	v := m.catalog
	if v == nil {
		return
	}
	return *v, true
}

// OldCatalogID returns the old "catalog_id" field's value of the ServiceRequest entity.
// If the ServiceRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceRequestMutation) OldCatalogID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCatalogID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCatalogID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCatalogID: %w", err)
	}
	return oldValue.CatalogID, nil
}

// ResetCatalogID resets all changes to the "catalog_id" field.
func (m *ServiceRequestMutation) ResetCatalogID() {
	m.catalog = nil
}

// SetRequesterID sets the "requester_id" field.
func (m *ServiceRequestMutation) SetRequesterID(i int) {
	m.requester = &i
}

// RequesterID returns the value of the "requester_id" field in the mutation.
func (m *ServiceRequestMutation) RequesterID() (r int, exists bool) {
	v := m.requester
	if v == nil {
		return
	}
	return *v, true
}

// OldRequesterID returns the old "requester_id" field's value of the ServiceRequest entity.
// If the ServiceRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceRequestMutation) OldRequesterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequesterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequesterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequesterID: %w", err)
	}
	return oldValue.RequesterID, nil
}

// ResetRequesterID resets all changes to the "requester_id" field.
func (m *ServiceRequestMutation) ResetRequesterID() {
	m.requester = nil
}

// SetStatus sets the "status" field.
func (m *ServiceRequestMutation) SetStatus(s servicerequest.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ServiceRequestMutation) Status() (r servicerequest.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ServiceRequest entity.
// If the ServiceRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceRequestMutation) OldStatus(ctx context.Context) (v servicerequest.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ServiceRequestMutation) ResetStatus() {
	m.status = nil
}

// SetReason sets the "reason" field.
func (m *ServiceRequestMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *ServiceRequestMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the ServiceRequest entity.
// If the ServiceRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceRequestMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *ServiceRequestMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[servicerequest.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *ServiceRequestMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[servicerequest.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *ServiceRequestMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, servicerequest.FieldReason)
}

// SetCreatedAt sets the "created_at" field.
func (m *ServiceRequestMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ServiceRequestMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ServiceRequest entity.
// If the ServiceRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceRequestMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ServiceRequestMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearCatalog clears the "catalog" edge to the ServiceCatalog entity.
func (m *ServiceRequestMutation) ClearCatalog() {
	m.clearedcatalog = true
	m.clearedFields[servicerequest.FieldCatalogID] = struct{}{}
}

// CatalogCleared reports if the "catalog" edge to the ServiceCatalog entity was cleared.
func (m *ServiceRequestMutation) CatalogCleared() bool {
	return m.clearedcatalog
}

// CatalogIDs returns the "catalog" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CatalogID instead. It exists only for internal usage by the builders.
func (m *ServiceRequestMutation) CatalogIDs() (ids []int) {
	if id := m.catalog; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCatalog resets all changes to the "catalog" edge.
func (m *ServiceRequestMutation) ResetCatalog() {
	m.catalog = nil
	m.clearedcatalog = false
}

// ClearRequester clears the "requester" edge to the User entity.
func (m *ServiceRequestMutation) ClearRequester() {
	m.clearedrequester = true
	m.clearedFields[servicerequest.FieldRequesterID] = struct{}{}
}

// RequesterCleared reports if the "requester" edge to the User entity was cleared.
func (m *ServiceRequestMutation) RequesterCleared() bool {
	return m.clearedrequester
}

// RequesterIDs returns the "requester" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequesterID instead. It exists only for internal usage by the builders.
func (m *ServiceRequestMutation) RequesterIDs() (ids []int) {
	if id := m.requester; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequester resets all changes to the "requester" edge.
func (m *ServiceRequestMutation) ResetRequester() {
	m.requester = nil
	m.clearedrequester = false
}

// Where appends a list predicates to the ServiceRequestMutation builder.
func (m *ServiceRequestMutation) Where(ps ...predicate.ServiceRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ServiceRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ServiceRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ServiceRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ServiceRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ServiceRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ServiceRequest).
func (m *ServiceRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceRequestMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.catalog != nil {
		fields = append(fields, servicerequest.FieldCatalogID)
	}
	if m.requester != nil {
		fields = append(fields, servicerequest.FieldRequesterID)
	}
	if m.status != nil {
		fields = append(fields, servicerequest.FieldStatus)
	}
	if m.reason != nil {
		fields = append(fields, servicerequest.FieldReason)
	}
	if m.created_at != nil {
		fields = append(fields, servicerequest.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case servicerequest.FieldCatalogID:
		return m.CatalogID()
	case servicerequest.FieldRequesterID:
		return m.RequesterID()
	case servicerequest.FieldStatus:
		return m.Status()
	case servicerequest.FieldReason:
		return m.Reason()
	case servicerequest.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case servicerequest.FieldCatalogID:
		return m.OldCatalogID(ctx)
	case servicerequest.FieldRequesterID:
		return m.OldRequesterID(ctx)
	case servicerequest.FieldStatus:
		return m.OldStatus(ctx)
	case servicerequest.FieldReason:
		return m.OldReason(ctx)
	case servicerequest.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case servicerequest.FieldCatalogID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCatalogID(v)
		return nil
	case servicerequest.FieldRequesterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequesterID(v)
		return nil
	case servicerequest.FieldStatus:
		v, ok := value.(servicerequest.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case servicerequest.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case servicerequest.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceRequestMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceRequestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ServiceRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceRequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(servicerequest.FieldReason) {
		fields = append(fields, servicerequest.FieldReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceRequestMutation) ClearField(name string) error {
	switch name {
	case servicerequest.FieldReason:
		m.ClearReason()
		return nil
	}
	return fmt.Errorf("unknown ServiceRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceRequestMutation) ResetField(name string) error {
	switch name {
	case servicerequest.FieldCatalogID:
		m.ResetCatalogID()
		return nil
	case servicerequest.FieldRequesterID:
		m.ResetRequesterID()
		return nil
	case servicerequest.FieldStatus:
		m.ResetStatus()
		return nil
	case servicerequest.FieldReason:
		m.ResetReason()
		return nil
	case servicerequest.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ServiceRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.catalog != nil {
		edges = append(edges, servicerequest.EdgeCatalog)
	}
	if m.requester != nil {
		edges = append(edges, servicerequest.EdgeRequester)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case servicerequest.EdgeCatalog:
		if id := m.catalog; id != nil {
			return []ent.Value{*id}
		}
	case servicerequest.EdgeRequester:
		if id := m.requester; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceRequestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcatalog {
		edges = append(edges, servicerequest.EdgeCatalog)
	}
	if m.clearedrequester {
		edges = append(edges, servicerequest.EdgeRequester)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case servicerequest.EdgeCatalog:
		return m.clearedcatalog
	case servicerequest.EdgeRequester:
		return m.clearedrequester
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceRequestMutation) ClearEdge(name string) error {
	switch name {
	case servicerequest.EdgeCatalog:
		m.ClearCatalog()
		return nil
	case servicerequest.EdgeRequester:
		m.ClearRequester()
		return nil
	}
	return fmt.Errorf("unknown ServiceRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceRequestMutation) ResetEdge(name string) error {
	switch name {
	case servicerequest.EdgeCatalog:
		m.ResetCatalog()
		return nil
	case servicerequest.EdgeRequester:
		m.ResetRequester()
		return nil
	}
	return fmt.Errorf("unknown ServiceRequest edge %s", name)
}

// StatusLogMutation represents an operation that mutates the StatusLog nodes in the graph.
type StatusLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	from_status   *string
	to_status     *string
	reason        *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	ticket        *int
	clearedticket bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*StatusLog, error)
	predicates    []predicate.StatusLog
}

var _ ent.Mutation = (*StatusLogMutation)(nil)

// statuslogOption allows management of the mutation configuration using functional options.
type statuslogOption func(*StatusLogMutation)

// newStatusLogMutation creates new mutation for the StatusLog entity.
func newStatusLogMutation(c config, op Op, opts ...statuslogOption) *StatusLogMutation {
	m := &StatusLogMutation{
		config:        c,
		op:            op,
		typ:           TypeStatusLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusLogID sets the ID field of the mutation.
func withStatusLogID(id int) statuslogOption {
	return func(m *StatusLogMutation) {
		var (
			err   error
			once  sync.Once
			value *StatusLog
		)
		m.oldValue = func(ctx context.Context) (*StatusLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StatusLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatusLog sets the old StatusLog of the mutation.
func withStatusLog(node *StatusLog) statuslogOption {
	return func(m *StatusLogMutation) {
		m.oldValue = func(context.Context) (*StatusLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatusLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatusLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StatusLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTicketID sets the "ticket_id" field.
func (m *StatusLogMutation) SetTicketID(i int) {
	m.ticket = &i
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *StatusLogMutation) TicketID() (r int, exists bool) {
	v := m.ticket
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldTicketID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *StatusLogMutation) ResetTicketID() {
	m.ticket = nil
}

// SetFromStatus sets the "from_status" field.
func (m *StatusLogMutation) SetFromStatus(s string) {
	m.from_status = &s
}

// FromStatus returns the value of the "from_status" field in the mutation.
func (m *StatusLogMutation) FromStatus() (r string, exists bool) {
	v := m.from_status
	if v == nil {
		return
	}
	return *v, true
}

// OldFromStatus returns the old "from_status" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldFromStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromStatus: %w", err)
	}
	return oldValue.FromStatus, nil
}

// ResetFromStatus resets all changes to the "from_status" field.
func (m *StatusLogMutation) ResetFromStatus() {
	m.from_status = nil
}

// SetToStatus sets the "to_status" field.
func (m *StatusLogMutation) SetToStatus(s string) {
	m.to_status = &s
}

// ToStatus returns the value of the "to_status" field in the mutation.
func (m *StatusLogMutation) ToStatus() (r string, exists bool) {
	v := m.to_status
	if v == nil {
		return
	}
	return *v, true
}

// OldToStatus returns the old "to_status" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldToStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToStatus: %w", err)
	}
	return oldValue.ToStatus, nil
}

// ResetToStatus resets all changes to the "to_status" field.
func (m *StatusLogMutation) ResetToStatus() {
	m.to_status = nil
}

// SetUserID sets the "user_id" field.
func (m *StatusLogMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *StatusLogMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *StatusLogMutation) ResetUserID() {
	m.user = nil
}

// SetReason sets the "reason" field.
func (m *StatusLogMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *StatusLogMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *StatusLogMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[statuslog.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *StatusLogMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[statuslog.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *StatusLogMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, statuslog.FieldReason)
}

// SetCreatedAt sets the "created_at" field.
func (m *StatusLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StatusLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the StatusLog entity.
// If the StatusLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StatusLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *StatusLogMutation) ClearTicket() {
	m.clearedticket = true
	m.clearedFields[statuslog.FieldTicketID] = struct{}{}
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *StatusLogMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *StatusLogMutation) TicketIDs() (ids []int) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *StatusLogMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *StatusLogMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[statuslog.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *StatusLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *StatusLogMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *StatusLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the StatusLogMutation builder.
func (m *StatusLogMutation) Where(ps ...predicate.StatusLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatusLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatusLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StatusLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatusLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatusLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StatusLog).
func (m *StatusLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatusLogMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.ticket != nil {
		fields = append(fields, statuslog.FieldTicketID)
	}
	if m.from_status != nil {
		fields = append(fields, statuslog.FieldFromStatus)
	}
	if m.to_status != nil {
		fields = append(fields, statuslog.FieldToStatus)
	}
	if m.user != nil {
		fields = append(fields, statuslog.FieldUserID)
	}
	if m.reason != nil {
		fields = append(fields, statuslog.FieldReason)
	}
	if m.created_at != nil {
		fields = append(fields, statuslog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatusLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statuslog.FieldTicketID:
		return m.TicketID()
	case statuslog.FieldFromStatus:
		return m.FromStatus()
	case statuslog.FieldToStatus:
		return m.ToStatus()
	case statuslog.FieldUserID:
		return m.UserID()
	case statuslog.FieldReason:
		return m.Reason()
	case statuslog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatusLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statuslog.FieldTicketID:
		return m.OldTicketID(ctx)
	case statuslog.FieldFromStatus:
		return m.OldFromStatus(ctx)
	case statuslog.FieldToStatus:
		return m.OldToStatus(ctx)
	case statuslog.FieldUserID:
		return m.OldUserID(ctx)
	case statuslog.FieldReason:
		return m.OldReason(ctx)
	case statuslog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown StatusLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statuslog.FieldTicketID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	case statuslog.FieldFromStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromStatus(v)
		return nil
	case statuslog.FieldToStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToStatus(v)
		return nil
	case statuslog.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case statuslog.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case statuslog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown StatusLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatusLogMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatusLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StatusLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatusLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(statuslog.FieldReason) {
		fields = append(fields, statuslog.FieldReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatusLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusLogMutation) ClearField(name string) error {
	switch name {
	case statuslog.FieldReason:
		m.ClearReason()
		return nil
	}
	return fmt.Errorf("unknown StatusLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatusLogMutation) ResetField(name string) error {
	switch name {
	case statuslog.FieldTicketID:
		m.ResetTicketID()
		return nil
	case statuslog.FieldFromStatus:
		m.ResetFromStatus()
		return nil
	case statuslog.FieldToStatus:
		m.ResetToStatus()
		return nil
	case statuslog.FieldUserID:
		m.ResetUserID()
		return nil
	case statuslog.FieldReason:
		m.ResetReason()
		return nil
	case statuslog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown StatusLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatusLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ticket != nil {
		edges = append(edges, statuslog.EdgeTicket)
	}
	if m.user != nil {
		edges = append(edges, statuslog.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatusLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statuslog.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	case statuslog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatusLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatusLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatusLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedticket {
		edges = append(edges, statuslog.EdgeTicket)
	}
	if m.cleareduser {
		edges = append(edges, statuslog.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatusLogMutation) EdgeCleared(name string) bool {
	switch name {
	case statuslog.EdgeTicket:
		return m.clearedticket
	case statuslog.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatusLogMutation) ClearEdge(name string) error {
	switch name {
	case statuslog.EdgeTicket:
		m.ClearTicket()
		return nil
	case statuslog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown StatusLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatusLogMutation) ResetEdge(name string) error {
	switch name {
	case statuslog.EdgeTicket:
		m.ResetTicket()
		return nil
	case statuslog.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown StatusLog edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	description          *string
	status               *ticket.Status
	priority             *ticket.Priority
	form_fields          *map[string]interface{}
	ticket_number        *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	requester            *int
	clearedrequester     bool
	assignee             *int
	clearedassignee      bool
	approval_logs        map[int]struct{}
	removedapproval_logs map[int]struct{}
	clearedapproval_logs bool
	flow_instance        *int
	clearedflow_instance bool
	status_logs          map[int]struct{}
	removedstatus_logs   map[int]struct{}
	clearedstatus_logs   bool
	done                 bool
	oldValue             func(context.Context) (*Ticket, error)
	predicates           []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id int) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *TicketMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TicketMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TicketMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *TicketMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TicketMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TicketMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[ticket.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TicketMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[ticket.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TicketMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, ticket.FieldDescription)
}

// SetStatus sets the "status" field.
func (m *TicketMutation) SetStatus(t ticket.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TicketMutation) Status() (r ticket.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldStatus(ctx context.Context) (v ticket.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TicketMutation) ResetStatus() {
	m.status = nil
}

// SetPriority sets the "priority" field.
func (m *TicketMutation) SetPriority(t ticket.Priority) {
	m.priority = &t
}

// Priority returns the value of the "priority" field in the mutation.
func (m *TicketMutation) Priority() (r ticket.Priority, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldPriority(ctx context.Context) (v ticket.Priority, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// ResetPriority resets all changes to the "priority" field.
func (m *TicketMutation) ResetPriority() {
	m.priority = nil
}

// SetFormFields sets the "form_fields" field.
func (m *TicketMutation) SetFormFields(value map[string]interface{}) {
	m.form_fields = &value
}

// FormFields returns the value of the "form_fields" field in the mutation.
func (m *TicketMutation) FormFields() (r map[string]interface{}, exists bool) {
	v := m.form_fields
	if v == nil {
		return
	}
	return *v, true
}

// OldFormFields returns the old "form_fields" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldFormFields(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormFields is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormFields requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormFields: %w", err)
	}
	return oldValue.FormFields, nil
}

// ClearFormFields clears the value of the "form_fields" field.
func (m *TicketMutation) ClearFormFields() {
	m.form_fields = nil
	m.clearedFields[ticket.FieldFormFields] = struct{}{}
}

// FormFieldsCleared returns if the "form_fields" field was cleared in this mutation.
func (m *TicketMutation) FormFieldsCleared() bool {
	_, ok := m.clearedFields[ticket.FieldFormFields]
	return ok
}

// ResetFormFields resets all changes to the "form_fields" field.
func (m *TicketMutation) ResetFormFields() {
	m.form_fields = nil
	delete(m.clearedFields, ticket.FieldFormFields)
}

// SetTicketNumber sets the "ticket_number" field.
func (m *TicketMutation) SetTicketNumber(s string) {
	m.ticket_number = &s
}

// TicketNumber returns the value of the "ticket_number" field in the mutation.
func (m *TicketMutation) TicketNumber() (r string, exists bool) {
	v := m.ticket_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketNumber returns the old "ticket_number" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldTicketNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketNumber: %w", err)
	}
	return oldValue.TicketNumber, nil
}

// ResetTicketNumber resets all changes to the "ticket_number" field.
func (m *TicketMutation) ResetTicketNumber() {
	m.ticket_number = nil
}

// SetRequesterID sets the "requester_id" field.
func (m *TicketMutation) SetRequesterID(i int) {
	m.requester = &i
}

// RequesterID returns the value of the "requester_id" field in the mutation.
func (m *TicketMutation) RequesterID() (r int, exists bool) {
	v := m.requester
	if v == nil {
		return
	}
	return *v, true
}

// OldRequesterID returns the old "requester_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldRequesterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequesterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequesterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequesterID: %w", err)
	}
	return oldValue.RequesterID, nil
}

// ResetRequesterID resets all changes to the "requester_id" field.
func (m *TicketMutation) ResetRequesterID() {
	m.requester = nil
}

// SetAssigneeID sets the "assignee_id" field.
func (m *TicketMutation) SetAssigneeID(i int) {
	m.assignee = &i
}

// AssigneeID returns the value of the "assignee_id" field in the mutation.
func (m *TicketMutation) AssigneeID() (r int, exists bool) {
	v := m.assignee
	if v == nil {
		return
	}
	return *v, true
}

// OldAssigneeID returns the old "assignee_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldAssigneeID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssigneeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssigneeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssigneeID: %w", err)
	}
	return oldValue.AssigneeID, nil
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (m *TicketMutation) ClearAssigneeID() {
	m.assignee = nil
	m.clearedFields[ticket.FieldAssigneeID] = struct{}{}
}

// AssigneeIDCleared returns if the "assignee_id" field was cleared in this mutation.
func (m *TicketMutation) AssigneeIDCleared() bool {
	_, ok := m.clearedFields[ticket.FieldAssigneeID]
	return ok
}

// ResetAssigneeID resets all changes to the "assignee_id" field.
func (m *TicketMutation) ResetAssigneeID() {
	m.assignee = nil
	delete(m.clearedFields, ticket.FieldAssigneeID)
}

// SetCreatedAt sets the "created_at" field.
func (m *TicketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TicketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TicketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TicketMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TicketMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TicketMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearRequester clears the "requester" edge to the User entity.
func (m *TicketMutation) ClearRequester() {
	m.clearedrequester = true
	m.clearedFields[ticket.FieldRequesterID] = struct{}{}
}

// RequesterCleared reports if the "requester" edge to the User entity was cleared.
func (m *TicketMutation) RequesterCleared() bool {
	return m.clearedrequester
}

// RequesterIDs returns the "requester" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequesterID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) RequesterIDs() (ids []int) {
	if id := m.requester; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequester resets all changes to the "requester" edge.
func (m *TicketMutation) ResetRequester() {
	m.requester = nil
	m.clearedrequester = false
}

// ClearAssignee clears the "assignee" edge to the User entity.
func (m *TicketMutation) ClearAssignee() {
	m.clearedassignee = true
	m.clearedFields[ticket.FieldAssigneeID] = struct{}{}
}

// AssigneeCleared reports if the "assignee" edge to the User entity was cleared.
func (m *TicketMutation) AssigneeCleared() bool {
	return m.AssigneeIDCleared() || m.clearedassignee
}

// AssigneeIDs returns the "assignee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssigneeID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) AssigneeIDs() (ids []int) {
	if id := m.assignee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssignee resets all changes to the "assignee" edge.
func (m *TicketMutation) ResetAssignee() {
	m.assignee = nil
	m.clearedassignee = false
}

// AddApprovalLogIDs adds the "approval_logs" edge to the ApprovalLog entity by ids.
func (m *TicketMutation) AddApprovalLogIDs(ids ...int) {
	if m.approval_logs == nil {
		m.approval_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.approval_logs[ids[i]] = struct{}{}
	}
}

// ClearApprovalLogs clears the "approval_logs" edge to the ApprovalLog entity.
func (m *TicketMutation) ClearApprovalLogs() {
	m.clearedapproval_logs = true
}

// ApprovalLogsCleared reports if the "approval_logs" edge to the ApprovalLog entity was cleared.
func (m *TicketMutation) ApprovalLogsCleared() bool {
	return m.clearedapproval_logs
}

// RemoveApprovalLogIDs removes the "approval_logs" edge to the ApprovalLog entity by IDs.
func (m *TicketMutation) RemoveApprovalLogIDs(ids ...int) {
	if m.removedapproval_logs == nil {
		m.removedapproval_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.approval_logs, ids[i])
		m.removedapproval_logs[ids[i]] = struct{}{}
	}
}

// RemovedApprovalLogs returns the removed IDs of the "approval_logs" edge to the ApprovalLog entity.
func (m *TicketMutation) RemovedApprovalLogsIDs() (ids []int) {
	for id := range m.removedapproval_logs {
		ids = append(ids, id)
	}
	return
}

// ApprovalLogsIDs returns the "approval_logs" edge IDs in the mutation.
func (m *TicketMutation) ApprovalLogsIDs() (ids []int) {
	for id := range m.approval_logs {
		ids = append(ids, id)
	}
	return
}

// ResetApprovalLogs resets all changes to the "approval_logs" edge.
func (m *TicketMutation) ResetApprovalLogs() {
	m.approval_logs = nil
	m.clearedapproval_logs = false
	m.removedapproval_logs = nil
}

// SetFlowInstanceID sets the "flow_instance" edge to the FlowInstance entity by id.
func (m *TicketMutation) SetFlowInstanceID(id int) {
	m.flow_instance = &id
}

// ClearFlowInstance clears the "flow_instance" edge to the FlowInstance entity.
func (m *TicketMutation) ClearFlowInstance() {
	m.clearedflow_instance = true
}

// FlowInstanceCleared reports if the "flow_instance" edge to the FlowInstance entity was cleared.
func (m *TicketMutation) FlowInstanceCleared() bool {
	return m.clearedflow_instance
}

// FlowInstanceID returns the "flow_instance" edge ID in the mutation.
func (m *TicketMutation) FlowInstanceID() (id int, exists bool) {
	if m.flow_instance != nil {
		return *m.flow_instance, true
	}
	return
}

// FlowInstanceIDs returns the "flow_instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FlowInstanceID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) FlowInstanceIDs() (ids []int) {
	if id := m.flow_instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFlowInstance resets all changes to the "flow_instance" edge.
func (m *TicketMutation) ResetFlowInstance() {
	m.flow_instance = nil
	m.clearedflow_instance = false
}

// AddStatusLogIDs adds the "status_logs" edge to the StatusLog entity by ids.
func (m *TicketMutation) AddStatusLogIDs(ids ...int) {
	if m.status_logs == nil {
		m.status_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.status_logs[ids[i]] = struct{}{}
	}
}

// ClearStatusLogs clears the "status_logs" edge to the StatusLog entity.
func (m *TicketMutation) ClearStatusLogs() {
	m.clearedstatus_logs = true
}

// StatusLogsCleared reports if the "status_logs" edge to the StatusLog entity was cleared.
func (m *TicketMutation) StatusLogsCleared() bool {
	return m.clearedstatus_logs
}

// RemoveStatusLogIDs removes the "status_logs" edge to the StatusLog entity by IDs.
func (m *TicketMutation) RemoveStatusLogIDs(ids ...int) {
	if m.removedstatus_logs == nil {
		m.removedstatus_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.status_logs, ids[i])
		m.removedstatus_logs[ids[i]] = struct{}{}
	}
}

// RemovedStatusLogs returns the removed IDs of the "status_logs" edge to the StatusLog entity.
func (m *TicketMutation) RemovedStatusLogsIDs() (ids []int) {
	for id := range m.removedstatus_logs {
		ids = append(ids, id)
	}
	return
}

// StatusLogsIDs returns the "status_logs" edge IDs in the mutation.
func (m *TicketMutation) StatusLogsIDs() (ids []int) {
	for id := range m.status_logs {
		ids = append(ids, id)
	}
	return
}

// ResetStatusLogs resets all changes to the "status_logs" edge.
func (m *TicketMutation) ResetStatusLogs() {
	m.status_logs = nil
	m.clearedstatus_logs = false
	m.removedstatus_logs = nil
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TicketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TicketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ticket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TicketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.title != nil {
		fields = append(fields, ticket.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, ticket.FieldDescription)
	}
	if m.status != nil {
		fields = append(fields, ticket.FieldStatus)
	}
	if m.priority != nil {
		fields = append(fields, ticket.FieldPriority)
	}
	if m.form_fields != nil {
		fields = append(fields, ticket.FieldFormFields)
	}
	if m.ticket_number != nil {
		fields = append(fields, ticket.FieldTicketNumber)
	}
	if m.requester != nil {
		fields = append(fields, ticket.FieldRequesterID)
	}
	if m.assignee != nil {
		fields = append(fields, ticket.FieldAssigneeID)
	}
	if m.created_at != nil {
		fields = append(fields, ticket.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ticket.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldTitle:
		return m.Title()
	case ticket.FieldDescription:
		return m.Description()
	case ticket.FieldStatus:
		return m.Status()
	case ticket.FieldPriority:
		return m.Priority()
	case ticket.FieldFormFields:
		return m.FormFields()
	case ticket.FieldTicketNumber:
		return m.TicketNumber()
	case ticket.FieldRequesterID:
		return m.RequesterID()
	case ticket.FieldAssigneeID:
		return m.AssigneeID()
	case ticket.FieldCreatedAt:
		return m.CreatedAt()
	case ticket.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldTitle:
		return m.OldTitle(ctx)
	case ticket.FieldDescription:
		return m.OldDescription(ctx)
	case ticket.FieldStatus:
		return m.OldStatus(ctx)
	case ticket.FieldPriority:
		return m.OldPriority(ctx)
	case ticket.FieldFormFields:
		return m.OldFormFields(ctx)
	case ticket.FieldTicketNumber:
		return m.OldTicketNumber(ctx)
	case ticket.FieldRequesterID:
		return m.OldRequesterID(ctx)
	case ticket.FieldAssigneeID:
		return m.OldAssigneeID(ctx)
	case ticket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ticket.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case ticket.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case ticket.FieldStatus:
		v, ok := value.(ticket.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ticket.FieldPriority:
		v, ok := value.(ticket.Priority)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case ticket.FieldFormFields:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormFields(v)
		return nil
	case ticket.FieldTicketNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketNumber(v)
		return nil
	case ticket.FieldRequesterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequesterID(v)
		return nil
	case ticket.FieldAssigneeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssigneeID(v)
		return nil
	case ticket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ticket.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ticket.FieldDescription) {
		fields = append(fields, ticket.FieldDescription)
	}
	if m.FieldCleared(ticket.FieldFormFields) {
		fields = append(fields, ticket.FieldFormFields)
	}
	if m.FieldCleared(ticket.FieldAssigneeID) {
		fields = append(fields, ticket.FieldAssigneeID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	switch name {
	case ticket.FieldDescription:
		m.ClearDescription()
		return nil
	case ticket.FieldFormFields:
		m.ClearFormFields()
		return nil
	case ticket.FieldAssigneeID:
		m.ClearAssigneeID()
		return nil
	}
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldTitle:
		m.ResetTitle()
		return nil
	case ticket.FieldDescription:
		m.ResetDescription()
		return nil
	case ticket.FieldStatus:
		m.ResetStatus()
		return nil
	case ticket.FieldPriority:
		m.ResetPriority()
		return nil
	case ticket.FieldFormFields:
		m.ResetFormFields()
		return nil
	case ticket.FieldTicketNumber:
		m.ResetTicketNumber()
		return nil
	case ticket.FieldRequesterID:
		m.ResetRequesterID()
		return nil
	case ticket.FieldAssigneeID:
		m.ResetAssigneeID()
		return nil
	case ticket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ticket.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.requester != nil {
		edges = append(edges, ticket.EdgeRequester)
	}
	if m.assignee != nil {
		edges = append(edges, ticket.EdgeAssignee)
	}
	if m.approval_logs != nil {
		edges = append(edges, ticket.EdgeApprovalLogs)
	}
	if m.flow_instance != nil {
		edges = append(edges, ticket.EdgeFlowInstance)
	}
	if m.status_logs != nil {
		edges = append(edges, ticket.EdgeStatusLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeRequester:
		if id := m.requester; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeAssignee:
		if id := m.assignee; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeApprovalLogs:
		ids := make([]ent.Value, 0, len(m.approval_logs))
		for id := range m.approval_logs {
			ids = append(ids, id)
		}
		return ids
	case ticket.EdgeFlowInstance:
		if id := m.flow_instance; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeStatusLogs:
		ids := make([]ent.Value, 0, len(m.status_logs))
		for id := range m.status_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedapproval_logs != nil {
		edges = append(edges, ticket.EdgeApprovalLogs)
	}
	if m.removedstatus_logs != nil {
		edges = append(edges, ticket.EdgeStatusLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeApprovalLogs:
		ids := make([]ent.Value, 0, len(m.removedapproval_logs))
		for id := range m.removedapproval_logs {
			ids = append(ids, id)
		}
		return ids
	case ticket.EdgeStatusLogs:
		ids := make([]ent.Value, 0, len(m.removedstatus_logs))
		for id := range m.removedstatus_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedrequester {
		edges = append(edges, ticket.EdgeRequester)
	}
	if m.clearedassignee {
		edges = append(edges, ticket.EdgeAssignee)
	}
	if m.clearedapproval_logs {
		edges = append(edges, ticket.EdgeApprovalLogs)
	}
	if m.clearedflow_instance {
		edges = append(edges, ticket.EdgeFlowInstance)
	}
	if m.clearedstatus_logs {
		edges = append(edges, ticket.EdgeStatusLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeRequester:
		return m.clearedrequester
	case ticket.EdgeAssignee:
		return m.clearedassignee
	case ticket.EdgeApprovalLogs:
		return m.clearedapproval_logs
	case ticket.EdgeFlowInstance:
		return m.clearedflow_instance
	case ticket.EdgeStatusLogs:
		return m.clearedstatus_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeRequester:
		m.ClearRequester()
		return nil
	case ticket.EdgeAssignee:
		m.ClearAssignee()
		return nil
	case ticket.EdgeFlowInstance:
		m.ClearFlowInstance()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeRequester:
		m.ResetRequester()
		return nil
	case ticket.EdgeAssignee:
		m.ResetAssignee()
		return nil
	case ticket.EdgeApprovalLogs:
		m.ResetApprovalLogs()
		return nil
	case ticket.EdgeFlowInstance:
		m.ResetFlowInstance()
		return nil
	case ticket.EdgeStatusLogs:
		m.ResetStatusLogs()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	username                 *string
	email                    *string
	name                     *string
	department               *string
	phone                    *string
	password_hash            *string
	active                   *bool
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	submitted_tickets        map[int]struct{}
	removedsubmitted_tickets map[int]struct{}
	clearedsubmitted_tickets bool
	assigned_tickets         map[int]struct{}
	removedassigned_tickets  map[int]struct{}
	clearedassigned_tickets  bool
	approval_logs            map[int]struct{}
	removedapproval_logs     map[int]struct{}
	clearedapproval_logs     bool
	status_logs              map[int]struct{}
	removedstatus_logs       map[int]struct{}
	clearedstatus_logs       bool
	service_requests         map[int]struct{}
	removedservice_requests  map[int]struct{}
	clearedservice_requests  bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetDepartment sets the "department" field.
func (m *UserMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *UserMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ClearDepartment clears the value of the "department" field.
func (m *UserMutation) ClearDepartment() {
	m.department = nil
	m.clearedFields[user.FieldDepartment] = struct{}{}
}

// DepartmentCleared returns if the "department" field was cleared in this mutation.
func (m *UserMutation) DepartmentCleared() bool {
	_, ok := m.clearedFields[user.FieldDepartment]
	return ok
}

// ResetDepartment resets all changes to the "department" field.
func (m *UserMutation) ResetDepartment() {
	m.department = nil
	delete(m.clearedFields, user.FieldDepartment)
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *UserMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[user.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *UserMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[user.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, user.FieldPhone)
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSubmittedTicketIDs adds the "submitted_tickets" edge to the Ticket entity by ids.
func (m *UserMutation) AddSubmittedTicketIDs(ids ...int) {
	if m.submitted_tickets == nil {
		m.submitted_tickets = make(map[int]struct{})
	}
	for i := range ids {
		m.submitted_tickets[ids[i]] = struct{}{}
	}
}

// ClearSubmittedTickets clears the "submitted_tickets" edge to the Ticket entity.
func (m *UserMutation) ClearSubmittedTickets() {
	m.clearedsubmitted_tickets = true
}

// SubmittedTicketsCleared reports if the "submitted_tickets" edge to the Ticket entity was cleared.
func (m *UserMutation) SubmittedTicketsCleared() bool {
	return m.clearedsubmitted_tickets
}

// RemoveSubmittedTicketIDs removes the "submitted_tickets" edge to the Ticket entity by IDs.
func (m *UserMutation) RemoveSubmittedTicketIDs(ids ...int) {
	if m.removedsubmitted_tickets == nil {
		m.removedsubmitted_tickets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submitted_tickets, ids[i])
		m.removedsubmitted_tickets[ids[i]] = struct{}{}
	}
}

// RemovedSubmittedTickets returns the removed IDs of the "submitted_tickets" edge to the Ticket entity.
func (m *UserMutation) RemovedSubmittedTicketsIDs() (ids []int) {
	for id := range m.removedsubmitted_tickets {
		ids = append(ids, id)
	}
	return
}

// SubmittedTicketsIDs returns the "submitted_tickets" edge IDs in the mutation.
func (m *UserMutation) SubmittedTicketsIDs() (ids []int) {
	for id := range m.submitted_tickets {
		ids = append(ids, id)
	}
	return
}

// ResetSubmittedTickets resets all changes to the "submitted_tickets" edge.
func (m *UserMutation) ResetSubmittedTickets() {
	m.submitted_tickets = nil
	m.clearedsubmitted_tickets = false
	m.removedsubmitted_tickets = nil
}

// AddAssignedTicketIDs adds the "assigned_tickets" edge to the Ticket entity by ids.
func (m *UserMutation) AddAssignedTicketIDs(ids ...int) {
	if m.assigned_tickets == nil {
		m.assigned_tickets = make(map[int]struct{})
	}
	for i := range ids {
		m.assigned_tickets[ids[i]] = struct{}{}
	}
}

// ClearAssignedTickets clears the "assigned_tickets" edge to the Ticket entity.
func (m *UserMutation) ClearAssignedTickets() {
	m.clearedassigned_tickets = true
}

// AssignedTicketsCleared reports if the "assigned_tickets" edge to the Ticket entity was cleared.
func (m *UserMutation) AssignedTicketsCleared() bool {
	return m.clearedassigned_tickets
}

// RemoveAssignedTicketIDs removes the "assigned_tickets" edge to the Ticket entity by IDs.
func (m *UserMutation) RemoveAssignedTicketIDs(ids ...int) {
	if m.removedassigned_tickets == nil {
		m.removedassigned_tickets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assigned_tickets, ids[i])
		m.removedassigned_tickets[ids[i]] = struct{}{}
	}
}

// RemovedAssignedTickets returns the removed IDs of the "assigned_tickets" edge to the Ticket entity.
func (m *UserMutation) RemovedAssignedTicketsIDs() (ids []int) {
	for id := range m.removedassigned_tickets {
		ids = append(ids, id)
	}
	return
}

// AssignedTicketsIDs returns the "assigned_tickets" edge IDs in the mutation.
func (m *UserMutation) AssignedTicketsIDs() (ids []int) {
	for id := range m.assigned_tickets {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedTickets resets all changes to the "assigned_tickets" edge.
func (m *UserMutation) ResetAssignedTickets() {
	m.assigned_tickets = nil
	m.clearedassigned_tickets = false
	m.removedassigned_tickets = nil
}

// AddApprovalLogIDs adds the "approval_logs" edge to the ApprovalLog entity by ids.
func (m *UserMutation) AddApprovalLogIDs(ids ...int) {
	if m.approval_logs == nil {
		m.approval_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.approval_logs[ids[i]] = struct{}{}
	}
}

// ClearApprovalLogs clears the "approval_logs" edge to the ApprovalLog entity.
func (m *UserMutation) ClearApprovalLogs() {
	m.clearedapproval_logs = true
}

// ApprovalLogsCleared reports if the "approval_logs" edge to the ApprovalLog entity was cleared.
func (m *UserMutation) ApprovalLogsCleared() bool {
	return m.clearedapproval_logs
}

// RemoveApprovalLogIDs removes the "approval_logs" edge to the ApprovalLog entity by IDs.
func (m *UserMutation) RemoveApprovalLogIDs(ids ...int) {
	if m.removedapproval_logs == nil {
		m.removedapproval_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.approval_logs, ids[i])
		m.removedapproval_logs[ids[i]] = struct{}{}
	}
}

// RemovedApprovalLogs returns the removed IDs of the "approval_logs" edge to the ApprovalLog entity.
func (m *UserMutation) RemovedApprovalLogsIDs() (ids []int) {
	for id := range m.removedapproval_logs {
		ids = append(ids, id)
	}
	return
}

// ApprovalLogsIDs returns the "approval_logs" edge IDs in the mutation.
func (m *UserMutation) ApprovalLogsIDs() (ids []int) {
	for id := range m.approval_logs {
		ids = append(ids, id)
	}
	return
}

// ResetApprovalLogs resets all changes to the "approval_logs" edge.
func (m *UserMutation) ResetApprovalLogs() {
	m.approval_logs = nil
	m.clearedapproval_logs = false
	m.removedapproval_logs = nil
}

// AddStatusLogIDs adds the "status_logs" edge to the StatusLog entity by ids.
func (m *UserMutation) AddStatusLogIDs(ids ...int) {
	if m.status_logs == nil {
		m.status_logs = make(map[int]struct{})
	}
	for i := range ids {
		m.status_logs[ids[i]] = struct{}{}
	}
}

// ClearStatusLogs clears the "status_logs" edge to the StatusLog entity.
func (m *UserMutation) ClearStatusLogs() {
	m.clearedstatus_logs = true
}

// StatusLogsCleared reports if the "status_logs" edge to the StatusLog entity was cleared.
func (m *UserMutation) StatusLogsCleared() bool {
	return m.clearedstatus_logs
}

// RemoveStatusLogIDs removes the "status_logs" edge to the StatusLog entity by IDs.
func (m *UserMutation) RemoveStatusLogIDs(ids ...int) {
	if m.removedstatus_logs == nil {
		m.removedstatus_logs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.status_logs, ids[i])
		m.removedstatus_logs[ids[i]] = struct{}{}
	}
}

// RemovedStatusLogs returns the removed IDs of the "status_logs" edge to the StatusLog entity.
func (m *UserMutation) RemovedStatusLogsIDs() (ids []int) {
	for id := range m.removedstatus_logs {
		ids = append(ids, id)
	}
	return
}

// StatusLogsIDs returns the "status_logs" edge IDs in the mutation.
func (m *UserMutation) StatusLogsIDs() (ids []int) {
	for id := range m.status_logs {
		ids = append(ids, id)
	}
	return
}

// ResetStatusLogs resets all changes to the "status_logs" edge.
func (m *UserMutation) ResetStatusLogs() {
	m.status_logs = nil
	m.clearedstatus_logs = false
	m.removedstatus_logs = nil
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by ids.
func (m *UserMutation) AddServiceRequestIDs(ids ...int) {
	if m.service_requests == nil {
		m.service_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.service_requests[ids[i]] = struct{}{}
	}
}

// ClearServiceRequests clears the "service_requests" edge to the ServiceRequest entity.
func (m *UserMutation) ClearServiceRequests() {
	m.clearedservice_requests = true
}

// ServiceRequestsCleared reports if the "service_requests" edge to the ServiceRequest entity was cleared.
func (m *UserMutation) ServiceRequestsCleared() bool {
	return m.clearedservice_requests
}

// RemoveServiceRequestIDs removes the "service_requests" edge to the ServiceRequest entity by IDs.
func (m *UserMutation) RemoveServiceRequestIDs(ids ...int) {
	if m.removedservice_requests == nil {
		m.removedservice_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.service_requests, ids[i])
		m.removedservice_requests[ids[i]] = struct{}{}
	}
}

// RemovedServiceRequests returns the removed IDs of the "service_requests" edge to the ServiceRequest entity.
func (m *UserMutation) RemovedServiceRequestsIDs() (ids []int) {
	for id := range m.removedservice_requests {
		ids = append(ids, id)
	}
	return
}

// ServiceRequestsIDs returns the "service_requests" edge IDs in the mutation.
func (m *UserMutation) ServiceRequestsIDs() (ids []int) {
	for id := range m.service_requests {
		ids = append(ids, id)
	}
	return
}

// ResetServiceRequests resets all changes to the "service_requests" edge.
func (m *UserMutation) ResetServiceRequests() {
	m.service_requests = nil
	m.clearedservice_requests = false
	m.removedservice_requests = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.department != nil {
		fields = append(fields, user.FieldDepartment)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldName:
		return m.Name()
	case user.FieldDepartment:
		return m.Department()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldActive:
		return m.Active()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldDepartment:
		return m.OldDepartment(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDepartment) {
		fields = append(fields, user.FieldDepartment)
	}
	if m.FieldCleared(user.FieldPhone) {
		fields = append(fields, user.FieldPhone)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDepartment:
		m.ClearDepartment()
		return nil
	case user.FieldPhone:
		m.ClearPhone()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldDepartment:
		m.ResetDepartment()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.submitted_tickets != nil {
		edges = append(edges, user.EdgeSubmittedTickets)
	}
	if m.assigned_tickets != nil {
		edges = append(edges, user.EdgeAssignedTickets)
	}
	if m.approval_logs != nil {
		edges = append(edges, user.EdgeApprovalLogs)
	}
	if m.status_logs != nil {
		edges = append(edges, user.EdgeStatusLogs)
	}
	if m.service_requests != nil {
		edges = append(edges, user.EdgeServiceRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSubmittedTickets:
		ids := make([]ent.Value, 0, len(m.submitted_tickets))
		for id := range m.submitted_tickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAssignedTickets:
		ids := make([]ent.Value, 0, len(m.assigned_tickets))
		for id := range m.assigned_tickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeApprovalLogs:
		ids := make([]ent.Value, 0, len(m.approval_logs))
		for id := range m.approval_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStatusLogs:
		ids := make([]ent.Value, 0, len(m.status_logs))
		for id := range m.status_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeServiceRequests:
		ids := make([]ent.Value, 0, len(m.service_requests))
		for id := range m.service_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedsubmitted_tickets != nil {
		edges = append(edges, user.EdgeSubmittedTickets)
	}
	if m.removedassigned_tickets != nil {
		edges = append(edges, user.EdgeAssignedTickets)
	}
	if m.removedapproval_logs != nil {
		edges = append(edges, user.EdgeApprovalLogs)
	}
	if m.removedstatus_logs != nil {
		edges = append(edges, user.EdgeStatusLogs)
	}
	if m.removedservice_requests != nil {
		edges = append(edges, user.EdgeServiceRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSubmittedTickets:
		ids := make([]ent.Value, 0, len(m.removedsubmitted_tickets))
		for id := range m.removedsubmitted_tickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAssignedTickets:
		ids := make([]ent.Value, 0, len(m.removedassigned_tickets))
		for id := range m.removedassigned_tickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeApprovalLogs:
		ids := make([]ent.Value, 0, len(m.removedapproval_logs))
		for id := range m.removedapproval_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStatusLogs:
		ids := make([]ent.Value, 0, len(m.removedstatus_logs))
		for id := range m.removedstatus_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeServiceRequests:
		ids := make([]ent.Value, 0, len(m.removedservice_requests))
		for id := range m.removedservice_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedsubmitted_tickets {
		edges = append(edges, user.EdgeSubmittedTickets)
	}
	if m.clearedassigned_tickets {
		edges = append(edges, user.EdgeAssignedTickets)
	}
	if m.clearedapproval_logs {
		edges = append(edges, user.EdgeApprovalLogs)
	}
	if m.clearedstatus_logs {
		edges = append(edges, user.EdgeStatusLogs)
	}
	if m.clearedservice_requests {
		edges = append(edges, user.EdgeServiceRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSubmittedTickets:
		return m.clearedsubmitted_tickets
	case user.EdgeAssignedTickets:
		return m.clearedassigned_tickets
	case user.EdgeApprovalLogs:
		return m.clearedapproval_logs
	case user.EdgeStatusLogs:
		return m.clearedstatus_logs
	case user.EdgeServiceRequests:
		return m.clearedservice_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSubmittedTickets:
		m.ResetSubmittedTickets()
		return nil
	case user.EdgeAssignedTickets:
		m.ResetAssignedTickets()
		return nil
	case user.EdgeApprovalLogs:
		m.ResetApprovalLogs()
		return nil
	case user.EdgeStatusLogs:
		m.ResetStatusLogs()
		return nil
	case user.EdgeServiceRequests:
		m.ResetServiceRequests()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
