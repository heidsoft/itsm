// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (pu *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProblemUpdate) SetTitle(s string) *ProblemUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableTitle(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProblemUpdate) SetDescription(s string) *ProblemUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableDescription(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProblemUpdate) ClearDescription() *ProblemUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProblemUpdate) SetStatus(s string) *ProblemUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableStatus(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetStatus(*s)
	}
	return pu
}

// SetPriority sets the "priority" field.
func (pu *ProblemUpdate) SetPriority(s string) *ProblemUpdate {
	pu.mutation.SetPriority(s)
	return pu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillablePriority(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetPriority(*s)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *ProblemUpdate) SetCategory(s string) *ProblemUpdate {
	pu.mutation.SetCategory(s)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCategory(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetCategory(*s)
	}
	return pu
}

// ClearCategory clears the value of the "category" field.
func (pu *ProblemUpdate) ClearCategory() *ProblemUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// SetRootCause sets the "root_cause" field.
func (pu *ProblemUpdate) SetRootCause(s string) *ProblemUpdate {
	pu.mutation.SetRootCause(s)
	return pu
}

// SetNillableRootCause sets the "root_cause" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableRootCause(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetRootCause(*s)
	}
	return pu
}

// ClearRootCause clears the value of the "root_cause" field.
func (pu *ProblemUpdate) ClearRootCause() *ProblemUpdate {
	pu.mutation.ClearRootCause()
	return pu
}

// SetImpact sets the "impact" field.
func (pu *ProblemUpdate) SetImpact(s string) *ProblemUpdate {
	pu.mutation.SetImpact(s)
	return pu
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableImpact(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetImpact(*s)
	}
	return pu
}

// ClearImpact clears the value of the "impact" field.
func (pu *ProblemUpdate) ClearImpact() *ProblemUpdate {
	pu.mutation.ClearImpact()
	return pu
}

// SetAssigneeID sets the "assignee_id" field.
func (pu *ProblemUpdate) SetAssigneeID(i int) *ProblemUpdate {
	pu.mutation.ResetAssigneeID()
	pu.mutation.SetAssigneeID(i)
	return pu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableAssigneeID(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetAssigneeID(*i)
	}
	return pu
}

// AddAssigneeID adds i to the "assignee_id" field.
func (pu *ProblemUpdate) AddAssigneeID(i int) *ProblemUpdate {
	pu.mutation.AddAssigneeID(i)
	return pu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (pu *ProblemUpdate) ClearAssigneeID() *ProblemUpdate {
	pu.mutation.ClearAssigneeID()
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *ProblemUpdate) SetCreatedBy(i int) *ProblemUpdate {
	pu.mutation.ResetCreatedBy()
	pu.mutation.SetCreatedBy(i)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCreatedBy(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetCreatedBy(*i)
	}
	return pu
}

// AddCreatedBy adds i to the "created_by" field.
func (pu *ProblemUpdate) AddCreatedBy(i int) *ProblemUpdate {
	pu.mutation.AddCreatedBy(i)
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *ProblemUpdate) SetTenantID(i int) *ProblemUpdate {
	pu.mutation.ResetTenantID()
	pu.mutation.SetTenantID(i)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableTenantID(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetTenantID(*i)
	}
	return pu
}

// AddTenantID adds i to the "tenant_id" field.
func (pu *ProblemUpdate) AddTenantID(i int) *ProblemUpdate {
	pu.mutation.AddTenantID(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProblemUpdate) SetCreatedAt(t time.Time) *ProblemUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCreatedAt(t *time.Time) *ProblemUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProblemUpdate) SetUpdatedAt(t time.Time) *ProblemUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// Mutation returns the ProblemMutation object of the builder.
func (pu *ProblemUpdate) Mutation() *ProblemMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProblemUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProblemUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := problem.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProblemUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := problem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Problem.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CreatedBy(); ok {
		if err := problem.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Problem.created_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TenantID(); ok {
		if err := problem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Problem.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pu *ProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(problem.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(problem.FieldStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.Priority(); ok {
		_spec.SetField(problem.FieldPriority, field.TypeString, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(problem.FieldCategory, field.TypeString, value)
	}
	if pu.mutation.CategoryCleared() {
		_spec.ClearField(problem.FieldCategory, field.TypeString)
	}
	if value, ok := pu.mutation.RootCause(); ok {
		_spec.SetField(problem.FieldRootCause, field.TypeString, value)
	}
	if pu.mutation.RootCauseCleared() {
		_spec.ClearField(problem.FieldRootCause, field.TypeString)
	}
	if value, ok := pu.mutation.Impact(); ok {
		_spec.SetField(problem.FieldImpact, field.TypeString, value)
	}
	if pu.mutation.ImpactCleared() {
		_spec.ClearField(problem.FieldImpact, field.TypeString)
	}
	if value, ok := pu.mutation.AssigneeID(); ok {
		_spec.SetField(problem.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAssigneeID(); ok {
		_spec.AddField(problem.FieldAssigneeID, field.TypeInt, value)
	}
	if pu.mutation.AssigneeIDCleared() {
		_spec.ClearField(problem.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(problem.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(problem.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.TenantID(); ok {
		_spec.SetField(problem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedTenantID(); ok {
		_spec.AddField(problem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(problem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(problem.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemMutation
}

// SetTitle sets the "title" field.
func (puo *ProblemUpdateOne) SetTitle(s string) *ProblemUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableTitle(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProblemUpdateOne) SetDescription(s string) *ProblemUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableDescription(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProblemUpdateOne) ClearDescription() *ProblemUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProblemUpdateOne) SetStatus(s string) *ProblemUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableStatus(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetStatus(*s)
	}
	return puo
}

// SetPriority sets the "priority" field.
func (puo *ProblemUpdateOne) SetPriority(s string) *ProblemUpdateOne {
	puo.mutation.SetPriority(s)
	return puo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillablePriority(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetPriority(*s)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *ProblemUpdateOne) SetCategory(s string) *ProblemUpdateOne {
	puo.mutation.SetCategory(s)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCategory(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetCategory(*s)
	}
	return puo
}

// ClearCategory clears the value of the "category" field.
func (puo *ProblemUpdateOne) ClearCategory() *ProblemUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// SetRootCause sets the "root_cause" field.
func (puo *ProblemUpdateOne) SetRootCause(s string) *ProblemUpdateOne {
	puo.mutation.SetRootCause(s)
	return puo
}

// SetNillableRootCause sets the "root_cause" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableRootCause(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetRootCause(*s)
	}
	return puo
}

// ClearRootCause clears the value of the "root_cause" field.
func (puo *ProblemUpdateOne) ClearRootCause() *ProblemUpdateOne {
	puo.mutation.ClearRootCause()
	return puo
}

// SetImpact sets the "impact" field.
func (puo *ProblemUpdateOne) SetImpact(s string) *ProblemUpdateOne {
	puo.mutation.SetImpact(s)
	return puo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableImpact(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetImpact(*s)
	}
	return puo
}

// ClearImpact clears the value of the "impact" field.
func (puo *ProblemUpdateOne) ClearImpact() *ProblemUpdateOne {
	puo.mutation.ClearImpact()
	return puo
}

// SetAssigneeID sets the "assignee_id" field.
func (puo *ProblemUpdateOne) SetAssigneeID(i int) *ProblemUpdateOne {
	puo.mutation.ResetAssigneeID()
	puo.mutation.SetAssigneeID(i)
	return puo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableAssigneeID(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetAssigneeID(*i)
	}
	return puo
}

// AddAssigneeID adds i to the "assignee_id" field.
func (puo *ProblemUpdateOne) AddAssigneeID(i int) *ProblemUpdateOne {
	puo.mutation.AddAssigneeID(i)
	return puo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (puo *ProblemUpdateOne) ClearAssigneeID() *ProblemUpdateOne {
	puo.mutation.ClearAssigneeID()
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *ProblemUpdateOne) SetCreatedBy(i int) *ProblemUpdateOne {
	puo.mutation.ResetCreatedBy()
	puo.mutation.SetCreatedBy(i)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCreatedBy(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetCreatedBy(*i)
	}
	return puo
}

// AddCreatedBy adds i to the "created_by" field.
func (puo *ProblemUpdateOne) AddCreatedBy(i int) *ProblemUpdateOne {
	puo.mutation.AddCreatedBy(i)
	return puo
}

// SetTenantID sets the "tenant_id" field.
func (puo *ProblemUpdateOne) SetTenantID(i int) *ProblemUpdateOne {
	puo.mutation.ResetTenantID()
	puo.mutation.SetTenantID(i)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableTenantID(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetTenantID(*i)
	}
	return puo
}

// AddTenantID adds i to the "tenant_id" field.
func (puo *ProblemUpdateOne) AddTenantID(i int) *ProblemUpdateOne {
	puo.mutation.AddTenantID(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProblemUpdateOne) SetCreatedAt(t time.Time) *ProblemUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCreatedAt(t *time.Time) *ProblemUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProblemUpdateOne) SetUpdatedAt(t time.Time) *ProblemUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// Mutation returns the ProblemMutation object of the builder.
func (puo *ProblemUpdateOne) Mutation() *ProblemMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (puo *ProblemUpdateOne) Where(ps ...predicate.Problem) *ProblemUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProblemUpdateOne) Select(field string, fields ...string) *ProblemUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Problem entity.
func (puo *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProblemUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := problem.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProblemUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := problem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Problem.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CreatedBy(); ok {
		if err := problem.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Problem.created_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TenantID(); ok {
		if err := problem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Problem.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (puo *ProblemUpdateOne) sqlSave(ctx context.Context) (_node *Problem, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Problem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for _, f := range fields {
			if !problem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(problem.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(problem.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(problem.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(problem.FieldStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.Priority(); ok {
		_spec.SetField(problem.FieldPriority, field.TypeString, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(problem.FieldCategory, field.TypeString, value)
	}
	if puo.mutation.CategoryCleared() {
		_spec.ClearField(problem.FieldCategory, field.TypeString)
	}
	if value, ok := puo.mutation.RootCause(); ok {
		_spec.SetField(problem.FieldRootCause, field.TypeString, value)
	}
	if puo.mutation.RootCauseCleared() {
		_spec.ClearField(problem.FieldRootCause, field.TypeString)
	}
	if value, ok := puo.mutation.Impact(); ok {
		_spec.SetField(problem.FieldImpact, field.TypeString, value)
	}
	if puo.mutation.ImpactCleared() {
		_spec.ClearField(problem.FieldImpact, field.TypeString)
	}
	if value, ok := puo.mutation.AssigneeID(); ok {
		_spec.SetField(problem.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAssigneeID(); ok {
		_spec.AddField(problem.FieldAssigneeID, field.TypeInt, value)
	}
	if puo.mutation.AssigneeIDCleared() {
		_spec.ClearField(problem.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(problem.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(problem.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.TenantID(); ok {
		_spec.SetField(problem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedTenantID(); ok {
		_spec.AddField(problem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(problem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(problem.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Problem{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
