// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceCatalogCreate is the builder for creating a ServiceCatalog entity.
type ServiceCatalogCreate struct {
	config
	mutation *ServiceCatalogMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (scc *ServiceCatalogCreate) SetName(s string) *ServiceCatalogCreate {
	scc.mutation.SetName(s)
	return scc
}

// SetCategory sets the "category" field.
func (scc *ServiceCatalogCreate) SetCategory(s string) *ServiceCatalogCreate {
	scc.mutation.SetCategory(s)
	return scc
}

// SetDescription sets the "description" field.
func (scc *ServiceCatalogCreate) SetDescription(s string) *ServiceCatalogCreate {
	scc.mutation.SetDescription(s)
	return scc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scc *ServiceCatalogCreate) SetNillableDescription(s *string) *ServiceCatalogCreate {
	if s != nil {
		scc.SetDescription(*s)
	}
	return scc
}

// SetDeliveryTime sets the "delivery_time" field.
func (scc *ServiceCatalogCreate) SetDeliveryTime(s string) *ServiceCatalogCreate {
	scc.mutation.SetDeliveryTime(s)
	return scc
}

// SetStatus sets the "status" field.
func (scc *ServiceCatalogCreate) SetStatus(s servicecatalog.Status) *ServiceCatalogCreate {
	scc.mutation.SetStatus(s)
	return scc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scc *ServiceCatalogCreate) SetNillableStatus(s *servicecatalog.Status) *ServiceCatalogCreate {
	if s != nil {
		scc.SetStatus(*s)
	}
	return scc
}

// SetCreatedAt sets the "created_at" field.
func (scc *ServiceCatalogCreate) SetCreatedAt(t time.Time) *ServiceCatalogCreate {
	scc.mutation.SetCreatedAt(t)
	return scc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scc *ServiceCatalogCreate) SetNillableCreatedAt(t *time.Time) *ServiceCatalogCreate {
	if t != nil {
		scc.SetCreatedAt(*t)
	}
	return scc
}

// SetUpdatedAt sets the "updated_at" field.
func (scc *ServiceCatalogCreate) SetUpdatedAt(t time.Time) *ServiceCatalogCreate {
	scc.mutation.SetUpdatedAt(t)
	return scc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scc *ServiceCatalogCreate) SetNillableUpdatedAt(t *time.Time) *ServiceCatalogCreate {
	if t != nil {
		scc.SetUpdatedAt(*t)
	}
	return scc
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by IDs.
func (scc *ServiceCatalogCreate) AddServiceRequestIDs(ids ...int) *ServiceCatalogCreate {
	scc.mutation.AddServiceRequestIDs(ids...)
	return scc
}

// AddServiceRequests adds the "service_requests" edges to the ServiceRequest entity.
func (scc *ServiceCatalogCreate) AddServiceRequests(s ...*ServiceRequest) *ServiceCatalogCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return scc.AddServiceRequestIDs(ids...)
}

// Mutation returns the ServiceCatalogMutation object of the builder.
func (scc *ServiceCatalogCreate) Mutation() *ServiceCatalogMutation {
	return scc.mutation
}

// Save creates the ServiceCatalog in the database.
func (scc *ServiceCatalogCreate) Save(ctx context.Context) (*ServiceCatalog, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *ServiceCatalogCreate) SaveX(ctx context.Context) *ServiceCatalog {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *ServiceCatalogCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *ServiceCatalogCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *ServiceCatalogCreate) defaults() {
	if _, ok := scc.mutation.Status(); !ok {
		v := servicecatalog.DefaultStatus
		scc.mutation.SetStatus(v)
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		v := servicecatalog.DefaultCreatedAt()
		scc.mutation.SetCreatedAt(v)
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		v := servicecatalog.DefaultUpdatedAt()
		scc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *ServiceCatalogCreate) check() error {
	if _, ok := scc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServiceCatalog.name"`)}
	}
	if v, ok := scc.mutation.Name(); ok {
		if err := servicecatalog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.name": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "ServiceCatalog.category"`)}
	}
	if v, ok := scc.mutation.Category(); ok {
		if err := servicecatalog.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.category": %w`, err)}
		}
	}
	if _, ok := scc.mutation.DeliveryTime(); !ok {
		return &ValidationError{Name: "delivery_time", err: errors.New(`ent: missing required field "ServiceCatalog.delivery_time"`)}
	}
	if v, ok := scc.mutation.DeliveryTime(); ok {
		if err := servicecatalog.DeliveryTimeValidator(v); err != nil {
			return &ValidationError{Name: "delivery_time", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.delivery_time": %w`, err)}
		}
	}
	if _, ok := scc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ServiceCatalog.status"`)}
	}
	if v, ok := scc.mutation.Status(); ok {
		if err := servicecatalog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.status": %w`, err)}
		}
	}
	if _, ok := scc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceCatalog.created_at"`)}
	}
	if _, ok := scc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceCatalog.updated_at"`)}
	}
	return nil
}

func (scc *ServiceCatalogCreate) sqlSave(ctx context.Context) (*ServiceCatalog, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *ServiceCatalogCreate) createSpec() (*ServiceCatalog, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceCatalog{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(servicecatalog.Table, sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt))
	)
	if value, ok := scc.mutation.Name(); ok {
		_spec.SetField(servicecatalog.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := scc.mutation.Category(); ok {
		_spec.SetField(servicecatalog.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := scc.mutation.Description(); ok {
		_spec.SetField(servicecatalog.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := scc.mutation.DeliveryTime(); ok {
		_spec.SetField(servicecatalog.FieldDeliveryTime, field.TypeString, value)
		_node.DeliveryTime = value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.SetField(servicecatalog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := scc.mutation.CreatedAt(); ok {
		_spec.SetField(servicecatalog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scc.mutation.UpdatedAt(); ok {
		_spec.SetField(servicecatalog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := scc.mutation.ServiceRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicecatalog.ServiceRequestsTable,
			Columns: []string{servicecatalog.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceCatalogCreateBulk is the builder for creating many ServiceCatalog entities in bulk.
type ServiceCatalogCreateBulk struct {
	config
	err      error
	builders []*ServiceCatalogCreate
}

// Save creates the ServiceCatalog entities in the database.
func (sccb *ServiceCatalogCreateBulk) Save(ctx context.Context) ([]*ServiceCatalog, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*ServiceCatalog, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceCatalogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *ServiceCatalogCreateBulk) SaveX(ctx context.Context) []*ServiceCatalog {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *ServiceCatalogCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *ServiceCatalogCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
