// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processtask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessTaskUpdate is the builder for updating ProcessTask entities.
type ProcessTaskUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessTaskMutation
}

// Where appends a list predicates to the ProcessTaskUpdate builder.
func (ptu *ProcessTaskUpdate) Where(ps ...predicate.ProcessTask) *ProcessTaskUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetTaskID sets the "task_id" field.
func (ptu *ProcessTaskUpdate) SetTaskID(s string) *ProcessTaskUpdate {
	ptu.mutation.SetTaskID(s)
	return ptu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableTaskID(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetTaskID(*s)
	}
	return ptu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (ptu *ProcessTaskUpdate) SetProcessInstanceID(s string) *ProcessTaskUpdate {
	ptu.mutation.SetProcessInstanceID(s)
	return ptu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableProcessInstanceID(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetProcessInstanceID(*s)
	}
	return ptu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (ptu *ProcessTaskUpdate) SetProcessDefinitionKey(s string) *ProcessTaskUpdate {
	ptu.mutation.SetProcessDefinitionKey(s)
	return ptu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableProcessDefinitionKey(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetProcessDefinitionKey(*s)
	}
	return ptu
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (ptu *ProcessTaskUpdate) SetTaskDefinitionKey(s string) *ProcessTaskUpdate {
	ptu.mutation.SetTaskDefinitionKey(s)
	return ptu
}

// SetNillableTaskDefinitionKey sets the "task_definition_key" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableTaskDefinitionKey(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetTaskDefinitionKey(*s)
	}
	return ptu
}

// SetTaskName sets the "task_name" field.
func (ptu *ProcessTaskUpdate) SetTaskName(s string) *ProcessTaskUpdate {
	ptu.mutation.SetTaskName(s)
	return ptu
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableTaskName(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetTaskName(*s)
	}
	return ptu
}

// SetTaskType sets the "task_type" field.
func (ptu *ProcessTaskUpdate) SetTaskType(s string) *ProcessTaskUpdate {
	ptu.mutation.SetTaskType(s)
	return ptu
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableTaskType(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetTaskType(*s)
	}
	return ptu
}

// SetAssignee sets the "assignee" field.
func (ptu *ProcessTaskUpdate) SetAssignee(s string) *ProcessTaskUpdate {
	ptu.mutation.SetAssignee(s)
	return ptu
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableAssignee(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetAssignee(*s)
	}
	return ptu
}

// ClearAssignee clears the value of the "assignee" field.
func (ptu *ProcessTaskUpdate) ClearAssignee() *ProcessTaskUpdate {
	ptu.mutation.ClearAssignee()
	return ptu
}

// SetCandidateUsers sets the "candidate_users" field.
func (ptu *ProcessTaskUpdate) SetCandidateUsers(s string) *ProcessTaskUpdate {
	ptu.mutation.SetCandidateUsers(s)
	return ptu
}

// SetNillableCandidateUsers sets the "candidate_users" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableCandidateUsers(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetCandidateUsers(*s)
	}
	return ptu
}

// ClearCandidateUsers clears the value of the "candidate_users" field.
func (ptu *ProcessTaskUpdate) ClearCandidateUsers() *ProcessTaskUpdate {
	ptu.mutation.ClearCandidateUsers()
	return ptu
}

// SetCandidateGroups sets the "candidate_groups" field.
func (ptu *ProcessTaskUpdate) SetCandidateGroups(s string) *ProcessTaskUpdate {
	ptu.mutation.SetCandidateGroups(s)
	return ptu
}

// SetNillableCandidateGroups sets the "candidate_groups" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableCandidateGroups(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetCandidateGroups(*s)
	}
	return ptu
}

// ClearCandidateGroups clears the value of the "candidate_groups" field.
func (ptu *ProcessTaskUpdate) ClearCandidateGroups() *ProcessTaskUpdate {
	ptu.mutation.ClearCandidateGroups()
	return ptu
}

// SetStatus sets the "status" field.
func (ptu *ProcessTaskUpdate) SetStatus(s string) *ProcessTaskUpdate {
	ptu.mutation.SetStatus(s)
	return ptu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableStatus(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetStatus(*s)
	}
	return ptu
}

// SetPriority sets the "priority" field.
func (ptu *ProcessTaskUpdate) SetPriority(s string) *ProcessTaskUpdate {
	ptu.mutation.SetPriority(s)
	return ptu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillablePriority(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetPriority(*s)
	}
	return ptu
}

// SetDueDate sets the "due_date" field.
func (ptu *ProcessTaskUpdate) SetDueDate(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetDueDate(t)
	return ptu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableDueDate(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetDueDate(*t)
	}
	return ptu
}

// ClearDueDate clears the value of the "due_date" field.
func (ptu *ProcessTaskUpdate) ClearDueDate() *ProcessTaskUpdate {
	ptu.mutation.ClearDueDate()
	return ptu
}

// SetCreatedTime sets the "created_time" field.
func (ptu *ProcessTaskUpdate) SetCreatedTime(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetCreatedTime(t)
	return ptu
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableCreatedTime(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetCreatedTime(*t)
	}
	return ptu
}

// SetAssignedTime sets the "assigned_time" field.
func (ptu *ProcessTaskUpdate) SetAssignedTime(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetAssignedTime(t)
	return ptu
}

// SetNillableAssignedTime sets the "assigned_time" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableAssignedTime(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetAssignedTime(*t)
	}
	return ptu
}

// ClearAssignedTime clears the value of the "assigned_time" field.
func (ptu *ProcessTaskUpdate) ClearAssignedTime() *ProcessTaskUpdate {
	ptu.mutation.ClearAssignedTime()
	return ptu
}

// SetStartedTime sets the "started_time" field.
func (ptu *ProcessTaskUpdate) SetStartedTime(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetStartedTime(t)
	return ptu
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableStartedTime(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetStartedTime(*t)
	}
	return ptu
}

// ClearStartedTime clears the value of the "started_time" field.
func (ptu *ProcessTaskUpdate) ClearStartedTime() *ProcessTaskUpdate {
	ptu.mutation.ClearStartedTime()
	return ptu
}

// SetCompletedTime sets the "completed_time" field.
func (ptu *ProcessTaskUpdate) SetCompletedTime(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetCompletedTime(t)
	return ptu
}

// SetNillableCompletedTime sets the "completed_time" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableCompletedTime(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetCompletedTime(*t)
	}
	return ptu
}

// ClearCompletedTime clears the value of the "completed_time" field.
func (ptu *ProcessTaskUpdate) ClearCompletedTime() *ProcessTaskUpdate {
	ptu.mutation.ClearCompletedTime()
	return ptu
}

// SetFormKey sets the "form_key" field.
func (ptu *ProcessTaskUpdate) SetFormKey(s string) *ProcessTaskUpdate {
	ptu.mutation.SetFormKey(s)
	return ptu
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableFormKey(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetFormKey(*s)
	}
	return ptu
}

// ClearFormKey clears the value of the "form_key" field.
func (ptu *ProcessTaskUpdate) ClearFormKey() *ProcessTaskUpdate {
	ptu.mutation.ClearFormKey()
	return ptu
}

// SetTaskVariables sets the "task_variables" field.
func (ptu *ProcessTaskUpdate) SetTaskVariables(m map[string]interface{}) *ProcessTaskUpdate {
	ptu.mutation.SetTaskVariables(m)
	return ptu
}

// ClearTaskVariables clears the value of the "task_variables" field.
func (ptu *ProcessTaskUpdate) ClearTaskVariables() *ProcessTaskUpdate {
	ptu.mutation.ClearTaskVariables()
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *ProcessTaskUpdate) SetDescription(s string) *ProcessTaskUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableDescription(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// ClearDescription clears the value of the "description" field.
func (ptu *ProcessTaskUpdate) ClearDescription() *ProcessTaskUpdate {
	ptu.mutation.ClearDescription()
	return ptu
}

// SetParentTaskID sets the "parent_task_id" field.
func (ptu *ProcessTaskUpdate) SetParentTaskID(s string) *ProcessTaskUpdate {
	ptu.mutation.SetParentTaskID(s)
	return ptu
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableParentTaskID(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetParentTaskID(*s)
	}
	return ptu
}

// ClearParentTaskID clears the value of the "parent_task_id" field.
func (ptu *ProcessTaskUpdate) ClearParentTaskID() *ProcessTaskUpdate {
	ptu.mutation.ClearParentTaskID()
	return ptu
}

// SetRootTaskID sets the "root_task_id" field.
func (ptu *ProcessTaskUpdate) SetRootTaskID(s string) *ProcessTaskUpdate {
	ptu.mutation.SetRootTaskID(s)
	return ptu
}

// SetNillableRootTaskID sets the "root_task_id" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableRootTaskID(s *string) *ProcessTaskUpdate {
	if s != nil {
		ptu.SetRootTaskID(*s)
	}
	return ptu
}

// ClearRootTaskID clears the value of the "root_task_id" field.
func (ptu *ProcessTaskUpdate) ClearRootTaskID() *ProcessTaskUpdate {
	ptu.mutation.ClearRootTaskID()
	return ptu
}

// SetTenantID sets the "tenant_id" field.
func (ptu *ProcessTaskUpdate) SetTenantID(i int) *ProcessTaskUpdate {
	ptu.mutation.ResetTenantID()
	ptu.mutation.SetTenantID(i)
	return ptu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableTenantID(i *int) *ProcessTaskUpdate {
	if i != nil {
		ptu.SetTenantID(*i)
	}
	return ptu
}

// AddTenantID adds i to the "tenant_id" field.
func (ptu *ProcessTaskUpdate) AddTenantID(i int) *ProcessTaskUpdate {
	ptu.mutation.AddTenantID(i)
	return ptu
}

// SetCreatedAt sets the "created_at" field.
func (ptu *ProcessTaskUpdate) SetCreatedAt(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetCreatedAt(t)
	return ptu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptu *ProcessTaskUpdate) SetNillableCreatedAt(t *time.Time) *ProcessTaskUpdate {
	if t != nil {
		ptu.SetCreatedAt(*t)
	}
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *ProcessTaskUpdate) SetUpdatedAt(t time.Time) *ProcessTaskUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// Mutation returns the ProcessTaskMutation object of the builder.
func (ptu *ProcessTaskUpdate) Mutation() *ProcessTaskMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *ProcessTaskUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *ProcessTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *ProcessTaskUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *ProcessTaskUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *ProcessTaskUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := processtask.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *ProcessTaskUpdate) check() error {
	if v, ok := ptu.mutation.TaskID(); ok {
		if err := processtask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_id": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.ProcessInstanceID(); ok {
		if err := processtask.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_instance_id": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.ProcessDefinitionKey(); ok {
		if err := processtask.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_definition_key": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.TaskDefinitionKey(); ok {
		if err := processtask.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_definition_key": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.TaskName(); ok {
		if err := processtask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.TenantID(); ok {
		if err := processtask.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ptu *ProcessTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processtask.Table, processtask.Columns, sqlgraph.NewFieldSpec(processtask.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.TaskID(); ok {
		_spec.SetField(processtask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := ptu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processtask.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := ptu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processtask.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := ptu.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(processtask.FieldTaskDefinitionKey, field.TypeString, value)
	}
	if value, ok := ptu.mutation.TaskName(); ok {
		_spec.SetField(processtask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.TaskType(); ok {
		_spec.SetField(processtask.FieldTaskType, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Assignee(); ok {
		_spec.SetField(processtask.FieldAssignee, field.TypeString, value)
	}
	if ptu.mutation.AssigneeCleared() {
		_spec.ClearField(processtask.FieldAssignee, field.TypeString)
	}
	if value, ok := ptu.mutation.CandidateUsers(); ok {
		_spec.SetField(processtask.FieldCandidateUsers, field.TypeString, value)
	}
	if ptu.mutation.CandidateUsersCleared() {
		_spec.ClearField(processtask.FieldCandidateUsers, field.TypeString)
	}
	if value, ok := ptu.mutation.CandidateGroups(); ok {
		_spec.SetField(processtask.FieldCandidateGroups, field.TypeString, value)
	}
	if ptu.mutation.CandidateGroupsCleared() {
		_spec.ClearField(processtask.FieldCandidateGroups, field.TypeString)
	}
	if value, ok := ptu.mutation.Status(); ok {
		_spec.SetField(processtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Priority(); ok {
		_spec.SetField(processtask.FieldPriority, field.TypeString, value)
	}
	if value, ok := ptu.mutation.DueDate(); ok {
		_spec.SetField(processtask.FieldDueDate, field.TypeTime, value)
	}
	if ptu.mutation.DueDateCleared() {
		_spec.ClearField(processtask.FieldDueDate, field.TypeTime)
	}
	if value, ok := ptu.mutation.CreatedTime(); ok {
		_spec.SetField(processtask.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.AssignedTime(); ok {
		_spec.SetField(processtask.FieldAssignedTime, field.TypeTime, value)
	}
	if ptu.mutation.AssignedTimeCleared() {
		_spec.ClearField(processtask.FieldAssignedTime, field.TypeTime)
	}
	if value, ok := ptu.mutation.StartedTime(); ok {
		_spec.SetField(processtask.FieldStartedTime, field.TypeTime, value)
	}
	if ptu.mutation.StartedTimeCleared() {
		_spec.ClearField(processtask.FieldStartedTime, field.TypeTime)
	}
	if value, ok := ptu.mutation.CompletedTime(); ok {
		_spec.SetField(processtask.FieldCompletedTime, field.TypeTime, value)
	}
	if ptu.mutation.CompletedTimeCleared() {
		_spec.ClearField(processtask.FieldCompletedTime, field.TypeTime)
	}
	if value, ok := ptu.mutation.FormKey(); ok {
		_spec.SetField(processtask.FieldFormKey, field.TypeString, value)
	}
	if ptu.mutation.FormKeyCleared() {
		_spec.ClearField(processtask.FieldFormKey, field.TypeString)
	}
	if value, ok := ptu.mutation.TaskVariables(); ok {
		_spec.SetField(processtask.FieldTaskVariables, field.TypeJSON, value)
	}
	if ptu.mutation.TaskVariablesCleared() {
		_spec.ClearField(processtask.FieldTaskVariables, field.TypeJSON)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(processtask.FieldDescription, field.TypeString, value)
	}
	if ptu.mutation.DescriptionCleared() {
		_spec.ClearField(processtask.FieldDescription, field.TypeString)
	}
	if value, ok := ptu.mutation.ParentTaskID(); ok {
		_spec.SetField(processtask.FieldParentTaskID, field.TypeString, value)
	}
	if ptu.mutation.ParentTaskIDCleared() {
		_spec.ClearField(processtask.FieldParentTaskID, field.TypeString)
	}
	if value, ok := ptu.mutation.RootTaskID(); ok {
		_spec.SetField(processtask.FieldRootTaskID, field.TypeString, value)
	}
	if ptu.mutation.RootTaskIDCleared() {
		_spec.ClearField(processtask.FieldRootTaskID, field.TypeString)
	}
	if value, ok := ptu.mutation.TenantID(); ok {
		_spec.SetField(processtask.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedTenantID(); ok {
		_spec.AddField(processtask.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.SetField(processtask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(processtask.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// ProcessTaskUpdateOne is the builder for updating a single ProcessTask entity.
type ProcessTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessTaskMutation
}

// SetTaskID sets the "task_id" field.
func (ptuo *ProcessTaskUpdateOne) SetTaskID(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetTaskID(s)
	return ptuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableTaskID(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetTaskID(*s)
	}
	return ptuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (ptuo *ProcessTaskUpdateOne) SetProcessInstanceID(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetProcessInstanceID(s)
	return ptuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableProcessInstanceID(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetProcessInstanceID(*s)
	}
	return ptuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (ptuo *ProcessTaskUpdateOne) SetProcessDefinitionKey(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetProcessDefinitionKey(s)
	return ptuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableProcessDefinitionKey(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetProcessDefinitionKey(*s)
	}
	return ptuo
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (ptuo *ProcessTaskUpdateOne) SetTaskDefinitionKey(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetTaskDefinitionKey(s)
	return ptuo
}

// SetNillableTaskDefinitionKey sets the "task_definition_key" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableTaskDefinitionKey(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetTaskDefinitionKey(*s)
	}
	return ptuo
}

// SetTaskName sets the "task_name" field.
func (ptuo *ProcessTaskUpdateOne) SetTaskName(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetTaskName(s)
	return ptuo
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableTaskName(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetTaskName(*s)
	}
	return ptuo
}

// SetTaskType sets the "task_type" field.
func (ptuo *ProcessTaskUpdateOne) SetTaskType(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetTaskType(s)
	return ptuo
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableTaskType(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetTaskType(*s)
	}
	return ptuo
}

// SetAssignee sets the "assignee" field.
func (ptuo *ProcessTaskUpdateOne) SetAssignee(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetAssignee(s)
	return ptuo
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableAssignee(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetAssignee(*s)
	}
	return ptuo
}

// ClearAssignee clears the value of the "assignee" field.
func (ptuo *ProcessTaskUpdateOne) ClearAssignee() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearAssignee()
	return ptuo
}

// SetCandidateUsers sets the "candidate_users" field.
func (ptuo *ProcessTaskUpdateOne) SetCandidateUsers(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetCandidateUsers(s)
	return ptuo
}

// SetNillableCandidateUsers sets the "candidate_users" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableCandidateUsers(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetCandidateUsers(*s)
	}
	return ptuo
}

// ClearCandidateUsers clears the value of the "candidate_users" field.
func (ptuo *ProcessTaskUpdateOne) ClearCandidateUsers() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearCandidateUsers()
	return ptuo
}

// SetCandidateGroups sets the "candidate_groups" field.
func (ptuo *ProcessTaskUpdateOne) SetCandidateGroups(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetCandidateGroups(s)
	return ptuo
}

// SetNillableCandidateGroups sets the "candidate_groups" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableCandidateGroups(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetCandidateGroups(*s)
	}
	return ptuo
}

// ClearCandidateGroups clears the value of the "candidate_groups" field.
func (ptuo *ProcessTaskUpdateOne) ClearCandidateGroups() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearCandidateGroups()
	return ptuo
}

// SetStatus sets the "status" field.
func (ptuo *ProcessTaskUpdateOne) SetStatus(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetStatus(s)
	return ptuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableStatus(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetStatus(*s)
	}
	return ptuo
}

// SetPriority sets the "priority" field.
func (ptuo *ProcessTaskUpdateOne) SetPriority(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetPriority(s)
	return ptuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillablePriority(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetPriority(*s)
	}
	return ptuo
}

// SetDueDate sets the "due_date" field.
func (ptuo *ProcessTaskUpdateOne) SetDueDate(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetDueDate(t)
	return ptuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableDueDate(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetDueDate(*t)
	}
	return ptuo
}

// ClearDueDate clears the value of the "due_date" field.
func (ptuo *ProcessTaskUpdateOne) ClearDueDate() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearDueDate()
	return ptuo
}

// SetCreatedTime sets the "created_time" field.
func (ptuo *ProcessTaskUpdateOne) SetCreatedTime(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetCreatedTime(t)
	return ptuo
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableCreatedTime(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetCreatedTime(*t)
	}
	return ptuo
}

// SetAssignedTime sets the "assigned_time" field.
func (ptuo *ProcessTaskUpdateOne) SetAssignedTime(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetAssignedTime(t)
	return ptuo
}

// SetNillableAssignedTime sets the "assigned_time" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableAssignedTime(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetAssignedTime(*t)
	}
	return ptuo
}

// ClearAssignedTime clears the value of the "assigned_time" field.
func (ptuo *ProcessTaskUpdateOne) ClearAssignedTime() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearAssignedTime()
	return ptuo
}

// SetStartedTime sets the "started_time" field.
func (ptuo *ProcessTaskUpdateOne) SetStartedTime(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetStartedTime(t)
	return ptuo
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableStartedTime(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetStartedTime(*t)
	}
	return ptuo
}

// ClearStartedTime clears the value of the "started_time" field.
func (ptuo *ProcessTaskUpdateOne) ClearStartedTime() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearStartedTime()
	return ptuo
}

// SetCompletedTime sets the "completed_time" field.
func (ptuo *ProcessTaskUpdateOne) SetCompletedTime(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetCompletedTime(t)
	return ptuo
}

// SetNillableCompletedTime sets the "completed_time" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableCompletedTime(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetCompletedTime(*t)
	}
	return ptuo
}

// ClearCompletedTime clears the value of the "completed_time" field.
func (ptuo *ProcessTaskUpdateOne) ClearCompletedTime() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearCompletedTime()
	return ptuo
}

// SetFormKey sets the "form_key" field.
func (ptuo *ProcessTaskUpdateOne) SetFormKey(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetFormKey(s)
	return ptuo
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableFormKey(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetFormKey(*s)
	}
	return ptuo
}

// ClearFormKey clears the value of the "form_key" field.
func (ptuo *ProcessTaskUpdateOne) ClearFormKey() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearFormKey()
	return ptuo
}

// SetTaskVariables sets the "task_variables" field.
func (ptuo *ProcessTaskUpdateOne) SetTaskVariables(m map[string]interface{}) *ProcessTaskUpdateOne {
	ptuo.mutation.SetTaskVariables(m)
	return ptuo
}

// ClearTaskVariables clears the value of the "task_variables" field.
func (ptuo *ProcessTaskUpdateOne) ClearTaskVariables() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearTaskVariables()
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *ProcessTaskUpdateOne) SetDescription(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableDescription(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// ClearDescription clears the value of the "description" field.
func (ptuo *ProcessTaskUpdateOne) ClearDescription() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearDescription()
	return ptuo
}

// SetParentTaskID sets the "parent_task_id" field.
func (ptuo *ProcessTaskUpdateOne) SetParentTaskID(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetParentTaskID(s)
	return ptuo
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableParentTaskID(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetParentTaskID(*s)
	}
	return ptuo
}

// ClearParentTaskID clears the value of the "parent_task_id" field.
func (ptuo *ProcessTaskUpdateOne) ClearParentTaskID() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearParentTaskID()
	return ptuo
}

// SetRootTaskID sets the "root_task_id" field.
func (ptuo *ProcessTaskUpdateOne) SetRootTaskID(s string) *ProcessTaskUpdateOne {
	ptuo.mutation.SetRootTaskID(s)
	return ptuo
}

// SetNillableRootTaskID sets the "root_task_id" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableRootTaskID(s *string) *ProcessTaskUpdateOne {
	if s != nil {
		ptuo.SetRootTaskID(*s)
	}
	return ptuo
}

// ClearRootTaskID clears the value of the "root_task_id" field.
func (ptuo *ProcessTaskUpdateOne) ClearRootTaskID() *ProcessTaskUpdateOne {
	ptuo.mutation.ClearRootTaskID()
	return ptuo
}

// SetTenantID sets the "tenant_id" field.
func (ptuo *ProcessTaskUpdateOne) SetTenantID(i int) *ProcessTaskUpdateOne {
	ptuo.mutation.ResetTenantID()
	ptuo.mutation.SetTenantID(i)
	return ptuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableTenantID(i *int) *ProcessTaskUpdateOne {
	if i != nil {
		ptuo.SetTenantID(*i)
	}
	return ptuo
}

// AddTenantID adds i to the "tenant_id" field.
func (ptuo *ProcessTaskUpdateOne) AddTenantID(i int) *ProcessTaskUpdateOne {
	ptuo.mutation.AddTenantID(i)
	return ptuo
}

// SetCreatedAt sets the "created_at" field.
func (ptuo *ProcessTaskUpdateOne) SetCreatedAt(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetCreatedAt(t)
	return ptuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptuo *ProcessTaskUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessTaskUpdateOne {
	if t != nil {
		ptuo.SetCreatedAt(*t)
	}
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *ProcessTaskUpdateOne) SetUpdatedAt(t time.Time) *ProcessTaskUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// Mutation returns the ProcessTaskMutation object of the builder.
func (ptuo *ProcessTaskUpdateOne) Mutation() *ProcessTaskMutation {
	return ptuo.mutation
}

// Where appends a list predicates to the ProcessTaskUpdate builder.
func (ptuo *ProcessTaskUpdateOne) Where(ps ...predicate.ProcessTask) *ProcessTaskUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *ProcessTaskUpdateOne) Select(field string, fields ...string) *ProcessTaskUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated ProcessTask entity.
func (ptuo *ProcessTaskUpdateOne) Save(ctx context.Context) (*ProcessTask, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *ProcessTaskUpdateOne) SaveX(ctx context.Context) *ProcessTask {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *ProcessTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *ProcessTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *ProcessTaskUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := processtask.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *ProcessTaskUpdateOne) check() error {
	if v, ok := ptuo.mutation.TaskID(); ok {
		if err := processtask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_id": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.ProcessInstanceID(); ok {
		if err := processtask.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_instance_id": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.ProcessDefinitionKey(); ok {
		if err := processtask.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_definition_key": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.TaskDefinitionKey(); ok {
		if err := processtask.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_definition_key": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.TaskName(); ok {
		if err := processtask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.TenantID(); ok {
		if err := processtask.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ptuo *ProcessTaskUpdateOne) sqlSave(ctx context.Context) (_node *ProcessTask, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processtask.Table, processtask.Columns, sqlgraph.NewFieldSpec(processtask.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processtask.FieldID)
		for _, f := range fields {
			if !processtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.TaskID(); ok {
		_spec.SetField(processtask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processtask.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processtask.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(processtask.FieldTaskDefinitionKey, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.TaskName(); ok {
		_spec.SetField(processtask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.TaskType(); ok {
		_spec.SetField(processtask.FieldTaskType, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Assignee(); ok {
		_spec.SetField(processtask.FieldAssignee, field.TypeString, value)
	}
	if ptuo.mutation.AssigneeCleared() {
		_spec.ClearField(processtask.FieldAssignee, field.TypeString)
	}
	if value, ok := ptuo.mutation.CandidateUsers(); ok {
		_spec.SetField(processtask.FieldCandidateUsers, field.TypeString, value)
	}
	if ptuo.mutation.CandidateUsersCleared() {
		_spec.ClearField(processtask.FieldCandidateUsers, field.TypeString)
	}
	if value, ok := ptuo.mutation.CandidateGroups(); ok {
		_spec.SetField(processtask.FieldCandidateGroups, field.TypeString, value)
	}
	if ptuo.mutation.CandidateGroupsCleared() {
		_spec.ClearField(processtask.FieldCandidateGroups, field.TypeString)
	}
	if value, ok := ptuo.mutation.Status(); ok {
		_spec.SetField(processtask.FieldStatus, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Priority(); ok {
		_spec.SetField(processtask.FieldPriority, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.DueDate(); ok {
		_spec.SetField(processtask.FieldDueDate, field.TypeTime, value)
	}
	if ptuo.mutation.DueDateCleared() {
		_spec.ClearField(processtask.FieldDueDate, field.TypeTime)
	}
	if value, ok := ptuo.mutation.CreatedTime(); ok {
		_spec.SetField(processtask.FieldCreatedTime, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.AssignedTime(); ok {
		_spec.SetField(processtask.FieldAssignedTime, field.TypeTime, value)
	}
	if ptuo.mutation.AssignedTimeCleared() {
		_spec.ClearField(processtask.FieldAssignedTime, field.TypeTime)
	}
	if value, ok := ptuo.mutation.StartedTime(); ok {
		_spec.SetField(processtask.FieldStartedTime, field.TypeTime, value)
	}
	if ptuo.mutation.StartedTimeCleared() {
		_spec.ClearField(processtask.FieldStartedTime, field.TypeTime)
	}
	if value, ok := ptuo.mutation.CompletedTime(); ok {
		_spec.SetField(processtask.FieldCompletedTime, field.TypeTime, value)
	}
	if ptuo.mutation.CompletedTimeCleared() {
		_spec.ClearField(processtask.FieldCompletedTime, field.TypeTime)
	}
	if value, ok := ptuo.mutation.FormKey(); ok {
		_spec.SetField(processtask.FieldFormKey, field.TypeString, value)
	}
	if ptuo.mutation.FormKeyCleared() {
		_spec.ClearField(processtask.FieldFormKey, field.TypeString)
	}
	if value, ok := ptuo.mutation.TaskVariables(); ok {
		_spec.SetField(processtask.FieldTaskVariables, field.TypeJSON, value)
	}
	if ptuo.mutation.TaskVariablesCleared() {
		_spec.ClearField(processtask.FieldTaskVariables, field.TypeJSON)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(processtask.FieldDescription, field.TypeString, value)
	}
	if ptuo.mutation.DescriptionCleared() {
		_spec.ClearField(processtask.FieldDescription, field.TypeString)
	}
	if value, ok := ptuo.mutation.ParentTaskID(); ok {
		_spec.SetField(processtask.FieldParentTaskID, field.TypeString, value)
	}
	if ptuo.mutation.ParentTaskIDCleared() {
		_spec.ClearField(processtask.FieldParentTaskID, field.TypeString)
	}
	if value, ok := ptuo.mutation.RootTaskID(); ok {
		_spec.SetField(processtask.FieldRootTaskID, field.TypeString, value)
	}
	if ptuo.mutation.RootTaskIDCleared() {
		_spec.ClearField(processtask.FieldRootTaskID, field.TypeString)
	}
	if value, ok := ptuo.mutation.TenantID(); ok {
		_spec.SetField(processtask.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedTenantID(); ok {
		_spec.AddField(processtask.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.SetField(processtask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processtask.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessTask{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
