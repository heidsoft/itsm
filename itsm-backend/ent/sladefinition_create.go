// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/sladefinition"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLADefinitionCreate is the builder for creating a SLADefinition entity.
type SLADefinitionCreate struct {
	config
	mutation *SLADefinitionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sdc *SLADefinitionCreate) SetCreateTime(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetCreateTime(t)
	return sdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableCreateTime(t *time.Time) *SLADefinitionCreate {
	if t != nil {
		sdc.SetCreateTime(*t)
	}
	return sdc
}

// SetUpdateTime sets the "update_time" field.
func (sdc *SLADefinitionCreate) SetUpdateTime(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetUpdateTime(t)
	return sdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableUpdateTime(t *time.Time) *SLADefinitionCreate {
	if t != nil {
		sdc.SetUpdateTime(*t)
	}
	return sdc
}

// SetName sets the "name" field.
func (sdc *SLADefinitionCreate) SetName(s string) *SLADefinitionCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// SetDescription sets the "description" field.
func (sdc *SLADefinitionCreate) SetDescription(s string) *SLADefinitionCreate {
	sdc.mutation.SetDescription(s)
	return sdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableDescription(s *string) *SLADefinitionCreate {
	if s != nil {
		sdc.SetDescription(*s)
	}
	return sdc
}

// SetServiceType sets the "service_type" field.
func (sdc *SLADefinitionCreate) SetServiceType(s string) *SLADefinitionCreate {
	sdc.mutation.SetServiceType(s)
	return sdc
}

// SetPriority sets the "priority" field.
func (sdc *SLADefinitionCreate) SetPriority(s string) *SLADefinitionCreate {
	sdc.mutation.SetPriority(s)
	return sdc
}

// SetImpact sets the "impact" field.
func (sdc *SLADefinitionCreate) SetImpact(s string) *SLADefinitionCreate {
	sdc.mutation.SetImpact(s)
	return sdc
}

// SetResponseTime sets the "response_time" field.
func (sdc *SLADefinitionCreate) SetResponseTime(i int) *SLADefinitionCreate {
	sdc.mutation.SetResponseTime(i)
	return sdc
}

// SetResolutionTime sets the "resolution_time" field.
func (sdc *SLADefinitionCreate) SetResolutionTime(i int) *SLADefinitionCreate {
	sdc.mutation.SetResolutionTime(i)
	return sdc
}

// SetBusinessHours sets the "business_hours" field.
func (sdc *SLADefinitionCreate) SetBusinessHours(s string) *SLADefinitionCreate {
	sdc.mutation.SetBusinessHours(s)
	return sdc
}

// SetHolidays sets the "holidays" field.
func (sdc *SLADefinitionCreate) SetHolidays(s string) *SLADefinitionCreate {
	sdc.mutation.SetHolidays(s)
	return sdc
}

// SetIsActive sets the "is_active" field.
func (sdc *SLADefinitionCreate) SetIsActive(b bool) *SLADefinitionCreate {
	sdc.mutation.SetIsActive(b)
	return sdc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableIsActive(b *bool) *SLADefinitionCreate {
	if b != nil {
		sdc.SetIsActive(*b)
	}
	return sdc
}

// SetTenantID sets the "tenant_id" field.
func (sdc *SLADefinitionCreate) SetTenantID(i int) *SLADefinitionCreate {
	sdc.mutation.SetTenantID(i)
	return sdc
}

// SetCreatedBy sets the "created_by" field.
func (sdc *SLADefinitionCreate) SetCreatedBy(s string) *SLADefinitionCreate {
	sdc.mutation.SetCreatedBy(s)
	return sdc
}

// SetCreatedAt sets the "created_at" field.
func (sdc *SLADefinitionCreate) SetCreatedAt(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetCreatedAt(t)
	return sdc
}

// SetUpdatedAt sets the "updated_at" field.
func (sdc *SLADefinitionCreate) SetUpdatedAt(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetUpdatedAt(t)
	return sdc
}

// Mutation returns the SLADefinitionMutation object of the builder.
func (sdc *SLADefinitionCreate) Mutation() *SLADefinitionMutation {
	return sdc.mutation
}

// Save creates the SLADefinition in the database.
func (sdc *SLADefinitionCreate) Save(ctx context.Context) (*SLADefinition, error) {
	sdc.defaults()
	return withHooks(ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SLADefinitionCreate) SaveX(ctx context.Context) *SLADefinition {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SLADefinitionCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SLADefinitionCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SLADefinitionCreate) defaults() {
	if _, ok := sdc.mutation.CreateTime(); !ok {
		v := sladefinition.DefaultCreateTime()
		sdc.mutation.SetCreateTime(v)
	}
	if _, ok := sdc.mutation.UpdateTime(); !ok {
		v := sladefinition.DefaultUpdateTime()
		sdc.mutation.SetUpdateTime(v)
	}
	if _, ok := sdc.mutation.IsActive(); !ok {
		v := sladefinition.DefaultIsActive
		sdc.mutation.SetIsActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SLADefinitionCreate) check() error {
	if _, ok := sdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SLADefinition.create_time"`)}
	}
	if _, ok := sdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SLADefinition.update_time"`)}
	}
	if _, ok := sdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SLADefinition.name"`)}
	}
	if _, ok := sdc.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New(`ent: missing required field "SLADefinition.service_type"`)}
	}
	if _, ok := sdc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "SLADefinition.priority"`)}
	}
	if _, ok := sdc.mutation.Impact(); !ok {
		return &ValidationError{Name: "impact", err: errors.New(`ent: missing required field "SLADefinition.impact"`)}
	}
	if _, ok := sdc.mutation.ResponseTime(); !ok {
		return &ValidationError{Name: "response_time", err: errors.New(`ent: missing required field "SLADefinition.response_time"`)}
	}
	if _, ok := sdc.mutation.ResolutionTime(); !ok {
		return &ValidationError{Name: "resolution_time", err: errors.New(`ent: missing required field "SLADefinition.resolution_time"`)}
	}
	if _, ok := sdc.mutation.BusinessHours(); !ok {
		return &ValidationError{Name: "business_hours", err: errors.New(`ent: missing required field "SLADefinition.business_hours"`)}
	}
	if _, ok := sdc.mutation.Holidays(); !ok {
		return &ValidationError{Name: "holidays", err: errors.New(`ent: missing required field "SLADefinition.holidays"`)}
	}
	if _, ok := sdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SLADefinition.is_active"`)}
	}
	if _, ok := sdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SLADefinition.tenant_id"`)}
	}
	if _, ok := sdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SLADefinition.created_by"`)}
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SLADefinition.created_at"`)}
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SLADefinition.updated_at"`)}
	}
	return nil
}

func (sdc *SLADefinitionCreate) sqlSave(ctx context.Context) (*SLADefinition, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *SLADefinitionCreate) createSpec() (*SLADefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &SLADefinition{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(sladefinition.Table, sqlgraph.NewFieldSpec(sladefinition.FieldID, field.TypeInt))
	)
	if value, ok := sdc.mutation.CreateTime(); ok {
		_spec.SetField(sladefinition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sdc.mutation.UpdateTime(); ok {
		_spec.SetField(sladefinition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sdc.mutation.Name(); ok {
		_spec.SetField(sladefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sdc.mutation.Description(); ok {
		_spec.SetField(sladefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sdc.mutation.ServiceType(); ok {
		_spec.SetField(sladefinition.FieldServiceType, field.TypeString, value)
		_node.ServiceType = value
	}
	if value, ok := sdc.mutation.Priority(); ok {
		_spec.SetField(sladefinition.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := sdc.mutation.Impact(); ok {
		_spec.SetField(sladefinition.FieldImpact, field.TypeString, value)
		_node.Impact = value
	}
	if value, ok := sdc.mutation.ResponseTime(); ok {
		_spec.SetField(sladefinition.FieldResponseTime, field.TypeInt, value)
		_node.ResponseTime = value
	}
	if value, ok := sdc.mutation.ResolutionTime(); ok {
		_spec.SetField(sladefinition.FieldResolutionTime, field.TypeInt, value)
		_node.ResolutionTime = value
	}
	if value, ok := sdc.mutation.BusinessHours(); ok {
		_spec.SetField(sladefinition.FieldBusinessHours, field.TypeString, value)
		_node.BusinessHours = value
	}
	if value, ok := sdc.mutation.Holidays(); ok {
		_spec.SetField(sladefinition.FieldHolidays, field.TypeString, value)
		_node.Holidays = value
	}
	if value, ok := sdc.mutation.IsActive(); ok {
		_spec.SetField(sladefinition.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sdc.mutation.TenantID(); ok {
		_spec.SetField(sladefinition.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := sdc.mutation.CreatedBy(); ok {
		_spec.SetField(sladefinition.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sdc.mutation.CreatedAt(); ok {
		_spec.SetField(sladefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sdc.mutation.UpdatedAt(); ok {
		_spec.SetField(sladefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SLADefinitionCreateBulk is the builder for creating many SLADefinition entities in bulk.
type SLADefinitionCreateBulk struct {
	config
	err      error
	builders []*SLADefinitionCreate
}

// Save creates the SLADefinition entities in the database.
func (sdcb *SLADefinitionCreateBulk) Save(ctx context.Context) ([]*SLADefinition, error) {
	if sdcb.err != nil {
		return nil, sdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SLADefinition, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SLADefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SLADefinitionCreateBulk) SaveX(ctx context.Context) []*SLADefinition {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SLADefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SLADefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
