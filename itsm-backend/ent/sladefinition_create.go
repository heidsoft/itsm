// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/sladefinition"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLADefinitionCreate is the builder for creating a SLADefinition entity.
type SLADefinitionCreate struct {
	config
	mutation *SLADefinitionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sdc *SLADefinitionCreate) SetName(s string) *SLADefinitionCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// SetDescription sets the "description" field.
func (sdc *SLADefinitionCreate) SetDescription(s string) *SLADefinitionCreate {
	sdc.mutation.SetDescription(s)
	return sdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableDescription(s *string) *SLADefinitionCreate {
	if s != nil {
		sdc.SetDescription(*s)
	}
	return sdc
}

// SetTenantID sets the "tenant_id" field.
func (sdc *SLADefinitionCreate) SetTenantID(i int) *SLADefinitionCreate {
	sdc.mutation.SetTenantID(i)
	return sdc
}

// SetCreatedAt sets the "created_at" field.
func (sdc *SLADefinitionCreate) SetCreatedAt(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetCreatedAt(t)
	return sdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableCreatedAt(t *time.Time) *SLADefinitionCreate {
	if t != nil {
		sdc.SetCreatedAt(*t)
	}
	return sdc
}

// SetUpdatedAt sets the "updated_at" field.
func (sdc *SLADefinitionCreate) SetUpdatedAt(t time.Time) *SLADefinitionCreate {
	sdc.mutation.SetUpdatedAt(t)
	return sdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sdc *SLADefinitionCreate) SetNillableUpdatedAt(t *time.Time) *SLADefinitionCreate {
	if t != nil {
		sdc.SetUpdatedAt(*t)
	}
	return sdc
}

// Mutation returns the SLADefinitionMutation object of the builder.
func (sdc *SLADefinitionCreate) Mutation() *SLADefinitionMutation {
	return sdc.mutation
}

// Save creates the SLADefinition in the database.
func (sdc *SLADefinitionCreate) Save(ctx context.Context) (*SLADefinition, error) {
	sdc.defaults()
	return withHooks(ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SLADefinitionCreate) SaveX(ctx context.Context) *SLADefinition {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SLADefinitionCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SLADefinitionCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SLADefinitionCreate) defaults() {
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		v := sladefinition.DefaultCreatedAt()
		sdc.mutation.SetCreatedAt(v)
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		v := sladefinition.DefaultUpdatedAt()
		sdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SLADefinitionCreate) check() error {
	if _, ok := sdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SLADefinition.name"`)}
	}
	if v, ok := sdc.mutation.Name(); ok {
		if err := sladefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SLADefinition.name": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SLADefinition.tenant_id"`)}
	}
	if v, ok := sdc.mutation.TenantID(); ok {
		if err := sladefinition.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "SLADefinition.tenant_id": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SLADefinition.created_at"`)}
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SLADefinition.updated_at"`)}
	}
	return nil
}

func (sdc *SLADefinitionCreate) sqlSave(ctx context.Context) (*SLADefinition, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *SLADefinitionCreate) createSpec() (*SLADefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &SLADefinition{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(sladefinition.Table, sqlgraph.NewFieldSpec(sladefinition.FieldID, field.TypeInt))
	)
	if value, ok := sdc.mutation.Name(); ok {
		_spec.SetField(sladefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sdc.mutation.Description(); ok {
		_spec.SetField(sladefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sdc.mutation.TenantID(); ok {
		_spec.SetField(sladefinition.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := sdc.mutation.CreatedAt(); ok {
		_spec.SetField(sladefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sdc.mutation.UpdatedAt(); ok {
		_spec.SetField(sladefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SLADefinitionCreateBulk is the builder for creating many SLADefinition entities in bulk.
type SLADefinitionCreateBulk struct {
	config
	err      error
	builders []*SLADefinitionCreate
}

// Save creates the SLADefinition entities in the database.
func (sdcb *SLADefinitionCreateBulk) Save(ctx context.Context) ([]*SLADefinition, error) {
	if sdcb.err != nil {
		return nil, sdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SLADefinition, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SLADefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SLADefinitionCreateBulk) SaveX(ctx context.Context) []*SLADefinition {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SLADefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SLADefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
