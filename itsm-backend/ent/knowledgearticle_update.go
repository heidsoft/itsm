// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KnowledgeArticleUpdate is the builder for updating KnowledgeArticle entities.
type KnowledgeArticleUpdate struct {
	config
	hooks    []Hook
	mutation *KnowledgeArticleMutation
}

// Where appends a list predicates to the KnowledgeArticleUpdate builder.
func (kau *KnowledgeArticleUpdate) Where(ps ...predicate.KnowledgeArticle) *KnowledgeArticleUpdate {
	kau.mutation.Where(ps...)
	return kau
}

// SetTitle sets the "title" field.
func (kau *KnowledgeArticleUpdate) SetTitle(s string) *KnowledgeArticleUpdate {
	kau.mutation.SetTitle(s)
	return kau
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableTitle(s *string) *KnowledgeArticleUpdate {
	if s != nil {
		kau.SetTitle(*s)
	}
	return kau
}

// SetContent sets the "content" field.
func (kau *KnowledgeArticleUpdate) SetContent(s string) *KnowledgeArticleUpdate {
	kau.mutation.SetContent(s)
	return kau
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableContent(s *string) *KnowledgeArticleUpdate {
	if s != nil {
		kau.SetContent(*s)
	}
	return kau
}

// ClearContent clears the value of the "content" field.
func (kau *KnowledgeArticleUpdate) ClearContent() *KnowledgeArticleUpdate {
	kau.mutation.ClearContent()
	return kau
}

// SetCategory sets the "category" field.
func (kau *KnowledgeArticleUpdate) SetCategory(s string) *KnowledgeArticleUpdate {
	kau.mutation.SetCategory(s)
	return kau
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableCategory(s *string) *KnowledgeArticleUpdate {
	if s != nil {
		kau.SetCategory(*s)
	}
	return kau
}

// ClearCategory clears the value of the "category" field.
func (kau *KnowledgeArticleUpdate) ClearCategory() *KnowledgeArticleUpdate {
	kau.mutation.ClearCategory()
	return kau
}

// SetTags sets the "tags" field.
func (kau *KnowledgeArticleUpdate) SetTags(s string) *KnowledgeArticleUpdate {
	kau.mutation.SetTags(s)
	return kau
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableTags(s *string) *KnowledgeArticleUpdate {
	if s != nil {
		kau.SetTags(*s)
	}
	return kau
}

// ClearTags clears the value of the "tags" field.
func (kau *KnowledgeArticleUpdate) ClearTags() *KnowledgeArticleUpdate {
	kau.mutation.ClearTags()
	return kau
}

// SetAuthorID sets the "author_id" field.
func (kau *KnowledgeArticleUpdate) SetAuthorID(i int) *KnowledgeArticleUpdate {
	kau.mutation.ResetAuthorID()
	kau.mutation.SetAuthorID(i)
	return kau
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableAuthorID(i *int) *KnowledgeArticleUpdate {
	if i != nil {
		kau.SetAuthorID(*i)
	}
	return kau
}

// AddAuthorID adds i to the "author_id" field.
func (kau *KnowledgeArticleUpdate) AddAuthorID(i int) *KnowledgeArticleUpdate {
	kau.mutation.AddAuthorID(i)
	return kau
}

// SetTenantID sets the "tenant_id" field.
func (kau *KnowledgeArticleUpdate) SetTenantID(i int) *KnowledgeArticleUpdate {
	kau.mutation.ResetTenantID()
	kau.mutation.SetTenantID(i)
	return kau
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableTenantID(i *int) *KnowledgeArticleUpdate {
	if i != nil {
		kau.SetTenantID(*i)
	}
	return kau
}

// AddTenantID adds i to the "tenant_id" field.
func (kau *KnowledgeArticleUpdate) AddTenantID(i int) *KnowledgeArticleUpdate {
	kau.mutation.AddTenantID(i)
	return kau
}

// SetIsPublished sets the "is_published" field.
func (kau *KnowledgeArticleUpdate) SetIsPublished(b bool) *KnowledgeArticleUpdate {
	kau.mutation.SetIsPublished(b)
	return kau
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableIsPublished(b *bool) *KnowledgeArticleUpdate {
	if b != nil {
		kau.SetIsPublished(*b)
	}
	return kau
}

// SetCreatedAt sets the "created_at" field.
func (kau *KnowledgeArticleUpdate) SetCreatedAt(t time.Time) *KnowledgeArticleUpdate {
	kau.mutation.SetCreatedAt(t)
	return kau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kau *KnowledgeArticleUpdate) SetNillableCreatedAt(t *time.Time) *KnowledgeArticleUpdate {
	if t != nil {
		kau.SetCreatedAt(*t)
	}
	return kau
}

// SetUpdatedAt sets the "updated_at" field.
func (kau *KnowledgeArticleUpdate) SetUpdatedAt(t time.Time) *KnowledgeArticleUpdate {
	kau.mutation.SetUpdatedAt(t)
	return kau
}

// Mutation returns the KnowledgeArticleMutation object of the builder.
func (kau *KnowledgeArticleUpdate) Mutation() *KnowledgeArticleMutation {
	return kau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kau *KnowledgeArticleUpdate) Save(ctx context.Context) (int, error) {
	kau.defaults()
	return withHooks(ctx, kau.sqlSave, kau.mutation, kau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kau *KnowledgeArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := kau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kau *KnowledgeArticleUpdate) Exec(ctx context.Context) error {
	_, err := kau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kau *KnowledgeArticleUpdate) ExecX(ctx context.Context) {
	if err := kau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kau *KnowledgeArticleUpdate) defaults() {
	if _, ok := kau.mutation.UpdatedAt(); !ok {
		v := knowledgearticle.UpdateDefaultUpdatedAt()
		kau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kau *KnowledgeArticleUpdate) check() error {
	if v, ok := kau.mutation.Title(); ok {
		if err := knowledgearticle.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.title": %w`, err)}
		}
	}
	if v, ok := kau.mutation.AuthorID(); ok {
		if err := knowledgearticle.AuthorIDValidator(v); err != nil {
			return &ValidationError{Name: "author_id", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.author_id": %w`, err)}
		}
	}
	if v, ok := kau.mutation.TenantID(); ok {
		if err := knowledgearticle.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (kau *KnowledgeArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := kau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(knowledgearticle.Table, knowledgearticle.Columns, sqlgraph.NewFieldSpec(knowledgearticle.FieldID, field.TypeInt))
	if ps := kau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kau.mutation.Title(); ok {
		_spec.SetField(knowledgearticle.FieldTitle, field.TypeString, value)
	}
	if value, ok := kau.mutation.Content(); ok {
		_spec.SetField(knowledgearticle.FieldContent, field.TypeString, value)
	}
	if kau.mutation.ContentCleared() {
		_spec.ClearField(knowledgearticle.FieldContent, field.TypeString)
	}
	if value, ok := kau.mutation.Category(); ok {
		_spec.SetField(knowledgearticle.FieldCategory, field.TypeString, value)
	}
	if kau.mutation.CategoryCleared() {
		_spec.ClearField(knowledgearticle.FieldCategory, field.TypeString)
	}
	if value, ok := kau.mutation.Tags(); ok {
		_spec.SetField(knowledgearticle.FieldTags, field.TypeString, value)
	}
	if kau.mutation.TagsCleared() {
		_spec.ClearField(knowledgearticle.FieldTags, field.TypeString)
	}
	if value, ok := kau.mutation.AuthorID(); ok {
		_spec.SetField(knowledgearticle.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := kau.mutation.AddedAuthorID(); ok {
		_spec.AddField(knowledgearticle.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := kau.mutation.TenantID(); ok {
		_spec.SetField(knowledgearticle.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := kau.mutation.AddedTenantID(); ok {
		_spec.AddField(knowledgearticle.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := kau.mutation.IsPublished(); ok {
		_spec.SetField(knowledgearticle.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := kau.mutation.CreatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kau.mutation.UpdatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{knowledgearticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kau.mutation.done = true
	return n, nil
}

// KnowledgeArticleUpdateOne is the builder for updating a single KnowledgeArticle entity.
type KnowledgeArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KnowledgeArticleMutation
}

// SetTitle sets the "title" field.
func (kauo *KnowledgeArticleUpdateOne) SetTitle(s string) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetTitle(s)
	return kauo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableTitle(s *string) *KnowledgeArticleUpdateOne {
	if s != nil {
		kauo.SetTitle(*s)
	}
	return kauo
}

// SetContent sets the "content" field.
func (kauo *KnowledgeArticleUpdateOne) SetContent(s string) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetContent(s)
	return kauo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableContent(s *string) *KnowledgeArticleUpdateOne {
	if s != nil {
		kauo.SetContent(*s)
	}
	return kauo
}

// ClearContent clears the value of the "content" field.
func (kauo *KnowledgeArticleUpdateOne) ClearContent() *KnowledgeArticleUpdateOne {
	kauo.mutation.ClearContent()
	return kauo
}

// SetCategory sets the "category" field.
func (kauo *KnowledgeArticleUpdateOne) SetCategory(s string) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetCategory(s)
	return kauo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableCategory(s *string) *KnowledgeArticleUpdateOne {
	if s != nil {
		kauo.SetCategory(*s)
	}
	return kauo
}

// ClearCategory clears the value of the "category" field.
func (kauo *KnowledgeArticleUpdateOne) ClearCategory() *KnowledgeArticleUpdateOne {
	kauo.mutation.ClearCategory()
	return kauo
}

// SetTags sets the "tags" field.
func (kauo *KnowledgeArticleUpdateOne) SetTags(s string) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetTags(s)
	return kauo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableTags(s *string) *KnowledgeArticleUpdateOne {
	if s != nil {
		kauo.SetTags(*s)
	}
	return kauo
}

// ClearTags clears the value of the "tags" field.
func (kauo *KnowledgeArticleUpdateOne) ClearTags() *KnowledgeArticleUpdateOne {
	kauo.mutation.ClearTags()
	return kauo
}

// SetAuthorID sets the "author_id" field.
func (kauo *KnowledgeArticleUpdateOne) SetAuthorID(i int) *KnowledgeArticleUpdateOne {
	kauo.mutation.ResetAuthorID()
	kauo.mutation.SetAuthorID(i)
	return kauo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableAuthorID(i *int) *KnowledgeArticleUpdateOne {
	if i != nil {
		kauo.SetAuthorID(*i)
	}
	return kauo
}

// AddAuthorID adds i to the "author_id" field.
func (kauo *KnowledgeArticleUpdateOne) AddAuthorID(i int) *KnowledgeArticleUpdateOne {
	kauo.mutation.AddAuthorID(i)
	return kauo
}

// SetTenantID sets the "tenant_id" field.
func (kauo *KnowledgeArticleUpdateOne) SetTenantID(i int) *KnowledgeArticleUpdateOne {
	kauo.mutation.ResetTenantID()
	kauo.mutation.SetTenantID(i)
	return kauo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableTenantID(i *int) *KnowledgeArticleUpdateOne {
	if i != nil {
		kauo.SetTenantID(*i)
	}
	return kauo
}

// AddTenantID adds i to the "tenant_id" field.
func (kauo *KnowledgeArticleUpdateOne) AddTenantID(i int) *KnowledgeArticleUpdateOne {
	kauo.mutation.AddTenantID(i)
	return kauo
}

// SetIsPublished sets the "is_published" field.
func (kauo *KnowledgeArticleUpdateOne) SetIsPublished(b bool) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetIsPublished(b)
	return kauo
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableIsPublished(b *bool) *KnowledgeArticleUpdateOne {
	if b != nil {
		kauo.SetIsPublished(*b)
	}
	return kauo
}

// SetCreatedAt sets the "created_at" field.
func (kauo *KnowledgeArticleUpdateOne) SetCreatedAt(t time.Time) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetCreatedAt(t)
	return kauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kauo *KnowledgeArticleUpdateOne) SetNillableCreatedAt(t *time.Time) *KnowledgeArticleUpdateOne {
	if t != nil {
		kauo.SetCreatedAt(*t)
	}
	return kauo
}

// SetUpdatedAt sets the "updated_at" field.
func (kauo *KnowledgeArticleUpdateOne) SetUpdatedAt(t time.Time) *KnowledgeArticleUpdateOne {
	kauo.mutation.SetUpdatedAt(t)
	return kauo
}

// Mutation returns the KnowledgeArticleMutation object of the builder.
func (kauo *KnowledgeArticleUpdateOne) Mutation() *KnowledgeArticleMutation {
	return kauo.mutation
}

// Where appends a list predicates to the KnowledgeArticleUpdate builder.
func (kauo *KnowledgeArticleUpdateOne) Where(ps ...predicate.KnowledgeArticle) *KnowledgeArticleUpdateOne {
	kauo.mutation.Where(ps...)
	return kauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kauo *KnowledgeArticleUpdateOne) Select(field string, fields ...string) *KnowledgeArticleUpdateOne {
	kauo.fields = append([]string{field}, fields...)
	return kauo
}

// Save executes the query and returns the updated KnowledgeArticle entity.
func (kauo *KnowledgeArticleUpdateOne) Save(ctx context.Context) (*KnowledgeArticle, error) {
	kauo.defaults()
	return withHooks(ctx, kauo.sqlSave, kauo.mutation, kauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kauo *KnowledgeArticleUpdateOne) SaveX(ctx context.Context) *KnowledgeArticle {
	node, err := kauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kauo *KnowledgeArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := kauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kauo *KnowledgeArticleUpdateOne) ExecX(ctx context.Context) {
	if err := kauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kauo *KnowledgeArticleUpdateOne) defaults() {
	if _, ok := kauo.mutation.UpdatedAt(); !ok {
		v := knowledgearticle.UpdateDefaultUpdatedAt()
		kauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kauo *KnowledgeArticleUpdateOne) check() error {
	if v, ok := kauo.mutation.Title(); ok {
		if err := knowledgearticle.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.title": %w`, err)}
		}
	}
	if v, ok := kauo.mutation.AuthorID(); ok {
		if err := knowledgearticle.AuthorIDValidator(v); err != nil {
			return &ValidationError{Name: "author_id", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.author_id": %w`, err)}
		}
	}
	if v, ok := kauo.mutation.TenantID(); ok {
		if err := knowledgearticle.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (kauo *KnowledgeArticleUpdateOne) sqlSave(ctx context.Context) (_node *KnowledgeArticle, err error) {
	if err := kauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(knowledgearticle.Table, knowledgearticle.Columns, sqlgraph.NewFieldSpec(knowledgearticle.FieldID, field.TypeInt))
	id, ok := kauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KnowledgeArticle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, knowledgearticle.FieldID)
		for _, f := range fields {
			if !knowledgearticle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != knowledgearticle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kauo.mutation.Title(); ok {
		_spec.SetField(knowledgearticle.FieldTitle, field.TypeString, value)
	}
	if value, ok := kauo.mutation.Content(); ok {
		_spec.SetField(knowledgearticle.FieldContent, field.TypeString, value)
	}
	if kauo.mutation.ContentCleared() {
		_spec.ClearField(knowledgearticle.FieldContent, field.TypeString)
	}
	if value, ok := kauo.mutation.Category(); ok {
		_spec.SetField(knowledgearticle.FieldCategory, field.TypeString, value)
	}
	if kauo.mutation.CategoryCleared() {
		_spec.ClearField(knowledgearticle.FieldCategory, field.TypeString)
	}
	if value, ok := kauo.mutation.Tags(); ok {
		_spec.SetField(knowledgearticle.FieldTags, field.TypeString, value)
	}
	if kauo.mutation.TagsCleared() {
		_spec.ClearField(knowledgearticle.FieldTags, field.TypeString)
	}
	if value, ok := kauo.mutation.AuthorID(); ok {
		_spec.SetField(knowledgearticle.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := kauo.mutation.AddedAuthorID(); ok {
		_spec.AddField(knowledgearticle.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := kauo.mutation.TenantID(); ok {
		_spec.SetField(knowledgearticle.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := kauo.mutation.AddedTenantID(); ok {
		_spec.AddField(knowledgearticle.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := kauo.mutation.IsPublished(); ok {
		_spec.SetField(knowledgearticle.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := kauo.mutation.CreatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kauo.mutation.UpdatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &KnowledgeArticle{config: kauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{knowledgearticle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kauo.mutation.done = true
	return _node, nil
}
