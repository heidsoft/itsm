// Code generated by ent, DO NOT EDIT.

package cichangerecord

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldID, id))
}

// CiID applies equality check predicate on the "ci_id" field. It's identical to CiIDEQ.
func CiID(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldCiID, v))
}

// ChangeType applies equality check predicate on the "change_type" field. It's identical to ChangeTypeEQ.
func ChangeType(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangeType, v))
}

// ChangedBy applies equality check predicate on the "changed_by" field. It's identical to ChangedByEQ.
func ChangedBy(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangedBy, v))
}

// ChangeSource applies equality check predicate on the "change_source" field. It's identical to ChangeSourceEQ.
func ChangeSource(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangeSource, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldReason, v))
}

// VersionBefore applies equality check predicate on the "version_before" field. It's identical to VersionBeforeEQ.
func VersionBefore(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldVersionBefore, v))
}

// VersionAfter applies equality check predicate on the "version_after" field. It's identical to VersionAfterEQ.
func VersionAfter(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldVersionAfter, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CiIDEQ applies the EQ predicate on the "ci_id" field.
func CiIDEQ(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldCiID, v))
}

// CiIDNEQ applies the NEQ predicate on the "ci_id" field.
func CiIDNEQ(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldCiID, v))
}

// CiIDIn applies the In predicate on the "ci_id" field.
func CiIDIn(vs ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldCiID, vs...))
}

// CiIDNotIn applies the NotIn predicate on the "ci_id" field.
func CiIDNotIn(vs ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldCiID, vs...))
}

// ChangeTypeEQ applies the EQ predicate on the "change_type" field.
func ChangeTypeEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangeType, v))
}

// ChangeTypeNEQ applies the NEQ predicate on the "change_type" field.
func ChangeTypeNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldChangeType, v))
}

// ChangeTypeIn applies the In predicate on the "change_type" field.
func ChangeTypeIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldChangeType, vs...))
}

// ChangeTypeNotIn applies the NotIn predicate on the "change_type" field.
func ChangeTypeNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldChangeType, vs...))
}

// ChangeTypeGT applies the GT predicate on the "change_type" field.
func ChangeTypeGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldChangeType, v))
}

// ChangeTypeGTE applies the GTE predicate on the "change_type" field.
func ChangeTypeGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldChangeType, v))
}

// ChangeTypeLT applies the LT predicate on the "change_type" field.
func ChangeTypeLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldChangeType, v))
}

// ChangeTypeLTE applies the LTE predicate on the "change_type" field.
func ChangeTypeLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldChangeType, v))
}

// ChangeTypeContains applies the Contains predicate on the "change_type" field.
func ChangeTypeContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldChangeType, v))
}

// ChangeTypeHasPrefix applies the HasPrefix predicate on the "change_type" field.
func ChangeTypeHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldChangeType, v))
}

// ChangeTypeHasSuffix applies the HasSuffix predicate on the "change_type" field.
func ChangeTypeHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldChangeType, v))
}

// ChangeTypeEqualFold applies the EqualFold predicate on the "change_type" field.
func ChangeTypeEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldChangeType, v))
}

// ChangeTypeContainsFold applies the ContainsFold predicate on the "change_type" field.
func ChangeTypeContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldChangeType, v))
}

// OldValuesIsNil applies the IsNil predicate on the "old_values" field.
func OldValuesIsNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIsNull(FieldOldValues))
}

// OldValuesNotNil applies the NotNil predicate on the "old_values" field.
func OldValuesNotNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotNull(FieldOldValues))
}

// NewValuesIsNil applies the IsNil predicate on the "new_values" field.
func NewValuesIsNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIsNull(FieldNewValues))
}

// NewValuesNotNil applies the NotNil predicate on the "new_values" field.
func NewValuesNotNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotNull(FieldNewValues))
}

// ChangedByEQ applies the EQ predicate on the "changed_by" field.
func ChangedByEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangedBy, v))
}

// ChangedByNEQ applies the NEQ predicate on the "changed_by" field.
func ChangedByNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldChangedBy, v))
}

// ChangedByIn applies the In predicate on the "changed_by" field.
func ChangedByIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldChangedBy, vs...))
}

// ChangedByNotIn applies the NotIn predicate on the "changed_by" field.
func ChangedByNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldChangedBy, vs...))
}

// ChangedByGT applies the GT predicate on the "changed_by" field.
func ChangedByGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldChangedBy, v))
}

// ChangedByGTE applies the GTE predicate on the "changed_by" field.
func ChangedByGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldChangedBy, v))
}

// ChangedByLT applies the LT predicate on the "changed_by" field.
func ChangedByLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldChangedBy, v))
}

// ChangedByLTE applies the LTE predicate on the "changed_by" field.
func ChangedByLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldChangedBy, v))
}

// ChangedByContains applies the Contains predicate on the "changed_by" field.
func ChangedByContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldChangedBy, v))
}

// ChangedByHasPrefix applies the HasPrefix predicate on the "changed_by" field.
func ChangedByHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldChangedBy, v))
}

// ChangedByHasSuffix applies the HasSuffix predicate on the "changed_by" field.
func ChangedByHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldChangedBy, v))
}

// ChangedByEqualFold applies the EqualFold predicate on the "changed_by" field.
func ChangedByEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldChangedBy, v))
}

// ChangedByContainsFold applies the ContainsFold predicate on the "changed_by" field.
func ChangedByContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldChangedBy, v))
}

// ChangeSourceEQ applies the EQ predicate on the "change_source" field.
func ChangeSourceEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldChangeSource, v))
}

// ChangeSourceNEQ applies the NEQ predicate on the "change_source" field.
func ChangeSourceNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldChangeSource, v))
}

// ChangeSourceIn applies the In predicate on the "change_source" field.
func ChangeSourceIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldChangeSource, vs...))
}

// ChangeSourceNotIn applies the NotIn predicate on the "change_source" field.
func ChangeSourceNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldChangeSource, vs...))
}

// ChangeSourceGT applies the GT predicate on the "change_source" field.
func ChangeSourceGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldChangeSource, v))
}

// ChangeSourceGTE applies the GTE predicate on the "change_source" field.
func ChangeSourceGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldChangeSource, v))
}

// ChangeSourceLT applies the LT predicate on the "change_source" field.
func ChangeSourceLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldChangeSource, v))
}

// ChangeSourceLTE applies the LTE predicate on the "change_source" field.
func ChangeSourceLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldChangeSource, v))
}

// ChangeSourceContains applies the Contains predicate on the "change_source" field.
func ChangeSourceContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldChangeSource, v))
}

// ChangeSourceHasPrefix applies the HasPrefix predicate on the "change_source" field.
func ChangeSourceHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldChangeSource, v))
}

// ChangeSourceHasSuffix applies the HasSuffix predicate on the "change_source" field.
func ChangeSourceHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldChangeSource, v))
}

// ChangeSourceEqualFold applies the EqualFold predicate on the "change_source" field.
func ChangeSourceEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldChangeSource, v))
}

// ChangeSourceContainsFold applies the ContainsFold predicate on the "change_source" field.
func ChangeSourceContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldChangeSource, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldReason, v))
}

// VersionBeforeEQ applies the EQ predicate on the "version_before" field.
func VersionBeforeEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldVersionBefore, v))
}

// VersionBeforeNEQ applies the NEQ predicate on the "version_before" field.
func VersionBeforeNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldVersionBefore, v))
}

// VersionBeforeIn applies the In predicate on the "version_before" field.
func VersionBeforeIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldVersionBefore, vs...))
}

// VersionBeforeNotIn applies the NotIn predicate on the "version_before" field.
func VersionBeforeNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldVersionBefore, vs...))
}

// VersionBeforeGT applies the GT predicate on the "version_before" field.
func VersionBeforeGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldVersionBefore, v))
}

// VersionBeforeGTE applies the GTE predicate on the "version_before" field.
func VersionBeforeGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldVersionBefore, v))
}

// VersionBeforeLT applies the LT predicate on the "version_before" field.
func VersionBeforeLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldVersionBefore, v))
}

// VersionBeforeLTE applies the LTE predicate on the "version_before" field.
func VersionBeforeLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldVersionBefore, v))
}

// VersionBeforeContains applies the Contains predicate on the "version_before" field.
func VersionBeforeContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldVersionBefore, v))
}

// VersionBeforeHasPrefix applies the HasPrefix predicate on the "version_before" field.
func VersionBeforeHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldVersionBefore, v))
}

// VersionBeforeHasSuffix applies the HasSuffix predicate on the "version_before" field.
func VersionBeforeHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldVersionBefore, v))
}

// VersionBeforeIsNil applies the IsNil predicate on the "version_before" field.
func VersionBeforeIsNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIsNull(FieldVersionBefore))
}

// VersionBeforeNotNil applies the NotNil predicate on the "version_before" field.
func VersionBeforeNotNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotNull(FieldVersionBefore))
}

// VersionBeforeEqualFold applies the EqualFold predicate on the "version_before" field.
func VersionBeforeEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldVersionBefore, v))
}

// VersionBeforeContainsFold applies the ContainsFold predicate on the "version_before" field.
func VersionBeforeContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldVersionBefore, v))
}

// VersionAfterEQ applies the EQ predicate on the "version_after" field.
func VersionAfterEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldVersionAfter, v))
}

// VersionAfterNEQ applies the NEQ predicate on the "version_after" field.
func VersionAfterNEQ(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldVersionAfter, v))
}

// VersionAfterIn applies the In predicate on the "version_after" field.
func VersionAfterIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldVersionAfter, vs...))
}

// VersionAfterNotIn applies the NotIn predicate on the "version_after" field.
func VersionAfterNotIn(vs ...string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldVersionAfter, vs...))
}

// VersionAfterGT applies the GT predicate on the "version_after" field.
func VersionAfterGT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldVersionAfter, v))
}

// VersionAfterGTE applies the GTE predicate on the "version_after" field.
func VersionAfterGTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldVersionAfter, v))
}

// VersionAfterLT applies the LT predicate on the "version_after" field.
func VersionAfterLT(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldVersionAfter, v))
}

// VersionAfterLTE applies the LTE predicate on the "version_after" field.
func VersionAfterLTE(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldVersionAfter, v))
}

// VersionAfterContains applies the Contains predicate on the "version_after" field.
func VersionAfterContains(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContains(FieldVersionAfter, v))
}

// VersionAfterHasPrefix applies the HasPrefix predicate on the "version_after" field.
func VersionAfterHasPrefix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasPrefix(FieldVersionAfter, v))
}

// VersionAfterHasSuffix applies the HasSuffix predicate on the "version_after" field.
func VersionAfterHasSuffix(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldHasSuffix(FieldVersionAfter, v))
}

// VersionAfterIsNil applies the IsNil predicate on the "version_after" field.
func VersionAfterIsNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIsNull(FieldVersionAfter))
}

// VersionAfterNotNil applies the NotNil predicate on the "version_after" field.
func VersionAfterNotNil() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotNull(FieldVersionAfter))
}

// VersionAfterEqualFold applies the EqualFold predicate on the "version_after" field.
func VersionAfterEqualFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEqualFold(FieldVersionAfter, v))
}

// VersionAfterContainsFold applies the ContainsFold predicate on the "version_after" field.
func VersionAfterContainsFold(v string) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldContainsFold(FieldVersionAfter, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldTenantID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfigurationItem applies the HasEdge predicate on the "configuration_item" edge.
func HasConfigurationItem() predicate.CIChangeRecord {
	return predicate.CIChangeRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConfigurationItemTable, ConfigurationItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigurationItemWith applies the HasEdge predicate on the "configuration_item" edge with a given conditions (other predicates).
func HasConfigurationItemWith(preds ...predicate.ConfigurationItem) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(func(s *sql.Selector) {
		step := newConfigurationItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIChangeRecord) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIChangeRecord) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIChangeRecord) predicate.CIChangeRecord {
	return predicate.CIChangeRecord(sql.NotPredicates(p))
}
