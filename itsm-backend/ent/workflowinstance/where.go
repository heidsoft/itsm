// Code generated by ent, DO NOT EDIT.

package workflowinstance

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldID, id))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldStatus, v))
}

// CurrentStep applies equality check predicate on the "current_step" field. It's identical to CurrentStepEQ.
func CurrentStep(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCurrentStep, v))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldWorkflowID, v))
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldEntityID, v))
}

// EntityType applies equality check predicate on the "entity_type" field. It's identical to EntityTypeEQ.
func EntityType(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldEntityType, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldTenantID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCompletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContainsFold(FieldStatus, v))
}

// CurrentStepEQ applies the EQ predicate on the "current_step" field.
func CurrentStepEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCurrentStep, v))
}

// CurrentStepNEQ applies the NEQ predicate on the "current_step" field.
func CurrentStepNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldCurrentStep, v))
}

// CurrentStepIn applies the In predicate on the "current_step" field.
func CurrentStepIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldCurrentStep, vs...))
}

// CurrentStepNotIn applies the NotIn predicate on the "current_step" field.
func CurrentStepNotIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldCurrentStep, vs...))
}

// CurrentStepGT applies the GT predicate on the "current_step" field.
func CurrentStepGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldCurrentStep, v))
}

// CurrentStepGTE applies the GTE predicate on the "current_step" field.
func CurrentStepGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldCurrentStep, v))
}

// CurrentStepLT applies the LT predicate on the "current_step" field.
func CurrentStepLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldCurrentStep, v))
}

// CurrentStepLTE applies the LTE predicate on the "current_step" field.
func CurrentStepLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldCurrentStep, v))
}

// CurrentStepContains applies the Contains predicate on the "current_step" field.
func CurrentStepContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContains(FieldCurrentStep, v))
}

// CurrentStepHasPrefix applies the HasPrefix predicate on the "current_step" field.
func CurrentStepHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasPrefix(FieldCurrentStep, v))
}

// CurrentStepHasSuffix applies the HasSuffix predicate on the "current_step" field.
func CurrentStepHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasSuffix(FieldCurrentStep, v))
}

// CurrentStepIsNil applies the IsNil predicate on the "current_step" field.
func CurrentStepIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIsNull(FieldCurrentStep))
}

// CurrentStepNotNil applies the NotNil predicate on the "current_step" field.
func CurrentStepNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotNull(FieldCurrentStep))
}

// CurrentStepEqualFold applies the EqualFold predicate on the "current_step" field.
func CurrentStepEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEqualFold(FieldCurrentStep, v))
}

// CurrentStepContainsFold applies the ContainsFold predicate on the "current_step" field.
func CurrentStepContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContainsFold(FieldCurrentStep, v))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotNull(FieldContext))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldEntityID, v))
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldEntityID, v))
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldEntityID, vs...))
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldEntityID, vs...))
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldEntityID, v))
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldEntityID, v))
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldEntityID, v))
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldEntityID, v))
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldEntityType, v))
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldEntityType, v))
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldEntityType, vs...))
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldEntityType, vs...))
}

// EntityTypeGT applies the GT predicate on the "entity_type" field.
func EntityTypeGT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldEntityType, v))
}

// EntityTypeGTE applies the GTE predicate on the "entity_type" field.
func EntityTypeGTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldEntityType, v))
}

// EntityTypeLT applies the LT predicate on the "entity_type" field.
func EntityTypeLT(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldEntityType, v))
}

// EntityTypeLTE applies the LTE predicate on the "entity_type" field.
func EntityTypeLTE(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldEntityType, v))
}

// EntityTypeContains applies the Contains predicate on the "entity_type" field.
func EntityTypeContains(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContains(FieldEntityType, v))
}

// EntityTypeHasPrefix applies the HasPrefix predicate on the "entity_type" field.
func EntityTypeHasPrefix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasPrefix(FieldEntityType, v))
}

// EntityTypeHasSuffix applies the HasSuffix predicate on the "entity_type" field.
func EntityTypeHasSuffix(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldHasSuffix(FieldEntityType, v))
}

// EntityTypeEqualFold applies the EqualFold predicate on the "entity_type" field.
func EntityTypeEqualFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEqualFold(FieldEntityType, v))
}

// EntityTypeContainsFold applies the ContainsFold predicate on the "entity_type" field.
func EntityTypeContainsFold(v string) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldContainsFold(FieldEntityType, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldTenantID, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldStartedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotNull(FieldCompletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasWorkflow applies the HasEdge predicate on the "workflow" edge.
func HasWorkflow() predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkflowTable, WorkflowColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkflowWith applies the HasEdge predicate on the "workflow" edge with a given conditions (other predicates).
func HasWorkflowWith(preds ...predicate.Workflow) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(func(s *sql.Selector) {
		step := newWorkflowStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkflowInstance) predicate.WorkflowInstance {
	return predicate.WorkflowInstance(sql.NotPredicates(p))
}
