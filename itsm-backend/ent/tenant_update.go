// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/subscription"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetCode sets the "code" field.
func (tu *TenantUpdate) SetCode(s string) *TenantUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableCode(s *string) *TenantUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetDomain sets the "domain" field.
func (tu *TenantUpdate) SetDomain(s string) *TenantUpdate {
	tu.mutation.SetDomain(s)
	return tu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDomain(s *string) *TenantUpdate {
	if s != nil {
		tu.SetDomain(*s)
	}
	return tu
}

// ClearDomain clears the value of the "domain" field.
func (tu *TenantUpdate) ClearDomain() *TenantUpdate {
	tu.mutation.ClearDomain()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TenantUpdate) SetStatus(t tenant.Status) *TenantUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableStatus(t *tenant.Status) *TenantUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TenantUpdate) SetType(t tenant.Type) *TenantUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableType(t *tenant.Type) *TenantUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetSettings sets the "settings" field.
func (tu *TenantUpdate) SetSettings(m map[string]interface{}) *TenantUpdate {
	tu.mutation.SetSettings(m)
	return tu
}

// ClearSettings clears the value of the "settings" field.
func (tu *TenantUpdate) ClearSettings() *TenantUpdate {
	tu.mutation.ClearSettings()
	return tu
}

// SetQuota sets the "quota" field.
func (tu *TenantUpdate) SetQuota(m map[string]interface{}) *TenantUpdate {
	tu.mutation.SetQuota(m)
	return tu
}

// ClearQuota clears the value of the "quota" field.
func (tu *TenantUpdate) ClearQuota() *TenantUpdate {
	tu.mutation.ClearQuota()
	return tu
}

// SetExpiresAt sets the "expires_at" field.
func (tu *TenantUpdate) SetExpiresAt(t time.Time) *TenantUpdate {
	tu.mutation.SetExpiresAt(t)
	return tu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableExpiresAt(t *time.Time) *TenantUpdate {
	if t != nil {
		tu.SetExpiresAt(*t)
	}
	return tu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (tu *TenantUpdate) ClearExpiresAt() *TenantUpdate {
	tu.mutation.ClearExpiresAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tu *TenantUpdate) AddUserIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUsers adds the "users" edges to the User entity.
func (tu *TenantUpdate) AddUsers(u ...*User) *TenantUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tu *TenantUpdate) AddTicketIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddTicketIDs(ids...)
	return tu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tu *TenantUpdate) AddTickets(t ...*Ticket) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTicketIDs(ids...)
}

// AddServiceCatalogIDs adds the "service_catalogs" edge to the ServiceCatalog entity by IDs.
func (tu *TenantUpdate) AddServiceCatalogIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddServiceCatalogIDs(ids...)
	return tu
}

// AddServiceCatalogs adds the "service_catalogs" edges to the ServiceCatalog entity.
func (tu *TenantUpdate) AddServiceCatalogs(s ...*ServiceCatalog) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddServiceCatalogIDs(ids...)
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by IDs.
func (tu *TenantUpdate) AddServiceRequestIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddServiceRequestIDs(ids...)
	return tu
}

// AddServiceRequests adds the "service_requests" edges to the ServiceRequest entity.
func (tu *TenantUpdate) AddServiceRequests(s ...*ServiceRequest) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddServiceRequestIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (tu *TenantUpdate) AddSubscriptionIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddSubscriptionIDs(ids...)
	return tu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (tu *TenantUpdate) AddSubscriptions(s ...*Subscription) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubscriptionIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tu *TenantUpdate) ClearUsers() *TenantUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tu *TenantUpdate) RemoveUserIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUsers removes "users" edges to User entities.
func (tu *TenantUpdate) RemoveUsers(u ...*User) *TenantUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tu *TenantUpdate) ClearTickets() *TenantUpdate {
	tu.mutation.ClearTickets()
	return tu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tu *TenantUpdate) RemoveTicketIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveTicketIDs(ids...)
	return tu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tu *TenantUpdate) RemoveTickets(t ...*Ticket) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTicketIDs(ids...)
}

// ClearServiceCatalogs clears all "service_catalogs" edges to the ServiceCatalog entity.
func (tu *TenantUpdate) ClearServiceCatalogs() *TenantUpdate {
	tu.mutation.ClearServiceCatalogs()
	return tu
}

// RemoveServiceCatalogIDs removes the "service_catalogs" edge to ServiceCatalog entities by IDs.
func (tu *TenantUpdate) RemoveServiceCatalogIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveServiceCatalogIDs(ids...)
	return tu
}

// RemoveServiceCatalogs removes "service_catalogs" edges to ServiceCatalog entities.
func (tu *TenantUpdate) RemoveServiceCatalogs(s ...*ServiceCatalog) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveServiceCatalogIDs(ids...)
}

// ClearServiceRequests clears all "service_requests" edges to the ServiceRequest entity.
func (tu *TenantUpdate) ClearServiceRequests() *TenantUpdate {
	tu.mutation.ClearServiceRequests()
	return tu
}

// RemoveServiceRequestIDs removes the "service_requests" edge to ServiceRequest entities by IDs.
func (tu *TenantUpdate) RemoveServiceRequestIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveServiceRequestIDs(ids...)
	return tu
}

// RemoveServiceRequests removes "service_requests" edges to ServiceRequest entities.
func (tu *TenantUpdate) RemoveServiceRequests(s ...*ServiceRequest) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveServiceRequestIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (tu *TenantUpdate) ClearSubscriptions() *TenantUpdate {
	tu.mutation.ClearSubscriptions()
	return tu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (tu *TenantUpdate) RemoveSubscriptionIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveSubscriptionIDs(ids...)
	return tu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (tu *TenantUpdate) RemoveSubscriptions(s ...*Subscription) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Domain(); ok {
		if err := tenant.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Tenant.domain": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.GetType(); ok {
		if err := tenant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Tenant.type": %w`, err)}
		}
	}
	return nil
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Domain(); ok {
		_spec.SetField(tenant.FieldDomain, field.TypeString, value)
	}
	if tu.mutation.DomainCleared() {
		_spec.ClearField(tenant.FieldDomain, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Settings(); ok {
		_spec.SetField(tenant.FieldSettings, field.TypeJSON, value)
	}
	if tu.mutation.SettingsCleared() {
		_spec.ClearField(tenant.FieldSettings, field.TypeJSON)
	}
	if value, ok := tu.mutation.Quota(); ok {
		_spec.SetField(tenant.FieldQuota, field.TypeJSON, value)
	}
	if tu.mutation.QuotaCleared() {
		_spec.ClearField(tenant.FieldQuota, field.TypeJSON)
	}
	if value, ok := tu.mutation.ExpiresAt(); ok {
		_spec.SetField(tenant.FieldExpiresAt, field.TypeTime, value)
	}
	if tu.mutation.ExpiresAtCleared() {
		_spec.ClearField(tenant.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ServiceCatalogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedServiceCatalogsIDs(); len(nodes) > 0 && !tu.mutation.ServiceCatalogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ServiceCatalogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedServiceRequestsIDs(); len(nodes) > 0 && !tu.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ServiceRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !tu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TenantUpdateOne) SetCode(s string) *TenantUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableCode(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetDomain sets the "domain" field.
func (tuo *TenantUpdateOne) SetDomain(s string) *TenantUpdateOne {
	tuo.mutation.SetDomain(s)
	return tuo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDomain(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetDomain(*s)
	}
	return tuo
}

// ClearDomain clears the value of the "domain" field.
func (tuo *TenantUpdateOne) ClearDomain() *TenantUpdateOne {
	tuo.mutation.ClearDomain()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TenantUpdateOne) SetStatus(t tenant.Status) *TenantUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableStatus(t *tenant.Status) *TenantUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TenantUpdateOne) SetType(t tenant.Type) *TenantUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableType(t *tenant.Type) *TenantUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetSettings sets the "settings" field.
func (tuo *TenantUpdateOne) SetSettings(m map[string]interface{}) *TenantUpdateOne {
	tuo.mutation.SetSettings(m)
	return tuo
}

// ClearSettings clears the value of the "settings" field.
func (tuo *TenantUpdateOne) ClearSettings() *TenantUpdateOne {
	tuo.mutation.ClearSettings()
	return tuo
}

// SetQuota sets the "quota" field.
func (tuo *TenantUpdateOne) SetQuota(m map[string]interface{}) *TenantUpdateOne {
	tuo.mutation.SetQuota(m)
	return tuo
}

// ClearQuota clears the value of the "quota" field.
func (tuo *TenantUpdateOne) ClearQuota() *TenantUpdateOne {
	tuo.mutation.ClearQuota()
	return tuo
}

// SetExpiresAt sets the "expires_at" field.
func (tuo *TenantUpdateOne) SetExpiresAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetExpiresAt(t)
	return tuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableExpiresAt(t *time.Time) *TenantUpdateOne {
	if t != nil {
		tuo.SetExpiresAt(*t)
	}
	return tuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (tuo *TenantUpdateOne) ClearExpiresAt() *TenantUpdateOne {
	tuo.mutation.ClearExpiresAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tuo *TenantUpdateOne) AddUserIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUsers adds the "users" edges to the User entity.
func (tuo *TenantUpdateOne) AddUsers(u ...*User) *TenantUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tuo *TenantUpdateOne) AddTicketIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddTicketIDs(ids...)
	return tuo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tuo *TenantUpdateOne) AddTickets(t ...*Ticket) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTicketIDs(ids...)
}

// AddServiceCatalogIDs adds the "service_catalogs" edge to the ServiceCatalog entity by IDs.
func (tuo *TenantUpdateOne) AddServiceCatalogIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddServiceCatalogIDs(ids...)
	return tuo
}

// AddServiceCatalogs adds the "service_catalogs" edges to the ServiceCatalog entity.
func (tuo *TenantUpdateOne) AddServiceCatalogs(s ...*ServiceCatalog) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddServiceCatalogIDs(ids...)
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by IDs.
func (tuo *TenantUpdateOne) AddServiceRequestIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddServiceRequestIDs(ids...)
	return tuo
}

// AddServiceRequests adds the "service_requests" edges to the ServiceRequest entity.
func (tuo *TenantUpdateOne) AddServiceRequests(s ...*ServiceRequest) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddServiceRequestIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (tuo *TenantUpdateOne) AddSubscriptionIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddSubscriptionIDs(ids...)
	return tuo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (tuo *TenantUpdateOne) AddSubscriptions(s ...*Subscription) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubscriptionIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tuo *TenantUpdateOne) ClearUsers() *TenantUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tuo *TenantUpdateOne) RemoveUserIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUsers removes "users" edges to User entities.
func (tuo *TenantUpdateOne) RemoveUsers(u ...*User) *TenantUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tuo *TenantUpdateOne) ClearTickets() *TenantUpdateOne {
	tuo.mutation.ClearTickets()
	return tuo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tuo *TenantUpdateOne) RemoveTicketIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveTicketIDs(ids...)
	return tuo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tuo *TenantUpdateOne) RemoveTickets(t ...*Ticket) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTicketIDs(ids...)
}

// ClearServiceCatalogs clears all "service_catalogs" edges to the ServiceCatalog entity.
func (tuo *TenantUpdateOne) ClearServiceCatalogs() *TenantUpdateOne {
	tuo.mutation.ClearServiceCatalogs()
	return tuo
}

// RemoveServiceCatalogIDs removes the "service_catalogs" edge to ServiceCatalog entities by IDs.
func (tuo *TenantUpdateOne) RemoveServiceCatalogIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveServiceCatalogIDs(ids...)
	return tuo
}

// RemoveServiceCatalogs removes "service_catalogs" edges to ServiceCatalog entities.
func (tuo *TenantUpdateOne) RemoveServiceCatalogs(s ...*ServiceCatalog) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveServiceCatalogIDs(ids...)
}

// ClearServiceRequests clears all "service_requests" edges to the ServiceRequest entity.
func (tuo *TenantUpdateOne) ClearServiceRequests() *TenantUpdateOne {
	tuo.mutation.ClearServiceRequests()
	return tuo
}

// RemoveServiceRequestIDs removes the "service_requests" edge to ServiceRequest entities by IDs.
func (tuo *TenantUpdateOne) RemoveServiceRequestIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveServiceRequestIDs(ids...)
	return tuo
}

// RemoveServiceRequests removes "service_requests" edges to ServiceRequest entities.
func (tuo *TenantUpdateOne) RemoveServiceRequests(s ...*ServiceRequest) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveServiceRequestIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (tuo *TenantUpdateOne) ClearSubscriptions() *TenantUpdateOne {
	tuo.mutation.ClearSubscriptions()
	return tuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (tuo *TenantUpdateOne) RemoveSubscriptionIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveSubscriptionIDs(ids...)
	return tuo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (tuo *TenantUpdateOne) RemoveSubscriptions(s ...*Subscription) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Domain(); ok {
		if err := tenant.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Tenant.domain": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := tenant.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Tenant.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.GetType(); ok {
		if err := tenant.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Tenant.type": %w`, err)}
		}
	}
	return nil
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Domain(); ok {
		_spec.SetField(tenant.FieldDomain, field.TypeString, value)
	}
	if tuo.mutation.DomainCleared() {
		_spec.ClearField(tenant.FieldDomain, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(tenant.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(tenant.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Settings(); ok {
		_spec.SetField(tenant.FieldSettings, field.TypeJSON, value)
	}
	if tuo.mutation.SettingsCleared() {
		_spec.ClearField(tenant.FieldSettings, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Quota(); ok {
		_spec.SetField(tenant.FieldQuota, field.TypeJSON, value)
	}
	if tuo.mutation.QuotaCleared() {
		_spec.ClearField(tenant.FieldQuota, field.TypeJSON)
	}
	if value, ok := tuo.mutation.ExpiresAt(); ok {
		_spec.SetField(tenant.FieldExpiresAt, field.TypeTime, value)
	}
	if tuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(tenant.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.UsersTable,
			Columns: []string{tenant.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TicketsTable,
			Columns: []string{tenant.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ServiceCatalogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedServiceCatalogsIDs(); len(nodes) > 0 && !tuo.mutation.ServiceCatalogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ServiceCatalogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceCatalogsTable,
			Columns: []string{tenant.ServiceCatalogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedServiceRequestsIDs(); len(nodes) > 0 && !tuo.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ServiceRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.ServiceRequestsTable,
			Columns: []string{tenant.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !tuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SubscriptionsTable,
			Columns: []string{tenant.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
