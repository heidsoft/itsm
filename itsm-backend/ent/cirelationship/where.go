// Code generated by ent, DO NOT EDIT.

package cirelationship

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldID, id))
}

// SourceCiID applies equality check predicate on the "source_ci_id" field. It's identical to SourceCiIDEQ.
func SourceCiID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldSourceCiID, v))
}

// TargetCiID applies equality check predicate on the "target_ci_id" field. It's identical to TargetCiIDEQ.
func TargetCiID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTargetCiID, v))
}

// RelationshipTypeID applies equality check predicate on the "relationship_type_id" field. It's identical to RelationshipTypeIDEQ.
func RelationshipTypeID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldRelationshipTypeID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldStatus, v))
}

// EffectiveFrom applies equality check predicate on the "effective_from" field. It's identical to EffectiveFromEQ.
func EffectiveFrom(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveTo applies equality check predicate on the "effective_to" field. It's identical to EffectiveToEQ.
func EffectiveTo(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldEffectiveTo, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// SourceCiIDEQ applies the EQ predicate on the "source_ci_id" field.
func SourceCiIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldSourceCiID, v))
}

// SourceCiIDNEQ applies the NEQ predicate on the "source_ci_id" field.
func SourceCiIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldSourceCiID, v))
}

// SourceCiIDIn applies the In predicate on the "source_ci_id" field.
func SourceCiIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldSourceCiID, vs...))
}

// SourceCiIDNotIn applies the NotIn predicate on the "source_ci_id" field.
func SourceCiIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldSourceCiID, vs...))
}

// TargetCiIDEQ applies the EQ predicate on the "target_ci_id" field.
func TargetCiIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTargetCiID, v))
}

// TargetCiIDNEQ applies the NEQ predicate on the "target_ci_id" field.
func TargetCiIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldTargetCiID, v))
}

// TargetCiIDIn applies the In predicate on the "target_ci_id" field.
func TargetCiIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldTargetCiID, vs...))
}

// TargetCiIDNotIn applies the NotIn predicate on the "target_ci_id" field.
func TargetCiIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldTargetCiID, vs...))
}

// RelationshipTypeIDEQ applies the EQ predicate on the "relationship_type_id" field.
func RelationshipTypeIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDNEQ applies the NEQ predicate on the "relationship_type_id" field.
func RelationshipTypeIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDIn applies the In predicate on the "relationship_type_id" field.
func RelationshipTypeIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldRelationshipTypeID, vs...))
}

// RelationshipTypeIDNotIn applies the NotIn predicate on the "relationship_type_id" field.
func RelationshipTypeIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldRelationshipTypeID, vs...))
}

// PropertiesIsNil applies the IsNil predicate on the "properties" field.
func PropertiesIsNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIsNull(FieldProperties))
}

// PropertiesNotNil applies the NotNil predicate on the "properties" field.
func PropertiesNotNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotNull(FieldProperties))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldContainsFold(FieldStatus, v))
}

// EffectiveFromEQ applies the EQ predicate on the "effective_from" field.
func EffectiveFromEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldEffectiveFrom, v))
}

// EffectiveFromNEQ applies the NEQ predicate on the "effective_from" field.
func EffectiveFromNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldEffectiveFrom, v))
}

// EffectiveFromIn applies the In predicate on the "effective_from" field.
func EffectiveFromIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromNotIn applies the NotIn predicate on the "effective_from" field.
func EffectiveFromNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldEffectiveFrom, vs...))
}

// EffectiveFromGT applies the GT predicate on the "effective_from" field.
func EffectiveFromGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldEffectiveFrom, v))
}

// EffectiveFromGTE applies the GTE predicate on the "effective_from" field.
func EffectiveFromGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldEffectiveFrom, v))
}

// EffectiveFromLT applies the LT predicate on the "effective_from" field.
func EffectiveFromLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldEffectiveFrom, v))
}

// EffectiveFromLTE applies the LTE predicate on the "effective_from" field.
func EffectiveFromLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldEffectiveFrom, v))
}

// EffectiveToEQ applies the EQ predicate on the "effective_to" field.
func EffectiveToEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldEffectiveTo, v))
}

// EffectiveToNEQ applies the NEQ predicate on the "effective_to" field.
func EffectiveToNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldEffectiveTo, v))
}

// EffectiveToIn applies the In predicate on the "effective_to" field.
func EffectiveToIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldEffectiveTo, vs...))
}

// EffectiveToNotIn applies the NotIn predicate on the "effective_to" field.
func EffectiveToNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldEffectiveTo, vs...))
}

// EffectiveToGT applies the GT predicate on the "effective_to" field.
func EffectiveToGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldEffectiveTo, v))
}

// EffectiveToGTE applies the GTE predicate on the "effective_to" field.
func EffectiveToGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldEffectiveTo, v))
}

// EffectiveToLT applies the LT predicate on the "effective_to" field.
func EffectiveToLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldEffectiveTo, v))
}

// EffectiveToLTE applies the LTE predicate on the "effective_to" field.
func EffectiveToLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldEffectiveTo, v))
}

// EffectiveToIsNil applies the IsNil predicate on the "effective_to" field.
func EffectiveToIsNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIsNull(FieldEffectiveTo))
}

// EffectiveToNotNil applies the NotNil predicate on the "effective_to" field.
func EffectiveToNotNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotNull(FieldEffectiveTo))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldTenantID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSourceCi applies the HasEdge predicate on the "source_ci" edge.
func HasSourceCi() predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceCiTable, SourceCiColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceCiWith applies the HasEdge predicate on the "source_ci" edge with a given conditions (other predicates).
func HasSourceCiWith(preds ...predicate.ConfigurationItem) predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := newSourceCiStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetCi applies the HasEdge predicate on the "target_ci" edge.
func HasTargetCi() predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TargetCiTable, TargetCiColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetCiWith applies the HasEdge predicate on the "target_ci" edge with a given conditions (other predicates).
func HasTargetCiWith(preds ...predicate.ConfigurationItem) predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := newTargetCiStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelationshipType applies the HasEdge predicate on the "relationship_type" edge.
func HasRelationshipType() predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RelationshipTypeTable, RelationshipTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationshipTypeWith applies the HasEdge predicate on the "relationship_type" edge with a given conditions (other predicates).
func HasRelationshipTypeWith(preds ...predicate.CIRelationshipType) predicate.CIRelationship {
	return predicate.CIRelationship(func(s *sql.Selector) {
		step := newRelationshipTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.NotPredicates(p))
}
