// Code generated by ent, DO NOT EDIT.

package cirelationship

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldID, id))
}

// SourceCiID applies equality check predicate on the "source_ci_id" field. It's identical to SourceCiIDEQ.
func SourceCiID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldSourceCiID, v))
}

// TargetCiID applies equality check predicate on the "target_ci_id" field. It's identical to TargetCiIDEQ.
func TargetCiID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTargetCiID, v))
}

// RelationshipTypeID applies equality check predicate on the "relationship_type_id" field. It's identical to RelationshipTypeIDEQ.
func RelationshipTypeID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldRelationshipTypeID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldDescription, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// SourceCiIDEQ applies the EQ predicate on the "source_ci_id" field.
func SourceCiIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldSourceCiID, v))
}

// SourceCiIDNEQ applies the NEQ predicate on the "source_ci_id" field.
func SourceCiIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldSourceCiID, v))
}

// SourceCiIDIn applies the In predicate on the "source_ci_id" field.
func SourceCiIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldSourceCiID, vs...))
}

// SourceCiIDNotIn applies the NotIn predicate on the "source_ci_id" field.
func SourceCiIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldSourceCiID, vs...))
}

// SourceCiIDGT applies the GT predicate on the "source_ci_id" field.
func SourceCiIDGT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldSourceCiID, v))
}

// SourceCiIDGTE applies the GTE predicate on the "source_ci_id" field.
func SourceCiIDGTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldSourceCiID, v))
}

// SourceCiIDLT applies the LT predicate on the "source_ci_id" field.
func SourceCiIDLT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldSourceCiID, v))
}

// SourceCiIDLTE applies the LTE predicate on the "source_ci_id" field.
func SourceCiIDLTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldSourceCiID, v))
}

// TargetCiIDEQ applies the EQ predicate on the "target_ci_id" field.
func TargetCiIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTargetCiID, v))
}

// TargetCiIDNEQ applies the NEQ predicate on the "target_ci_id" field.
func TargetCiIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldTargetCiID, v))
}

// TargetCiIDIn applies the In predicate on the "target_ci_id" field.
func TargetCiIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldTargetCiID, vs...))
}

// TargetCiIDNotIn applies the NotIn predicate on the "target_ci_id" field.
func TargetCiIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldTargetCiID, vs...))
}

// TargetCiIDGT applies the GT predicate on the "target_ci_id" field.
func TargetCiIDGT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldTargetCiID, v))
}

// TargetCiIDGTE applies the GTE predicate on the "target_ci_id" field.
func TargetCiIDGTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldTargetCiID, v))
}

// TargetCiIDLT applies the LT predicate on the "target_ci_id" field.
func TargetCiIDLT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldTargetCiID, v))
}

// TargetCiIDLTE applies the LTE predicate on the "target_ci_id" field.
func TargetCiIDLTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldTargetCiID, v))
}

// RelationshipTypeIDEQ applies the EQ predicate on the "relationship_type_id" field.
func RelationshipTypeIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDNEQ applies the NEQ predicate on the "relationship_type_id" field.
func RelationshipTypeIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDIn applies the In predicate on the "relationship_type_id" field.
func RelationshipTypeIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldRelationshipTypeID, vs...))
}

// RelationshipTypeIDNotIn applies the NotIn predicate on the "relationship_type_id" field.
func RelationshipTypeIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldRelationshipTypeID, vs...))
}

// RelationshipTypeIDGT applies the GT predicate on the "relationship_type_id" field.
func RelationshipTypeIDGT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDGTE applies the GTE predicate on the "relationship_type_id" field.
func RelationshipTypeIDGTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDLT applies the LT predicate on the "relationship_type_id" field.
func RelationshipTypeIDLT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldRelationshipTypeID, v))
}

// RelationshipTypeIDLTE applies the LTE predicate on the "relationship_type_id" field.
func RelationshipTypeIDLTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldRelationshipTypeID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldContainsFold(FieldDescription, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CIRelationship {
	return predicate.CIRelationship(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIRelationship) predicate.CIRelationship {
	return predicate.CIRelationship(sql.NotPredicates(p))
}
