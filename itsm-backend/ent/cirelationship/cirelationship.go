// Code generated by ent, DO NOT EDIT.

package cirelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cirelationship type in the database.
	Label = "ci_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceCiID holds the string denoting the source_ci_id field in the database.
	FieldSourceCiID = "source_ci_id"
	// FieldTargetCiID holds the string denoting the target_ci_id field in the database.
	FieldTargetCiID = "target_ci_id"
	// FieldRelationshipTypeID holds the string denoting the relationship_type_id field in the database.
	FieldRelationshipTypeID = "relationship_type_id"
	// FieldProperties holds the string denoting the properties field in the database.
	FieldProperties = "properties"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEffectiveFrom holds the string denoting the effective_from field in the database.
	FieldEffectiveFrom = "effective_from"
	// FieldEffectiveTo holds the string denoting the effective_to field in the database.
	FieldEffectiveTo = "effective_to"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeSourceCi holds the string denoting the source_ci edge name in mutations.
	EdgeSourceCi = "source_ci"
	// EdgeTargetCi holds the string denoting the target_ci edge name in mutations.
	EdgeTargetCi = "target_ci"
	// EdgeRelationshipType holds the string denoting the relationship_type edge name in mutations.
	EdgeRelationshipType = "relationship_type"
	// Table holds the table name of the cirelationship in the database.
	Table = "ci_relationships"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "ci_relationships"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// SourceCiTable is the table that holds the source_ci relation/edge.
	SourceCiTable = "ci_relationships"
	// SourceCiInverseTable is the table name for the ConfigurationItem entity.
	// It exists in this package in order to avoid circular dependency with the "configurationitem" package.
	SourceCiInverseTable = "configuration_items"
	// SourceCiColumn is the table column denoting the source_ci relation/edge.
	SourceCiColumn = "source_ci_id"
	// TargetCiTable is the table that holds the target_ci relation/edge.
	TargetCiTable = "ci_relationships"
	// TargetCiInverseTable is the table name for the ConfigurationItem entity.
	// It exists in this package in order to avoid circular dependency with the "configurationitem" package.
	TargetCiInverseTable = "configuration_items"
	// TargetCiColumn is the table column denoting the target_ci relation/edge.
	TargetCiColumn = "target_ci_id"
	// RelationshipTypeTable is the table that holds the relationship_type relation/edge.
	RelationshipTypeTable = "ci_relationships"
	// RelationshipTypeInverseTable is the table name for the CIRelationshipType entity.
	// It exists in this package in order to avoid circular dependency with the "cirelationshiptype" package.
	RelationshipTypeInverseTable = "ci_relationship_types"
	// RelationshipTypeColumn is the table column denoting the relationship_type relation/edge.
	RelationshipTypeColumn = "relationship_type_id"
)

// Columns holds all SQL columns for cirelationship fields.
var Columns = []string{
	FieldID,
	FieldSourceCiID,
	FieldTargetCiID,
	FieldRelationshipTypeID,
	FieldProperties,
	FieldStatus,
	FieldEffectiveFrom,
	FieldEffectiveTo,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultEffectiveFrom holds the default value on creation for the "effective_from" field.
	DefaultEffectiveFrom func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CIRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceCiID orders the results by the source_ci_id field.
func BySourceCiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceCiID, opts...).ToFunc()
}

// ByTargetCiID orders the results by the target_ci_id field.
func ByTargetCiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetCiID, opts...).ToFunc()
}

// ByRelationshipTypeID orders the results by the relationship_type_id field.
func ByRelationshipTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationshipTypeID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEffectiveFrom orders the results by the effective_from field.
func ByEffectiveFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveFrom, opts...).ToFunc()
}

// ByEffectiveTo orders the results by the effective_to field.
func ByEffectiveTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffectiveTo, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// BySourceCiField orders the results by source_ci field.
func BySourceCiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSourceCiStep(), sql.OrderByField(field, opts...))
	}
}

// ByTargetCiField orders the results by target_ci field.
func ByTargetCiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetCiStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelationshipTypeField orders the results by relationship_type field.
func ByRelationshipTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newSourceCiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SourceCiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SourceCiTable, SourceCiColumn),
	)
}
func newTargetCiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetCiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TargetCiTable, TargetCiColumn),
	)
}
func newRelationshipTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RelationshipTypeTable, RelationshipTypeColumn),
	)
}
