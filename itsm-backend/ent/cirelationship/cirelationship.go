// Code generated by ent, DO NOT EDIT.

package cirelationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cirelationship type in the database.
	Label = "ci_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceCiID holds the string denoting the source_ci_id field in the database.
	FieldSourceCiID = "source_ci_id"
	// FieldTargetCiID holds the string denoting the target_ci_id field in the database.
	FieldTargetCiID = "target_ci_id"
	// FieldRelationshipTypeID holds the string denoting the relationship_type_id field in the database.
	FieldRelationshipTypeID = "relationship_type_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the cirelationship in the database.
	Table = "ci_relationships"
)

// Columns holds all SQL columns for cirelationship fields.
var Columns = []string{
	FieldID,
	FieldSourceCiID,
	FieldTargetCiID,
	FieldRelationshipTypeID,
	FieldDescription,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SourceCiIDValidator is a validator for the "source_ci_id" field. It is called by the builders before save.
	SourceCiIDValidator func(int) error
	// TargetCiIDValidator is a validator for the "target_ci_id" field. It is called by the builders before save.
	TargetCiIDValidator func(int) error
	// RelationshipTypeIDValidator is a validator for the "relationship_type_id" field. It is called by the builders before save.
	RelationshipTypeIDValidator func(int) error
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CIRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySourceCiID orders the results by the source_ci_id field.
func BySourceCiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceCiID, opts...).ToFunc()
}

// ByTargetCiID orders the results by the target_ci_id field.
func ByTargetCiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetCiID, opts...).ToFunc()
}

// ByRelationshipTypeID orders the results by the relationship_type_id field.
func ByRelationshipTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelationshipTypeID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
