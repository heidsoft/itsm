// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CILifecycleStateDelete is the builder for deleting a CILifecycleState entity.
type CILifecycleStateDelete struct {
	config
	hooks    []Hook
	mutation *CILifecycleStateMutation
}

// Where appends a list predicates to the CILifecycleStateDelete builder.
func (clsd *CILifecycleStateDelete) Where(ps ...predicate.CILifecycleState) *CILifecycleStateDelete {
	clsd.mutation.Where(ps...)
	return clsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (clsd *CILifecycleStateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, clsd.sqlExec, clsd.mutation, clsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (clsd *CILifecycleStateDelete) ExecX(ctx context.Context) int {
	n, err := clsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (clsd *CILifecycleStateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cilifecyclestate.Table, sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt))
	if ps := clsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, clsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	clsd.mutation.done = true
	return affected, err
}

// CILifecycleStateDeleteOne is the builder for deleting a single CILifecycleState entity.
type CILifecycleStateDeleteOne struct {
	clsd *CILifecycleStateDelete
}

// Where appends a list predicates to the CILifecycleStateDelete builder.
func (clsdo *CILifecycleStateDeleteOne) Where(ps ...predicate.CILifecycleState) *CILifecycleStateDeleteOne {
	clsdo.clsd.mutation.Where(ps...)
	return clsdo
}

// Exec executes the deletion query.
func (clsdo *CILifecycleStateDeleteOne) Exec(ctx context.Context) error {
	n, err := clsdo.clsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cilifecyclestate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (clsdo *CILifecycleStateDeleteOne) ExecX(ctx context.Context) {
	if err := clsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
