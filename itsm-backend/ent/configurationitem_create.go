// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigurationItemCreate is the builder for creating a ConfigurationItem entity.
type ConfigurationItemCreate struct {
	config
	mutation *ConfigurationItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cic *ConfigurationItemCreate) SetName(s string) *ConfigurationItemCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetDisplayName sets the "display_name" field.
func (cic *ConfigurationItemCreate) SetDisplayName(s string) *ConfigurationItemCreate {
	cic.mutation.SetDisplayName(s)
	return cic
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableDisplayName(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetDisplayName(*s)
	}
	return cic
}

// SetDescription sets the "description" field.
func (cic *ConfigurationItemCreate) SetDescription(s string) *ConfigurationItemCreate {
	cic.mutation.SetDescription(s)
	return cic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableDescription(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetDescription(*s)
	}
	return cic
}

// SetCiTypeID sets the "ci_type_id" field.
func (cic *ConfigurationItemCreate) SetCiTypeID(i int) *ConfigurationItemCreate {
	cic.mutation.SetCiTypeID(i)
	return cic
}

// SetSerialNumber sets the "serial_number" field.
func (cic *ConfigurationItemCreate) SetSerialNumber(s string) *ConfigurationItemCreate {
	cic.mutation.SetSerialNumber(s)
	return cic
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableSerialNumber(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetSerialNumber(*s)
	}
	return cic
}

// SetAssetTag sets the "asset_tag" field.
func (cic *ConfigurationItemCreate) SetAssetTag(s string) *ConfigurationItemCreate {
	cic.mutation.SetAssetTag(s)
	return cic
}

// SetNillableAssetTag sets the "asset_tag" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableAssetTag(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetAssetTag(*s)
	}
	return cic
}

// SetStatus sets the "status" field.
func (cic *ConfigurationItemCreate) SetStatus(s string) *ConfigurationItemCreate {
	cic.mutation.SetStatus(s)
	return cic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableStatus(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetStatus(*s)
	}
	return cic
}

// SetLifecycleState sets the "lifecycle_state" field.
func (cic *ConfigurationItemCreate) SetLifecycleState(s string) *ConfigurationItemCreate {
	cic.mutation.SetLifecycleState(s)
	return cic
}

// SetNillableLifecycleState sets the "lifecycle_state" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableLifecycleState(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetLifecycleState(*s)
	}
	return cic
}

// SetBusinessService sets the "business_service" field.
func (cic *ConfigurationItemCreate) SetBusinessService(s string) *ConfigurationItemCreate {
	cic.mutation.SetBusinessService(s)
	return cic
}

// SetNillableBusinessService sets the "business_service" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableBusinessService(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetBusinessService(*s)
	}
	return cic
}

// SetOwner sets the "owner" field.
func (cic *ConfigurationItemCreate) SetOwner(s string) *ConfigurationItemCreate {
	cic.mutation.SetOwner(s)
	return cic
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableOwner(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetOwner(*s)
	}
	return cic
}

// SetEnvironment sets the "environment" field.
func (cic *ConfigurationItemCreate) SetEnvironment(s string) *ConfigurationItemCreate {
	cic.mutation.SetEnvironment(s)
	return cic
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableEnvironment(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetEnvironment(*s)
	}
	return cic
}

// SetLocation sets the "location" field.
func (cic *ConfigurationItemCreate) SetLocation(s string) *ConfigurationItemCreate {
	cic.mutation.SetLocation(s)
	return cic
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableLocation(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetLocation(*s)
	}
	return cic
}

// SetAttributes sets the "attributes" field.
func (cic *ConfigurationItemCreate) SetAttributes(m map[string]interface{}) *ConfigurationItemCreate {
	cic.mutation.SetAttributes(m)
	return cic
}

// SetMonitoringData sets the "monitoring_data" field.
func (cic *ConfigurationItemCreate) SetMonitoringData(m map[string]interface{}) *ConfigurationItemCreate {
	cic.mutation.SetMonitoringData(m)
	return cic
}

// SetDiscoverySource sets the "discovery_source" field.
func (cic *ConfigurationItemCreate) SetDiscoverySource(m map[string]interface{}) *ConfigurationItemCreate {
	cic.mutation.SetDiscoverySource(m)
	return cic
}

// SetLastDiscovered sets the "last_discovered" field.
func (cic *ConfigurationItemCreate) SetLastDiscovered(t time.Time) *ConfigurationItemCreate {
	cic.mutation.SetLastDiscovered(t)
	return cic
}

// SetNillableLastDiscovered sets the "last_discovered" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableLastDiscovered(t *time.Time) *ConfigurationItemCreate {
	if t != nil {
		cic.SetLastDiscovered(*t)
	}
	return cic
}

// SetVersion sets the "version" field.
func (cic *ConfigurationItemCreate) SetVersion(s string) *ConfigurationItemCreate {
	cic.mutation.SetVersion(s)
	return cic
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableVersion(s *string) *ConfigurationItemCreate {
	if s != nil {
		cic.SetVersion(*s)
	}
	return cic
}

// SetTenantID sets the "tenant_id" field.
func (cic *ConfigurationItemCreate) SetTenantID(i int) *ConfigurationItemCreate {
	cic.mutation.SetTenantID(i)
	return cic
}

// SetCreatedAt sets the "created_at" field.
func (cic *ConfigurationItemCreate) SetCreatedAt(t time.Time) *ConfigurationItemCreate {
	cic.mutation.SetCreatedAt(t)
	return cic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableCreatedAt(t *time.Time) *ConfigurationItemCreate {
	if t != nil {
		cic.SetCreatedAt(*t)
	}
	return cic
}

// SetUpdatedAt sets the "updated_at" field.
func (cic *ConfigurationItemCreate) SetUpdatedAt(t time.Time) *ConfigurationItemCreate {
	cic.mutation.SetUpdatedAt(t)
	return cic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cic *ConfigurationItemCreate) SetNillableUpdatedAt(t *time.Time) *ConfigurationItemCreate {
	if t != nil {
		cic.SetUpdatedAt(*t)
	}
	return cic
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cic *ConfigurationItemCreate) SetTenant(t *Tenant) *ConfigurationItemCreate {
	return cic.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (cic *ConfigurationItemCreate) SetCiType(c *CIType) *ConfigurationItemCreate {
	return cic.SetCiTypeID(c.ID)
}

// AddOutgoingRelationshipIDs adds the "outgoing_relationships" edge to the CIRelationship entity by IDs.
func (cic *ConfigurationItemCreate) AddOutgoingRelationshipIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddOutgoingRelationshipIDs(ids...)
	return cic
}

// AddOutgoingRelationships adds the "outgoing_relationships" edges to the CIRelationship entity.
func (cic *ConfigurationItemCreate) AddOutgoingRelationships(c ...*CIRelationship) *ConfigurationItemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddOutgoingRelationshipIDs(ids...)
}

// AddIncomingRelationshipIDs adds the "incoming_relationships" edge to the CIRelationship entity by IDs.
func (cic *ConfigurationItemCreate) AddIncomingRelationshipIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddIncomingRelationshipIDs(ids...)
	return cic
}

// AddIncomingRelationships adds the "incoming_relationships" edges to the CIRelationship entity.
func (cic *ConfigurationItemCreate) AddIncomingRelationships(c ...*CIRelationship) *ConfigurationItemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddIncomingRelationshipIDs(ids...)
}

// AddLifecycleStateIDs adds the "lifecycle_states" edge to the CILifecycleState entity by IDs.
func (cic *ConfigurationItemCreate) AddLifecycleStateIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddLifecycleStateIDs(ids...)
	return cic
}

// AddLifecycleStates adds the "lifecycle_states" edges to the CILifecycleState entity.
func (cic *ConfigurationItemCreate) AddLifecycleStates(c ...*CILifecycleState) *ConfigurationItemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddLifecycleStateIDs(ids...)
}

// AddChangeRecordIDs adds the "change_records" edge to the CIChangeRecord entity by IDs.
func (cic *ConfigurationItemCreate) AddChangeRecordIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddChangeRecordIDs(ids...)
	return cic
}

// AddChangeRecords adds the "change_records" edges to the CIChangeRecord entity.
func (cic *ConfigurationItemCreate) AddChangeRecords(c ...*CIChangeRecord) *ConfigurationItemCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cic.AddChangeRecordIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Ticket entity by IDs.
func (cic *ConfigurationItemCreate) AddIncidentIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddIncidentIDs(ids...)
	return cic
}

// AddIncidents adds the "incidents" edges to the Ticket entity.
func (cic *ConfigurationItemCreate) AddIncidents(t ...*Ticket) *ConfigurationItemCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cic.AddIncidentIDs(ids...)
}

// AddChangeIDs adds the "changes" edge to the Ticket entity by IDs.
func (cic *ConfigurationItemCreate) AddChangeIDs(ids ...int) *ConfigurationItemCreate {
	cic.mutation.AddChangeIDs(ids...)
	return cic
}

// AddChanges adds the "changes" edges to the Ticket entity.
func (cic *ConfigurationItemCreate) AddChanges(t ...*Ticket) *ConfigurationItemCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cic.AddChangeIDs(ids...)
}

// Mutation returns the ConfigurationItemMutation object of the builder.
func (cic *ConfigurationItemCreate) Mutation() *ConfigurationItemMutation {
	return cic.mutation
}

// Save creates the ConfigurationItem in the database.
func (cic *ConfigurationItemCreate) Save(ctx context.Context) (*ConfigurationItem, error) {
	cic.defaults()
	return withHooks(ctx, cic.sqlSave, cic.mutation, cic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cic *ConfigurationItemCreate) SaveX(ctx context.Context) *ConfigurationItem {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *ConfigurationItemCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *ConfigurationItemCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cic *ConfigurationItemCreate) defaults() {
	if _, ok := cic.mutation.Status(); !ok {
		v := configurationitem.DefaultStatus
		cic.mutation.SetStatus(v)
	}
	if _, ok := cic.mutation.LifecycleState(); !ok {
		v := configurationitem.DefaultLifecycleState
		cic.mutation.SetLifecycleState(v)
	}
	if _, ok := cic.mutation.Version(); !ok {
		v := configurationitem.DefaultVersion
		cic.mutation.SetVersion(v)
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		v := configurationitem.DefaultCreatedAt()
		cic.mutation.SetCreatedAt(v)
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		v := configurationitem.DefaultUpdatedAt()
		cic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *ConfigurationItemCreate) check() error {
	if _, ok := cic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ConfigurationItem.name"`)}
	}
	if v, ok := cic.mutation.Name(); ok {
		if err := configurationitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.name": %w`, err)}
		}
	}
	if _, ok := cic.mutation.CiTypeID(); !ok {
		return &ValidationError{Name: "ci_type_id", err: errors.New(`ent: missing required field "ConfigurationItem.ci_type_id"`)}
	}
	if _, ok := cic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ConfigurationItem.status"`)}
	}
	if _, ok := cic.mutation.LifecycleState(); !ok {
		return &ValidationError{Name: "lifecycle_state", err: errors.New(`ent: missing required field "ConfigurationItem.lifecycle_state"`)}
	}
	if _, ok := cic.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ConfigurationItem.version"`)}
	}
	if _, ok := cic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ConfigurationItem.tenant_id"`)}
	}
	if _, ok := cic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConfigurationItem.created_at"`)}
	}
	if _, ok := cic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ConfigurationItem.updated_at"`)}
	}
	if len(cic.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ConfigurationItem.tenant"`)}
	}
	if len(cic.mutation.CiTypeIDs()) == 0 {
		return &ValidationError{Name: "ci_type", err: errors.New(`ent: missing required edge "ConfigurationItem.ci_type"`)}
	}
	return nil
}

func (cic *ConfigurationItemCreate) sqlSave(ctx context.Context) (*ConfigurationItem, error) {
	if err := cic.check(); err != nil {
		return nil, err
	}
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cic.mutation.id = &_node.ID
	cic.mutation.done = true
	return _node, nil
}

func (cic *ConfigurationItemCreate) createSpec() (*ConfigurationItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ConfigurationItem{config: cic.config}
		_spec = sqlgraph.NewCreateSpec(configurationitem.Table, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	)
	if value, ok := cic.mutation.Name(); ok {
		_spec.SetField(configurationitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cic.mutation.DisplayName(); ok {
		_spec.SetField(configurationitem.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cic.mutation.Description(); ok {
		_spec.SetField(configurationitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cic.mutation.SerialNumber(); ok {
		_spec.SetField(configurationitem.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := cic.mutation.AssetTag(); ok {
		_spec.SetField(configurationitem.FieldAssetTag, field.TypeString, value)
		_node.AssetTag = value
	}
	if value, ok := cic.mutation.Status(); ok {
		_spec.SetField(configurationitem.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cic.mutation.LifecycleState(); ok {
		_spec.SetField(configurationitem.FieldLifecycleState, field.TypeString, value)
		_node.LifecycleState = value
	}
	if value, ok := cic.mutation.BusinessService(); ok {
		_spec.SetField(configurationitem.FieldBusinessService, field.TypeString, value)
		_node.BusinessService = value
	}
	if value, ok := cic.mutation.Owner(); ok {
		_spec.SetField(configurationitem.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := cic.mutation.Environment(); ok {
		_spec.SetField(configurationitem.FieldEnvironment, field.TypeString, value)
		_node.Environment = value
	}
	if value, ok := cic.mutation.Location(); ok {
		_spec.SetField(configurationitem.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := cic.mutation.Attributes(); ok {
		_spec.SetField(configurationitem.FieldAttributes, field.TypeJSON, value)
		_node.Attributes = value
	}
	if value, ok := cic.mutation.MonitoringData(); ok {
		_spec.SetField(configurationitem.FieldMonitoringData, field.TypeJSON, value)
		_node.MonitoringData = value
	}
	if value, ok := cic.mutation.DiscoverySource(); ok {
		_spec.SetField(configurationitem.FieldDiscoverySource, field.TypeJSON, value)
		_node.DiscoverySource = value
	}
	if value, ok := cic.mutation.LastDiscovered(); ok {
		_spec.SetField(configurationitem.FieldLastDiscovered, field.TypeTime, value)
		_node.LastDiscovered = value
	}
	if value, ok := cic.mutation.Version(); ok {
		_spec.SetField(configurationitem.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := cic.mutation.CreatedAt(); ok {
		_spec.SetField(configurationitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cic.mutation.UpdatedAt(); ok {
		_spec.SetField(configurationitem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cic.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.TenantTable,
			Columns: []string{configurationitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.CiTypeTable,
			Columns: []string{configurationitem.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CiTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.OutgoingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.IncomingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.LifecycleStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.ChangeRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.ChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConfigurationItemCreateBulk is the builder for creating many ConfigurationItem entities in bulk.
type ConfigurationItemCreateBulk struct {
	config
	err      error
	builders []*ConfigurationItemCreate
}

// Save creates the ConfigurationItem entities in the database.
func (cicb *ConfigurationItemCreateBulk) Save(ctx context.Context) ([]*ConfigurationItem, error) {
	if cicb.err != nil {
		return nil, cicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*ConfigurationItem, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigurationItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *ConfigurationItemCreateBulk) SaveX(ctx context.Context) []*ConfigurationItem {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *ConfigurationItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *ConfigurationItemCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
