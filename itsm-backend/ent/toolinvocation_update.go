// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/conversation"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/toolinvocation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolInvocationUpdate is the builder for updating ToolInvocation entities.
type ToolInvocationUpdate struct {
	config
	hooks    []Hook
	mutation *ToolInvocationMutation
}

// Where appends a list predicates to the ToolInvocationUpdate builder.
func (tiu *ToolInvocationUpdate) Where(ps ...predicate.ToolInvocation) *ToolInvocationUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetCreatedAt sets the "created_at" field.
func (tiu *ToolInvocationUpdate) SetCreatedAt(t time.Time) *ToolInvocationUpdate {
	tiu.mutation.SetCreatedAt(t)
	return tiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableCreatedAt(t *time.Time) *ToolInvocationUpdate {
	if t != nil {
		tiu.SetCreatedAt(*t)
	}
	return tiu
}

// SetConversationID sets the "conversation_id" field.
func (tiu *ToolInvocationUpdate) SetConversationID(i int) *ToolInvocationUpdate {
	tiu.mutation.SetConversationID(i)
	return tiu
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableConversationID(i *int) *ToolInvocationUpdate {
	if i != nil {
		tiu.SetConversationID(*i)
	}
	return tiu
}

// SetToolName sets the "tool_name" field.
func (tiu *ToolInvocationUpdate) SetToolName(s string) *ToolInvocationUpdate {
	tiu.mutation.SetToolName(s)
	return tiu
}

// SetNillableToolName sets the "tool_name" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableToolName(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetToolName(*s)
	}
	return tiu
}

// SetArguments sets the "arguments" field.
func (tiu *ToolInvocationUpdate) SetArguments(s string) *ToolInvocationUpdate {
	tiu.mutation.SetArguments(s)
	return tiu
}

// SetNillableArguments sets the "arguments" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableArguments(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetArguments(*s)
	}
	return tiu
}

// SetResult sets the "result" field.
func (tiu *ToolInvocationUpdate) SetResult(s string) *ToolInvocationUpdate {
	tiu.mutation.SetResult(s)
	return tiu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableResult(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetResult(*s)
	}
	return tiu
}

// ClearResult clears the value of the "result" field.
func (tiu *ToolInvocationUpdate) ClearResult() *ToolInvocationUpdate {
	tiu.mutation.ClearResult()
	return tiu
}

// SetStatus sets the "status" field.
func (tiu *ToolInvocationUpdate) SetStatus(s string) *ToolInvocationUpdate {
	tiu.mutation.SetStatus(s)
	return tiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableStatus(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetStatus(*s)
	}
	return tiu
}

// SetRequestID sets the "request_id" field.
func (tiu *ToolInvocationUpdate) SetRequestID(s string) *ToolInvocationUpdate {
	tiu.mutation.SetRequestID(s)
	return tiu
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableRequestID(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetRequestID(*s)
	}
	return tiu
}

// ClearRequestID clears the value of the "request_id" field.
func (tiu *ToolInvocationUpdate) ClearRequestID() *ToolInvocationUpdate {
	tiu.mutation.ClearRequestID()
	return tiu
}

// SetNeedsApproval sets the "needs_approval" field.
func (tiu *ToolInvocationUpdate) SetNeedsApproval(b bool) *ToolInvocationUpdate {
	tiu.mutation.SetNeedsApproval(b)
	return tiu
}

// SetNillableNeedsApproval sets the "needs_approval" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableNeedsApproval(b *bool) *ToolInvocationUpdate {
	if b != nil {
		tiu.SetNeedsApproval(*b)
	}
	return tiu
}

// SetApprovalState sets the "approval_state" field.
func (tiu *ToolInvocationUpdate) SetApprovalState(s string) *ToolInvocationUpdate {
	tiu.mutation.SetApprovalState(s)
	return tiu
}

// SetNillableApprovalState sets the "approval_state" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableApprovalState(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetApprovalState(*s)
	}
	return tiu
}

// SetApprovalReason sets the "approval_reason" field.
func (tiu *ToolInvocationUpdate) SetApprovalReason(s string) *ToolInvocationUpdate {
	tiu.mutation.SetApprovalReason(s)
	return tiu
}

// SetNillableApprovalReason sets the "approval_reason" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableApprovalReason(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetApprovalReason(*s)
	}
	return tiu
}

// SetApprovedBy sets the "approved_by" field.
func (tiu *ToolInvocationUpdate) SetApprovedBy(i int) *ToolInvocationUpdate {
	tiu.mutation.ResetApprovedBy()
	tiu.mutation.SetApprovedBy(i)
	return tiu
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableApprovedBy(i *int) *ToolInvocationUpdate {
	if i != nil {
		tiu.SetApprovedBy(*i)
	}
	return tiu
}

// AddApprovedBy adds i to the "approved_by" field.
func (tiu *ToolInvocationUpdate) AddApprovedBy(i int) *ToolInvocationUpdate {
	tiu.mutation.AddApprovedBy(i)
	return tiu
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (tiu *ToolInvocationUpdate) ClearApprovedBy() *ToolInvocationUpdate {
	tiu.mutation.ClearApprovedBy()
	return tiu
}

// SetApprovedAt sets the "approved_at" field.
func (tiu *ToolInvocationUpdate) SetApprovedAt(t time.Time) *ToolInvocationUpdate {
	tiu.mutation.SetApprovedAt(t)
	return tiu
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableApprovedAt(t *time.Time) *ToolInvocationUpdate {
	if t != nil {
		tiu.SetApprovedAt(*t)
	}
	return tiu
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (tiu *ToolInvocationUpdate) ClearApprovedAt() *ToolInvocationUpdate {
	tiu.mutation.ClearApprovedAt()
	return tiu
}

// SetDryRun sets the "dry_run" field.
func (tiu *ToolInvocationUpdate) SetDryRun(b bool) *ToolInvocationUpdate {
	tiu.mutation.SetDryRun(b)
	return tiu
}

// SetNillableDryRun sets the "dry_run" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableDryRun(b *bool) *ToolInvocationUpdate {
	if b != nil {
		tiu.SetDryRun(*b)
	}
	return tiu
}

// SetError sets the "error" field.
func (tiu *ToolInvocationUpdate) SetError(s string) *ToolInvocationUpdate {
	tiu.mutation.SetError(s)
	return tiu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tiu *ToolInvocationUpdate) SetNillableError(s *string) *ToolInvocationUpdate {
	if s != nil {
		tiu.SetError(*s)
	}
	return tiu
}

// ClearError clears the value of the "error" field.
func (tiu *ToolInvocationUpdate) ClearError() *ToolInvocationUpdate {
	tiu.mutation.ClearError()
	return tiu
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (tiu *ToolInvocationUpdate) SetConversation(c *Conversation) *ToolInvocationUpdate {
	return tiu.SetConversationID(c.ID)
}

// Mutation returns the ToolInvocationMutation object of the builder.
func (tiu *ToolInvocationUpdate) Mutation() *ToolInvocationMutation {
	return tiu.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (tiu *ToolInvocationUpdate) ClearConversation() *ToolInvocationUpdate {
	tiu.mutation.ClearConversation()
	return tiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *ToolInvocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *ToolInvocationUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *ToolInvocationUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *ToolInvocationUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiu *ToolInvocationUpdate) check() error {
	if tiu.mutation.ConversationCleared() && len(tiu.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolInvocation.conversation"`)
	}
	return nil
}

func (tiu *ToolInvocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(toolinvocation.Table, toolinvocation.Columns, sqlgraph.NewFieldSpec(toolinvocation.FieldID, field.TypeInt))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.CreatedAt(); ok {
		_spec.SetField(toolinvocation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiu.mutation.ToolName(); ok {
		_spec.SetField(toolinvocation.FieldToolName, field.TypeString, value)
	}
	if value, ok := tiu.mutation.Arguments(); ok {
		_spec.SetField(toolinvocation.FieldArguments, field.TypeString, value)
	}
	if value, ok := tiu.mutation.Result(); ok {
		_spec.SetField(toolinvocation.FieldResult, field.TypeString, value)
	}
	if tiu.mutation.ResultCleared() {
		_spec.ClearField(toolinvocation.FieldResult, field.TypeString)
	}
	if value, ok := tiu.mutation.Status(); ok {
		_spec.SetField(toolinvocation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tiu.mutation.RequestID(); ok {
		_spec.SetField(toolinvocation.FieldRequestID, field.TypeString, value)
	}
	if tiu.mutation.RequestIDCleared() {
		_spec.ClearField(toolinvocation.FieldRequestID, field.TypeString)
	}
	if value, ok := tiu.mutation.NeedsApproval(); ok {
		_spec.SetField(toolinvocation.FieldNeedsApproval, field.TypeBool, value)
	}
	if value, ok := tiu.mutation.ApprovalState(); ok {
		_spec.SetField(toolinvocation.FieldApprovalState, field.TypeString, value)
	}
	if value, ok := tiu.mutation.ApprovalReason(); ok {
		_spec.SetField(toolinvocation.FieldApprovalReason, field.TypeString, value)
	}
	if value, ok := tiu.mutation.ApprovedBy(); ok {
		_spec.SetField(toolinvocation.FieldApprovedBy, field.TypeInt, value)
	}
	if value, ok := tiu.mutation.AddedApprovedBy(); ok {
		_spec.AddField(toolinvocation.FieldApprovedBy, field.TypeInt, value)
	}
	if tiu.mutation.ApprovedByCleared() {
		_spec.ClearField(toolinvocation.FieldApprovedBy, field.TypeInt)
	}
	if value, ok := tiu.mutation.ApprovedAt(); ok {
		_spec.SetField(toolinvocation.FieldApprovedAt, field.TypeTime, value)
	}
	if tiu.mutation.ApprovedAtCleared() {
		_spec.ClearField(toolinvocation.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := tiu.mutation.DryRun(); ok {
		_spec.SetField(toolinvocation.FieldDryRun, field.TypeBool, value)
	}
	if value, ok := tiu.mutation.Error(); ok {
		_spec.SetField(toolinvocation.FieldError, field.TypeString, value)
	}
	if tiu.mutation.ErrorCleared() {
		_spec.ClearField(toolinvocation.FieldError, field.TypeString)
	}
	if tiu.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolinvocation.ConversationTable,
			Columns: []string{toolinvocation.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolinvocation.ConversationTable,
			Columns: []string{toolinvocation.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// ToolInvocationUpdateOne is the builder for updating a single ToolInvocation entity.
type ToolInvocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToolInvocationMutation
}

// SetCreatedAt sets the "created_at" field.
func (tiuo *ToolInvocationUpdateOne) SetCreatedAt(t time.Time) *ToolInvocationUpdateOne {
	tiuo.mutation.SetCreatedAt(t)
	return tiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableCreatedAt(t *time.Time) *ToolInvocationUpdateOne {
	if t != nil {
		tiuo.SetCreatedAt(*t)
	}
	return tiuo
}

// SetConversationID sets the "conversation_id" field.
func (tiuo *ToolInvocationUpdateOne) SetConversationID(i int) *ToolInvocationUpdateOne {
	tiuo.mutation.SetConversationID(i)
	return tiuo
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableConversationID(i *int) *ToolInvocationUpdateOne {
	if i != nil {
		tiuo.SetConversationID(*i)
	}
	return tiuo
}

// SetToolName sets the "tool_name" field.
func (tiuo *ToolInvocationUpdateOne) SetToolName(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetToolName(s)
	return tiuo
}

// SetNillableToolName sets the "tool_name" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableToolName(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetToolName(*s)
	}
	return tiuo
}

// SetArguments sets the "arguments" field.
func (tiuo *ToolInvocationUpdateOne) SetArguments(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetArguments(s)
	return tiuo
}

// SetNillableArguments sets the "arguments" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableArguments(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetArguments(*s)
	}
	return tiuo
}

// SetResult sets the "result" field.
func (tiuo *ToolInvocationUpdateOne) SetResult(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetResult(s)
	return tiuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableResult(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetResult(*s)
	}
	return tiuo
}

// ClearResult clears the value of the "result" field.
func (tiuo *ToolInvocationUpdateOne) ClearResult() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearResult()
	return tiuo
}

// SetStatus sets the "status" field.
func (tiuo *ToolInvocationUpdateOne) SetStatus(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetStatus(s)
	return tiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableStatus(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetStatus(*s)
	}
	return tiuo
}

// SetRequestID sets the "request_id" field.
func (tiuo *ToolInvocationUpdateOne) SetRequestID(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetRequestID(s)
	return tiuo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableRequestID(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetRequestID(*s)
	}
	return tiuo
}

// ClearRequestID clears the value of the "request_id" field.
func (tiuo *ToolInvocationUpdateOne) ClearRequestID() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearRequestID()
	return tiuo
}

// SetNeedsApproval sets the "needs_approval" field.
func (tiuo *ToolInvocationUpdateOne) SetNeedsApproval(b bool) *ToolInvocationUpdateOne {
	tiuo.mutation.SetNeedsApproval(b)
	return tiuo
}

// SetNillableNeedsApproval sets the "needs_approval" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableNeedsApproval(b *bool) *ToolInvocationUpdateOne {
	if b != nil {
		tiuo.SetNeedsApproval(*b)
	}
	return tiuo
}

// SetApprovalState sets the "approval_state" field.
func (tiuo *ToolInvocationUpdateOne) SetApprovalState(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetApprovalState(s)
	return tiuo
}

// SetNillableApprovalState sets the "approval_state" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableApprovalState(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetApprovalState(*s)
	}
	return tiuo
}

// SetApprovalReason sets the "approval_reason" field.
func (tiuo *ToolInvocationUpdateOne) SetApprovalReason(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetApprovalReason(s)
	return tiuo
}

// SetNillableApprovalReason sets the "approval_reason" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableApprovalReason(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetApprovalReason(*s)
	}
	return tiuo
}

// SetApprovedBy sets the "approved_by" field.
func (tiuo *ToolInvocationUpdateOne) SetApprovedBy(i int) *ToolInvocationUpdateOne {
	tiuo.mutation.ResetApprovedBy()
	tiuo.mutation.SetApprovedBy(i)
	return tiuo
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableApprovedBy(i *int) *ToolInvocationUpdateOne {
	if i != nil {
		tiuo.SetApprovedBy(*i)
	}
	return tiuo
}

// AddApprovedBy adds i to the "approved_by" field.
func (tiuo *ToolInvocationUpdateOne) AddApprovedBy(i int) *ToolInvocationUpdateOne {
	tiuo.mutation.AddApprovedBy(i)
	return tiuo
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (tiuo *ToolInvocationUpdateOne) ClearApprovedBy() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearApprovedBy()
	return tiuo
}

// SetApprovedAt sets the "approved_at" field.
func (tiuo *ToolInvocationUpdateOne) SetApprovedAt(t time.Time) *ToolInvocationUpdateOne {
	tiuo.mutation.SetApprovedAt(t)
	return tiuo
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableApprovedAt(t *time.Time) *ToolInvocationUpdateOne {
	if t != nil {
		tiuo.SetApprovedAt(*t)
	}
	return tiuo
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (tiuo *ToolInvocationUpdateOne) ClearApprovedAt() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearApprovedAt()
	return tiuo
}

// SetDryRun sets the "dry_run" field.
func (tiuo *ToolInvocationUpdateOne) SetDryRun(b bool) *ToolInvocationUpdateOne {
	tiuo.mutation.SetDryRun(b)
	return tiuo
}

// SetNillableDryRun sets the "dry_run" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableDryRun(b *bool) *ToolInvocationUpdateOne {
	if b != nil {
		tiuo.SetDryRun(*b)
	}
	return tiuo
}

// SetError sets the "error" field.
func (tiuo *ToolInvocationUpdateOne) SetError(s string) *ToolInvocationUpdateOne {
	tiuo.mutation.SetError(s)
	return tiuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tiuo *ToolInvocationUpdateOne) SetNillableError(s *string) *ToolInvocationUpdateOne {
	if s != nil {
		tiuo.SetError(*s)
	}
	return tiuo
}

// ClearError clears the value of the "error" field.
func (tiuo *ToolInvocationUpdateOne) ClearError() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearError()
	return tiuo
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (tiuo *ToolInvocationUpdateOne) SetConversation(c *Conversation) *ToolInvocationUpdateOne {
	return tiuo.SetConversationID(c.ID)
}

// Mutation returns the ToolInvocationMutation object of the builder.
func (tiuo *ToolInvocationUpdateOne) Mutation() *ToolInvocationMutation {
	return tiuo.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (tiuo *ToolInvocationUpdateOne) ClearConversation() *ToolInvocationUpdateOne {
	tiuo.mutation.ClearConversation()
	return tiuo
}

// Where appends a list predicates to the ToolInvocationUpdate builder.
func (tiuo *ToolInvocationUpdateOne) Where(ps ...predicate.ToolInvocation) *ToolInvocationUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *ToolInvocationUpdateOne) Select(field string, fields ...string) *ToolInvocationUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated ToolInvocation entity.
func (tiuo *ToolInvocationUpdateOne) Save(ctx context.Context) (*ToolInvocation, error) {
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *ToolInvocationUpdateOne) SaveX(ctx context.Context) *ToolInvocation {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *ToolInvocationUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *ToolInvocationUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiuo *ToolInvocationUpdateOne) check() error {
	if tiuo.mutation.ConversationCleared() && len(tiuo.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ToolInvocation.conversation"`)
	}
	return nil
}

func (tiuo *ToolInvocationUpdateOne) sqlSave(ctx context.Context) (_node *ToolInvocation, err error) {
	if err := tiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(toolinvocation.Table, toolinvocation.Columns, sqlgraph.NewFieldSpec(toolinvocation.FieldID, field.TypeInt))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ToolInvocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toolinvocation.FieldID)
		for _, f := range fields {
			if !toolinvocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != toolinvocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.CreatedAt(); ok {
		_spec.SetField(toolinvocation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiuo.mutation.ToolName(); ok {
		_spec.SetField(toolinvocation.FieldToolName, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.Arguments(); ok {
		_spec.SetField(toolinvocation.FieldArguments, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.Result(); ok {
		_spec.SetField(toolinvocation.FieldResult, field.TypeString, value)
	}
	if tiuo.mutation.ResultCleared() {
		_spec.ClearField(toolinvocation.FieldResult, field.TypeString)
	}
	if value, ok := tiuo.mutation.Status(); ok {
		_spec.SetField(toolinvocation.FieldStatus, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.RequestID(); ok {
		_spec.SetField(toolinvocation.FieldRequestID, field.TypeString, value)
	}
	if tiuo.mutation.RequestIDCleared() {
		_spec.ClearField(toolinvocation.FieldRequestID, field.TypeString)
	}
	if value, ok := tiuo.mutation.NeedsApproval(); ok {
		_spec.SetField(toolinvocation.FieldNeedsApproval, field.TypeBool, value)
	}
	if value, ok := tiuo.mutation.ApprovalState(); ok {
		_spec.SetField(toolinvocation.FieldApprovalState, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.ApprovalReason(); ok {
		_spec.SetField(toolinvocation.FieldApprovalReason, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.ApprovedBy(); ok {
		_spec.SetField(toolinvocation.FieldApprovedBy, field.TypeInt, value)
	}
	if value, ok := tiuo.mutation.AddedApprovedBy(); ok {
		_spec.AddField(toolinvocation.FieldApprovedBy, field.TypeInt, value)
	}
	if tiuo.mutation.ApprovedByCleared() {
		_spec.ClearField(toolinvocation.FieldApprovedBy, field.TypeInt)
	}
	if value, ok := tiuo.mutation.ApprovedAt(); ok {
		_spec.SetField(toolinvocation.FieldApprovedAt, field.TypeTime, value)
	}
	if tiuo.mutation.ApprovedAtCleared() {
		_spec.ClearField(toolinvocation.FieldApprovedAt, field.TypeTime)
	}
	if value, ok := tiuo.mutation.DryRun(); ok {
		_spec.SetField(toolinvocation.FieldDryRun, field.TypeBool, value)
	}
	if value, ok := tiuo.mutation.Error(); ok {
		_spec.SetField(toolinvocation.FieldError, field.TypeString, value)
	}
	if tiuo.mutation.ErrorCleared() {
		_spec.ClearField(toolinvocation.FieldError, field.TypeString)
	}
	if tiuo.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolinvocation.ConversationTable,
			Columns: []string{toolinvocation.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolinvocation.ConversationTable,
			Columns: []string{toolinvocation.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ToolInvocation{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toolinvocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
