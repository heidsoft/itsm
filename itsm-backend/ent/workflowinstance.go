// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/workflow"
	"itsm-backend/ent/workflowinstance"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkflowInstance is the model entity for the WorkflowInstance schema.
type WorkflowInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 实例状态
	Status string `json:"status,omitempty"`
	// 当前步骤
	CurrentStep string `json:"current_step,omitempty"`
	// 执行上下文
	Context []uint8 `json:"context,omitempty"`
	// 工作流ID
	WorkflowID int `json:"workflow_id,omitempty"`
	// 关联实体ID
	EntityID int `json:"entity_id,omitempty"`
	// 关联实体类型
	EntityType string `json:"entity_type,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 开始时间
	StartedAt time.Time `json:"started_at,omitempty"`
	// 完成时间
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowInstanceQuery when eager-loading is set.
	Edges                     WorkflowInstanceEdges `json:"edges"`
	ticket_workflow_instances *int
	selectValues              sql.SelectValues
}

// WorkflowInstanceEdges holds the relations/edges for other nodes in the graph.
type WorkflowInstanceEdges struct {
	// Workflow holds the value of the workflow edge.
	Workflow *Workflow `json:"workflow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkflowOrErr returns the Workflow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowInstanceEdges) WorkflowOrErr() (*Workflow, error) {
	if e.Workflow != nil {
		return e.Workflow, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflow.Label}
	}
	return nil, &NotLoadedError{edge: "workflow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowinstance.FieldContext:
			values[i] = new([]byte)
		case workflowinstance.FieldID, workflowinstance.FieldWorkflowID, workflowinstance.FieldEntityID, workflowinstance.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case workflowinstance.FieldStatus, workflowinstance.FieldCurrentStep, workflowinstance.FieldEntityType:
			values[i] = new(sql.NullString)
		case workflowinstance.FieldStartedAt, workflowinstance.FieldCompletedAt, workflowinstance.FieldCreatedAt, workflowinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workflowinstance.ForeignKeys[0]: // ticket_workflow_instances
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowInstance fields.
func (wi *WorkflowInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wi.ID = int(value.Int64)
		case workflowinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wi.Status = value.String
			}
		case workflowinstance.FieldCurrentStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_step", values[i])
			} else if value.Valid {
				wi.CurrentStep = value.String
			}
		case workflowinstance.FieldContext:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wi.Context); err != nil {
					return fmt.Errorf("unmarshal field context: %w", err)
				}
			}
		case workflowinstance.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				wi.WorkflowID = int(value.Int64)
			}
		case workflowinstance.FieldEntityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				wi.EntityID = int(value.Int64)
			}
		case workflowinstance.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				wi.EntityType = value.String
			}
		case workflowinstance.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				wi.TenantID = int(value.Int64)
			}
		case workflowinstance.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				wi.StartedAt = value.Time
			}
		case workflowinstance.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				wi.CompletedAt = value.Time
			}
		case workflowinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wi.CreatedAt = value.Time
			}
		case workflowinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wi.UpdatedAt = value.Time
			}
		case workflowinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ticket_workflow_instances", value)
			} else if value.Valid {
				wi.ticket_workflow_instances = new(int)
				*wi.ticket_workflow_instances = int(value.Int64)
			}
		default:
			wi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowInstance.
// This includes values selected through modifiers, order, etc.
func (wi *WorkflowInstance) Value(name string) (ent.Value, error) {
	return wi.selectValues.Get(name)
}

// QueryWorkflow queries the "workflow" edge of the WorkflowInstance entity.
func (wi *WorkflowInstance) QueryWorkflow() *WorkflowQuery {
	return NewWorkflowInstanceClient(wi.config).QueryWorkflow(wi)
}

// Update returns a builder for updating this WorkflowInstance.
// Note that you need to call WorkflowInstance.Unwrap() before calling this method if this WorkflowInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (wi *WorkflowInstance) Update() *WorkflowInstanceUpdateOne {
	return NewWorkflowInstanceClient(wi.config).UpdateOne(wi)
}

// Unwrap unwraps the WorkflowInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wi *WorkflowInstance) Unwrap() *WorkflowInstance {
	_tx, ok := wi.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowInstance is not a transactional entity")
	}
	wi.config.driver = _tx.drv
	return wi
}

// String implements the fmt.Stringer.
func (wi *WorkflowInstance) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wi.ID))
	builder.WriteString("status=")
	builder.WriteString(wi.Status)
	builder.WriteString(", ")
	builder.WriteString("current_step=")
	builder.WriteString(wi.CurrentStep)
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(fmt.Sprintf("%v", wi.Context))
	builder.WriteString(", ")
	builder.WriteString("workflow_id=")
	builder.WriteString(fmt.Sprintf("%v", wi.WorkflowID))
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(fmt.Sprintf("%v", wi.EntityID))
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(wi.EntityType)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", wi.TenantID))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(wi.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(wi.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowInstances is a parsable slice of WorkflowInstance.
type WorkflowInstances []*WorkflowInstance
