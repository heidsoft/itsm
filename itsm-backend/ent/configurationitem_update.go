// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigurationItemUpdate is the builder for updating ConfigurationItem entities.
type ConfigurationItemUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigurationItemMutation
}

// Where appends a list predicates to the ConfigurationItemUpdate builder.
func (ciu *ConfigurationItemUpdate) Where(ps ...predicate.ConfigurationItem) *ConfigurationItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetName sets the "name" field.
func (ciu *ConfigurationItemUpdate) SetName(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableName(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetName(*s)
	}
	return ciu
}

// SetDisplayName sets the "display_name" field.
func (ciu *ConfigurationItemUpdate) SetDisplayName(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetDisplayName(s)
	return ciu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableDisplayName(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetDisplayName(*s)
	}
	return ciu
}

// ClearDisplayName clears the value of the "display_name" field.
func (ciu *ConfigurationItemUpdate) ClearDisplayName() *ConfigurationItemUpdate {
	ciu.mutation.ClearDisplayName()
	return ciu
}

// SetDescription sets the "description" field.
func (ciu *ConfigurationItemUpdate) SetDescription(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetDescription(s)
	return ciu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableDescription(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetDescription(*s)
	}
	return ciu
}

// ClearDescription clears the value of the "description" field.
func (ciu *ConfigurationItemUpdate) ClearDescription() *ConfigurationItemUpdate {
	ciu.mutation.ClearDescription()
	return ciu
}

// SetCiTypeID sets the "ci_type_id" field.
func (ciu *ConfigurationItemUpdate) SetCiTypeID(i int) *ConfigurationItemUpdate {
	ciu.mutation.SetCiTypeID(i)
	return ciu
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableCiTypeID(i *int) *ConfigurationItemUpdate {
	if i != nil {
		ciu.SetCiTypeID(*i)
	}
	return ciu
}

// SetSerialNumber sets the "serial_number" field.
func (ciu *ConfigurationItemUpdate) SetSerialNumber(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetSerialNumber(s)
	return ciu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableSerialNumber(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetSerialNumber(*s)
	}
	return ciu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (ciu *ConfigurationItemUpdate) ClearSerialNumber() *ConfigurationItemUpdate {
	ciu.mutation.ClearSerialNumber()
	return ciu
}

// SetAssetTag sets the "asset_tag" field.
func (ciu *ConfigurationItemUpdate) SetAssetTag(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetAssetTag(s)
	return ciu
}

// SetNillableAssetTag sets the "asset_tag" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableAssetTag(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetAssetTag(*s)
	}
	return ciu
}

// ClearAssetTag clears the value of the "asset_tag" field.
func (ciu *ConfigurationItemUpdate) ClearAssetTag() *ConfigurationItemUpdate {
	ciu.mutation.ClearAssetTag()
	return ciu
}

// SetStatus sets the "status" field.
func (ciu *ConfigurationItemUpdate) SetStatus(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetStatus(s)
	return ciu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableStatus(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetStatus(*s)
	}
	return ciu
}

// SetLifecycleState sets the "lifecycle_state" field.
func (ciu *ConfigurationItemUpdate) SetLifecycleState(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetLifecycleState(s)
	return ciu
}

// SetNillableLifecycleState sets the "lifecycle_state" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableLifecycleState(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetLifecycleState(*s)
	}
	return ciu
}

// SetBusinessService sets the "business_service" field.
func (ciu *ConfigurationItemUpdate) SetBusinessService(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetBusinessService(s)
	return ciu
}

// SetNillableBusinessService sets the "business_service" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableBusinessService(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetBusinessService(*s)
	}
	return ciu
}

// ClearBusinessService clears the value of the "business_service" field.
func (ciu *ConfigurationItemUpdate) ClearBusinessService() *ConfigurationItemUpdate {
	ciu.mutation.ClearBusinessService()
	return ciu
}

// SetOwner sets the "owner" field.
func (ciu *ConfigurationItemUpdate) SetOwner(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetOwner(s)
	return ciu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableOwner(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetOwner(*s)
	}
	return ciu
}

// ClearOwner clears the value of the "owner" field.
func (ciu *ConfigurationItemUpdate) ClearOwner() *ConfigurationItemUpdate {
	ciu.mutation.ClearOwner()
	return ciu
}

// SetEnvironment sets the "environment" field.
func (ciu *ConfigurationItemUpdate) SetEnvironment(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetEnvironment(s)
	return ciu
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableEnvironment(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetEnvironment(*s)
	}
	return ciu
}

// ClearEnvironment clears the value of the "environment" field.
func (ciu *ConfigurationItemUpdate) ClearEnvironment() *ConfigurationItemUpdate {
	ciu.mutation.ClearEnvironment()
	return ciu
}

// SetLocation sets the "location" field.
func (ciu *ConfigurationItemUpdate) SetLocation(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetLocation(s)
	return ciu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableLocation(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetLocation(*s)
	}
	return ciu
}

// ClearLocation clears the value of the "location" field.
func (ciu *ConfigurationItemUpdate) ClearLocation() *ConfigurationItemUpdate {
	ciu.mutation.ClearLocation()
	return ciu
}

// SetAttributes sets the "attributes" field.
func (ciu *ConfigurationItemUpdate) SetAttributes(m map[string]interface{}) *ConfigurationItemUpdate {
	ciu.mutation.SetAttributes(m)
	return ciu
}

// ClearAttributes clears the value of the "attributes" field.
func (ciu *ConfigurationItemUpdate) ClearAttributes() *ConfigurationItemUpdate {
	ciu.mutation.ClearAttributes()
	return ciu
}

// SetMonitoringData sets the "monitoring_data" field.
func (ciu *ConfigurationItemUpdate) SetMonitoringData(m map[string]interface{}) *ConfigurationItemUpdate {
	ciu.mutation.SetMonitoringData(m)
	return ciu
}

// ClearMonitoringData clears the value of the "monitoring_data" field.
func (ciu *ConfigurationItemUpdate) ClearMonitoringData() *ConfigurationItemUpdate {
	ciu.mutation.ClearMonitoringData()
	return ciu
}

// SetDiscoverySource sets the "discovery_source" field.
func (ciu *ConfigurationItemUpdate) SetDiscoverySource(m map[string]interface{}) *ConfigurationItemUpdate {
	ciu.mutation.SetDiscoverySource(m)
	return ciu
}

// ClearDiscoverySource clears the value of the "discovery_source" field.
func (ciu *ConfigurationItemUpdate) ClearDiscoverySource() *ConfigurationItemUpdate {
	ciu.mutation.ClearDiscoverySource()
	return ciu
}

// SetLastDiscovered sets the "last_discovered" field.
func (ciu *ConfigurationItemUpdate) SetLastDiscovered(t time.Time) *ConfigurationItemUpdate {
	ciu.mutation.SetLastDiscovered(t)
	return ciu
}

// SetNillableLastDiscovered sets the "last_discovered" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableLastDiscovered(t *time.Time) *ConfigurationItemUpdate {
	if t != nil {
		ciu.SetLastDiscovered(*t)
	}
	return ciu
}

// ClearLastDiscovered clears the value of the "last_discovered" field.
func (ciu *ConfigurationItemUpdate) ClearLastDiscovered() *ConfigurationItemUpdate {
	ciu.mutation.ClearLastDiscovered()
	return ciu
}

// SetVersion sets the "version" field.
func (ciu *ConfigurationItemUpdate) SetVersion(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetVersion(s)
	return ciu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableVersion(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetVersion(*s)
	}
	return ciu
}

// SetTenantID sets the "tenant_id" field.
func (ciu *ConfigurationItemUpdate) SetTenantID(i int) *ConfigurationItemUpdate {
	ciu.mutation.SetTenantID(i)
	return ciu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableTenantID(i *int) *ConfigurationItemUpdate {
	if i != nil {
		ciu.SetTenantID(*i)
	}
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *ConfigurationItemUpdate) SetCreatedAt(t time.Time) *ConfigurationItemUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableCreatedAt(t *time.Time) *ConfigurationItemUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *ConfigurationItemUpdate) SetUpdatedAt(t time.Time) *ConfigurationItemUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ciu *ConfigurationItemUpdate) SetTenant(t *Tenant) *ConfigurationItemUpdate {
	return ciu.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (ciu *ConfigurationItemUpdate) SetCiType(c *CIType) *ConfigurationItemUpdate {
	return ciu.SetCiTypeID(c.ID)
}

// AddOutgoingRelationshipIDs adds the "outgoing_relationships" edge to the CIRelationship entity by IDs.
func (ciu *ConfigurationItemUpdate) AddOutgoingRelationshipIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddOutgoingRelationshipIDs(ids...)
	return ciu
}

// AddOutgoingRelationships adds the "outgoing_relationships" edges to the CIRelationship entity.
func (ciu *ConfigurationItemUpdate) AddOutgoingRelationships(c ...*CIRelationship) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddOutgoingRelationshipIDs(ids...)
}

// AddIncomingRelationshipIDs adds the "incoming_relationships" edge to the CIRelationship entity by IDs.
func (ciu *ConfigurationItemUpdate) AddIncomingRelationshipIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddIncomingRelationshipIDs(ids...)
	return ciu
}

// AddIncomingRelationships adds the "incoming_relationships" edges to the CIRelationship entity.
func (ciu *ConfigurationItemUpdate) AddIncomingRelationships(c ...*CIRelationship) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddIncomingRelationshipIDs(ids...)
}

// AddLifecycleStateIDs adds the "lifecycle_states" edge to the CILifecycleState entity by IDs.
func (ciu *ConfigurationItemUpdate) AddLifecycleStateIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddLifecycleStateIDs(ids...)
	return ciu
}

// AddLifecycleStates adds the "lifecycle_states" edges to the CILifecycleState entity.
func (ciu *ConfigurationItemUpdate) AddLifecycleStates(c ...*CILifecycleState) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddLifecycleStateIDs(ids...)
}

// AddChangeRecordIDs adds the "change_records" edge to the CIChangeRecord entity by IDs.
func (ciu *ConfigurationItemUpdate) AddChangeRecordIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddChangeRecordIDs(ids...)
	return ciu
}

// AddChangeRecords adds the "change_records" edges to the CIChangeRecord entity.
func (ciu *ConfigurationItemUpdate) AddChangeRecords(c ...*CIChangeRecord) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddChangeRecordIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Ticket entity by IDs.
func (ciu *ConfigurationItemUpdate) AddIncidentIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddIncidentIDs(ids...)
	return ciu
}

// AddIncidents adds the "incidents" edges to the Ticket entity.
func (ciu *ConfigurationItemUpdate) AddIncidents(t ...*Ticket) *ConfigurationItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciu.AddIncidentIDs(ids...)
}

// AddChangeIDs adds the "changes" edge to the Ticket entity by IDs.
func (ciu *ConfigurationItemUpdate) AddChangeIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.AddChangeIDs(ids...)
	return ciu
}

// AddChanges adds the "changes" edges to the Ticket entity.
func (ciu *ConfigurationItemUpdate) AddChanges(t ...*Ticket) *ConfigurationItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciu.AddChangeIDs(ids...)
}

// Mutation returns the ConfigurationItemMutation object of the builder.
func (ciu *ConfigurationItemUpdate) Mutation() *ConfigurationItemMutation {
	return ciu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ciu *ConfigurationItemUpdate) ClearTenant() *ConfigurationItemUpdate {
	ciu.mutation.ClearTenant()
	return ciu
}

// ClearCiType clears the "ci_type" edge to the CIType entity.
func (ciu *ConfigurationItemUpdate) ClearCiType() *ConfigurationItemUpdate {
	ciu.mutation.ClearCiType()
	return ciu
}

// ClearOutgoingRelationships clears all "outgoing_relationships" edges to the CIRelationship entity.
func (ciu *ConfigurationItemUpdate) ClearOutgoingRelationships() *ConfigurationItemUpdate {
	ciu.mutation.ClearOutgoingRelationships()
	return ciu
}

// RemoveOutgoingRelationshipIDs removes the "outgoing_relationships" edge to CIRelationship entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveOutgoingRelationshipIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveOutgoingRelationshipIDs(ids...)
	return ciu
}

// RemoveOutgoingRelationships removes "outgoing_relationships" edges to CIRelationship entities.
func (ciu *ConfigurationItemUpdate) RemoveOutgoingRelationships(c ...*CIRelationship) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveOutgoingRelationshipIDs(ids...)
}

// ClearIncomingRelationships clears all "incoming_relationships" edges to the CIRelationship entity.
func (ciu *ConfigurationItemUpdate) ClearIncomingRelationships() *ConfigurationItemUpdate {
	ciu.mutation.ClearIncomingRelationships()
	return ciu
}

// RemoveIncomingRelationshipIDs removes the "incoming_relationships" edge to CIRelationship entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveIncomingRelationshipIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveIncomingRelationshipIDs(ids...)
	return ciu
}

// RemoveIncomingRelationships removes "incoming_relationships" edges to CIRelationship entities.
func (ciu *ConfigurationItemUpdate) RemoveIncomingRelationships(c ...*CIRelationship) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveIncomingRelationshipIDs(ids...)
}

// ClearLifecycleStates clears all "lifecycle_states" edges to the CILifecycleState entity.
func (ciu *ConfigurationItemUpdate) ClearLifecycleStates() *ConfigurationItemUpdate {
	ciu.mutation.ClearLifecycleStates()
	return ciu
}

// RemoveLifecycleStateIDs removes the "lifecycle_states" edge to CILifecycleState entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveLifecycleStateIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveLifecycleStateIDs(ids...)
	return ciu
}

// RemoveLifecycleStates removes "lifecycle_states" edges to CILifecycleState entities.
func (ciu *ConfigurationItemUpdate) RemoveLifecycleStates(c ...*CILifecycleState) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveLifecycleStateIDs(ids...)
}

// ClearChangeRecords clears all "change_records" edges to the CIChangeRecord entity.
func (ciu *ConfigurationItemUpdate) ClearChangeRecords() *ConfigurationItemUpdate {
	ciu.mutation.ClearChangeRecords()
	return ciu
}

// RemoveChangeRecordIDs removes the "change_records" edge to CIChangeRecord entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveChangeRecordIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveChangeRecordIDs(ids...)
	return ciu
}

// RemoveChangeRecords removes "change_records" edges to CIChangeRecord entities.
func (ciu *ConfigurationItemUpdate) RemoveChangeRecords(c ...*CIChangeRecord) *ConfigurationItemUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveChangeRecordIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Ticket entity.
func (ciu *ConfigurationItemUpdate) ClearIncidents() *ConfigurationItemUpdate {
	ciu.mutation.ClearIncidents()
	return ciu
}

// RemoveIncidentIDs removes the "incidents" edge to Ticket entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveIncidentIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveIncidentIDs(ids...)
	return ciu
}

// RemoveIncidents removes "incidents" edges to Ticket entities.
func (ciu *ConfigurationItemUpdate) RemoveIncidents(t ...*Ticket) *ConfigurationItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciu.RemoveIncidentIDs(ids...)
}

// ClearChanges clears all "changes" edges to the Ticket entity.
func (ciu *ConfigurationItemUpdate) ClearChanges() *ConfigurationItemUpdate {
	ciu.mutation.ClearChanges()
	return ciu
}

// RemoveChangeIDs removes the "changes" edge to Ticket entities by IDs.
func (ciu *ConfigurationItemUpdate) RemoveChangeIDs(ids ...int) *ConfigurationItemUpdate {
	ciu.mutation.RemoveChangeIDs(ids...)
	return ciu
}

// RemoveChanges removes "changes" edges to Ticket entities.
func (ciu *ConfigurationItemUpdate) RemoveChanges(t ...*Ticket) *ConfigurationItemUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciu.RemoveChangeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ConfigurationItemUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ConfigurationItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ConfigurationItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ConfigurationItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *ConfigurationItemUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok {
		v := configurationitem.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *ConfigurationItemUpdate) check() error {
	if v, ok := ciu.mutation.Name(); ok {
		if err := configurationitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.name": %w`, err)}
		}
	}
	if ciu.mutation.TenantCleared() && len(ciu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigurationItem.tenant"`)
	}
	if ciu.mutation.CiTypeCleared() && len(ciu.mutation.CiTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigurationItem.ci_type"`)
	}
	return nil
}

func (ciu *ConfigurationItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationitem.Table, configurationitem.Columns, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.SetField(configurationitem.FieldName, field.TypeString, value)
	}
	if value, ok := ciu.mutation.DisplayName(); ok {
		_spec.SetField(configurationitem.FieldDisplayName, field.TypeString, value)
	}
	if ciu.mutation.DisplayNameCleared() {
		_spec.ClearField(configurationitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := ciu.mutation.Description(); ok {
		_spec.SetField(configurationitem.FieldDescription, field.TypeString, value)
	}
	if ciu.mutation.DescriptionCleared() {
		_spec.ClearField(configurationitem.FieldDescription, field.TypeString)
	}
	if value, ok := ciu.mutation.SerialNumber(); ok {
		_spec.SetField(configurationitem.FieldSerialNumber, field.TypeString, value)
	}
	if ciu.mutation.SerialNumberCleared() {
		_spec.ClearField(configurationitem.FieldSerialNumber, field.TypeString)
	}
	if value, ok := ciu.mutation.AssetTag(); ok {
		_spec.SetField(configurationitem.FieldAssetTag, field.TypeString, value)
	}
	if ciu.mutation.AssetTagCleared() {
		_spec.ClearField(configurationitem.FieldAssetTag, field.TypeString)
	}
	if value, ok := ciu.mutation.Status(); ok {
		_spec.SetField(configurationitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := ciu.mutation.LifecycleState(); ok {
		_spec.SetField(configurationitem.FieldLifecycleState, field.TypeString, value)
	}
	if value, ok := ciu.mutation.BusinessService(); ok {
		_spec.SetField(configurationitem.FieldBusinessService, field.TypeString, value)
	}
	if ciu.mutation.BusinessServiceCleared() {
		_spec.ClearField(configurationitem.FieldBusinessService, field.TypeString)
	}
	if value, ok := ciu.mutation.Owner(); ok {
		_spec.SetField(configurationitem.FieldOwner, field.TypeString, value)
	}
	if ciu.mutation.OwnerCleared() {
		_spec.ClearField(configurationitem.FieldOwner, field.TypeString)
	}
	if value, ok := ciu.mutation.Environment(); ok {
		_spec.SetField(configurationitem.FieldEnvironment, field.TypeString, value)
	}
	if ciu.mutation.EnvironmentCleared() {
		_spec.ClearField(configurationitem.FieldEnvironment, field.TypeString)
	}
	if value, ok := ciu.mutation.Location(); ok {
		_spec.SetField(configurationitem.FieldLocation, field.TypeString, value)
	}
	if ciu.mutation.LocationCleared() {
		_spec.ClearField(configurationitem.FieldLocation, field.TypeString)
	}
	if value, ok := ciu.mutation.Attributes(); ok {
		_spec.SetField(configurationitem.FieldAttributes, field.TypeJSON, value)
	}
	if ciu.mutation.AttributesCleared() {
		_spec.ClearField(configurationitem.FieldAttributes, field.TypeJSON)
	}
	if value, ok := ciu.mutation.MonitoringData(); ok {
		_spec.SetField(configurationitem.FieldMonitoringData, field.TypeJSON, value)
	}
	if ciu.mutation.MonitoringDataCleared() {
		_spec.ClearField(configurationitem.FieldMonitoringData, field.TypeJSON)
	}
	if value, ok := ciu.mutation.DiscoverySource(); ok {
		_spec.SetField(configurationitem.FieldDiscoverySource, field.TypeJSON, value)
	}
	if ciu.mutation.DiscoverySourceCleared() {
		_spec.ClearField(configurationitem.FieldDiscoverySource, field.TypeJSON)
	}
	if value, ok := ciu.mutation.LastDiscovered(); ok {
		_spec.SetField(configurationitem.FieldLastDiscovered, field.TypeTime, value)
	}
	if ciu.mutation.LastDiscoveredCleared() {
		_spec.ClearField(configurationitem.FieldLastDiscovered, field.TypeTime)
	}
	if value, ok := ciu.mutation.Version(); ok {
		_spec.SetField(configurationitem.FieldVersion, field.TypeString, value)
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(configurationitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(configurationitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.TenantTable,
			Columns: []string{configurationitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.TenantTable,
			Columns: []string{configurationitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.CiTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.CiTypeTable,
			Columns: []string{configurationitem.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.CiTypeTable,
			Columns: []string{configurationitem.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.OutgoingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedOutgoingRelationshipsIDs(); len(nodes) > 0 && !ciu.mutation.OutgoingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.OutgoingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.IncomingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedIncomingRelationshipsIDs(); len(nodes) > 0 && !ciu.mutation.IncomingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.IncomingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.LifecycleStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedLifecycleStatesIDs(); len(nodes) > 0 && !ciu.mutation.LifecycleStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.LifecycleStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.ChangeRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedChangeRecordsIDs(); len(nodes) > 0 && !ciu.mutation.ChangeRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ChangeRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !ciu.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.ChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.RemovedChangesIDs(); len(nodes) > 0 && !ciu.mutation.ChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ConfigurationItemUpdateOne is the builder for updating a single ConfigurationItem entity.
type ConfigurationItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigurationItemMutation
}

// SetName sets the "name" field.
func (ciuo *ConfigurationItemUpdateOne) SetName(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableName(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetName(*s)
	}
	return ciuo
}

// SetDisplayName sets the "display_name" field.
func (ciuo *ConfigurationItemUpdateOne) SetDisplayName(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetDisplayName(s)
	return ciuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableDisplayName(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetDisplayName(*s)
	}
	return ciuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (ciuo *ConfigurationItemUpdateOne) ClearDisplayName() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearDisplayName()
	return ciuo
}

// SetDescription sets the "description" field.
func (ciuo *ConfigurationItemUpdateOne) SetDescription(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetDescription(s)
	return ciuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableDescription(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetDescription(*s)
	}
	return ciuo
}

// ClearDescription clears the value of the "description" field.
func (ciuo *ConfigurationItemUpdateOne) ClearDescription() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearDescription()
	return ciuo
}

// SetCiTypeID sets the "ci_type_id" field.
func (ciuo *ConfigurationItemUpdateOne) SetCiTypeID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetCiTypeID(i)
	return ciuo
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableCiTypeID(i *int) *ConfigurationItemUpdateOne {
	if i != nil {
		ciuo.SetCiTypeID(*i)
	}
	return ciuo
}

// SetSerialNumber sets the "serial_number" field.
func (ciuo *ConfigurationItemUpdateOne) SetSerialNumber(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetSerialNumber(s)
	return ciuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableSerialNumber(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetSerialNumber(*s)
	}
	return ciuo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (ciuo *ConfigurationItemUpdateOne) ClearSerialNumber() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearSerialNumber()
	return ciuo
}

// SetAssetTag sets the "asset_tag" field.
func (ciuo *ConfigurationItemUpdateOne) SetAssetTag(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetAssetTag(s)
	return ciuo
}

// SetNillableAssetTag sets the "asset_tag" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableAssetTag(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetAssetTag(*s)
	}
	return ciuo
}

// ClearAssetTag clears the value of the "asset_tag" field.
func (ciuo *ConfigurationItemUpdateOne) ClearAssetTag() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearAssetTag()
	return ciuo
}

// SetStatus sets the "status" field.
func (ciuo *ConfigurationItemUpdateOne) SetStatus(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetStatus(s)
	return ciuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableStatus(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetStatus(*s)
	}
	return ciuo
}

// SetLifecycleState sets the "lifecycle_state" field.
func (ciuo *ConfigurationItemUpdateOne) SetLifecycleState(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetLifecycleState(s)
	return ciuo
}

// SetNillableLifecycleState sets the "lifecycle_state" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableLifecycleState(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetLifecycleState(*s)
	}
	return ciuo
}

// SetBusinessService sets the "business_service" field.
func (ciuo *ConfigurationItemUpdateOne) SetBusinessService(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetBusinessService(s)
	return ciuo
}

// SetNillableBusinessService sets the "business_service" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableBusinessService(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetBusinessService(*s)
	}
	return ciuo
}

// ClearBusinessService clears the value of the "business_service" field.
func (ciuo *ConfigurationItemUpdateOne) ClearBusinessService() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearBusinessService()
	return ciuo
}

// SetOwner sets the "owner" field.
func (ciuo *ConfigurationItemUpdateOne) SetOwner(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetOwner(s)
	return ciuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableOwner(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetOwner(*s)
	}
	return ciuo
}

// ClearOwner clears the value of the "owner" field.
func (ciuo *ConfigurationItemUpdateOne) ClearOwner() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearOwner()
	return ciuo
}

// SetEnvironment sets the "environment" field.
func (ciuo *ConfigurationItemUpdateOne) SetEnvironment(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetEnvironment(s)
	return ciuo
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableEnvironment(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetEnvironment(*s)
	}
	return ciuo
}

// ClearEnvironment clears the value of the "environment" field.
func (ciuo *ConfigurationItemUpdateOne) ClearEnvironment() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearEnvironment()
	return ciuo
}

// SetLocation sets the "location" field.
func (ciuo *ConfigurationItemUpdateOne) SetLocation(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetLocation(s)
	return ciuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableLocation(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetLocation(*s)
	}
	return ciuo
}

// ClearLocation clears the value of the "location" field.
func (ciuo *ConfigurationItemUpdateOne) ClearLocation() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearLocation()
	return ciuo
}

// SetAttributes sets the "attributes" field.
func (ciuo *ConfigurationItemUpdateOne) SetAttributes(m map[string]interface{}) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetAttributes(m)
	return ciuo
}

// ClearAttributes clears the value of the "attributes" field.
func (ciuo *ConfigurationItemUpdateOne) ClearAttributes() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearAttributes()
	return ciuo
}

// SetMonitoringData sets the "monitoring_data" field.
func (ciuo *ConfigurationItemUpdateOne) SetMonitoringData(m map[string]interface{}) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetMonitoringData(m)
	return ciuo
}

// ClearMonitoringData clears the value of the "monitoring_data" field.
func (ciuo *ConfigurationItemUpdateOne) ClearMonitoringData() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearMonitoringData()
	return ciuo
}

// SetDiscoverySource sets the "discovery_source" field.
func (ciuo *ConfigurationItemUpdateOne) SetDiscoverySource(m map[string]interface{}) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetDiscoverySource(m)
	return ciuo
}

// ClearDiscoverySource clears the value of the "discovery_source" field.
func (ciuo *ConfigurationItemUpdateOne) ClearDiscoverySource() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearDiscoverySource()
	return ciuo
}

// SetLastDiscovered sets the "last_discovered" field.
func (ciuo *ConfigurationItemUpdateOne) SetLastDiscovered(t time.Time) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetLastDiscovered(t)
	return ciuo
}

// SetNillableLastDiscovered sets the "last_discovered" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableLastDiscovered(t *time.Time) *ConfigurationItemUpdateOne {
	if t != nil {
		ciuo.SetLastDiscovered(*t)
	}
	return ciuo
}

// ClearLastDiscovered clears the value of the "last_discovered" field.
func (ciuo *ConfigurationItemUpdateOne) ClearLastDiscovered() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearLastDiscovered()
	return ciuo
}

// SetVersion sets the "version" field.
func (ciuo *ConfigurationItemUpdateOne) SetVersion(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetVersion(s)
	return ciuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableVersion(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetVersion(*s)
	}
	return ciuo
}

// SetTenantID sets the "tenant_id" field.
func (ciuo *ConfigurationItemUpdateOne) SetTenantID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetTenantID(i)
	return ciuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableTenantID(i *int) *ConfigurationItemUpdateOne {
	if i != nil {
		ciuo.SetTenantID(*i)
	}
	return ciuo
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *ConfigurationItemUpdateOne) SetCreatedAt(t time.Time) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableCreatedAt(t *time.Time) *ConfigurationItemUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *ConfigurationItemUpdateOne) SetUpdatedAt(t time.Time) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ciuo *ConfigurationItemUpdateOne) SetTenant(t *Tenant) *ConfigurationItemUpdateOne {
	return ciuo.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (ciuo *ConfigurationItemUpdateOne) SetCiType(c *CIType) *ConfigurationItemUpdateOne {
	return ciuo.SetCiTypeID(c.ID)
}

// AddOutgoingRelationshipIDs adds the "outgoing_relationships" edge to the CIRelationship entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddOutgoingRelationshipIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddOutgoingRelationshipIDs(ids...)
	return ciuo
}

// AddOutgoingRelationships adds the "outgoing_relationships" edges to the CIRelationship entity.
func (ciuo *ConfigurationItemUpdateOne) AddOutgoingRelationships(c ...*CIRelationship) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddOutgoingRelationshipIDs(ids...)
}

// AddIncomingRelationshipIDs adds the "incoming_relationships" edge to the CIRelationship entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddIncomingRelationshipIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddIncomingRelationshipIDs(ids...)
	return ciuo
}

// AddIncomingRelationships adds the "incoming_relationships" edges to the CIRelationship entity.
func (ciuo *ConfigurationItemUpdateOne) AddIncomingRelationships(c ...*CIRelationship) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddIncomingRelationshipIDs(ids...)
}

// AddLifecycleStateIDs adds the "lifecycle_states" edge to the CILifecycleState entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddLifecycleStateIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddLifecycleStateIDs(ids...)
	return ciuo
}

// AddLifecycleStates adds the "lifecycle_states" edges to the CILifecycleState entity.
func (ciuo *ConfigurationItemUpdateOne) AddLifecycleStates(c ...*CILifecycleState) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddLifecycleStateIDs(ids...)
}

// AddChangeRecordIDs adds the "change_records" edge to the CIChangeRecord entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddChangeRecordIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddChangeRecordIDs(ids...)
	return ciuo
}

// AddChangeRecords adds the "change_records" edges to the CIChangeRecord entity.
func (ciuo *ConfigurationItemUpdateOne) AddChangeRecords(c ...*CIChangeRecord) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddChangeRecordIDs(ids...)
}

// AddIncidentIDs adds the "incidents" edge to the Ticket entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddIncidentIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddIncidentIDs(ids...)
	return ciuo
}

// AddIncidents adds the "incidents" edges to the Ticket entity.
func (ciuo *ConfigurationItemUpdateOne) AddIncidents(t ...*Ticket) *ConfigurationItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciuo.AddIncidentIDs(ids...)
}

// AddChangeIDs adds the "changes" edge to the Ticket entity by IDs.
func (ciuo *ConfigurationItemUpdateOne) AddChangeIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddChangeIDs(ids...)
	return ciuo
}

// AddChanges adds the "changes" edges to the Ticket entity.
func (ciuo *ConfigurationItemUpdateOne) AddChanges(t ...*Ticket) *ConfigurationItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciuo.AddChangeIDs(ids...)
}

// Mutation returns the ConfigurationItemMutation object of the builder.
func (ciuo *ConfigurationItemUpdateOne) Mutation() *ConfigurationItemMutation {
	return ciuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ciuo *ConfigurationItemUpdateOne) ClearTenant() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearTenant()
	return ciuo
}

// ClearCiType clears the "ci_type" edge to the CIType entity.
func (ciuo *ConfigurationItemUpdateOne) ClearCiType() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearCiType()
	return ciuo
}

// ClearOutgoingRelationships clears all "outgoing_relationships" edges to the CIRelationship entity.
func (ciuo *ConfigurationItemUpdateOne) ClearOutgoingRelationships() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearOutgoingRelationships()
	return ciuo
}

// RemoveOutgoingRelationshipIDs removes the "outgoing_relationships" edge to CIRelationship entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveOutgoingRelationshipIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveOutgoingRelationshipIDs(ids...)
	return ciuo
}

// RemoveOutgoingRelationships removes "outgoing_relationships" edges to CIRelationship entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveOutgoingRelationships(c ...*CIRelationship) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveOutgoingRelationshipIDs(ids...)
}

// ClearIncomingRelationships clears all "incoming_relationships" edges to the CIRelationship entity.
func (ciuo *ConfigurationItemUpdateOne) ClearIncomingRelationships() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearIncomingRelationships()
	return ciuo
}

// RemoveIncomingRelationshipIDs removes the "incoming_relationships" edge to CIRelationship entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveIncomingRelationshipIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveIncomingRelationshipIDs(ids...)
	return ciuo
}

// RemoveIncomingRelationships removes "incoming_relationships" edges to CIRelationship entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveIncomingRelationships(c ...*CIRelationship) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveIncomingRelationshipIDs(ids...)
}

// ClearLifecycleStates clears all "lifecycle_states" edges to the CILifecycleState entity.
func (ciuo *ConfigurationItemUpdateOne) ClearLifecycleStates() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearLifecycleStates()
	return ciuo
}

// RemoveLifecycleStateIDs removes the "lifecycle_states" edge to CILifecycleState entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveLifecycleStateIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveLifecycleStateIDs(ids...)
	return ciuo
}

// RemoveLifecycleStates removes "lifecycle_states" edges to CILifecycleState entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveLifecycleStates(c ...*CILifecycleState) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveLifecycleStateIDs(ids...)
}

// ClearChangeRecords clears all "change_records" edges to the CIChangeRecord entity.
func (ciuo *ConfigurationItemUpdateOne) ClearChangeRecords() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearChangeRecords()
	return ciuo
}

// RemoveChangeRecordIDs removes the "change_records" edge to CIChangeRecord entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveChangeRecordIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveChangeRecordIDs(ids...)
	return ciuo
}

// RemoveChangeRecords removes "change_records" edges to CIChangeRecord entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveChangeRecords(c ...*CIChangeRecord) *ConfigurationItemUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveChangeRecordIDs(ids...)
}

// ClearIncidents clears all "incidents" edges to the Ticket entity.
func (ciuo *ConfigurationItemUpdateOne) ClearIncidents() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearIncidents()
	return ciuo
}

// RemoveIncidentIDs removes the "incidents" edge to Ticket entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveIncidentIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveIncidentIDs(ids...)
	return ciuo
}

// RemoveIncidents removes "incidents" edges to Ticket entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveIncidents(t ...*Ticket) *ConfigurationItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciuo.RemoveIncidentIDs(ids...)
}

// ClearChanges clears all "changes" edges to the Ticket entity.
func (ciuo *ConfigurationItemUpdateOne) ClearChanges() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearChanges()
	return ciuo
}

// RemoveChangeIDs removes the "changes" edge to Ticket entities by IDs.
func (ciuo *ConfigurationItemUpdateOne) RemoveChangeIDs(ids ...int) *ConfigurationItemUpdateOne {
	ciuo.mutation.RemoveChangeIDs(ids...)
	return ciuo
}

// RemoveChanges removes "changes" edges to Ticket entities.
func (ciuo *ConfigurationItemUpdateOne) RemoveChanges(t ...*Ticket) *ConfigurationItemUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ciuo.RemoveChangeIDs(ids...)
}

// Where appends a list predicates to the ConfigurationItemUpdate builder.
func (ciuo *ConfigurationItemUpdateOne) Where(ps ...predicate.ConfigurationItem) *ConfigurationItemUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ConfigurationItemUpdateOne) Select(field string, fields ...string) *ConfigurationItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated ConfigurationItem entity.
func (ciuo *ConfigurationItemUpdateOne) Save(ctx context.Context) (*ConfigurationItem, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ConfigurationItemUpdateOne) SaveX(ctx context.Context) *ConfigurationItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ConfigurationItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ConfigurationItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *ConfigurationItemUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok {
		v := configurationitem.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *ConfigurationItemUpdateOne) check() error {
	if v, ok := ciuo.mutation.Name(); ok {
		if err := configurationitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.name": %w`, err)}
		}
	}
	if ciuo.mutation.TenantCleared() && len(ciuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigurationItem.tenant"`)
	}
	if ciuo.mutation.CiTypeCleared() && len(ciuo.mutation.CiTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConfigurationItem.ci_type"`)
	}
	return nil
}

func (ciuo *ConfigurationItemUpdateOne) sqlSave(ctx context.Context) (_node *ConfigurationItem, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationitem.Table, configurationitem.Columns, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigurationItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configurationitem.FieldID)
		for _, f := range fields {
			if !configurationitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configurationitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.SetField(configurationitem.FieldName, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.DisplayName(); ok {
		_spec.SetField(configurationitem.FieldDisplayName, field.TypeString, value)
	}
	if ciuo.mutation.DisplayNameCleared() {
		_spec.ClearField(configurationitem.FieldDisplayName, field.TypeString)
	}
	if value, ok := ciuo.mutation.Description(); ok {
		_spec.SetField(configurationitem.FieldDescription, field.TypeString, value)
	}
	if ciuo.mutation.DescriptionCleared() {
		_spec.ClearField(configurationitem.FieldDescription, field.TypeString)
	}
	if value, ok := ciuo.mutation.SerialNumber(); ok {
		_spec.SetField(configurationitem.FieldSerialNumber, field.TypeString, value)
	}
	if ciuo.mutation.SerialNumberCleared() {
		_spec.ClearField(configurationitem.FieldSerialNumber, field.TypeString)
	}
	if value, ok := ciuo.mutation.AssetTag(); ok {
		_spec.SetField(configurationitem.FieldAssetTag, field.TypeString, value)
	}
	if ciuo.mutation.AssetTagCleared() {
		_spec.ClearField(configurationitem.FieldAssetTag, field.TypeString)
	}
	if value, ok := ciuo.mutation.Status(); ok {
		_spec.SetField(configurationitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.LifecycleState(); ok {
		_spec.SetField(configurationitem.FieldLifecycleState, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.BusinessService(); ok {
		_spec.SetField(configurationitem.FieldBusinessService, field.TypeString, value)
	}
	if ciuo.mutation.BusinessServiceCleared() {
		_spec.ClearField(configurationitem.FieldBusinessService, field.TypeString)
	}
	if value, ok := ciuo.mutation.Owner(); ok {
		_spec.SetField(configurationitem.FieldOwner, field.TypeString, value)
	}
	if ciuo.mutation.OwnerCleared() {
		_spec.ClearField(configurationitem.FieldOwner, field.TypeString)
	}
	if value, ok := ciuo.mutation.Environment(); ok {
		_spec.SetField(configurationitem.FieldEnvironment, field.TypeString, value)
	}
	if ciuo.mutation.EnvironmentCleared() {
		_spec.ClearField(configurationitem.FieldEnvironment, field.TypeString)
	}
	if value, ok := ciuo.mutation.Location(); ok {
		_spec.SetField(configurationitem.FieldLocation, field.TypeString, value)
	}
	if ciuo.mutation.LocationCleared() {
		_spec.ClearField(configurationitem.FieldLocation, field.TypeString)
	}
	if value, ok := ciuo.mutation.Attributes(); ok {
		_spec.SetField(configurationitem.FieldAttributes, field.TypeJSON, value)
	}
	if ciuo.mutation.AttributesCleared() {
		_spec.ClearField(configurationitem.FieldAttributes, field.TypeJSON)
	}
	if value, ok := ciuo.mutation.MonitoringData(); ok {
		_spec.SetField(configurationitem.FieldMonitoringData, field.TypeJSON, value)
	}
	if ciuo.mutation.MonitoringDataCleared() {
		_spec.ClearField(configurationitem.FieldMonitoringData, field.TypeJSON)
	}
	if value, ok := ciuo.mutation.DiscoverySource(); ok {
		_spec.SetField(configurationitem.FieldDiscoverySource, field.TypeJSON, value)
	}
	if ciuo.mutation.DiscoverySourceCleared() {
		_spec.ClearField(configurationitem.FieldDiscoverySource, field.TypeJSON)
	}
	if value, ok := ciuo.mutation.LastDiscovered(); ok {
		_spec.SetField(configurationitem.FieldLastDiscovered, field.TypeTime, value)
	}
	if ciuo.mutation.LastDiscoveredCleared() {
		_spec.ClearField(configurationitem.FieldLastDiscovered, field.TypeTime)
	}
	if value, ok := ciuo.mutation.Version(); ok {
		_spec.SetField(configurationitem.FieldVersion, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(configurationitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(configurationitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.TenantTable,
			Columns: []string{configurationitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.TenantTable,
			Columns: []string{configurationitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.CiTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.CiTypeTable,
			Columns: []string{configurationitem.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   configurationitem.CiTypeTable,
			Columns: []string{configurationitem.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.OutgoingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedOutgoingRelationshipsIDs(); len(nodes) > 0 && !ciuo.mutation.OutgoingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.OutgoingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.OutgoingRelationshipsTable,
			Columns: []string{configurationitem.OutgoingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.IncomingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedIncomingRelationshipsIDs(); len(nodes) > 0 && !ciuo.mutation.IncomingRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.IncomingRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncomingRelationshipsTable,
			Columns: []string{configurationitem.IncomingRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.LifecycleStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedLifecycleStatesIDs(); len(nodes) > 0 && !ciuo.mutation.LifecycleStatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.LifecycleStatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.LifecycleStatesTable,
			Columns: []string{configurationitem.LifecycleStatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.ChangeRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedChangeRecordsIDs(); len(nodes) > 0 && !ciuo.mutation.ChangeRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ChangeRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangeRecordsTable,
			Columns: []string{configurationitem.ChangeRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedIncidentsIDs(); len(nodes) > 0 && !ciuo.mutation.IncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.IncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.IncidentsTable,
			Columns: []string{configurationitem.IncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.ChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.RemovedChangesIDs(); len(nodes) > 0 && !ciuo.mutation.ChangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ChangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   configurationitem.ChangesTable,
			Columns: []string{configurationitem.ChangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConfigurationItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
