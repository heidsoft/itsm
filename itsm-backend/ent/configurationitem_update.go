// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigurationItemUpdate is the builder for updating ConfigurationItem entities.
type ConfigurationItemUpdate struct {
	config
	hooks    []Hook
	mutation *ConfigurationItemMutation
}

// Where appends a list predicates to the ConfigurationItemUpdate builder.
func (ciu *ConfigurationItemUpdate) Where(ps ...predicate.ConfigurationItem) *ConfigurationItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetName sets the "name" field.
func (ciu *ConfigurationItemUpdate) SetName(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableName(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetName(*s)
	}
	return ciu
}

// SetDescription sets the "description" field.
func (ciu *ConfigurationItemUpdate) SetDescription(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetDescription(s)
	return ciu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableDescription(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetDescription(*s)
	}
	return ciu
}

// ClearDescription clears the value of the "description" field.
func (ciu *ConfigurationItemUpdate) ClearDescription() *ConfigurationItemUpdate {
	ciu.mutation.ClearDescription()
	return ciu
}

// SetType sets the "type" field.
func (ciu *ConfigurationItemUpdate) SetType(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetType(s)
	return ciu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableType(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetType(*s)
	}
	return ciu
}

// ClearType clears the value of the "type" field.
func (ciu *ConfigurationItemUpdate) ClearType() *ConfigurationItemUpdate {
	ciu.mutation.ClearType()
	return ciu
}

// SetStatus sets the "status" field.
func (ciu *ConfigurationItemUpdate) SetStatus(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetStatus(s)
	return ciu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableStatus(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetStatus(*s)
	}
	return ciu
}

// SetLocation sets the "location" field.
func (ciu *ConfigurationItemUpdate) SetLocation(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetLocation(s)
	return ciu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableLocation(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetLocation(*s)
	}
	return ciu
}

// ClearLocation clears the value of the "location" field.
func (ciu *ConfigurationItemUpdate) ClearLocation() *ConfigurationItemUpdate {
	ciu.mutation.ClearLocation()
	return ciu
}

// SetSerialNumber sets the "serial_number" field.
func (ciu *ConfigurationItemUpdate) SetSerialNumber(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetSerialNumber(s)
	return ciu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableSerialNumber(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetSerialNumber(*s)
	}
	return ciu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (ciu *ConfigurationItemUpdate) ClearSerialNumber() *ConfigurationItemUpdate {
	ciu.mutation.ClearSerialNumber()
	return ciu
}

// SetModel sets the "model" field.
func (ciu *ConfigurationItemUpdate) SetModel(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetModel(s)
	return ciu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableModel(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetModel(*s)
	}
	return ciu
}

// ClearModel clears the value of the "model" field.
func (ciu *ConfigurationItemUpdate) ClearModel() *ConfigurationItemUpdate {
	ciu.mutation.ClearModel()
	return ciu
}

// SetVendor sets the "vendor" field.
func (ciu *ConfigurationItemUpdate) SetVendor(s string) *ConfigurationItemUpdate {
	ciu.mutation.SetVendor(s)
	return ciu
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableVendor(s *string) *ConfigurationItemUpdate {
	if s != nil {
		ciu.SetVendor(*s)
	}
	return ciu
}

// ClearVendor clears the value of the "vendor" field.
func (ciu *ConfigurationItemUpdate) ClearVendor() *ConfigurationItemUpdate {
	ciu.mutation.ClearVendor()
	return ciu
}

// SetCiTypeID sets the "ci_type_id" field.
func (ciu *ConfigurationItemUpdate) SetCiTypeID(i int) *ConfigurationItemUpdate {
	ciu.mutation.ResetCiTypeID()
	ciu.mutation.SetCiTypeID(i)
	return ciu
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableCiTypeID(i *int) *ConfigurationItemUpdate {
	if i != nil {
		ciu.SetCiTypeID(*i)
	}
	return ciu
}

// AddCiTypeID adds i to the "ci_type_id" field.
func (ciu *ConfigurationItemUpdate) AddCiTypeID(i int) *ConfigurationItemUpdate {
	ciu.mutation.AddCiTypeID(i)
	return ciu
}

// SetTenantID sets the "tenant_id" field.
func (ciu *ConfigurationItemUpdate) SetTenantID(i int) *ConfigurationItemUpdate {
	ciu.mutation.ResetTenantID()
	ciu.mutation.SetTenantID(i)
	return ciu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableTenantID(i *int) *ConfigurationItemUpdate {
	if i != nil {
		ciu.SetTenantID(*i)
	}
	return ciu
}

// AddTenantID adds i to the "tenant_id" field.
func (ciu *ConfigurationItemUpdate) AddTenantID(i int) *ConfigurationItemUpdate {
	ciu.mutation.AddTenantID(i)
	return ciu
}

// SetCreatedAt sets the "created_at" field.
func (ciu *ConfigurationItemUpdate) SetCreatedAt(t time.Time) *ConfigurationItemUpdate {
	ciu.mutation.SetCreatedAt(t)
	return ciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciu *ConfigurationItemUpdate) SetNillableCreatedAt(t *time.Time) *ConfigurationItemUpdate {
	if t != nil {
		ciu.SetCreatedAt(*t)
	}
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *ConfigurationItemUpdate) SetUpdatedAt(t time.Time) *ConfigurationItemUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// Mutation returns the ConfigurationItemMutation object of the builder.
func (ciu *ConfigurationItemUpdate) Mutation() *ConfigurationItemMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ConfigurationItemUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ConfigurationItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ConfigurationItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ConfigurationItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *ConfigurationItemUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok {
		v := configurationitem.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *ConfigurationItemUpdate) check() error {
	if v, ok := ciu.mutation.Name(); ok {
		if err := configurationitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.name": %w`, err)}
		}
	}
	if v, ok := ciu.mutation.CiTypeID(); ok {
		if err := configurationitem.CiTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "ci_type_id", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.ci_type_id": %w`, err)}
		}
	}
	if v, ok := ciu.mutation.TenantID(); ok {
		if err := configurationitem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ciu *ConfigurationItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationitem.Table, configurationitem.Columns, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.SetField(configurationitem.FieldName, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Description(); ok {
		_spec.SetField(configurationitem.FieldDescription, field.TypeString, value)
	}
	if ciu.mutation.DescriptionCleared() {
		_spec.ClearField(configurationitem.FieldDescription, field.TypeString)
	}
	if value, ok := ciu.mutation.GetType(); ok {
		_spec.SetField(configurationitem.FieldType, field.TypeString, value)
	}
	if ciu.mutation.TypeCleared() {
		_spec.ClearField(configurationitem.FieldType, field.TypeString)
	}
	if value, ok := ciu.mutation.Status(); ok {
		_spec.SetField(configurationitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := ciu.mutation.Location(); ok {
		_spec.SetField(configurationitem.FieldLocation, field.TypeString, value)
	}
	if ciu.mutation.LocationCleared() {
		_spec.ClearField(configurationitem.FieldLocation, field.TypeString)
	}
	if value, ok := ciu.mutation.SerialNumber(); ok {
		_spec.SetField(configurationitem.FieldSerialNumber, field.TypeString, value)
	}
	if ciu.mutation.SerialNumberCleared() {
		_spec.ClearField(configurationitem.FieldSerialNumber, field.TypeString)
	}
	if value, ok := ciu.mutation.Model(); ok {
		_spec.SetField(configurationitem.FieldModel, field.TypeString, value)
	}
	if ciu.mutation.ModelCleared() {
		_spec.ClearField(configurationitem.FieldModel, field.TypeString)
	}
	if value, ok := ciu.mutation.Vendor(); ok {
		_spec.SetField(configurationitem.FieldVendor, field.TypeString, value)
	}
	if ciu.mutation.VendorCleared() {
		_spec.ClearField(configurationitem.FieldVendor, field.TypeString)
	}
	if value, ok := ciu.mutation.CiTypeID(); ok {
		_spec.SetField(configurationitem.FieldCiTypeID, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.AddedCiTypeID(); ok {
		_spec.AddField(configurationitem.FieldCiTypeID, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.TenantID(); ok {
		_spec.SetField(configurationitem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.AddedTenantID(); ok {
		_spec.AddField(configurationitem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.CreatedAt(); ok {
		_spec.SetField(configurationitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(configurationitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ConfigurationItemUpdateOne is the builder for updating a single ConfigurationItem entity.
type ConfigurationItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConfigurationItemMutation
}

// SetName sets the "name" field.
func (ciuo *ConfigurationItemUpdateOne) SetName(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableName(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetName(*s)
	}
	return ciuo
}

// SetDescription sets the "description" field.
func (ciuo *ConfigurationItemUpdateOne) SetDescription(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetDescription(s)
	return ciuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableDescription(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetDescription(*s)
	}
	return ciuo
}

// ClearDescription clears the value of the "description" field.
func (ciuo *ConfigurationItemUpdateOne) ClearDescription() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearDescription()
	return ciuo
}

// SetType sets the "type" field.
func (ciuo *ConfigurationItemUpdateOne) SetType(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetType(s)
	return ciuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableType(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetType(*s)
	}
	return ciuo
}

// ClearType clears the value of the "type" field.
func (ciuo *ConfigurationItemUpdateOne) ClearType() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearType()
	return ciuo
}

// SetStatus sets the "status" field.
func (ciuo *ConfigurationItemUpdateOne) SetStatus(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetStatus(s)
	return ciuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableStatus(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetStatus(*s)
	}
	return ciuo
}

// SetLocation sets the "location" field.
func (ciuo *ConfigurationItemUpdateOne) SetLocation(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetLocation(s)
	return ciuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableLocation(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetLocation(*s)
	}
	return ciuo
}

// ClearLocation clears the value of the "location" field.
func (ciuo *ConfigurationItemUpdateOne) ClearLocation() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearLocation()
	return ciuo
}

// SetSerialNumber sets the "serial_number" field.
func (ciuo *ConfigurationItemUpdateOne) SetSerialNumber(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetSerialNumber(s)
	return ciuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableSerialNumber(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetSerialNumber(*s)
	}
	return ciuo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (ciuo *ConfigurationItemUpdateOne) ClearSerialNumber() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearSerialNumber()
	return ciuo
}

// SetModel sets the "model" field.
func (ciuo *ConfigurationItemUpdateOne) SetModel(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetModel(s)
	return ciuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableModel(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetModel(*s)
	}
	return ciuo
}

// ClearModel clears the value of the "model" field.
func (ciuo *ConfigurationItemUpdateOne) ClearModel() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearModel()
	return ciuo
}

// SetVendor sets the "vendor" field.
func (ciuo *ConfigurationItemUpdateOne) SetVendor(s string) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetVendor(s)
	return ciuo
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableVendor(s *string) *ConfigurationItemUpdateOne {
	if s != nil {
		ciuo.SetVendor(*s)
	}
	return ciuo
}

// ClearVendor clears the value of the "vendor" field.
func (ciuo *ConfigurationItemUpdateOne) ClearVendor() *ConfigurationItemUpdateOne {
	ciuo.mutation.ClearVendor()
	return ciuo
}

// SetCiTypeID sets the "ci_type_id" field.
func (ciuo *ConfigurationItemUpdateOne) SetCiTypeID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.ResetCiTypeID()
	ciuo.mutation.SetCiTypeID(i)
	return ciuo
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableCiTypeID(i *int) *ConfigurationItemUpdateOne {
	if i != nil {
		ciuo.SetCiTypeID(*i)
	}
	return ciuo
}

// AddCiTypeID adds i to the "ci_type_id" field.
func (ciuo *ConfigurationItemUpdateOne) AddCiTypeID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddCiTypeID(i)
	return ciuo
}

// SetTenantID sets the "tenant_id" field.
func (ciuo *ConfigurationItemUpdateOne) SetTenantID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.ResetTenantID()
	ciuo.mutation.SetTenantID(i)
	return ciuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableTenantID(i *int) *ConfigurationItemUpdateOne {
	if i != nil {
		ciuo.SetTenantID(*i)
	}
	return ciuo
}

// AddTenantID adds i to the "tenant_id" field.
func (ciuo *ConfigurationItemUpdateOne) AddTenantID(i int) *ConfigurationItemUpdateOne {
	ciuo.mutation.AddTenantID(i)
	return ciuo
}

// SetCreatedAt sets the "created_at" field.
func (ciuo *ConfigurationItemUpdateOne) SetCreatedAt(t time.Time) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetCreatedAt(t)
	return ciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ciuo *ConfigurationItemUpdateOne) SetNillableCreatedAt(t *time.Time) *ConfigurationItemUpdateOne {
	if t != nil {
		ciuo.SetCreatedAt(*t)
	}
	return ciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *ConfigurationItemUpdateOne) SetUpdatedAt(t time.Time) *ConfigurationItemUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// Mutation returns the ConfigurationItemMutation object of the builder.
func (ciuo *ConfigurationItemUpdateOne) Mutation() *ConfigurationItemMutation {
	return ciuo.mutation
}

// Where appends a list predicates to the ConfigurationItemUpdate builder.
func (ciuo *ConfigurationItemUpdateOne) Where(ps ...predicate.ConfigurationItem) *ConfigurationItemUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ConfigurationItemUpdateOne) Select(field string, fields ...string) *ConfigurationItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated ConfigurationItem entity.
func (ciuo *ConfigurationItemUpdateOne) Save(ctx context.Context) (*ConfigurationItem, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ConfigurationItemUpdateOne) SaveX(ctx context.Context) *ConfigurationItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ConfigurationItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ConfigurationItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *ConfigurationItemUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok {
		v := configurationitem.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *ConfigurationItemUpdateOne) check() error {
	if v, ok := ciuo.mutation.Name(); ok {
		if err := configurationitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.name": %w`, err)}
		}
	}
	if v, ok := ciuo.mutation.CiTypeID(); ok {
		if err := configurationitem.CiTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "ci_type_id", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.ci_type_id": %w`, err)}
		}
	}
	if v, ok := ciuo.mutation.TenantID(); ok {
		if err := configurationitem.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ConfigurationItem.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ciuo *ConfigurationItemUpdateOne) sqlSave(ctx context.Context) (_node *ConfigurationItem, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(configurationitem.Table, configurationitem.Columns, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConfigurationItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configurationitem.FieldID)
		for _, f := range fields {
			if !configurationitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != configurationitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.SetField(configurationitem.FieldName, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Description(); ok {
		_spec.SetField(configurationitem.FieldDescription, field.TypeString, value)
	}
	if ciuo.mutation.DescriptionCleared() {
		_spec.ClearField(configurationitem.FieldDescription, field.TypeString)
	}
	if value, ok := ciuo.mutation.GetType(); ok {
		_spec.SetField(configurationitem.FieldType, field.TypeString, value)
	}
	if ciuo.mutation.TypeCleared() {
		_spec.ClearField(configurationitem.FieldType, field.TypeString)
	}
	if value, ok := ciuo.mutation.Status(); ok {
		_spec.SetField(configurationitem.FieldStatus, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.Location(); ok {
		_spec.SetField(configurationitem.FieldLocation, field.TypeString, value)
	}
	if ciuo.mutation.LocationCleared() {
		_spec.ClearField(configurationitem.FieldLocation, field.TypeString)
	}
	if value, ok := ciuo.mutation.SerialNumber(); ok {
		_spec.SetField(configurationitem.FieldSerialNumber, field.TypeString, value)
	}
	if ciuo.mutation.SerialNumberCleared() {
		_spec.ClearField(configurationitem.FieldSerialNumber, field.TypeString)
	}
	if value, ok := ciuo.mutation.Model(); ok {
		_spec.SetField(configurationitem.FieldModel, field.TypeString, value)
	}
	if ciuo.mutation.ModelCleared() {
		_spec.ClearField(configurationitem.FieldModel, field.TypeString)
	}
	if value, ok := ciuo.mutation.Vendor(); ok {
		_spec.SetField(configurationitem.FieldVendor, field.TypeString, value)
	}
	if ciuo.mutation.VendorCleared() {
		_spec.ClearField(configurationitem.FieldVendor, field.TypeString)
	}
	if value, ok := ciuo.mutation.CiTypeID(); ok {
		_spec.SetField(configurationitem.FieldCiTypeID, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.AddedCiTypeID(); ok {
		_spec.AddField(configurationitem.FieldCiTypeID, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.TenantID(); ok {
		_spec.SetField(configurationitem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.AddedTenantID(); ok {
		_spec.AddField(configurationitem.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.CreatedAt(); ok {
		_spec.SetField(configurationitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(configurationitem.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ConfigurationItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{configurationitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
