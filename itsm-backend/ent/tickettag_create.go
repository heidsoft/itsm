// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/tickettag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketTagCreate is the builder for creating a TicketTag entity.
type TicketTagCreate struct {
	config
	mutation *TicketTagMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ttc *TicketTagCreate) SetName(s string) *TicketTagCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetColor sets the "color" field.
func (ttc *TicketTagCreate) SetColor(s string) *TicketTagCreate {
	ttc.mutation.SetColor(s)
	return ttc
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ttc *TicketTagCreate) SetNillableColor(s *string) *TicketTagCreate {
	if s != nil {
		ttc.SetColor(*s)
	}
	return ttc
}

// SetDescription sets the "description" field.
func (ttc *TicketTagCreate) SetDescription(s string) *TicketTagCreate {
	ttc.mutation.SetDescription(s)
	return ttc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttc *TicketTagCreate) SetNillableDescription(s *string) *TicketTagCreate {
	if s != nil {
		ttc.SetDescription(*s)
	}
	return ttc
}

// SetIsActive sets the "is_active" field.
func (ttc *TicketTagCreate) SetIsActive(b bool) *TicketTagCreate {
	ttc.mutation.SetIsActive(b)
	return ttc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ttc *TicketTagCreate) SetNillableIsActive(b *bool) *TicketTagCreate {
	if b != nil {
		ttc.SetIsActive(*b)
	}
	return ttc
}

// SetTenantID sets the "tenant_id" field.
func (ttc *TicketTagCreate) SetTenantID(i int) *TicketTagCreate {
	ttc.mutation.SetTenantID(i)
	return ttc
}

// SetCreatedAt sets the "created_at" field.
func (ttc *TicketTagCreate) SetCreatedAt(t time.Time) *TicketTagCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttc *TicketTagCreate) SetNillableCreatedAt(t *time.Time) *TicketTagCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttc *TicketTagCreate) SetUpdatedAt(t time.Time) *TicketTagCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttc *TicketTagCreate) SetNillableUpdatedAt(t *time.Time) *TicketTagCreate {
	if t != nil {
		ttc.SetUpdatedAt(*t)
	}
	return ttc
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ttc *TicketTagCreate) AddTicketIDs(ids ...int) *TicketTagCreate {
	ttc.mutation.AddTicketIDs(ids...)
	return ttc
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ttc *TicketTagCreate) AddTickets(t ...*Ticket) *TicketTagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTicketIDs(ids...)
}

// Mutation returns the TicketTagMutation object of the builder.
func (ttc *TicketTagCreate) Mutation() *TicketTagMutation {
	return ttc.mutation
}

// Save creates the TicketTag in the database.
func (ttc *TicketTagCreate) Save(ctx context.Context) (*TicketTag, error) {
	ttc.defaults()
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TicketTagCreate) SaveX(ctx context.Context) *TicketTag {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TicketTagCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TicketTagCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TicketTagCreate) defaults() {
	if _, ok := ttc.mutation.Color(); !ok {
		v := tickettag.DefaultColor
		ttc.mutation.SetColor(v)
	}
	if _, ok := ttc.mutation.IsActive(); !ok {
		v := tickettag.DefaultIsActive
		ttc.mutation.SetIsActive(v)
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := tickettag.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		v := tickettag.DefaultUpdatedAt()
		ttc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TicketTagCreate) check() error {
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TicketTag.name"`)}
	}
	if v, ok := ttc.mutation.Name(); ok {
		if err := tickettag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketTag.name": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "TicketTag.color"`)}
	}
	if _, ok := ttc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "TicketTag.is_active"`)}
	}
	if _, ok := ttc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TicketTag.tenant_id"`)}
	}
	if v, ok := ttc.mutation.TenantID(); ok {
		if err := tickettag.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketTag.tenant_id": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TicketTag.created_at"`)}
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TicketTag.updated_at"`)}
	}
	return nil
}

func (ttc *TicketTagCreate) sqlSave(ctx context.Context) (*TicketTag, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TicketTagCreate) createSpec() (*TicketTag, *sqlgraph.CreateSpec) {
	var (
		_node = &TicketTag{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tickettag.Table, sqlgraph.NewFieldSpec(tickettag.FieldID, field.TypeInt))
	)
	if value, ok := ttc.mutation.Name(); ok {
		_spec.SetField(tickettag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ttc.mutation.Color(); ok {
		_spec.SetField(tickettag.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := ttc.mutation.Description(); ok {
		_spec.SetField(tickettag.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ttc.mutation.IsActive(); ok {
		_spec.SetField(tickettag.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ttc.mutation.TenantID(); ok {
		_spec.SetField(tickettag.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.SetField(tickettag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.SetField(tickettag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ttc.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TicketTagCreateBulk is the builder for creating many TicketTag entities in bulk.
type TicketTagCreateBulk struct {
	config
	err      error
	builders []*TicketTagCreate
}

// Save creates the TicketTag entities in the database.
func (ttcb *TicketTagCreateBulk) Save(ctx context.Context) ([]*TicketTag, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TicketTag, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TicketTagCreateBulk) SaveX(ctx context.Context) []*TicketTag {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TicketTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TicketTagCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
