// Code generated by ent, DO NOT EDIT.

package cilifecyclestate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cilifecyclestate type in the database.
	Label = "ci_lifecycle_state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCiID holds the string denoting the ci_id field in the database.
	FieldCiID = "ci_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldSubState holds the string denoting the sub_state field in the database.
	FieldSubState = "sub_state"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldChangedBy holds the string denoting the changed_by field in the database.
	FieldChangedBy = "changed_by"
	// FieldChangedAt holds the string denoting the changed_at field in the database.
	FieldChangedAt = "changed_at"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeConfigurationItem holds the string denoting the configuration_item edge name in mutations.
	EdgeConfigurationItem = "configuration_item"
	// Table holds the table name of the cilifecyclestate in the database.
	Table = "ci_lifecycle_states"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "ci_lifecycle_states"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ConfigurationItemTable is the table that holds the configuration_item relation/edge.
	ConfigurationItemTable = "ci_lifecycle_states"
	// ConfigurationItemInverseTable is the table name for the ConfigurationItem entity.
	// It exists in this package in order to avoid circular dependency with the "configurationitem" package.
	ConfigurationItemInverseTable = "configuration_items"
	// ConfigurationItemColumn is the table column denoting the configuration_item relation/edge.
	ConfigurationItemColumn = "ci_id"
)

// Columns holds all SQL columns for cilifecyclestate fields.
var Columns = []string{
	FieldID,
	FieldCiID,
	FieldState,
	FieldSubState,
	FieldReason,
	FieldChangedBy,
	FieldChangedAt,
	FieldMetadata,
	FieldTenantID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// ChangedByValidator is a validator for the "changed_by" field. It is called by the builders before save.
	ChangedByValidator func(string) error
	// DefaultChangedAt holds the default value on creation for the "changed_at" field.
	DefaultChangedAt func() time.Time
)

// OrderOption defines the ordering options for the CILifecycleState queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCiID orders the results by the ci_id field.
func ByCiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCiID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// BySubState orders the results by the sub_state field.
func BySubState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubState, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByChangedBy orders the results by the changed_by field.
func ByChangedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangedBy, opts...).ToFunc()
}

// ByChangedAt orders the results by the changed_at field.
func ByChangedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByConfigurationItemField orders the results by configuration_item field.
func ByConfigurationItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigurationItemStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newConfigurationItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigurationItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConfigurationItemTable, ConfigurationItemColumn),
	)
}
