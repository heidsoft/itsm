// Code generated by ent, DO NOT EDIT.

package cilifecyclestate

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldID, id))
}

// CiID applies equality check predicate on the "ci_id" field. It's identical to CiIDEQ.
func CiID(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldCiID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldState, v))
}

// SubState applies equality check predicate on the "sub_state" field. It's identical to SubStateEQ.
func SubState(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldSubState, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldReason, v))
}

// ChangedBy applies equality check predicate on the "changed_by" field. It's identical to ChangedByEQ.
func ChangedBy(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldChangedBy, v))
}

// ChangedAt applies equality check predicate on the "changed_at" field. It's identical to ChangedAtEQ.
func ChangedAt(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldChangedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldTenantID, v))
}

// CiIDEQ applies the EQ predicate on the "ci_id" field.
func CiIDEQ(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldCiID, v))
}

// CiIDNEQ applies the NEQ predicate on the "ci_id" field.
func CiIDNEQ(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldCiID, v))
}

// CiIDIn applies the In predicate on the "ci_id" field.
func CiIDIn(vs ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldCiID, vs...))
}

// CiIDNotIn applies the NotIn predicate on the "ci_id" field.
func CiIDNotIn(vs ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldCiID, vs...))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContainsFold(FieldState, v))
}

// SubStateEQ applies the EQ predicate on the "sub_state" field.
func SubStateEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldSubState, v))
}

// SubStateNEQ applies the NEQ predicate on the "sub_state" field.
func SubStateNEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldSubState, v))
}

// SubStateIn applies the In predicate on the "sub_state" field.
func SubStateIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldSubState, vs...))
}

// SubStateNotIn applies the NotIn predicate on the "sub_state" field.
func SubStateNotIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldSubState, vs...))
}

// SubStateGT applies the GT predicate on the "sub_state" field.
func SubStateGT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldSubState, v))
}

// SubStateGTE applies the GTE predicate on the "sub_state" field.
func SubStateGTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldSubState, v))
}

// SubStateLT applies the LT predicate on the "sub_state" field.
func SubStateLT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldSubState, v))
}

// SubStateLTE applies the LTE predicate on the "sub_state" field.
func SubStateLTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldSubState, v))
}

// SubStateContains applies the Contains predicate on the "sub_state" field.
func SubStateContains(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContains(FieldSubState, v))
}

// SubStateHasPrefix applies the HasPrefix predicate on the "sub_state" field.
func SubStateHasPrefix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasPrefix(FieldSubState, v))
}

// SubStateHasSuffix applies the HasSuffix predicate on the "sub_state" field.
func SubStateHasSuffix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasSuffix(FieldSubState, v))
}

// SubStateIsNil applies the IsNil predicate on the "sub_state" field.
func SubStateIsNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIsNull(FieldSubState))
}

// SubStateNotNil applies the NotNil predicate on the "sub_state" field.
func SubStateNotNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotNull(FieldSubState))
}

// SubStateEqualFold applies the EqualFold predicate on the "sub_state" field.
func SubStateEqualFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEqualFold(FieldSubState, v))
}

// SubStateContainsFold applies the ContainsFold predicate on the "sub_state" field.
func SubStateContainsFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContainsFold(FieldSubState, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContainsFold(FieldReason, v))
}

// ChangedByEQ applies the EQ predicate on the "changed_by" field.
func ChangedByEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldChangedBy, v))
}

// ChangedByNEQ applies the NEQ predicate on the "changed_by" field.
func ChangedByNEQ(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldChangedBy, v))
}

// ChangedByIn applies the In predicate on the "changed_by" field.
func ChangedByIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldChangedBy, vs...))
}

// ChangedByNotIn applies the NotIn predicate on the "changed_by" field.
func ChangedByNotIn(vs ...string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldChangedBy, vs...))
}

// ChangedByGT applies the GT predicate on the "changed_by" field.
func ChangedByGT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldChangedBy, v))
}

// ChangedByGTE applies the GTE predicate on the "changed_by" field.
func ChangedByGTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldChangedBy, v))
}

// ChangedByLT applies the LT predicate on the "changed_by" field.
func ChangedByLT(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldChangedBy, v))
}

// ChangedByLTE applies the LTE predicate on the "changed_by" field.
func ChangedByLTE(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldChangedBy, v))
}

// ChangedByContains applies the Contains predicate on the "changed_by" field.
func ChangedByContains(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContains(FieldChangedBy, v))
}

// ChangedByHasPrefix applies the HasPrefix predicate on the "changed_by" field.
func ChangedByHasPrefix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasPrefix(FieldChangedBy, v))
}

// ChangedByHasSuffix applies the HasSuffix predicate on the "changed_by" field.
func ChangedByHasSuffix(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldHasSuffix(FieldChangedBy, v))
}

// ChangedByEqualFold applies the EqualFold predicate on the "changed_by" field.
func ChangedByEqualFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEqualFold(FieldChangedBy, v))
}

// ChangedByContainsFold applies the ContainsFold predicate on the "changed_by" field.
func ChangedByContainsFold(v string) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldContainsFold(FieldChangedBy, v))
}

// ChangedAtEQ applies the EQ predicate on the "changed_at" field.
func ChangedAtEQ(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldChangedAt, v))
}

// ChangedAtNEQ applies the NEQ predicate on the "changed_at" field.
func ChangedAtNEQ(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldChangedAt, v))
}

// ChangedAtIn applies the In predicate on the "changed_at" field.
func ChangedAtIn(vs ...time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldChangedAt, vs...))
}

// ChangedAtNotIn applies the NotIn predicate on the "changed_at" field.
func ChangedAtNotIn(vs ...time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldChangedAt, vs...))
}

// ChangedAtGT applies the GT predicate on the "changed_at" field.
func ChangedAtGT(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGT(FieldChangedAt, v))
}

// ChangedAtGTE applies the GTE predicate on the "changed_at" field.
func ChangedAtGTE(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldGTE(FieldChangedAt, v))
}

// ChangedAtLT applies the LT predicate on the "changed_at" field.
func ChangedAtLT(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLT(FieldChangedAt, v))
}

// ChangedAtLTE applies the LTE predicate on the "changed_at" field.
func ChangedAtLTE(v time.Time) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldLTE(FieldChangedAt, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotNull(FieldMetadata))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.FieldNotIn(FieldTenantID, vs...))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CILifecycleState {
	return predicate.CILifecycleState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CILifecycleState {
	return predicate.CILifecycleState(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConfigurationItem applies the HasEdge predicate on the "configuration_item" edge.
func HasConfigurationItem() predicate.CILifecycleState {
	return predicate.CILifecycleState(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConfigurationItemTable, ConfigurationItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConfigurationItemWith applies the HasEdge predicate on the "configuration_item" edge with a given conditions (other predicates).
func HasConfigurationItemWith(preds ...predicate.ConfigurationItem) predicate.CILifecycleState {
	return predicate.CILifecycleState(func(s *sql.Selector) {
		step := newConfigurationItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CILifecycleState) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CILifecycleState) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CILifecycleState) predicate.CILifecycleState {
	return predicate.CILifecycleState(sql.NotPredicates(p))
}
