// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/processvariable"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessVariable is the model entity for the ProcessVariable schema.
type ProcessVariable struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 变量ID
	VariableID string `json:"variable_id,omitempty"`
	// 流程实例ID
	ProcessInstanceID string `json:"process_instance_id,omitempty"`
	// 任务ID，可选
	TaskID string `json:"task_id,omitempty"`
	// 变量名称
	VariableName string `json:"variable_name,omitempty"`
	// 变量类型：string, integer, long, double, boolean, date, object
	VariableType string `json:"variable_type,omitempty"`
	// 变量值
	VariableValue string `json:"variable_value,omitempty"`
	// 变量作用域：process, task, global
	Scope string `json:"scope,omitempty"`
	// 是否临时变量
	IsTransient bool `json:"is_transient,omitempty"`
	// 序列化格式：json, xml, binary
	SerializationFormat string `json:"serialization_format,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessVariable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processvariable.FieldIsTransient:
			values[i] = new(sql.NullBool)
		case processvariable.FieldID, processvariable.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processvariable.FieldVariableID, processvariable.FieldProcessInstanceID, processvariable.FieldTaskID, processvariable.FieldVariableName, processvariable.FieldVariableType, processvariable.FieldVariableValue, processvariable.FieldScope, processvariable.FieldSerializationFormat:
			values[i] = new(sql.NullString)
		case processvariable.FieldCreatedAt, processvariable.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessVariable fields.
func (pv *ProcessVariable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processvariable.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int(value.Int64)
		case processvariable.FieldVariableID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variable_id", values[i])
			} else if value.Valid {
				pv.VariableID = value.String
			}
		case processvariable.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				pv.ProcessInstanceID = value.String
			}
		case processvariable.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				pv.TaskID = value.String
			}
		case processvariable.FieldVariableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variable_name", values[i])
			} else if value.Valid {
				pv.VariableName = value.String
			}
		case processvariable.FieldVariableType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variable_type", values[i])
			} else if value.Valid {
				pv.VariableType = value.String
			}
		case processvariable.FieldVariableValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variable_value", values[i])
			} else if value.Valid {
				pv.VariableValue = value.String
			}
		case processvariable.FieldScope:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope", values[i])
			} else if value.Valid {
				pv.Scope = value.String
			}
		case processvariable.FieldIsTransient:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_transient", values[i])
			} else if value.Valid {
				pv.IsTransient = value.Bool
			}
		case processvariable.FieldSerializationFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serialization_format", values[i])
			} else if value.Valid {
				pv.SerializationFormat = value.String
			}
		case processvariable.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pv.TenantID = int(value.Int64)
			}
		case processvariable.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pv.CreatedAt = value.Time
			}
		case processvariable.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pv.UpdatedAt = value.Time
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessVariable.
// This includes values selected through modifiers, order, etc.
func (pv *ProcessVariable) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessVariable.
// Note that you need to call ProcessVariable.Unwrap() before calling this method if this ProcessVariable
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProcessVariable) Update() *ProcessVariableUpdateOne {
	return NewProcessVariableClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProcessVariable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProcessVariable) Unwrap() *ProcessVariable {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessVariable is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProcessVariable) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessVariable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("variable_id=")
	builder.WriteString(pv.VariableID)
	builder.WriteString(", ")
	builder.WriteString("process_instance_id=")
	builder.WriteString(pv.ProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(pv.TaskID)
	builder.WriteString(", ")
	builder.WriteString("variable_name=")
	builder.WriteString(pv.VariableName)
	builder.WriteString(", ")
	builder.WriteString("variable_type=")
	builder.WriteString(pv.VariableType)
	builder.WriteString(", ")
	builder.WriteString("variable_value=")
	builder.WriteString(pv.VariableValue)
	builder.WriteString(", ")
	builder.WriteString("scope=")
	builder.WriteString(pv.Scope)
	builder.WriteString(", ")
	builder.WriteString("is_transient=")
	builder.WriteString(fmt.Sprintf("%v", pv.IsTransient))
	builder.WriteString(", ")
	builder.WriteString("serialization_format=")
	builder.WriteString(pv.SerializationFormat)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessVariables is a parsable slice of ProcessVariable.
type ProcessVariables []*ProcessVariable
