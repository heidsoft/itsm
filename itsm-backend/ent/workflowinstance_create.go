// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/workflow"
	"itsm-backend/ent/workflowinstance"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkflowInstanceCreate is the builder for creating a WorkflowInstance entity.
type WorkflowInstanceCreate struct {
	config
	mutation *WorkflowInstanceMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (wic *WorkflowInstanceCreate) SetStatus(s string) *WorkflowInstanceCreate {
	wic.mutation.SetStatus(s)
	return wic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableStatus(s *string) *WorkflowInstanceCreate {
	if s != nil {
		wic.SetStatus(*s)
	}
	return wic
}

// SetCurrentStep sets the "current_step" field.
func (wic *WorkflowInstanceCreate) SetCurrentStep(s string) *WorkflowInstanceCreate {
	wic.mutation.SetCurrentStep(s)
	return wic
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableCurrentStep(s *string) *WorkflowInstanceCreate {
	if s != nil {
		wic.SetCurrentStep(*s)
	}
	return wic
}

// SetContext sets the "context" field.
func (wic *WorkflowInstanceCreate) SetContext(u []uint8) *WorkflowInstanceCreate {
	wic.mutation.SetContext(u)
	return wic
}

// SetWorkflowID sets the "workflow_id" field.
func (wic *WorkflowInstanceCreate) SetWorkflowID(i int) *WorkflowInstanceCreate {
	wic.mutation.SetWorkflowID(i)
	return wic
}

// SetEntityID sets the "entity_id" field.
func (wic *WorkflowInstanceCreate) SetEntityID(i int) *WorkflowInstanceCreate {
	wic.mutation.SetEntityID(i)
	return wic
}

// SetEntityType sets the "entity_type" field.
func (wic *WorkflowInstanceCreate) SetEntityType(s string) *WorkflowInstanceCreate {
	wic.mutation.SetEntityType(s)
	return wic
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableEntityType(s *string) *WorkflowInstanceCreate {
	if s != nil {
		wic.SetEntityType(*s)
	}
	return wic
}

// SetTenantID sets the "tenant_id" field.
func (wic *WorkflowInstanceCreate) SetTenantID(i int) *WorkflowInstanceCreate {
	wic.mutation.SetTenantID(i)
	return wic
}

// SetStartedAt sets the "started_at" field.
func (wic *WorkflowInstanceCreate) SetStartedAt(t time.Time) *WorkflowInstanceCreate {
	wic.mutation.SetStartedAt(t)
	return wic
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableStartedAt(t *time.Time) *WorkflowInstanceCreate {
	if t != nil {
		wic.SetStartedAt(*t)
	}
	return wic
}

// SetCompletedAt sets the "completed_at" field.
func (wic *WorkflowInstanceCreate) SetCompletedAt(t time.Time) *WorkflowInstanceCreate {
	wic.mutation.SetCompletedAt(t)
	return wic
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableCompletedAt(t *time.Time) *WorkflowInstanceCreate {
	if t != nil {
		wic.SetCompletedAt(*t)
	}
	return wic
}

// SetCreatedAt sets the "created_at" field.
func (wic *WorkflowInstanceCreate) SetCreatedAt(t time.Time) *WorkflowInstanceCreate {
	wic.mutation.SetCreatedAt(t)
	return wic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableCreatedAt(t *time.Time) *WorkflowInstanceCreate {
	if t != nil {
		wic.SetCreatedAt(*t)
	}
	return wic
}

// SetUpdatedAt sets the "updated_at" field.
func (wic *WorkflowInstanceCreate) SetUpdatedAt(t time.Time) *WorkflowInstanceCreate {
	wic.mutation.SetUpdatedAt(t)
	return wic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wic *WorkflowInstanceCreate) SetNillableUpdatedAt(t *time.Time) *WorkflowInstanceCreate {
	if t != nil {
		wic.SetUpdatedAt(*t)
	}
	return wic
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wic *WorkflowInstanceCreate) SetWorkflow(w *Workflow) *WorkflowInstanceCreate {
	return wic.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowInstanceMutation object of the builder.
func (wic *WorkflowInstanceCreate) Mutation() *WorkflowInstanceMutation {
	return wic.mutation
}

// Save creates the WorkflowInstance in the database.
func (wic *WorkflowInstanceCreate) Save(ctx context.Context) (*WorkflowInstance, error) {
	wic.defaults()
	return withHooks(ctx, wic.sqlSave, wic.mutation, wic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wic *WorkflowInstanceCreate) SaveX(ctx context.Context) *WorkflowInstance {
	v, err := wic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wic *WorkflowInstanceCreate) Exec(ctx context.Context) error {
	_, err := wic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wic *WorkflowInstanceCreate) ExecX(ctx context.Context) {
	if err := wic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wic *WorkflowInstanceCreate) defaults() {
	if _, ok := wic.mutation.Status(); !ok {
		v := workflowinstance.DefaultStatus
		wic.mutation.SetStatus(v)
	}
	if _, ok := wic.mutation.EntityType(); !ok {
		v := workflowinstance.DefaultEntityType
		wic.mutation.SetEntityType(v)
	}
	if _, ok := wic.mutation.StartedAt(); !ok {
		v := workflowinstance.DefaultStartedAt()
		wic.mutation.SetStartedAt(v)
	}
	if _, ok := wic.mutation.CreatedAt(); !ok {
		v := workflowinstance.DefaultCreatedAt()
		wic.mutation.SetCreatedAt(v)
	}
	if _, ok := wic.mutation.UpdatedAt(); !ok {
		v := workflowinstance.DefaultUpdatedAt()
		wic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wic *WorkflowInstanceCreate) check() error {
	if _, ok := wic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkflowInstance.status"`)}
	}
	if _, ok := wic.mutation.WorkflowID(); !ok {
		return &ValidationError{Name: "workflow_id", err: errors.New(`ent: missing required field "WorkflowInstance.workflow_id"`)}
	}
	if v, ok := wic.mutation.WorkflowID(); ok {
		if err := workflowinstance.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.workflow_id": %w`, err)}
		}
	}
	if _, ok := wic.mutation.EntityID(); !ok {
		return &ValidationError{Name: "entity_id", err: errors.New(`ent: missing required field "WorkflowInstance.entity_id"`)}
	}
	if v, ok := wic.mutation.EntityID(); ok {
		if err := workflowinstance.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.entity_id": %w`, err)}
		}
	}
	if _, ok := wic.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "WorkflowInstance.entity_type"`)}
	}
	if _, ok := wic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "WorkflowInstance.tenant_id"`)}
	}
	if v, ok := wic.mutation.TenantID(); ok {
		if err := workflowinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.tenant_id": %w`, err)}
		}
	}
	if _, ok := wic.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`ent: missing required field "WorkflowInstance.started_at"`)}
	}
	if _, ok := wic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkflowInstance.created_at"`)}
	}
	if _, ok := wic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkflowInstance.updated_at"`)}
	}
	if len(wic.mutation.WorkflowIDs()) == 0 {
		return &ValidationError{Name: "workflow", err: errors.New(`ent: missing required edge "WorkflowInstance.workflow"`)}
	}
	return nil
}

func (wic *WorkflowInstanceCreate) sqlSave(ctx context.Context) (*WorkflowInstance, error) {
	if err := wic.check(); err != nil {
		return nil, err
	}
	_node, _spec := wic.createSpec()
	if err := sqlgraph.CreateNode(ctx, wic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wic.mutation.id = &_node.ID
	wic.mutation.done = true
	return _node, nil
}

func (wic *WorkflowInstanceCreate) createSpec() (*WorkflowInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowInstance{config: wic.config}
		_spec = sqlgraph.NewCreateSpec(workflowinstance.Table, sqlgraph.NewFieldSpec(workflowinstance.FieldID, field.TypeInt))
	)
	if value, ok := wic.mutation.Status(); ok {
		_spec.SetField(workflowinstance.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := wic.mutation.CurrentStep(); ok {
		_spec.SetField(workflowinstance.FieldCurrentStep, field.TypeString, value)
		_node.CurrentStep = value
	}
	if value, ok := wic.mutation.Context(); ok {
		_spec.SetField(workflowinstance.FieldContext, field.TypeJSON, value)
		_node.Context = value
	}
	if value, ok := wic.mutation.EntityID(); ok {
		_spec.SetField(workflowinstance.FieldEntityID, field.TypeInt, value)
		_node.EntityID = value
	}
	if value, ok := wic.mutation.EntityType(); ok {
		_spec.SetField(workflowinstance.FieldEntityType, field.TypeString, value)
		_node.EntityType = value
	}
	if value, ok := wic.mutation.TenantID(); ok {
		_spec.SetField(workflowinstance.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := wic.mutation.StartedAt(); ok {
		_spec.SetField(workflowinstance.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := wic.mutation.CompletedAt(); ok {
		_spec.SetField(workflowinstance.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := wic.mutation.CreatedAt(); ok {
		_spec.SetField(workflowinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wic.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := wic.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowInstanceCreateBulk is the builder for creating many WorkflowInstance entities in bulk.
type WorkflowInstanceCreateBulk struct {
	config
	err      error
	builders []*WorkflowInstanceCreate
}

// Save creates the WorkflowInstance entities in the database.
func (wicb *WorkflowInstanceCreateBulk) Save(ctx context.Context) ([]*WorkflowInstance, error) {
	if wicb.err != nil {
		return nil, wicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wicb.builders))
	nodes := make([]*WorkflowInstance, len(wicb.builders))
	mutators := make([]Mutator, len(wicb.builders))
	for i := range wicb.builders {
		func(i int, root context.Context) {
			builder := wicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wicb *WorkflowInstanceCreateBulk) SaveX(ctx context.Context) []*WorkflowInstance {
	v, err := wicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wicb *WorkflowInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := wicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wicb *WorkflowInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := wicb.Exec(ctx); err != nil {
		panic(err)
	}
}
