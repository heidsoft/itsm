// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/conversation"
	"itsm-backend/ent/toolinvocation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolInvocationCreate is the builder for creating a ToolInvocation entity.
type ToolInvocationCreate struct {
	config
	mutation *ToolInvocationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tic *ToolInvocationCreate) SetCreatedAt(t time.Time) *ToolInvocationCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableCreatedAt(t *time.Time) *ToolInvocationCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetConversationID sets the "conversation_id" field.
func (tic *ToolInvocationCreate) SetConversationID(i int) *ToolInvocationCreate {
	tic.mutation.SetConversationID(i)
	return tic
}

// SetToolName sets the "tool_name" field.
func (tic *ToolInvocationCreate) SetToolName(s string) *ToolInvocationCreate {
	tic.mutation.SetToolName(s)
	return tic
}

// SetArguments sets the "arguments" field.
func (tic *ToolInvocationCreate) SetArguments(s string) *ToolInvocationCreate {
	tic.mutation.SetArguments(s)
	return tic
}

// SetNillableArguments sets the "arguments" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableArguments(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetArguments(*s)
	}
	return tic
}

// SetResult sets the "result" field.
func (tic *ToolInvocationCreate) SetResult(s string) *ToolInvocationCreate {
	tic.mutation.SetResult(s)
	return tic
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableResult(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetResult(*s)
	}
	return tic
}

// SetStatus sets the "status" field.
func (tic *ToolInvocationCreate) SetStatus(s string) *ToolInvocationCreate {
	tic.mutation.SetStatus(s)
	return tic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableStatus(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetStatus(*s)
	}
	return tic
}

// SetRequestID sets the "request_id" field.
func (tic *ToolInvocationCreate) SetRequestID(s string) *ToolInvocationCreate {
	tic.mutation.SetRequestID(s)
	return tic
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableRequestID(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetRequestID(*s)
	}
	return tic
}

// SetNeedsApproval sets the "needs_approval" field.
func (tic *ToolInvocationCreate) SetNeedsApproval(b bool) *ToolInvocationCreate {
	tic.mutation.SetNeedsApproval(b)
	return tic
}

// SetNillableNeedsApproval sets the "needs_approval" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableNeedsApproval(b *bool) *ToolInvocationCreate {
	if b != nil {
		tic.SetNeedsApproval(*b)
	}
	return tic
}

// SetApprovalState sets the "approval_state" field.
func (tic *ToolInvocationCreate) SetApprovalState(s string) *ToolInvocationCreate {
	tic.mutation.SetApprovalState(s)
	return tic
}

// SetNillableApprovalState sets the "approval_state" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableApprovalState(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetApprovalState(*s)
	}
	return tic
}

// SetApprovalReason sets the "approval_reason" field.
func (tic *ToolInvocationCreate) SetApprovalReason(s string) *ToolInvocationCreate {
	tic.mutation.SetApprovalReason(s)
	return tic
}

// SetNillableApprovalReason sets the "approval_reason" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableApprovalReason(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetApprovalReason(*s)
	}
	return tic
}

// SetApprovedBy sets the "approved_by" field.
func (tic *ToolInvocationCreate) SetApprovedBy(i int) *ToolInvocationCreate {
	tic.mutation.SetApprovedBy(i)
	return tic
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableApprovedBy(i *int) *ToolInvocationCreate {
	if i != nil {
		tic.SetApprovedBy(*i)
	}
	return tic
}

// SetApprovedAt sets the "approved_at" field.
func (tic *ToolInvocationCreate) SetApprovedAt(t time.Time) *ToolInvocationCreate {
	tic.mutation.SetApprovedAt(t)
	return tic
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableApprovedAt(t *time.Time) *ToolInvocationCreate {
	if t != nil {
		tic.SetApprovedAt(*t)
	}
	return tic
}

// SetDryRun sets the "dry_run" field.
func (tic *ToolInvocationCreate) SetDryRun(b bool) *ToolInvocationCreate {
	tic.mutation.SetDryRun(b)
	return tic
}

// SetNillableDryRun sets the "dry_run" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableDryRun(b *bool) *ToolInvocationCreate {
	if b != nil {
		tic.SetDryRun(*b)
	}
	return tic
}

// SetError sets the "error" field.
func (tic *ToolInvocationCreate) SetError(s string) *ToolInvocationCreate {
	tic.mutation.SetError(s)
	return tic
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tic *ToolInvocationCreate) SetNillableError(s *string) *ToolInvocationCreate {
	if s != nil {
		tic.SetError(*s)
	}
	return tic
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (tic *ToolInvocationCreate) SetConversation(c *Conversation) *ToolInvocationCreate {
	return tic.SetConversationID(c.ID)
}

// Mutation returns the ToolInvocationMutation object of the builder.
func (tic *ToolInvocationCreate) Mutation() *ToolInvocationMutation {
	return tic.mutation
}

// Save creates the ToolInvocation in the database.
func (tic *ToolInvocationCreate) Save(ctx context.Context) (*ToolInvocation, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *ToolInvocationCreate) SaveX(ctx context.Context) *ToolInvocation {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *ToolInvocationCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *ToolInvocationCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *ToolInvocationCreate) defaults() {
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := toolinvocation.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
	if _, ok := tic.mutation.Arguments(); !ok {
		v := toolinvocation.DefaultArguments
		tic.mutation.SetArguments(v)
	}
	if _, ok := tic.mutation.Status(); !ok {
		v := toolinvocation.DefaultStatus
		tic.mutation.SetStatus(v)
	}
	if _, ok := tic.mutation.NeedsApproval(); !ok {
		v := toolinvocation.DefaultNeedsApproval
		tic.mutation.SetNeedsApproval(v)
	}
	if _, ok := tic.mutation.ApprovalState(); !ok {
		v := toolinvocation.DefaultApprovalState
		tic.mutation.SetApprovalState(v)
	}
	if _, ok := tic.mutation.ApprovalReason(); !ok {
		v := toolinvocation.DefaultApprovalReason
		tic.mutation.SetApprovalReason(v)
	}
	if _, ok := tic.mutation.DryRun(); !ok {
		v := toolinvocation.DefaultDryRun
		tic.mutation.SetDryRun(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *ToolInvocationCreate) check() error {
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ToolInvocation.created_at"`)}
	}
	if _, ok := tic.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`ent: missing required field "ToolInvocation.conversation_id"`)}
	}
	if _, ok := tic.mutation.ToolName(); !ok {
		return &ValidationError{Name: "tool_name", err: errors.New(`ent: missing required field "ToolInvocation.tool_name"`)}
	}
	if _, ok := tic.mutation.Arguments(); !ok {
		return &ValidationError{Name: "arguments", err: errors.New(`ent: missing required field "ToolInvocation.arguments"`)}
	}
	if _, ok := tic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ToolInvocation.status"`)}
	}
	if _, ok := tic.mutation.NeedsApproval(); !ok {
		return &ValidationError{Name: "needs_approval", err: errors.New(`ent: missing required field "ToolInvocation.needs_approval"`)}
	}
	if _, ok := tic.mutation.ApprovalState(); !ok {
		return &ValidationError{Name: "approval_state", err: errors.New(`ent: missing required field "ToolInvocation.approval_state"`)}
	}
	if _, ok := tic.mutation.ApprovalReason(); !ok {
		return &ValidationError{Name: "approval_reason", err: errors.New(`ent: missing required field "ToolInvocation.approval_reason"`)}
	}
	if _, ok := tic.mutation.DryRun(); !ok {
		return &ValidationError{Name: "dry_run", err: errors.New(`ent: missing required field "ToolInvocation.dry_run"`)}
	}
	if len(tic.mutation.ConversationIDs()) == 0 {
		return &ValidationError{Name: "conversation", err: errors.New(`ent: missing required edge "ToolInvocation.conversation"`)}
	}
	return nil
}

func (tic *ToolInvocationCreate) sqlSave(ctx context.Context) (*ToolInvocation, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *ToolInvocationCreate) createSpec() (*ToolInvocation, *sqlgraph.CreateSpec) {
	var (
		_node = &ToolInvocation{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(toolinvocation.Table, sqlgraph.NewFieldSpec(toolinvocation.FieldID, field.TypeInt))
	)
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.SetField(toolinvocation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tic.mutation.ToolName(); ok {
		_spec.SetField(toolinvocation.FieldToolName, field.TypeString, value)
		_node.ToolName = value
	}
	if value, ok := tic.mutation.Arguments(); ok {
		_spec.SetField(toolinvocation.FieldArguments, field.TypeString, value)
		_node.Arguments = value
	}
	if value, ok := tic.mutation.Result(); ok {
		_spec.SetField(toolinvocation.FieldResult, field.TypeString, value)
		_node.Result = &value
	}
	if value, ok := tic.mutation.Status(); ok {
		_spec.SetField(toolinvocation.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tic.mutation.RequestID(); ok {
		_spec.SetField(toolinvocation.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := tic.mutation.NeedsApproval(); ok {
		_spec.SetField(toolinvocation.FieldNeedsApproval, field.TypeBool, value)
		_node.NeedsApproval = value
	}
	if value, ok := tic.mutation.ApprovalState(); ok {
		_spec.SetField(toolinvocation.FieldApprovalState, field.TypeString, value)
		_node.ApprovalState = value
	}
	if value, ok := tic.mutation.ApprovalReason(); ok {
		_spec.SetField(toolinvocation.FieldApprovalReason, field.TypeString, value)
		_node.ApprovalReason = value
	}
	if value, ok := tic.mutation.ApprovedBy(); ok {
		_spec.SetField(toolinvocation.FieldApprovedBy, field.TypeInt, value)
		_node.ApprovedBy = value
	}
	if value, ok := tic.mutation.ApprovedAt(); ok {
		_spec.SetField(toolinvocation.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = value
	}
	if value, ok := tic.mutation.DryRun(); ok {
		_spec.SetField(toolinvocation.FieldDryRun, field.TypeBool, value)
		_node.DryRun = value
	}
	if value, ok := tic.mutation.Error(); ok {
		_spec.SetField(toolinvocation.FieldError, field.TypeString, value)
		_node.Error = &value
	}
	if nodes := tic.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toolinvocation.ConversationTable,
			Columns: []string{toolinvocation.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConversationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ToolInvocationCreateBulk is the builder for creating many ToolInvocation entities in bulk.
type ToolInvocationCreateBulk struct {
	config
	err      error
	builders []*ToolInvocationCreate
}

// Save creates the ToolInvocation entities in the database.
func (ticb *ToolInvocationCreateBulk) Save(ctx context.Context) ([]*ToolInvocation, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*ToolInvocation, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ToolInvocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *ToolInvocationCreateBulk) SaveX(ctx context.Context) []*ToolInvocation {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *ToolInvocationCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *ToolInvocationCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
