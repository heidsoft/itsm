// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigurationItemQuery is the builder for querying ConfigurationItem entities.
type ConfigurationItemQuery struct {
	config
	ctx                       *QueryContext
	order                     []configurationitem.OrderOption
	inters                    []Interceptor
	predicates                []predicate.ConfigurationItem
	withTenant                *TenantQuery
	withCiType                *CITypeQuery
	withOutgoingRelationships *CIRelationshipQuery
	withIncomingRelationships *CIRelationshipQuery
	withLifecycleStates       *CILifecycleStateQuery
	withChangeRecords         *CIChangeRecordQuery
	withIncidents             *TicketQuery
	withChanges               *TicketQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConfigurationItemQuery builder.
func (ciq *ConfigurationItemQuery) Where(ps ...predicate.ConfigurationItem) *ConfigurationItemQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *ConfigurationItemQuery) Limit(limit int) *ConfigurationItemQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *ConfigurationItemQuery) Offset(offset int) *ConfigurationItemQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *ConfigurationItemQuery) Unique(unique bool) *ConfigurationItemQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *ConfigurationItemQuery) Order(o ...configurationitem.OrderOption) *ConfigurationItemQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryTenant chains the current query on the "tenant" edge.
func (ciq *ConfigurationItemQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, configurationitem.TenantTable, configurationitem.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCiType chains the current query on the "ci_type" edge.
func (ciq *ConfigurationItemQuery) QueryCiType() *CITypeQuery {
	query := (&CITypeClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(citype.Table, citype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, configurationitem.CiTypeTable, configurationitem.CiTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutgoingRelationships chains the current query on the "outgoing_relationships" edge.
func (ciq *ConfigurationItemQuery) QueryOutgoingRelationships() *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.OutgoingRelationshipsTable, configurationitem.OutgoingRelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncomingRelationships chains the current query on the "incoming_relationships" edge.
func (ciq *ConfigurationItemQuery) QueryIncomingRelationships() *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.IncomingRelationshipsTable, configurationitem.IncomingRelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLifecycleStates chains the current query on the "lifecycle_states" edge.
func (ciq *ConfigurationItemQuery) QueryLifecycleStates() *CILifecycleStateQuery {
	query := (&CILifecycleStateClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(cilifecyclestate.Table, cilifecyclestate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.LifecycleStatesTable, configurationitem.LifecycleStatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChangeRecords chains the current query on the "change_records" edge.
func (ciq *ConfigurationItemQuery) QueryChangeRecords() *CIChangeRecordQuery {
	query := (&CIChangeRecordClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(cichangerecord.Table, cichangerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.ChangeRecordsTable, configurationitem.ChangeRecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIncidents chains the current query on the "incidents" edge.
func (ciq *ConfigurationItemQuery) QueryIncidents() *TicketQuery {
	query := (&TicketClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.IncidentsTable, configurationitem.IncidentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChanges chains the current query on the "changes" edge.
func (ciq *ConfigurationItemQuery) QueryChanges() *TicketQuery {
	query := (&TicketClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, selector),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.ChangesTable, configurationitem.ChangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ConfigurationItem entity from the query.
// Returns a *NotFoundError when no ConfigurationItem was found.
func (ciq *ConfigurationItemQuery) First(ctx context.Context) (*ConfigurationItem, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{configurationitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) FirstX(ctx context.Context) *ConfigurationItem {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConfigurationItem ID from the query.
// Returns a *NotFoundError when no ConfigurationItem ID was found.
func (ciq *ConfigurationItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ciq.Limit(1).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{configurationitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) FirstIDX(ctx context.Context) int {
	id, err := ciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ConfigurationItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ConfigurationItem entity is found.
// Returns a *NotFoundError when no ConfigurationItem entities are found.
func (ciq *ConfigurationItemQuery) Only(ctx context.Context) (*ConfigurationItem, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{configurationitem.Label}
	default:
		return nil, &NotSingularError{configurationitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) OnlyX(ctx context.Context) *ConfigurationItem {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ConfigurationItem ID in the query.
// Returns a *NotSingularError when more than one ConfigurationItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (ciq *ConfigurationItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ciq.Limit(2).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{configurationitem.Label}
	default:
		err = &NotSingularError{configurationitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := ciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConfigurationItems.
func (ciq *ConfigurationItemQuery) All(ctx context.Context) ([]*ConfigurationItem, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryAll)
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ConfigurationItem, *ConfigurationItemQuery]()
	return withInterceptors[[]*ConfigurationItem](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) AllX(ctx context.Context) []*ConfigurationItem {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConfigurationItem IDs.
func (ciq *ConfigurationItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ciq.ctx.Unique == nil && ciq.path != nil {
		ciq.Unique(true)
	}
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryIDs)
	if err = ciq.Select(configurationitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) IDsX(ctx context.Context) []int {
	ids, err := ciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ciq *ConfigurationItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryCount)
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*ConfigurationItemQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *ConfigurationItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryExist)
	switch _, err := ciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *ConfigurationItemQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConfigurationItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *ConfigurationItemQuery) Clone() *ConfigurationItemQuery {
	if ciq == nil {
		return nil
	}
	return &ConfigurationItemQuery{
		config:                    ciq.config,
		ctx:                       ciq.ctx.Clone(),
		order:                     append([]configurationitem.OrderOption{}, ciq.order...),
		inters:                    append([]Interceptor{}, ciq.inters...),
		predicates:                append([]predicate.ConfigurationItem{}, ciq.predicates...),
		withTenant:                ciq.withTenant.Clone(),
		withCiType:                ciq.withCiType.Clone(),
		withOutgoingRelationships: ciq.withOutgoingRelationships.Clone(),
		withIncomingRelationships: ciq.withIncomingRelationships.Clone(),
		withLifecycleStates:       ciq.withLifecycleStates.Clone(),
		withChangeRecords:         ciq.withChangeRecords.Clone(),
		withIncidents:             ciq.withIncidents.Clone(),
		withChanges:               ciq.withChanges.Clone(),
		// clone intermediate query.
		sql:  ciq.sql.Clone(),
		path: ciq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithTenant(opts ...func(*TenantQuery)) *ConfigurationItemQuery {
	query := (&TenantClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withTenant = query
	return ciq
}

// WithCiType tells the query-builder to eager-load the nodes that are connected to
// the "ci_type" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithCiType(opts ...func(*CITypeQuery)) *ConfigurationItemQuery {
	query := (&CITypeClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withCiType = query
	return ciq
}

// WithOutgoingRelationships tells the query-builder to eager-load the nodes that are connected to
// the "outgoing_relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithOutgoingRelationships(opts ...func(*CIRelationshipQuery)) *ConfigurationItemQuery {
	query := (&CIRelationshipClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withOutgoingRelationships = query
	return ciq
}

// WithIncomingRelationships tells the query-builder to eager-load the nodes that are connected to
// the "incoming_relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithIncomingRelationships(opts ...func(*CIRelationshipQuery)) *ConfigurationItemQuery {
	query := (&CIRelationshipClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withIncomingRelationships = query
	return ciq
}

// WithLifecycleStates tells the query-builder to eager-load the nodes that are connected to
// the "lifecycle_states" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithLifecycleStates(opts ...func(*CILifecycleStateQuery)) *ConfigurationItemQuery {
	query := (&CILifecycleStateClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withLifecycleStates = query
	return ciq
}

// WithChangeRecords tells the query-builder to eager-load the nodes that are connected to
// the "change_records" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithChangeRecords(opts ...func(*CIChangeRecordQuery)) *ConfigurationItemQuery {
	query := (&CIChangeRecordClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withChangeRecords = query
	return ciq
}

// WithIncidents tells the query-builder to eager-load the nodes that are connected to
// the "incidents" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithIncidents(opts ...func(*TicketQuery)) *ConfigurationItemQuery {
	query := (&TicketClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withIncidents = query
	return ciq
}

// WithChanges tells the query-builder to eager-load the nodes that are connected to
// the "changes" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ConfigurationItemQuery) WithChanges(opts ...func(*TicketQuery)) *ConfigurationItemQuery {
	query := (&TicketClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withChanges = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ConfigurationItem.Query().
//		GroupBy(configurationitem.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ciq *ConfigurationItemQuery) GroupBy(field string, fields ...string) *ConfigurationItemGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConfigurationItemGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = configurationitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ConfigurationItem.Query().
//		Select(configurationitem.FieldName).
//		Scan(ctx, &v)
func (ciq *ConfigurationItemQuery) Select(fields ...string) *ConfigurationItemSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &ConfigurationItemSelect{ConfigurationItemQuery: ciq}
	sbuild.label = configurationitem.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConfigurationItemSelect configured with the given aggregations.
func (ciq *ConfigurationItemQuery) Aggregate(fns ...AggregateFunc) *ConfigurationItemSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *ConfigurationItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !configurationitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	return nil
}

func (ciq *ConfigurationItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ConfigurationItem, error) {
	var (
		nodes       = []*ConfigurationItem{}
		_spec       = ciq.querySpec()
		loadedTypes = [8]bool{
			ciq.withTenant != nil,
			ciq.withCiType != nil,
			ciq.withOutgoingRelationships != nil,
			ciq.withIncomingRelationships != nil,
			ciq.withLifecycleStates != nil,
			ciq.withChangeRecords != nil,
			ciq.withIncidents != nil,
			ciq.withChanges != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ConfigurationItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ConfigurationItem{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withTenant; query != nil {
		if err := ciq.loadTenant(ctx, query, nodes, nil,
			func(n *ConfigurationItem, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withCiType; query != nil {
		if err := ciq.loadCiType(ctx, query, nodes, nil,
			func(n *ConfigurationItem, e *CIType) { n.Edges.CiType = e }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withOutgoingRelationships; query != nil {
		if err := ciq.loadOutgoingRelationships(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.OutgoingRelationships = []*CIRelationship{} },
			func(n *ConfigurationItem, e *CIRelationship) {
				n.Edges.OutgoingRelationships = append(n.Edges.OutgoingRelationships, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ciq.withIncomingRelationships; query != nil {
		if err := ciq.loadIncomingRelationships(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.IncomingRelationships = []*CIRelationship{} },
			func(n *ConfigurationItem, e *CIRelationship) {
				n.Edges.IncomingRelationships = append(n.Edges.IncomingRelationships, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ciq.withLifecycleStates; query != nil {
		if err := ciq.loadLifecycleStates(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.LifecycleStates = []*CILifecycleState{} },
			func(n *ConfigurationItem, e *CILifecycleState) {
				n.Edges.LifecycleStates = append(n.Edges.LifecycleStates, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ciq.withChangeRecords; query != nil {
		if err := ciq.loadChangeRecords(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.ChangeRecords = []*CIChangeRecord{} },
			func(n *ConfigurationItem, e *CIChangeRecord) {
				n.Edges.ChangeRecords = append(n.Edges.ChangeRecords, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ciq.withIncidents; query != nil {
		if err := ciq.loadIncidents(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.Incidents = []*Ticket{} },
			func(n *ConfigurationItem, e *Ticket) { n.Edges.Incidents = append(n.Edges.Incidents, e) }); err != nil {
			return nil, err
		}
	}
	if query := ciq.withChanges; query != nil {
		if err := ciq.loadChanges(ctx, query, nodes,
			func(n *ConfigurationItem) { n.Edges.Changes = []*Ticket{} },
			func(n *ConfigurationItem, e *Ticket) { n.Edges.Changes = append(n.Edges.Changes, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *ConfigurationItemQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ConfigurationItem)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadCiType(ctx context.Context, query *CITypeQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *CIType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ConfigurationItem)
	for i := range nodes {
		fk := nodes[i].CiTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(citype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ci_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadOutgoingRelationships(ctx context.Context, query *CIRelationshipQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *CIRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cirelationship.FieldSourceCiID)
	}
	query.Where(predicate.CIRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.OutgoingRelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SourceCiID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "source_ci_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadIncomingRelationships(ctx context.Context, query *CIRelationshipQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *CIRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cirelationship.FieldTargetCiID)
	}
	query.Where(predicate.CIRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.IncomingRelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TargetCiID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "target_ci_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadLifecycleStates(ctx context.Context, query *CILifecycleStateQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *CILifecycleState)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cilifecyclestate.FieldCiID)
	}
	query.Where(predicate.CILifecycleState(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.LifecycleStatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CiID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ci_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadChangeRecords(ctx context.Context, query *CIChangeRecordQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *CIChangeRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cichangerecord.FieldCiID)
	}
	query.Where(predicate.CIChangeRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.ChangeRecordsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CiID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ci_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadIncidents(ctx context.Context, query *TicketQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *Ticket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.IncidentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.configuration_item_incidents
		if fk == nil {
			return fmt.Errorf(`foreign-key "configuration_item_incidents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "configuration_item_incidents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ciq *ConfigurationItemQuery) loadChanges(ctx context.Context, query *TicketQuery, nodes []*ConfigurationItem, init func(*ConfigurationItem), assign func(*ConfigurationItem, *Ticket)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ConfigurationItem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(configurationitem.ChangesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.configuration_item_changes
		if fk == nil {
			return fmt.Errorf(`foreign-key "configuration_item_changes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "configuration_item_changes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ciq *ConfigurationItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Node.Columns = ciq.ctx.Fields
	if len(ciq.ctx.Fields) > 0 {
		_spec.Unique = ciq.ctx.Unique != nil && *ciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *ConfigurationItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(configurationitem.Table, configurationitem.Columns, sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt))
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, configurationitem.FieldID)
		for i := range fields {
			if fields[i] != configurationitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ciq.withTenant != nil {
			_spec.Node.AddColumnOnce(configurationitem.FieldTenantID)
		}
		if ciq.withCiType != nil {
			_spec.Node.AddColumnOnce(configurationitem.FieldCiTypeID)
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *ConfigurationItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(configurationitem.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = configurationitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ConfigurationItemGroupBy is the group-by builder for ConfigurationItem entities.
type ConfigurationItemGroupBy struct {
	selector
	build *ConfigurationItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *ConfigurationItemGroupBy) Aggregate(fns ...AggregateFunc) *ConfigurationItemGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *ConfigurationItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, ent.OpQueryGroupBy)
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConfigurationItemQuery, *ConfigurationItemGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *ConfigurationItemGroupBy) sqlScan(ctx context.Context, root *ConfigurationItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConfigurationItemSelect is the builder for selecting fields of ConfigurationItem entities.
type ConfigurationItemSelect struct {
	*ConfigurationItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *ConfigurationItemSelect) Aggregate(fns ...AggregateFunc) *ConfigurationItemSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *ConfigurationItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, ent.OpQuerySelect)
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConfigurationItemQuery, *ConfigurationItemSelect](ctx, cis.ConfigurationItemQuery, cis, cis.inters, v)
}

func (cis *ConfigurationItemSelect) sqlScan(ctx context.Context, root *ConfigurationItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
