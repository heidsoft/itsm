// Code generated by ent, DO NOT EDIT.

package incident

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldStatus, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldPriority, v))
}

// IncidentNumber applies equality check predicate on the "incident_number" field. It's identical to IncidentNumberEQ.
func IncidentNumber(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldIncidentNumber, v))
}

// ReporterID applies equality check predicate on the "reporter_id" field. It's identical to ReporterIDEQ.
func ReporterID(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldReporterID, v))
}

// AssigneeID applies equality check predicate on the "assignee_id" field. It's identical to AssigneeIDEQ.
func AssigneeID(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldAssigneeID, v))
}

// ConfigurationItemID applies equality check predicate on the "configuration_item_id" field. It's identical to ConfigurationItemIDEQ.
func ConfigurationItemID(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldConfigurationItemID, v))
}

// ResolvedAt applies equality check predicate on the "resolved_at" field. It's identical to ResolvedAtEQ.
func ResolvedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldResolvedAt, v))
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldClosedAt, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldStatus, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldPriority, v))
}

// PriorityContains applies the Contains predicate on the "priority" field.
func PriorityContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldPriority, v))
}

// PriorityHasPrefix applies the HasPrefix predicate on the "priority" field.
func PriorityHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldPriority, v))
}

// PriorityHasSuffix applies the HasSuffix predicate on the "priority" field.
func PriorityHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldPriority, v))
}

// PriorityEqualFold applies the EqualFold predicate on the "priority" field.
func PriorityEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldPriority, v))
}

// PriorityContainsFold applies the ContainsFold predicate on the "priority" field.
func PriorityContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldPriority, v))
}

// IncidentNumberEQ applies the EQ predicate on the "incident_number" field.
func IncidentNumberEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldIncidentNumber, v))
}

// IncidentNumberNEQ applies the NEQ predicate on the "incident_number" field.
func IncidentNumberNEQ(v string) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldIncidentNumber, v))
}

// IncidentNumberIn applies the In predicate on the "incident_number" field.
func IncidentNumberIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldIncidentNumber, vs...))
}

// IncidentNumberNotIn applies the NotIn predicate on the "incident_number" field.
func IncidentNumberNotIn(vs ...string) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldIncidentNumber, vs...))
}

// IncidentNumberGT applies the GT predicate on the "incident_number" field.
func IncidentNumberGT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldIncidentNumber, v))
}

// IncidentNumberGTE applies the GTE predicate on the "incident_number" field.
func IncidentNumberGTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldIncidentNumber, v))
}

// IncidentNumberLT applies the LT predicate on the "incident_number" field.
func IncidentNumberLT(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldIncidentNumber, v))
}

// IncidentNumberLTE applies the LTE predicate on the "incident_number" field.
func IncidentNumberLTE(v string) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldIncidentNumber, v))
}

// IncidentNumberContains applies the Contains predicate on the "incident_number" field.
func IncidentNumberContains(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContains(FieldIncidentNumber, v))
}

// IncidentNumberHasPrefix applies the HasPrefix predicate on the "incident_number" field.
func IncidentNumberHasPrefix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasPrefix(FieldIncidentNumber, v))
}

// IncidentNumberHasSuffix applies the HasSuffix predicate on the "incident_number" field.
func IncidentNumberHasSuffix(v string) predicate.Incident {
	return predicate.Incident(sql.FieldHasSuffix(FieldIncidentNumber, v))
}

// IncidentNumberEqualFold applies the EqualFold predicate on the "incident_number" field.
func IncidentNumberEqualFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldEqualFold(FieldIncidentNumber, v))
}

// IncidentNumberContainsFold applies the ContainsFold predicate on the "incident_number" field.
func IncidentNumberContainsFold(v string) predicate.Incident {
	return predicate.Incident(sql.FieldContainsFold(FieldIncidentNumber, v))
}

// ReporterIDEQ applies the EQ predicate on the "reporter_id" field.
func ReporterIDEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldReporterID, v))
}

// ReporterIDNEQ applies the NEQ predicate on the "reporter_id" field.
func ReporterIDNEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldReporterID, v))
}

// ReporterIDIn applies the In predicate on the "reporter_id" field.
func ReporterIDIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldReporterID, vs...))
}

// ReporterIDNotIn applies the NotIn predicate on the "reporter_id" field.
func ReporterIDNotIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldReporterID, vs...))
}

// ReporterIDGT applies the GT predicate on the "reporter_id" field.
func ReporterIDGT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldReporterID, v))
}

// ReporterIDGTE applies the GTE predicate on the "reporter_id" field.
func ReporterIDGTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldReporterID, v))
}

// ReporterIDLT applies the LT predicate on the "reporter_id" field.
func ReporterIDLT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldReporterID, v))
}

// ReporterIDLTE applies the LTE predicate on the "reporter_id" field.
func ReporterIDLTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldReporterID, v))
}

// AssigneeIDEQ applies the EQ predicate on the "assignee_id" field.
func AssigneeIDEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldAssigneeID, v))
}

// AssigneeIDNEQ applies the NEQ predicate on the "assignee_id" field.
func AssigneeIDNEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldAssigneeID, v))
}

// AssigneeIDIn applies the In predicate on the "assignee_id" field.
func AssigneeIDIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldAssigneeID, vs...))
}

// AssigneeIDNotIn applies the NotIn predicate on the "assignee_id" field.
func AssigneeIDNotIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldAssigneeID, vs...))
}

// AssigneeIDGT applies the GT predicate on the "assignee_id" field.
func AssigneeIDGT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldAssigneeID, v))
}

// AssigneeIDGTE applies the GTE predicate on the "assignee_id" field.
func AssigneeIDGTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldAssigneeID, v))
}

// AssigneeIDLT applies the LT predicate on the "assignee_id" field.
func AssigneeIDLT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldAssigneeID, v))
}

// AssigneeIDLTE applies the LTE predicate on the "assignee_id" field.
func AssigneeIDLTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldAssigneeID, v))
}

// AssigneeIDIsNil applies the IsNil predicate on the "assignee_id" field.
func AssigneeIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldAssigneeID))
}

// AssigneeIDNotNil applies the NotNil predicate on the "assignee_id" field.
func AssigneeIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldAssigneeID))
}

// ConfigurationItemIDEQ applies the EQ predicate on the "configuration_item_id" field.
func ConfigurationItemIDEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldConfigurationItemID, v))
}

// ConfigurationItemIDNEQ applies the NEQ predicate on the "configuration_item_id" field.
func ConfigurationItemIDNEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldConfigurationItemID, v))
}

// ConfigurationItemIDIn applies the In predicate on the "configuration_item_id" field.
func ConfigurationItemIDIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldConfigurationItemID, vs...))
}

// ConfigurationItemIDNotIn applies the NotIn predicate on the "configuration_item_id" field.
func ConfigurationItemIDNotIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldConfigurationItemID, vs...))
}

// ConfigurationItemIDGT applies the GT predicate on the "configuration_item_id" field.
func ConfigurationItemIDGT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldConfigurationItemID, v))
}

// ConfigurationItemIDGTE applies the GTE predicate on the "configuration_item_id" field.
func ConfigurationItemIDGTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldConfigurationItemID, v))
}

// ConfigurationItemIDLT applies the LT predicate on the "configuration_item_id" field.
func ConfigurationItemIDLT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldConfigurationItemID, v))
}

// ConfigurationItemIDLTE applies the LTE predicate on the "configuration_item_id" field.
func ConfigurationItemIDLTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldConfigurationItemID, v))
}

// ConfigurationItemIDIsNil applies the IsNil predicate on the "configuration_item_id" field.
func ConfigurationItemIDIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldConfigurationItemID))
}

// ConfigurationItemIDNotNil applies the NotNil predicate on the "configuration_item_id" field.
func ConfigurationItemIDNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldConfigurationItemID))
}

// ResolvedAtEQ applies the EQ predicate on the "resolved_at" field.
func ResolvedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldResolvedAt, v))
}

// ResolvedAtNEQ applies the NEQ predicate on the "resolved_at" field.
func ResolvedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldResolvedAt, v))
}

// ResolvedAtIn applies the In predicate on the "resolved_at" field.
func ResolvedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldResolvedAt, vs...))
}

// ResolvedAtNotIn applies the NotIn predicate on the "resolved_at" field.
func ResolvedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldResolvedAt, vs...))
}

// ResolvedAtGT applies the GT predicate on the "resolved_at" field.
func ResolvedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldResolvedAt, v))
}

// ResolvedAtGTE applies the GTE predicate on the "resolved_at" field.
func ResolvedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldResolvedAt, v))
}

// ResolvedAtLT applies the LT predicate on the "resolved_at" field.
func ResolvedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldResolvedAt, v))
}

// ResolvedAtLTE applies the LTE predicate on the "resolved_at" field.
func ResolvedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldResolvedAt, v))
}

// ResolvedAtIsNil applies the IsNil predicate on the "resolved_at" field.
func ResolvedAtIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldResolvedAt))
}

// ResolvedAtNotNil applies the NotNil predicate on the "resolved_at" field.
func ResolvedAtNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldResolvedAt))
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldClosedAt, v))
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldClosedAt, v))
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldClosedAt, vs...))
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldClosedAt, vs...))
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldClosedAt, v))
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldClosedAt, v))
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldClosedAt, v))
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldClosedAt, v))
}

// ClosedAtIsNil applies the IsNil predicate on the "closed_at" field.
func ClosedAtIsNil() predicate.Incident {
	return predicate.Incident(sql.FieldIsNull(FieldClosedAt))
}

// ClosedAtNotNil applies the NotNil predicate on the "closed_at" field.
func ClosedAtNotNil() predicate.Incident {
	return predicate.Incident(sql.FieldNotNull(FieldClosedAt))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Incident {
	return predicate.Incident(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Incident) predicate.Incident {
	return predicate.Incident(sql.NotPredicates(p))
}
