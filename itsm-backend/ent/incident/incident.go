// Code generated by ent, DO NOT EDIT.

package incident

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the incident type in the database.
	Label = "incident"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldIncidentNumber holds the string denoting the incident_number field in the database.
	FieldIncidentNumber = "incident_number"
	// FieldReporterID holds the string denoting the reporter_id field in the database.
	FieldReporterID = "reporter_id"
	// FieldAssigneeID holds the string denoting the assignee_id field in the database.
	FieldAssigneeID = "assignee_id"
	// FieldConfigurationItemID holds the string denoting the configuration_item_id field in the database.
	FieldConfigurationItemID = "configuration_item_id"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// FieldClosedAt holds the string denoting the closed_at field in the database.
	FieldClosedAt = "closed_at"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the incident in the database.
	Table = "incidents"
)

// Columns holds all SQL columns for incident fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldStatus,
	FieldPriority,
	FieldIncidentNumber,
	FieldReporterID,
	FieldAssigneeID,
	FieldConfigurationItemID,
	FieldResolvedAt,
	FieldClosedAt,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority string
	// IncidentNumberValidator is a validator for the "incident_number" field. It is called by the builders before save.
	IncidentNumberValidator func(string) error
	// ReporterIDValidator is a validator for the "reporter_id" field. It is called by the builders before save.
	ReporterIDValidator func(int) error
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Incident queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByIncidentNumber orders the results by the incident_number field.
func ByIncidentNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentNumber, opts...).ToFunc()
}

// ByReporterID orders the results by the reporter_id field.
func ByReporterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReporterID, opts...).ToFunc()
}

// ByAssigneeID orders the results by the assignee_id field.
func ByAssigneeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssigneeID, opts...).ToFunc()
}

// ByConfigurationItemID orders the results by the configuration_item_id field.
func ByConfigurationItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigurationItemID, opts...).ToFunc()
}

// ByResolvedAt orders the results by the resolved_at field.
func ByResolvedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedAt, opts...).ToFunc()
}

// ByClosedAt orders the results by the closed_at field.
func ByClosedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedAt, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
