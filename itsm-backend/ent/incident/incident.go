// Code generated by ent, DO NOT EDIT.

package incident

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the incident type in the database.
	Label = "incident"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIncidentNumber holds the string denoting the incident_number field in the database.
	FieldIncidentNumber = "incident_number"
	// FieldIsMajorIncident holds the string denoting the is_major_incident field in the database.
	FieldIsMajorIncident = "is_major_incident"
	// FieldReporterID holds the string denoting the reporter_id field in the database.
	FieldReporterID = "reporter_id"
	// FieldAssigneeID holds the string denoting the assignee_id field in the database.
	FieldAssigneeID = "assignee_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAlibabaCloudInstanceID holds the string denoting the alibaba_cloud_instance_id field in the database.
	FieldAlibabaCloudInstanceID = "alibaba_cloud_instance_id"
	// FieldAlibabaCloudRegion holds the string denoting the alibaba_cloud_region field in the database.
	FieldAlibabaCloudRegion = "alibaba_cloud_region"
	// FieldAlibabaCloudService holds the string denoting the alibaba_cloud_service field in the database.
	FieldAlibabaCloudService = "alibaba_cloud_service"
	// FieldAlibabaCloudAlertData holds the string denoting the alibaba_cloud_alert_data field in the database.
	FieldAlibabaCloudAlertData = "alibaba_cloud_alert_data"
	// FieldAlibabaCloudMetrics holds the string denoting the alibaba_cloud_metrics field in the database.
	FieldAlibabaCloudMetrics = "alibaba_cloud_metrics"
	// FieldSecurityEventType holds the string denoting the security_event_type field in the database.
	FieldSecurityEventType = "security_event_type"
	// FieldSecurityEventSourceIP holds the string denoting the security_event_source_ip field in the database.
	FieldSecurityEventSourceIP = "security_event_source_ip"
	// FieldSecurityEventTarget holds the string denoting the security_event_target field in the database.
	FieldSecurityEventTarget = "security_event_target"
	// FieldSecurityEventDetails holds the string denoting the security_event_details field in the database.
	FieldSecurityEventDetails = "security_event_details"
	// FieldDetectedAt holds the string denoting the detected_at field in the database.
	FieldDetectedAt = "detected_at"
	// FieldConfirmedAt holds the string denoting the confirmed_at field in the database.
	FieldConfirmedAt = "confirmed_at"
	// FieldResolvedAt holds the string denoting the resolved_at field in the database.
	FieldResolvedAt = "resolved_at"
	// FieldClosedAt holds the string denoting the closed_at field in the database.
	FieldClosedAt = "closed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeReporter holds the string denoting the reporter edge name in mutations.
	EdgeReporter = "reporter"
	// EdgeAssignee holds the string denoting the assignee edge name in mutations.
	EdgeAssignee = "assignee"
	// EdgeAffectedConfigurationItems holds the string denoting the affected_configuration_items edge name in mutations.
	EdgeAffectedConfigurationItems = "affected_configuration_items"
	// EdgeRelatedProblems holds the string denoting the related_problems edge name in mutations.
	EdgeRelatedProblems = "related_problems"
	// EdgeRelatedChanges holds the string denoting the related_changes edge name in mutations.
	EdgeRelatedChanges = "related_changes"
	// EdgeStatusLogs holds the string denoting the status_logs edge name in mutations.
	EdgeStatusLogs = "status_logs"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the incident in the database.
	Table = "incidents"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "incidents"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ReporterTable is the table that holds the reporter relation/edge.
	ReporterTable = "incidents"
	// ReporterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReporterInverseTable = "users"
	// ReporterColumn is the table column denoting the reporter relation/edge.
	ReporterColumn = "reporter_id"
	// AssigneeTable is the table that holds the assignee relation/edge.
	AssigneeTable = "incidents"
	// AssigneeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssigneeInverseTable = "users"
	// AssigneeColumn is the table column denoting the assignee relation/edge.
	AssigneeColumn = "assignee_id"
	// AffectedConfigurationItemsTable is the table that holds the affected_configuration_items relation/edge.
	AffectedConfigurationItemsTable = "configuration_items"
	// AffectedConfigurationItemsInverseTable is the table name for the ConfigurationItem entity.
	// It exists in this package in order to avoid circular dependency with the "configurationitem" package.
	AffectedConfigurationItemsInverseTable = "configuration_items"
	// AffectedConfigurationItemsColumn is the table column denoting the affected_configuration_items relation/edge.
	AffectedConfigurationItemsColumn = "incident_affected_configuration_items"
	// RelatedProblemsTable is the table that holds the related_problems relation/edge.
	RelatedProblemsTable = "tickets"
	// RelatedProblemsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	RelatedProblemsInverseTable = "tickets"
	// RelatedProblemsColumn is the table column denoting the related_problems relation/edge.
	RelatedProblemsColumn = "incident_related_problems"
	// RelatedChangesTable is the table that holds the related_changes relation/edge.
	RelatedChangesTable = "tickets"
	// RelatedChangesInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	RelatedChangesInverseTable = "tickets"
	// RelatedChangesColumn is the table column denoting the related_changes relation/edge.
	RelatedChangesColumn = "incident_related_changes"
	// StatusLogsTable is the table that holds the status_logs relation/edge.
	StatusLogsTable = "status_logs"
	// StatusLogsInverseTable is the table name for the StatusLog entity.
	// It exists in this package in order to avoid circular dependency with the "statuslog" package.
	StatusLogsInverseTable = "status_logs"
	// StatusLogsColumn is the table column denoting the status_logs relation/edge.
	StatusLogsColumn = "incident_status_logs"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "tickets"
	// CommentsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	CommentsInverseTable = "tickets"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "incident_comments"
)

// Columns holds all SQL columns for incident fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldStatus,
	FieldPriority,
	FieldSource,
	FieldType,
	FieldIncidentNumber,
	FieldIsMajorIncident,
	FieldReporterID,
	FieldAssigneeID,
	FieldTenantID,
	FieldAlibabaCloudInstanceID,
	FieldAlibabaCloudRegion,
	FieldAlibabaCloudService,
	FieldAlibabaCloudAlertData,
	FieldAlibabaCloudMetrics,
	FieldSecurityEventType,
	FieldSecurityEventSourceIP,
	FieldSecurityEventTarget,
	FieldSecurityEventDetails,
	FieldDetectedAt,
	FieldConfirmedAt,
	FieldResolvedAt,
	FieldClosedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// IncidentNumberValidator is a validator for the "incident_number" field. It is called by the builders before save.
	IncidentNumberValidator func(string) error
	// DefaultIsMajorIncident holds the default value on creation for the "is_major_incident" field.
	DefaultIsMajorIncident bool
	// ReporterIDValidator is a validator for the "reporter_id" field. It is called by the builders before save.
	ReporterIDValidator func(int) error
	// AssigneeIDValidator is a validator for the "assignee_id" field. It is called by the builders before save.
	AssigneeIDValidator func(int) error
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// AlibabaCloudInstanceIDValidator is a validator for the "alibaba_cloud_instance_id" field. It is called by the builders before save.
	AlibabaCloudInstanceIDValidator func(string) error
	// AlibabaCloudRegionValidator is a validator for the "alibaba_cloud_region" field. It is called by the builders before save.
	AlibabaCloudRegionValidator func(string) error
	// AlibabaCloudServiceValidator is a validator for the "alibaba_cloud_service" field. It is called by the builders before save.
	AlibabaCloudServiceValidator func(string) error
	// SecurityEventTypeValidator is a validator for the "security_event_type" field. It is called by the builders before save.
	SecurityEventTypeValidator func(string) error
	// SecurityEventSourceIPValidator is a validator for the "security_event_source_ip" field. It is called by the builders before save.
	SecurityEventSourceIPValidator func(string) error
	// SecurityEventTargetValidator is a validator for the "security_event_target" field. It is called by the builders before save.
	SecurityEventTargetValidator func(string) error
	// DefaultDetectedAt holds the default value on creation for the "detected_at" field.
	DefaultDetectedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusNew is the default value of the Status enum.
const DefaultStatus = StatusNew

// Status values.
const (
	StatusNew        Status = "new"
	StatusAssigned   Status = "assigned"
	StatusInProgress Status = "in_progress"
	StatusResolved   Status = "resolved"
	StatusClosed     Status = "closed"
	StatusSuspended  Status = "suspended"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusNew, StatusAssigned, StatusInProgress, StatusResolved, StatusClosed, StatusSuspended:
		return nil
	default:
		return fmt.Errorf("incident: invalid enum value for status field: %q", s)
	}
}

// Priority defines the type for the "priority" enum field.
type Priority string

// PriorityMedium is the default value of the Priority enum.
const DefaultPriority = PriorityMedium

// Priority values.
const (
	PriorityLow      Priority = "low"
	PriorityMedium   Priority = "medium"
	PriorityHigh     Priority = "high"
	PriorityCritical Priority = "critical"
)

func (pr Priority) String() string {
	return string(pr)
}

// PriorityValidator is a validator for the "priority" field enum values. It is called by the builders before save.
func PriorityValidator(pr Priority) error {
	switch pr {
	case PriorityLow, PriorityMedium, PriorityHigh, PriorityCritical:
		return nil
	default:
		return fmt.Errorf("incident: invalid enum value for priority field: %q", pr)
	}
}

// Source defines the type for the "source" enum field.
type Source string

// Source values.
const (
	SourceServiceDesk   Source = "service_desk"
	SourceMonitoring    Source = "monitoring"
	SourceSecurity      Source = "security"
	SourceUserReport    Source = "user_report"
	SourceAlibabaCloud  Source = "alibaba_cloud"
	SourceCloudProduct  Source = "cloud_product"
	SourceSecurityEvent Source = "security_event"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceServiceDesk, SourceMonitoring, SourceSecurity, SourceUserReport, SourceAlibabaCloud, SourceCloudProduct, SourceSecurityEvent:
		return nil
	default:
		return fmt.Errorf("incident: invalid enum value for source field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeInfrastructure Type = "infrastructure"
	TypeApplication    Type = "application"
	TypeSecurity       Type = "security"
	TypeNetwork        Type = "network"
	TypeDatabase       Type = "database"
	TypeStorage        Type = "storage"
	TypeCloudService   Type = "cloud_service"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeInfrastructure, TypeApplication, TypeSecurity, TypeNetwork, TypeDatabase, TypeStorage, TypeCloudService:
		return nil
	default:
		return fmt.Errorf("incident: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Incident queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByIncidentNumber orders the results by the incident_number field.
func ByIncidentNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncidentNumber, opts...).ToFunc()
}

// ByIsMajorIncident orders the results by the is_major_incident field.
func ByIsMajorIncident(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMajorIncident, opts...).ToFunc()
}

// ByReporterID orders the results by the reporter_id field.
func ByReporterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReporterID, opts...).ToFunc()
}

// ByAssigneeID orders the results by the assignee_id field.
func ByAssigneeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssigneeID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAlibabaCloudInstanceID orders the results by the alibaba_cloud_instance_id field.
func ByAlibabaCloudInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlibabaCloudInstanceID, opts...).ToFunc()
}

// ByAlibabaCloudRegion orders the results by the alibaba_cloud_region field.
func ByAlibabaCloudRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlibabaCloudRegion, opts...).ToFunc()
}

// ByAlibabaCloudService orders the results by the alibaba_cloud_service field.
func ByAlibabaCloudService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlibabaCloudService, opts...).ToFunc()
}

// BySecurityEventType orders the results by the security_event_type field.
func BySecurityEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityEventType, opts...).ToFunc()
}

// BySecurityEventSourceIP orders the results by the security_event_source_ip field.
func BySecurityEventSourceIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityEventSourceIP, opts...).ToFunc()
}

// BySecurityEventTarget orders the results by the security_event_target field.
func BySecurityEventTarget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityEventTarget, opts...).ToFunc()
}

// ByDetectedAt orders the results by the detected_at field.
func ByDetectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectedAt, opts...).ToFunc()
}

// ByConfirmedAt orders the results by the confirmed_at field.
func ByConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfirmedAt, opts...).ToFunc()
}

// ByResolvedAt orders the results by the resolved_at field.
func ByResolvedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedAt, opts...).ToFunc()
}

// ByClosedAt orders the results by the closed_at field.
func ByClosedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByReporterField orders the results by reporter field.
func ByReporterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReporterStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssigneeField orders the results by assignee field.
func ByAssigneeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssigneeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAffectedConfigurationItemsCount orders the results by affected_configuration_items count.
func ByAffectedConfigurationItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAffectedConfigurationItemsStep(), opts...)
	}
}

// ByAffectedConfigurationItems orders the results by affected_configuration_items terms.
func ByAffectedConfigurationItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAffectedConfigurationItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelatedProblemsCount orders the results by related_problems count.
func ByRelatedProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelatedProblemsStep(), opts...)
	}
}

// ByRelatedProblems orders the results by related_problems terms.
func ByRelatedProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelatedChangesCount orders the results by related_changes count.
func ByRelatedChangesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelatedChangesStep(), opts...)
	}
}

// ByRelatedChanges orders the results by related_changes terms.
func ByRelatedChanges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedChangesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatusLogsCount orders the results by status_logs count.
func ByStatusLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatusLogsStep(), opts...)
	}
}

// ByStatusLogs orders the results by status_logs terms.
func ByStatusLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatusLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newReporterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReporterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReporterTable, ReporterColumn),
	)
}
func newAssigneeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssigneeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssigneeTable, AssigneeColumn),
	)
}
func newAffectedConfigurationItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AffectedConfigurationItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AffectedConfigurationItemsTable, AffectedConfigurationItemsColumn),
	)
}
func newRelatedProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RelatedProblemsTable, RelatedProblemsColumn),
	)
}
func newRelatedChangesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedChangesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RelatedChangesTable, RelatedChangesColumn),
	)
}
func newStatusLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatusLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatusLogsTable, StatusLogsColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
