// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSubmittedTickets holds the string denoting the submitted_tickets edge name in mutations.
	EdgeSubmittedTickets = "submitted_tickets"
	// EdgeAssignedTickets holds the string denoting the assigned_tickets edge name in mutations.
	EdgeAssignedTickets = "assigned_tickets"
	// EdgeApprovalLogs holds the string denoting the approval_logs edge name in mutations.
	EdgeApprovalLogs = "approval_logs"
	// EdgeStatusLogs holds the string denoting the status_logs edge name in mutations.
	EdgeStatusLogs = "status_logs"
	// EdgeServiceRequests holds the string denoting the service_requests edge name in mutations.
	EdgeServiceRequests = "service_requests"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SubmittedTicketsTable is the table that holds the submitted_tickets relation/edge.
	SubmittedTicketsTable = "tickets"
	// SubmittedTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	SubmittedTicketsInverseTable = "tickets"
	// SubmittedTicketsColumn is the table column denoting the submitted_tickets relation/edge.
	SubmittedTicketsColumn = "requester_id"
	// AssignedTicketsTable is the table that holds the assigned_tickets relation/edge.
	AssignedTicketsTable = "tickets"
	// AssignedTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	AssignedTicketsInverseTable = "tickets"
	// AssignedTicketsColumn is the table column denoting the assigned_tickets relation/edge.
	AssignedTicketsColumn = "assignee_id"
	// ApprovalLogsTable is the table that holds the approval_logs relation/edge.
	ApprovalLogsTable = "approval_logs"
	// ApprovalLogsInverseTable is the table name for the ApprovalLog entity.
	// It exists in this package in order to avoid circular dependency with the "approvallog" package.
	ApprovalLogsInverseTable = "approval_logs"
	// ApprovalLogsColumn is the table column denoting the approval_logs relation/edge.
	ApprovalLogsColumn = "approver_id"
	// StatusLogsTable is the table that holds the status_logs relation/edge.
	StatusLogsTable = "status_logs"
	// StatusLogsInverseTable is the table name for the StatusLog entity.
	// It exists in this package in order to avoid circular dependency with the "statuslog" package.
	StatusLogsInverseTable = "status_logs"
	// StatusLogsColumn is the table column denoting the status_logs relation/edge.
	StatusLogsColumn = "user_id"
	// ServiceRequestsTable is the table that holds the service_requests relation/edge.
	ServiceRequestsTable = "service_requests"
	// ServiceRequestsInverseTable is the table name for the ServiceRequest entity.
	// It exists in this package in order to avoid circular dependency with the "servicerequest" package.
	ServiceRequestsInverseTable = "service_requests"
	// ServiceRequestsColumn is the table column denoting the service_requests relation/edge.
	ServiceRequestsColumn = "requester_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldName,
	FieldDepartment,
	FieldPhone,
	FieldPasswordHash,
	FieldActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	DepartmentValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySubmittedTicketsCount orders the results by submitted_tickets count.
func BySubmittedTicketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmittedTicketsStep(), opts...)
	}
}

// BySubmittedTickets orders the results by submitted_tickets terms.
func BySubmittedTickets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmittedTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignedTicketsCount orders the results by assigned_tickets count.
func ByAssignedTicketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedTicketsStep(), opts...)
	}
}

// ByAssignedTickets orders the results by assigned_tickets terms.
func ByAssignedTickets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApprovalLogsCount orders the results by approval_logs count.
func ByApprovalLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApprovalLogsStep(), opts...)
	}
}

// ByApprovalLogs orders the results by approval_logs terms.
func ByApprovalLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovalLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatusLogsCount orders the results by status_logs count.
func ByStatusLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatusLogsStep(), opts...)
	}
}

// ByStatusLogs orders the results by status_logs terms.
func ByStatusLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatusLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceRequestsCount orders the results by service_requests count.
func ByServiceRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceRequestsStep(), opts...)
	}
}

// ByServiceRequests orders the results by service_requests terms.
func ByServiceRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubmittedTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmittedTicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmittedTicketsTable, SubmittedTicketsColumn),
	)
}
func newAssignedTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedTicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssignedTicketsTable, AssignedTicketsColumn),
	)
}
func newApprovalLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApprovalLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApprovalLogsTable, ApprovalLogsColumn),
	)
}
func newStatusLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatusLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatusLogsTable, StatusLogsColumn),
	)
}
func newServiceRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceRequestsTable, ServiceRequestsColumn),
	)
}
