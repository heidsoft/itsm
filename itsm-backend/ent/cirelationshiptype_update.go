// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CIRelationshipTypeUpdate is the builder for updating CIRelationshipType entities.
type CIRelationshipTypeUpdate struct {
	config
	hooks    []Hook
	mutation *CIRelationshipTypeMutation
}

// Where appends a list predicates to the CIRelationshipTypeUpdate builder.
func (crtu *CIRelationshipTypeUpdate) Where(ps ...predicate.CIRelationshipType) *CIRelationshipTypeUpdate {
	crtu.mutation.Where(ps...)
	return crtu
}

// SetName sets the "name" field.
func (crtu *CIRelationshipTypeUpdate) SetName(s string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetName(s)
	return crtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableName(s *string) *CIRelationshipTypeUpdate {
	if s != nil {
		crtu.SetName(*s)
	}
	return crtu
}

// SetDisplayName sets the "display_name" field.
func (crtu *CIRelationshipTypeUpdate) SetDisplayName(s string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetDisplayName(s)
	return crtu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableDisplayName(s *string) *CIRelationshipTypeUpdate {
	if s != nil {
		crtu.SetDisplayName(*s)
	}
	return crtu
}

// SetDescription sets the "description" field.
func (crtu *CIRelationshipTypeUpdate) SetDescription(s string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetDescription(s)
	return crtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableDescription(s *string) *CIRelationshipTypeUpdate {
	if s != nil {
		crtu.SetDescription(*s)
	}
	return crtu
}

// ClearDescription clears the value of the "description" field.
func (crtu *CIRelationshipTypeUpdate) ClearDescription() *CIRelationshipTypeUpdate {
	crtu.mutation.ClearDescription()
	return crtu
}

// SetDirection sets the "direction" field.
func (crtu *CIRelationshipTypeUpdate) SetDirection(s string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetDirection(s)
	return crtu
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableDirection(s *string) *CIRelationshipTypeUpdate {
	if s != nil {
		crtu.SetDirection(*s)
	}
	return crtu
}

// SetCardinality sets the "cardinality" field.
func (crtu *CIRelationshipTypeUpdate) SetCardinality(s string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetCardinality(s)
	return crtu
}

// SetNillableCardinality sets the "cardinality" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableCardinality(s *string) *CIRelationshipTypeUpdate {
	if s != nil {
		crtu.SetCardinality(*s)
	}
	return crtu
}

// SetSourceCiTypes sets the "source_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) SetSourceCiTypes(s []string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetSourceCiTypes(s)
	return crtu
}

// AppendSourceCiTypes appends s to the "source_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) AppendSourceCiTypes(s []string) *CIRelationshipTypeUpdate {
	crtu.mutation.AppendSourceCiTypes(s)
	return crtu
}

// ClearSourceCiTypes clears the value of the "source_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) ClearSourceCiTypes() *CIRelationshipTypeUpdate {
	crtu.mutation.ClearSourceCiTypes()
	return crtu
}

// SetTargetCiTypes sets the "target_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) SetTargetCiTypes(s []string) *CIRelationshipTypeUpdate {
	crtu.mutation.SetTargetCiTypes(s)
	return crtu
}

// AppendTargetCiTypes appends s to the "target_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) AppendTargetCiTypes(s []string) *CIRelationshipTypeUpdate {
	crtu.mutation.AppendTargetCiTypes(s)
	return crtu
}

// ClearTargetCiTypes clears the value of the "target_ci_types" field.
func (crtu *CIRelationshipTypeUpdate) ClearTargetCiTypes() *CIRelationshipTypeUpdate {
	crtu.mutation.ClearTargetCiTypes()
	return crtu
}

// SetIsSystem sets the "is_system" field.
func (crtu *CIRelationshipTypeUpdate) SetIsSystem(b bool) *CIRelationshipTypeUpdate {
	crtu.mutation.SetIsSystem(b)
	return crtu
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableIsSystem(b *bool) *CIRelationshipTypeUpdate {
	if b != nil {
		crtu.SetIsSystem(*b)
	}
	return crtu
}

// SetIsActive sets the "is_active" field.
func (crtu *CIRelationshipTypeUpdate) SetIsActive(b bool) *CIRelationshipTypeUpdate {
	crtu.mutation.SetIsActive(b)
	return crtu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableIsActive(b *bool) *CIRelationshipTypeUpdate {
	if b != nil {
		crtu.SetIsActive(*b)
	}
	return crtu
}

// SetTenantID sets the "tenant_id" field.
func (crtu *CIRelationshipTypeUpdate) SetTenantID(i int) *CIRelationshipTypeUpdate {
	crtu.mutation.SetTenantID(i)
	return crtu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableTenantID(i *int) *CIRelationshipTypeUpdate {
	if i != nil {
		crtu.SetTenantID(*i)
	}
	return crtu
}

// SetCreatedAt sets the "created_at" field.
func (crtu *CIRelationshipTypeUpdate) SetCreatedAt(t time.Time) *CIRelationshipTypeUpdate {
	crtu.mutation.SetCreatedAt(t)
	return crtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crtu *CIRelationshipTypeUpdate) SetNillableCreatedAt(t *time.Time) *CIRelationshipTypeUpdate {
	if t != nil {
		crtu.SetCreatedAt(*t)
	}
	return crtu
}

// SetUpdatedAt sets the "updated_at" field.
func (crtu *CIRelationshipTypeUpdate) SetUpdatedAt(t time.Time) *CIRelationshipTypeUpdate {
	crtu.mutation.SetUpdatedAt(t)
	return crtu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (crtu *CIRelationshipTypeUpdate) SetTenant(t *Tenant) *CIRelationshipTypeUpdate {
	return crtu.SetTenantID(t.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the CIRelationship entity by IDs.
func (crtu *CIRelationshipTypeUpdate) AddRelationshipIDs(ids ...int) *CIRelationshipTypeUpdate {
	crtu.mutation.AddRelationshipIDs(ids...)
	return crtu
}

// AddRelationships adds the "relationships" edges to the CIRelationship entity.
func (crtu *CIRelationshipTypeUpdate) AddRelationships(c ...*CIRelationship) *CIRelationshipTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crtu.AddRelationshipIDs(ids...)
}

// Mutation returns the CIRelationshipTypeMutation object of the builder.
func (crtu *CIRelationshipTypeUpdate) Mutation() *CIRelationshipTypeMutation {
	return crtu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (crtu *CIRelationshipTypeUpdate) ClearTenant() *CIRelationshipTypeUpdate {
	crtu.mutation.ClearTenant()
	return crtu
}

// ClearRelationships clears all "relationships" edges to the CIRelationship entity.
func (crtu *CIRelationshipTypeUpdate) ClearRelationships() *CIRelationshipTypeUpdate {
	crtu.mutation.ClearRelationships()
	return crtu
}

// RemoveRelationshipIDs removes the "relationships" edge to CIRelationship entities by IDs.
func (crtu *CIRelationshipTypeUpdate) RemoveRelationshipIDs(ids ...int) *CIRelationshipTypeUpdate {
	crtu.mutation.RemoveRelationshipIDs(ids...)
	return crtu
}

// RemoveRelationships removes "relationships" edges to CIRelationship entities.
func (crtu *CIRelationshipTypeUpdate) RemoveRelationships(c ...*CIRelationship) *CIRelationshipTypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crtu.RemoveRelationshipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crtu *CIRelationshipTypeUpdate) Save(ctx context.Context) (int, error) {
	crtu.defaults()
	return withHooks(ctx, crtu.sqlSave, crtu.mutation, crtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crtu *CIRelationshipTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := crtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crtu *CIRelationshipTypeUpdate) Exec(ctx context.Context) error {
	_, err := crtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crtu *CIRelationshipTypeUpdate) ExecX(ctx context.Context) {
	if err := crtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crtu *CIRelationshipTypeUpdate) defaults() {
	if _, ok := crtu.mutation.UpdatedAt(); !ok {
		v := cirelationshiptype.UpdateDefaultUpdatedAt()
		crtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crtu *CIRelationshipTypeUpdate) check() error {
	if v, ok := crtu.mutation.Name(); ok {
		if err := cirelationshiptype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.name": %w`, err)}
		}
	}
	if v, ok := crtu.mutation.DisplayName(); ok {
		if err := cirelationshiptype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.display_name": %w`, err)}
		}
	}
	if crtu.mutation.TenantCleared() && len(crtu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIRelationshipType.tenant"`)
	}
	return nil
}

func (crtu *CIRelationshipTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := crtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cirelationshiptype.Table, cirelationshiptype.Columns, sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt))
	if ps := crtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crtu.mutation.Name(); ok {
		_spec.SetField(cirelationshiptype.FieldName, field.TypeString, value)
	}
	if value, ok := crtu.mutation.DisplayName(); ok {
		_spec.SetField(cirelationshiptype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := crtu.mutation.Description(); ok {
		_spec.SetField(cirelationshiptype.FieldDescription, field.TypeString, value)
	}
	if crtu.mutation.DescriptionCleared() {
		_spec.ClearField(cirelationshiptype.FieldDescription, field.TypeString)
	}
	if value, ok := crtu.mutation.Direction(); ok {
		_spec.SetField(cirelationshiptype.FieldDirection, field.TypeString, value)
	}
	if value, ok := crtu.mutation.Cardinality(); ok {
		_spec.SetField(cirelationshiptype.FieldCardinality, field.TypeString, value)
	}
	if value, ok := crtu.mutation.SourceCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldSourceCiTypes, field.TypeJSON, value)
	}
	if value, ok := crtu.mutation.AppendedSourceCiTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cirelationshiptype.FieldSourceCiTypes, value)
		})
	}
	if crtu.mutation.SourceCiTypesCleared() {
		_spec.ClearField(cirelationshiptype.FieldSourceCiTypes, field.TypeJSON)
	}
	if value, ok := crtu.mutation.TargetCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldTargetCiTypes, field.TypeJSON, value)
	}
	if value, ok := crtu.mutation.AppendedTargetCiTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cirelationshiptype.FieldTargetCiTypes, value)
		})
	}
	if crtu.mutation.TargetCiTypesCleared() {
		_spec.ClearField(cirelationshiptype.FieldTargetCiTypes, field.TypeJSON)
	}
	if value, ok := crtu.mutation.IsSystem(); ok {
		_spec.SetField(cirelationshiptype.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := crtu.mutation.IsActive(); ok {
		_spec.SetField(cirelationshiptype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := crtu.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := crtu.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldUpdatedAt, field.TypeTime, value)
	}
	if crtu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cirelationshiptype.TenantTable,
			Columns: []string{cirelationshiptype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cirelationshiptype.TenantTable,
			Columns: []string{cirelationshiptype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crtu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtu.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !crtu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtu.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, crtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cirelationshiptype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crtu.mutation.done = true
	return n, nil
}

// CIRelationshipTypeUpdateOne is the builder for updating a single CIRelationshipType entity.
type CIRelationshipTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CIRelationshipTypeMutation
}

// SetName sets the "name" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetName(s string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetName(s)
	return crtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableName(s *string) *CIRelationshipTypeUpdateOne {
	if s != nil {
		crtuo.SetName(*s)
	}
	return crtuo
}

// SetDisplayName sets the "display_name" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetDisplayName(s string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetDisplayName(s)
	return crtuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableDisplayName(s *string) *CIRelationshipTypeUpdateOne {
	if s != nil {
		crtuo.SetDisplayName(*s)
	}
	return crtuo
}

// SetDescription sets the "description" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetDescription(s string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetDescription(s)
	return crtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableDescription(s *string) *CIRelationshipTypeUpdateOne {
	if s != nil {
		crtuo.SetDescription(*s)
	}
	return crtuo
}

// ClearDescription clears the value of the "description" field.
func (crtuo *CIRelationshipTypeUpdateOne) ClearDescription() *CIRelationshipTypeUpdateOne {
	crtuo.mutation.ClearDescription()
	return crtuo
}

// SetDirection sets the "direction" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetDirection(s string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetDirection(s)
	return crtuo
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableDirection(s *string) *CIRelationshipTypeUpdateOne {
	if s != nil {
		crtuo.SetDirection(*s)
	}
	return crtuo
}

// SetCardinality sets the "cardinality" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetCardinality(s string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetCardinality(s)
	return crtuo
}

// SetNillableCardinality sets the "cardinality" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableCardinality(s *string) *CIRelationshipTypeUpdateOne {
	if s != nil {
		crtuo.SetCardinality(*s)
	}
	return crtuo
}

// SetSourceCiTypes sets the "source_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetSourceCiTypes(s []string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetSourceCiTypes(s)
	return crtuo
}

// AppendSourceCiTypes appends s to the "source_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) AppendSourceCiTypes(s []string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.AppendSourceCiTypes(s)
	return crtuo
}

// ClearSourceCiTypes clears the value of the "source_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) ClearSourceCiTypes() *CIRelationshipTypeUpdateOne {
	crtuo.mutation.ClearSourceCiTypes()
	return crtuo
}

// SetTargetCiTypes sets the "target_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetTargetCiTypes(s []string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetTargetCiTypes(s)
	return crtuo
}

// AppendTargetCiTypes appends s to the "target_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) AppendTargetCiTypes(s []string) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.AppendTargetCiTypes(s)
	return crtuo
}

// ClearTargetCiTypes clears the value of the "target_ci_types" field.
func (crtuo *CIRelationshipTypeUpdateOne) ClearTargetCiTypes() *CIRelationshipTypeUpdateOne {
	crtuo.mutation.ClearTargetCiTypes()
	return crtuo
}

// SetIsSystem sets the "is_system" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetIsSystem(b bool) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetIsSystem(b)
	return crtuo
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableIsSystem(b *bool) *CIRelationshipTypeUpdateOne {
	if b != nil {
		crtuo.SetIsSystem(*b)
	}
	return crtuo
}

// SetIsActive sets the "is_active" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetIsActive(b bool) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetIsActive(b)
	return crtuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableIsActive(b *bool) *CIRelationshipTypeUpdateOne {
	if b != nil {
		crtuo.SetIsActive(*b)
	}
	return crtuo
}

// SetTenantID sets the "tenant_id" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetTenantID(i int) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetTenantID(i)
	return crtuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableTenantID(i *int) *CIRelationshipTypeUpdateOne {
	if i != nil {
		crtuo.SetTenantID(*i)
	}
	return crtuo
}

// SetCreatedAt sets the "created_at" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetCreatedAt(t time.Time) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetCreatedAt(t)
	return crtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crtuo *CIRelationshipTypeUpdateOne) SetNillableCreatedAt(t *time.Time) *CIRelationshipTypeUpdateOne {
	if t != nil {
		crtuo.SetCreatedAt(*t)
	}
	return crtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (crtuo *CIRelationshipTypeUpdateOne) SetUpdatedAt(t time.Time) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.SetUpdatedAt(t)
	return crtuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (crtuo *CIRelationshipTypeUpdateOne) SetTenant(t *Tenant) *CIRelationshipTypeUpdateOne {
	return crtuo.SetTenantID(t.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the CIRelationship entity by IDs.
func (crtuo *CIRelationshipTypeUpdateOne) AddRelationshipIDs(ids ...int) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.AddRelationshipIDs(ids...)
	return crtuo
}

// AddRelationships adds the "relationships" edges to the CIRelationship entity.
func (crtuo *CIRelationshipTypeUpdateOne) AddRelationships(c ...*CIRelationship) *CIRelationshipTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crtuo.AddRelationshipIDs(ids...)
}

// Mutation returns the CIRelationshipTypeMutation object of the builder.
func (crtuo *CIRelationshipTypeUpdateOne) Mutation() *CIRelationshipTypeMutation {
	return crtuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (crtuo *CIRelationshipTypeUpdateOne) ClearTenant() *CIRelationshipTypeUpdateOne {
	crtuo.mutation.ClearTenant()
	return crtuo
}

// ClearRelationships clears all "relationships" edges to the CIRelationship entity.
func (crtuo *CIRelationshipTypeUpdateOne) ClearRelationships() *CIRelationshipTypeUpdateOne {
	crtuo.mutation.ClearRelationships()
	return crtuo
}

// RemoveRelationshipIDs removes the "relationships" edge to CIRelationship entities by IDs.
func (crtuo *CIRelationshipTypeUpdateOne) RemoveRelationshipIDs(ids ...int) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.RemoveRelationshipIDs(ids...)
	return crtuo
}

// RemoveRelationships removes "relationships" edges to CIRelationship entities.
func (crtuo *CIRelationshipTypeUpdateOne) RemoveRelationships(c ...*CIRelationship) *CIRelationshipTypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crtuo.RemoveRelationshipIDs(ids...)
}

// Where appends a list predicates to the CIRelationshipTypeUpdate builder.
func (crtuo *CIRelationshipTypeUpdateOne) Where(ps ...predicate.CIRelationshipType) *CIRelationshipTypeUpdateOne {
	crtuo.mutation.Where(ps...)
	return crtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crtuo *CIRelationshipTypeUpdateOne) Select(field string, fields ...string) *CIRelationshipTypeUpdateOne {
	crtuo.fields = append([]string{field}, fields...)
	return crtuo
}

// Save executes the query and returns the updated CIRelationshipType entity.
func (crtuo *CIRelationshipTypeUpdateOne) Save(ctx context.Context) (*CIRelationshipType, error) {
	crtuo.defaults()
	return withHooks(ctx, crtuo.sqlSave, crtuo.mutation, crtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crtuo *CIRelationshipTypeUpdateOne) SaveX(ctx context.Context) *CIRelationshipType {
	node, err := crtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crtuo *CIRelationshipTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := crtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crtuo *CIRelationshipTypeUpdateOne) ExecX(ctx context.Context) {
	if err := crtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crtuo *CIRelationshipTypeUpdateOne) defaults() {
	if _, ok := crtuo.mutation.UpdatedAt(); !ok {
		v := cirelationshiptype.UpdateDefaultUpdatedAt()
		crtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crtuo *CIRelationshipTypeUpdateOne) check() error {
	if v, ok := crtuo.mutation.Name(); ok {
		if err := cirelationshiptype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.name": %w`, err)}
		}
	}
	if v, ok := crtuo.mutation.DisplayName(); ok {
		if err := cirelationshiptype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.display_name": %w`, err)}
		}
	}
	if crtuo.mutation.TenantCleared() && len(crtuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIRelationshipType.tenant"`)
	}
	return nil
}

func (crtuo *CIRelationshipTypeUpdateOne) sqlSave(ctx context.Context) (_node *CIRelationshipType, err error) {
	if err := crtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cirelationshiptype.Table, cirelationshiptype.Columns, sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt))
	id, ok := crtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIRelationshipType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cirelationshiptype.FieldID)
		for _, f := range fields {
			if !cirelationshiptype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cirelationshiptype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crtuo.mutation.Name(); ok {
		_spec.SetField(cirelationshiptype.FieldName, field.TypeString, value)
	}
	if value, ok := crtuo.mutation.DisplayName(); ok {
		_spec.SetField(cirelationshiptype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := crtuo.mutation.Description(); ok {
		_spec.SetField(cirelationshiptype.FieldDescription, field.TypeString, value)
	}
	if crtuo.mutation.DescriptionCleared() {
		_spec.ClearField(cirelationshiptype.FieldDescription, field.TypeString)
	}
	if value, ok := crtuo.mutation.Direction(); ok {
		_spec.SetField(cirelationshiptype.FieldDirection, field.TypeString, value)
	}
	if value, ok := crtuo.mutation.Cardinality(); ok {
		_spec.SetField(cirelationshiptype.FieldCardinality, field.TypeString, value)
	}
	if value, ok := crtuo.mutation.SourceCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldSourceCiTypes, field.TypeJSON, value)
	}
	if value, ok := crtuo.mutation.AppendedSourceCiTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cirelationshiptype.FieldSourceCiTypes, value)
		})
	}
	if crtuo.mutation.SourceCiTypesCleared() {
		_spec.ClearField(cirelationshiptype.FieldSourceCiTypes, field.TypeJSON)
	}
	if value, ok := crtuo.mutation.TargetCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldTargetCiTypes, field.TypeJSON, value)
	}
	if value, ok := crtuo.mutation.AppendedTargetCiTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cirelationshiptype.FieldTargetCiTypes, value)
		})
	}
	if crtuo.mutation.TargetCiTypesCleared() {
		_spec.ClearField(cirelationshiptype.FieldTargetCiTypes, field.TypeJSON)
	}
	if value, ok := crtuo.mutation.IsSystem(); ok {
		_spec.SetField(cirelationshiptype.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := crtuo.mutation.IsActive(); ok {
		_spec.SetField(cirelationshiptype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := crtuo.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := crtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldUpdatedAt, field.TypeTime, value)
	}
	if crtuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cirelationshiptype.TenantTable,
			Columns: []string{cirelationshiptype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cirelationshiptype.TenantTable,
			Columns: []string{cirelationshiptype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if crtuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtuo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !crtuo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := crtuo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CIRelationshipType{config: crtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cirelationshiptype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crtuo.mutation.done = true
	return _node, nil
}
