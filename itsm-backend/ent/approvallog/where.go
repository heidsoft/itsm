// Code generated by ent, DO NOT EDIT.

package approvallog

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldID, id))
}

// ApproverID applies equality check predicate on the "approver_id" field. It's identical to ApproverIDEQ.
func ApproverID(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldApproverID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldComment, v))
}

// TicketID applies equality check predicate on the "ticket_id" field. It's identical to TicketIDEQ.
func TicketID(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldTicketID, v))
}

// StepOrder applies equality check predicate on the "step_order" field. It's identical to StepOrderEQ.
func StepOrder(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldStepOrder, v))
}

// StepName applies equality check predicate on the "step_name" field. It's identical to StepNameEQ.
func StepName(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldStepName, v))
}

// ApprovedAt applies equality check predicate on the "approved_at" field. It's identical to ApprovedAtEQ.
func ApprovedAt(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldApprovedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldCreatedAt, v))
}

// ApproverIDEQ applies the EQ predicate on the "approver_id" field.
func ApproverIDEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldApproverID, v))
}

// ApproverIDNEQ applies the NEQ predicate on the "approver_id" field.
func ApproverIDNEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldApproverID, v))
}

// ApproverIDIn applies the In predicate on the "approver_id" field.
func ApproverIDIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldApproverID, vs...))
}

// ApproverIDNotIn applies the NotIn predicate on the "approver_id" field.
func ApproverIDNotIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldApproverID, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldContainsFold(FieldComment, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldStatus, vs...))
}

// TicketIDEQ applies the EQ predicate on the "ticket_id" field.
func TicketIDEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldTicketID, v))
}

// TicketIDNEQ applies the NEQ predicate on the "ticket_id" field.
func TicketIDNEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldTicketID, v))
}

// TicketIDIn applies the In predicate on the "ticket_id" field.
func TicketIDIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldTicketID, vs...))
}

// TicketIDNotIn applies the NotIn predicate on the "ticket_id" field.
func TicketIDNotIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldTicketID, vs...))
}

// StepOrderEQ applies the EQ predicate on the "step_order" field.
func StepOrderEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldStepOrder, v))
}

// StepOrderNEQ applies the NEQ predicate on the "step_order" field.
func StepOrderNEQ(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldStepOrder, v))
}

// StepOrderIn applies the In predicate on the "step_order" field.
func StepOrderIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldStepOrder, vs...))
}

// StepOrderNotIn applies the NotIn predicate on the "step_order" field.
func StepOrderNotIn(vs ...int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldStepOrder, vs...))
}

// StepOrderGT applies the GT predicate on the "step_order" field.
func StepOrderGT(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldStepOrder, v))
}

// StepOrderGTE applies the GTE predicate on the "step_order" field.
func StepOrderGTE(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldStepOrder, v))
}

// StepOrderLT applies the LT predicate on the "step_order" field.
func StepOrderLT(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldStepOrder, v))
}

// StepOrderLTE applies the LTE predicate on the "step_order" field.
func StepOrderLTE(v int) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldStepOrder, v))
}

// StepNameEQ applies the EQ predicate on the "step_name" field.
func StepNameEQ(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldStepName, v))
}

// StepNameNEQ applies the NEQ predicate on the "step_name" field.
func StepNameNEQ(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldStepName, v))
}

// StepNameIn applies the In predicate on the "step_name" field.
func StepNameIn(vs ...string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldStepName, vs...))
}

// StepNameNotIn applies the NotIn predicate on the "step_name" field.
func StepNameNotIn(vs ...string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldStepName, vs...))
}

// StepNameGT applies the GT predicate on the "step_name" field.
func StepNameGT(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldStepName, v))
}

// StepNameGTE applies the GTE predicate on the "step_name" field.
func StepNameGTE(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldStepName, v))
}

// StepNameLT applies the LT predicate on the "step_name" field.
func StepNameLT(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldStepName, v))
}

// StepNameLTE applies the LTE predicate on the "step_name" field.
func StepNameLTE(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldStepName, v))
}

// StepNameContains applies the Contains predicate on the "step_name" field.
func StepNameContains(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldContains(FieldStepName, v))
}

// StepNameHasPrefix applies the HasPrefix predicate on the "step_name" field.
func StepNameHasPrefix(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldHasPrefix(FieldStepName, v))
}

// StepNameHasSuffix applies the HasSuffix predicate on the "step_name" field.
func StepNameHasSuffix(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldHasSuffix(FieldStepName, v))
}

// StepNameIsNil applies the IsNil predicate on the "step_name" field.
func StepNameIsNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIsNull(FieldStepName))
}

// StepNameNotNil applies the NotNil predicate on the "step_name" field.
func StepNameNotNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotNull(FieldStepName))
}

// StepNameEqualFold applies the EqualFold predicate on the "step_name" field.
func StepNameEqualFold(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEqualFold(FieldStepName, v))
}

// StepNameContainsFold applies the ContainsFold predicate on the "step_name" field.
func StepNameContainsFold(v string) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldContainsFold(FieldStepName, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotNull(FieldMetadata))
}

// ApprovedAtEQ applies the EQ predicate on the "approved_at" field.
func ApprovedAtEQ(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldApprovedAt, v))
}

// ApprovedAtNEQ applies the NEQ predicate on the "approved_at" field.
func ApprovedAtNEQ(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldApprovedAt, v))
}

// ApprovedAtIn applies the In predicate on the "approved_at" field.
func ApprovedAtIn(vs ...time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldApprovedAt, vs...))
}

// ApprovedAtNotIn applies the NotIn predicate on the "approved_at" field.
func ApprovedAtNotIn(vs ...time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldApprovedAt, vs...))
}

// ApprovedAtGT applies the GT predicate on the "approved_at" field.
func ApprovedAtGT(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldApprovedAt, v))
}

// ApprovedAtGTE applies the GTE predicate on the "approved_at" field.
func ApprovedAtGTE(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldApprovedAt, v))
}

// ApprovedAtLT applies the LT predicate on the "approved_at" field.
func ApprovedAtLT(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldApprovedAt, v))
}

// ApprovedAtLTE applies the LTE predicate on the "approved_at" field.
func ApprovedAtLTE(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldApprovedAt, v))
}

// ApprovedAtIsNil applies the IsNil predicate on the "approved_at" field.
func ApprovedAtIsNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIsNull(FieldApprovedAt))
}

// ApprovedAtNotNil applies the NotNil predicate on the "approved_at" field.
func ApprovedAtNotNil() predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotNull(FieldApprovedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.FieldLTE(FieldCreatedAt, v))
}

// HasApprover applies the HasEdge predicate on the "approver" edge.
func HasApprover() predicate.ApprovalLog {
	return predicate.ApprovalLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ApproverTable, ApproverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApproverWith applies the HasEdge predicate on the "approver" edge with a given conditions (other predicates).
func HasApproverWith(preds ...predicate.User) predicate.ApprovalLog {
	return predicate.ApprovalLog(func(s *sql.Selector) {
		step := newApproverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTicket applies the HasEdge predicate on the "ticket" edge.
func HasTicket() predicate.ApprovalLog {
	return predicate.ApprovalLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketWith applies the HasEdge predicate on the "ticket" edge with a given conditions (other predicates).
func HasTicketWith(preds ...predicate.Ticket) predicate.ApprovalLog {
	return predicate.ApprovalLog(func(s *sql.Selector) {
		step := newTicketStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApprovalLog) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApprovalLog) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApprovalLog) predicate.ApprovalLog {
	return predicate.ApprovalLog(sql.NotPredicates(p))
}
