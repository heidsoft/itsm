// Code generated by ent, DO NOT EDIT.

package approvallog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the approvallog type in the database.
	Label = "approval_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldStepOrder holds the string denoting the step_order field in the database.
	FieldStepOrder = "step_order"
	// FieldStepName holds the string denoting the step_name field in the database.
	FieldStepName = "step_name"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldApprovedAt holds the string denoting the approved_at field in the database.
	FieldApprovedAt = "approved_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeApprover holds the string denoting the approver edge name in mutations.
	EdgeApprover = "approver"
	// EdgeTicket holds the string denoting the ticket edge name in mutations.
	EdgeTicket = "ticket"
	// Table holds the table name of the approvallog in the database.
	Table = "approval_logs"
	// ApproverTable is the table that holds the approver relation/edge.
	ApproverTable = "approval_logs"
	// ApproverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApproverInverseTable = "users"
	// ApproverColumn is the table column denoting the approver relation/edge.
	ApproverColumn = "approver_id"
	// TicketTable is the table that holds the ticket relation/edge.
	TicketTable = "approval_logs"
	// TicketInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketInverseTable = "tickets"
	// TicketColumn is the table column denoting the ticket relation/edge.
	TicketColumn = "ticket_id"
)

// Columns holds all SQL columns for approvallog fields.
var Columns = []string{
	FieldID,
	FieldApproverID,
	FieldComment,
	FieldStatus,
	FieldTicketID,
	FieldStepOrder,
	FieldStepName,
	FieldMetadata,
	FieldApprovedAt,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ApproverIDValidator is a validator for the "approver_id" field. It is called by the builders before save.
	ApproverIDValidator func(int) error
	// TicketIDValidator is a validator for the "ticket_id" field. It is called by the builders before save.
	TicketIDValidator func(int) error
	// StepOrderValidator is a validator for the "step_order" field. It is called by the builders before save.
	StepOrderValidator func(int) error
	// StepNameValidator is a validator for the "step_name" field. It is called by the builders before save.
	StepNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
	StatusSkipped  Status = "skipped"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusApproved, StatusRejected, StatusSkipped:
		return nil
	default:
		return fmt.Errorf("approvallog: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ApprovalLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByStepOrder orders the results by the step_order field.
func ByStepOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepOrder, opts...).ToFunc()
}

// ByStepName orders the results by the step_name field.
func ByStepName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStepName, opts...).ToFunc()
}

// ByApprovedAt orders the results by the approved_at field.
func ByApprovedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByApproverField orders the results by approver field.
func ByApproverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproverStep(), sql.OrderByField(field, opts...))
	}
}

// ByTicketField orders the results by ticket field.
func ByTicketField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketStep(), sql.OrderByField(field, opts...))
	}
}
func newApproverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApproverTable, ApproverColumn),
	)
}
func newTicketStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
	)
}
