// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceRequestUpdate is the builder for updating ServiceRequest entities.
type ServiceRequestUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceRequestMutation
}

// Where appends a list predicates to the ServiceRequestUpdate builder.
func (sru *ServiceRequestUpdate) Where(ps ...predicate.ServiceRequest) *ServiceRequestUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetCatalogID sets the "catalog_id" field.
func (sru *ServiceRequestUpdate) SetCatalogID(i int) *ServiceRequestUpdate {
	sru.mutation.SetCatalogID(i)
	return sru
}

// SetNillableCatalogID sets the "catalog_id" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableCatalogID(i *int) *ServiceRequestUpdate {
	if i != nil {
		sru.SetCatalogID(*i)
	}
	return sru
}

// SetRequesterID sets the "requester_id" field.
func (sru *ServiceRequestUpdate) SetRequesterID(i int) *ServiceRequestUpdate {
	sru.mutation.SetRequesterID(i)
	return sru
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableRequesterID(i *int) *ServiceRequestUpdate {
	if i != nil {
		sru.SetRequesterID(*i)
	}
	return sru
}

// SetStatus sets the "status" field.
func (sru *ServiceRequestUpdate) SetStatus(s servicerequest.Status) *ServiceRequestUpdate {
	sru.mutation.SetStatus(s)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableStatus(s *servicerequest.Status) *ServiceRequestUpdate {
	if s != nil {
		sru.SetStatus(*s)
	}
	return sru
}

// SetReason sets the "reason" field.
func (sru *ServiceRequestUpdate) SetReason(s string) *ServiceRequestUpdate {
	sru.mutation.SetReason(s)
	return sru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableReason(s *string) *ServiceRequestUpdate {
	if s != nil {
		sru.SetReason(*s)
	}
	return sru
}

// ClearReason clears the value of the "reason" field.
func (sru *ServiceRequestUpdate) ClearReason() *ServiceRequestUpdate {
	sru.mutation.ClearReason()
	return sru
}

// SetTenantID sets the "tenant_id" field.
func (sru *ServiceRequestUpdate) SetTenantID(i int) *ServiceRequestUpdate {
	sru.mutation.SetTenantID(i)
	return sru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sru *ServiceRequestUpdate) SetNillableTenantID(i *int) *ServiceRequestUpdate {
	if i != nil {
		sru.SetTenantID(*i)
	}
	return sru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sru *ServiceRequestUpdate) SetTenant(t *Tenant) *ServiceRequestUpdate {
	return sru.SetTenantID(t.ID)
}

// SetCatalog sets the "catalog" edge to the ServiceCatalog entity.
func (sru *ServiceRequestUpdate) SetCatalog(s *ServiceCatalog) *ServiceRequestUpdate {
	return sru.SetCatalogID(s.ID)
}

// SetRequester sets the "requester" edge to the User entity.
func (sru *ServiceRequestUpdate) SetRequester(u *User) *ServiceRequestUpdate {
	return sru.SetRequesterID(u.ID)
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (sru *ServiceRequestUpdate) Mutation() *ServiceRequestMutation {
	return sru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sru *ServiceRequestUpdate) ClearTenant() *ServiceRequestUpdate {
	sru.mutation.ClearTenant()
	return sru
}

// ClearCatalog clears the "catalog" edge to the ServiceCatalog entity.
func (sru *ServiceRequestUpdate) ClearCatalog() *ServiceRequestUpdate {
	sru.mutation.ClearCatalog()
	return sru
}

// ClearRequester clears the "requester" edge to the User entity.
func (sru *ServiceRequestUpdate) ClearRequester() *ServiceRequestUpdate {
	sru.mutation.ClearRequester()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *ServiceRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *ServiceRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *ServiceRequestUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *ServiceRequestUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *ServiceRequestUpdate) check() error {
	if v, ok := sru.mutation.CatalogID(); ok {
		if err := servicerequest.CatalogIDValidator(v); err != nil {
			return &ValidationError{Name: "catalog_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.catalog_id": %w`, err)}
		}
	}
	if v, ok := sru.mutation.RequesterID(); ok {
		if err := servicerequest.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.requester_id": %w`, err)}
		}
	}
	if v, ok := sru.mutation.Status(); ok {
		if err := servicerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.status": %w`, err)}
		}
	}
	if v, ok := sru.mutation.Reason(); ok {
		if err := servicerequest.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.reason": %w`, err)}
		}
	}
	if v, ok := sru.mutation.TenantID(); ok {
		if err := servicerequest.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.tenant_id": %w`, err)}
		}
	}
	if sru.mutation.TenantCleared() && len(sru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.tenant"`)
	}
	if sru.mutation.CatalogCleared() && len(sru.mutation.CatalogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.catalog"`)
	}
	if sru.mutation.RequesterCleared() && len(sru.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.requester"`)
	}
	return nil
}

func (sru *ServiceRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicerequest.Table, servicerequest.Columns, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sru.mutation.Reason(); ok {
		_spec.SetField(servicerequest.FieldReason, field.TypeString, value)
	}
	if sru.mutation.ReasonCleared() {
		_spec.ClearField(servicerequest.FieldReason, field.TypeString)
	}
	if sru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.TenantTable,
			Columns: []string{servicerequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.TenantTable,
			Columns: []string{servicerequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.CatalogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.CatalogTable,
			Columns: []string{servicerequest.CatalogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.CatalogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.CatalogTable,
			Columns: []string{servicerequest.CatalogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.RequesterTable,
			Columns: []string{servicerequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.RequesterTable,
			Columns: []string{servicerequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// ServiceRequestUpdateOne is the builder for updating a single ServiceRequest entity.
type ServiceRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceRequestMutation
}

// SetCatalogID sets the "catalog_id" field.
func (sruo *ServiceRequestUpdateOne) SetCatalogID(i int) *ServiceRequestUpdateOne {
	sruo.mutation.SetCatalogID(i)
	return sruo
}

// SetNillableCatalogID sets the "catalog_id" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableCatalogID(i *int) *ServiceRequestUpdateOne {
	if i != nil {
		sruo.SetCatalogID(*i)
	}
	return sruo
}

// SetRequesterID sets the "requester_id" field.
func (sruo *ServiceRequestUpdateOne) SetRequesterID(i int) *ServiceRequestUpdateOne {
	sruo.mutation.SetRequesterID(i)
	return sruo
}

// SetNillableRequesterID sets the "requester_id" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableRequesterID(i *int) *ServiceRequestUpdateOne {
	if i != nil {
		sruo.SetRequesterID(*i)
	}
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *ServiceRequestUpdateOne) SetStatus(s servicerequest.Status) *ServiceRequestUpdateOne {
	sruo.mutation.SetStatus(s)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableStatus(s *servicerequest.Status) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetStatus(*s)
	}
	return sruo
}

// SetReason sets the "reason" field.
func (sruo *ServiceRequestUpdateOne) SetReason(s string) *ServiceRequestUpdateOne {
	sruo.mutation.SetReason(s)
	return sruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableReason(s *string) *ServiceRequestUpdateOne {
	if s != nil {
		sruo.SetReason(*s)
	}
	return sruo
}

// ClearReason clears the value of the "reason" field.
func (sruo *ServiceRequestUpdateOne) ClearReason() *ServiceRequestUpdateOne {
	sruo.mutation.ClearReason()
	return sruo
}

// SetTenantID sets the "tenant_id" field.
func (sruo *ServiceRequestUpdateOne) SetTenantID(i int) *ServiceRequestUpdateOne {
	sruo.mutation.SetTenantID(i)
	return sruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sruo *ServiceRequestUpdateOne) SetNillableTenantID(i *int) *ServiceRequestUpdateOne {
	if i != nil {
		sruo.SetTenantID(*i)
	}
	return sruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sruo *ServiceRequestUpdateOne) SetTenant(t *Tenant) *ServiceRequestUpdateOne {
	return sruo.SetTenantID(t.ID)
}

// SetCatalog sets the "catalog" edge to the ServiceCatalog entity.
func (sruo *ServiceRequestUpdateOne) SetCatalog(s *ServiceCatalog) *ServiceRequestUpdateOne {
	return sruo.SetCatalogID(s.ID)
}

// SetRequester sets the "requester" edge to the User entity.
func (sruo *ServiceRequestUpdateOne) SetRequester(u *User) *ServiceRequestUpdateOne {
	return sruo.SetRequesterID(u.ID)
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (sruo *ServiceRequestUpdateOne) Mutation() *ServiceRequestMutation {
	return sruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sruo *ServiceRequestUpdateOne) ClearTenant() *ServiceRequestUpdateOne {
	sruo.mutation.ClearTenant()
	return sruo
}

// ClearCatalog clears the "catalog" edge to the ServiceCatalog entity.
func (sruo *ServiceRequestUpdateOne) ClearCatalog() *ServiceRequestUpdateOne {
	sruo.mutation.ClearCatalog()
	return sruo
}

// ClearRequester clears the "requester" edge to the User entity.
func (sruo *ServiceRequestUpdateOne) ClearRequester() *ServiceRequestUpdateOne {
	sruo.mutation.ClearRequester()
	return sruo
}

// Where appends a list predicates to the ServiceRequestUpdate builder.
func (sruo *ServiceRequestUpdateOne) Where(ps ...predicate.ServiceRequest) *ServiceRequestUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *ServiceRequestUpdateOne) Select(field string, fields ...string) *ServiceRequestUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated ServiceRequest entity.
func (sruo *ServiceRequestUpdateOne) Save(ctx context.Context) (*ServiceRequest, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *ServiceRequestUpdateOne) SaveX(ctx context.Context) *ServiceRequest {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *ServiceRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *ServiceRequestUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *ServiceRequestUpdateOne) check() error {
	if v, ok := sruo.mutation.CatalogID(); ok {
		if err := servicerequest.CatalogIDValidator(v); err != nil {
			return &ValidationError{Name: "catalog_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.catalog_id": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.RequesterID(); ok {
		if err := servicerequest.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.requester_id": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.Status(); ok {
		if err := servicerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.status": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.Reason(); ok {
		if err := servicerequest.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.reason": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.TenantID(); ok {
		if err := servicerequest.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.tenant_id": %w`, err)}
		}
	}
	if sruo.mutation.TenantCleared() && len(sruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.tenant"`)
	}
	if sruo.mutation.CatalogCleared() && len(sruo.mutation.CatalogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.catalog"`)
	}
	if sruo.mutation.RequesterCleared() && len(sruo.mutation.RequesterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceRequest.requester"`)
	}
	return nil
}

func (sruo *ServiceRequestUpdateOne) sqlSave(ctx context.Context) (_node *ServiceRequest, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicerequest.Table, servicerequest.Columns, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicerequest.FieldID)
		for _, f := range fields {
			if !servicerequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicerequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sruo.mutation.Reason(); ok {
		_spec.SetField(servicerequest.FieldReason, field.TypeString, value)
	}
	if sruo.mutation.ReasonCleared() {
		_spec.ClearField(servicerequest.FieldReason, field.TypeString)
	}
	if sruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.TenantTable,
			Columns: []string{servicerequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.TenantTable,
			Columns: []string{servicerequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.CatalogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.CatalogTable,
			Columns: []string{servicerequest.CatalogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.CatalogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.CatalogTable,
			Columns: []string{servicerequest.CatalogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.RequesterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.RequesterTable,
			Columns: []string{servicerequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RequesterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicerequest.RequesterTable,
			Columns: []string{servicerequest.RequesterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceRequest{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
