// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/tickettag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketTagUpdate is the builder for updating TicketTag entities.
type TicketTagUpdate struct {
	config
	hooks    []Hook
	mutation *TicketTagMutation
}

// Where appends a list predicates to the TicketTagUpdate builder.
func (ttu *TicketTagUpdate) Where(ps ...predicate.TicketTag) *TicketTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "name" field.
func (ttu *TicketTagUpdate) SetName(s string) *TicketTagUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableName(s *string) *TicketTagUpdate {
	if s != nil {
		ttu.SetName(*s)
	}
	return ttu
}

// SetColor sets the "color" field.
func (ttu *TicketTagUpdate) SetColor(s string) *TicketTagUpdate {
	ttu.mutation.SetColor(s)
	return ttu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableColor(s *string) *TicketTagUpdate {
	if s != nil {
		ttu.SetColor(*s)
	}
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TicketTagUpdate) SetDescription(s string) *TicketTagUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableDescription(s *string) *TicketTagUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// ClearDescription clears the value of the "description" field.
func (ttu *TicketTagUpdate) ClearDescription() *TicketTagUpdate {
	ttu.mutation.ClearDescription()
	return ttu
}

// SetIsActive sets the "is_active" field.
func (ttu *TicketTagUpdate) SetIsActive(b bool) *TicketTagUpdate {
	ttu.mutation.SetIsActive(b)
	return ttu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableIsActive(b *bool) *TicketTagUpdate {
	if b != nil {
		ttu.SetIsActive(*b)
	}
	return ttu
}

// SetTenantID sets the "tenant_id" field.
func (ttu *TicketTagUpdate) SetTenantID(i int) *TicketTagUpdate {
	ttu.mutation.ResetTenantID()
	ttu.mutation.SetTenantID(i)
	return ttu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableTenantID(i *int) *TicketTagUpdate {
	if i != nil {
		ttu.SetTenantID(*i)
	}
	return ttu
}

// AddTenantID adds i to the "tenant_id" field.
func (ttu *TicketTagUpdate) AddTenantID(i int) *TicketTagUpdate {
	ttu.mutation.AddTenantID(i)
	return ttu
}

// SetCreatedAt sets the "created_at" field.
func (ttu *TicketTagUpdate) SetCreatedAt(t time.Time) *TicketTagUpdate {
	ttu.mutation.SetCreatedAt(t)
	return ttu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttu *TicketTagUpdate) SetNillableCreatedAt(t *time.Time) *TicketTagUpdate {
	if t != nil {
		ttu.SetCreatedAt(*t)
	}
	return ttu
}

// SetUpdatedAt sets the "updated_at" field.
func (ttu *TicketTagUpdate) SetUpdatedAt(t time.Time) *TicketTagUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ttu *TicketTagUpdate) AddTicketIDs(ids ...int) *TicketTagUpdate {
	ttu.mutation.AddTicketIDs(ids...)
	return ttu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ttu *TicketTagUpdate) AddTickets(t ...*Ticket) *TicketTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTicketIDs(ids...)
}

// Mutation returns the TicketTagMutation object of the builder.
func (ttu *TicketTagUpdate) Mutation() *TicketTagMutation {
	return ttu.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (ttu *TicketTagUpdate) ClearTickets() *TicketTagUpdate {
	ttu.mutation.ClearTickets()
	return ttu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (ttu *TicketTagUpdate) RemoveTicketIDs(ids ...int) *TicketTagUpdate {
	ttu.mutation.RemoveTicketIDs(ids...)
	return ttu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (ttu *TicketTagUpdate) RemoveTickets(t ...*Ticket) *TicketTagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTicketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TicketTagUpdate) Save(ctx context.Context) (int, error) {
	ttu.defaults()
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TicketTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TicketTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TicketTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *TicketTagUpdate) defaults() {
	if _, ok := ttu.mutation.UpdatedAt(); !ok {
		v := tickettag.UpdateDefaultUpdatedAt()
		ttu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TicketTagUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := tickettag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketTag.name": %w`, err)}
		}
	}
	if v, ok := ttu.mutation.TenantID(); ok {
		if err := tickettag.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketTag.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ttu *TicketTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tickettag.Table, tickettag.Columns, sqlgraph.NewFieldSpec(tickettag.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tickettag.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Color(); ok {
		_spec.SetField(tickettag.FieldColor, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.SetField(tickettag.FieldDescription, field.TypeString, value)
	}
	if ttu.mutation.DescriptionCleared() {
		_spec.ClearField(tickettag.FieldDescription, field.TypeString)
	}
	if value, ok := ttu.mutation.IsActive(); ok {
		_spec.SetField(tickettag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttu.mutation.TenantID(); ok {
		_spec.SetField(tickettag.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.AddedTenantID(); ok {
		_spec.AddField(tickettag.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.CreatedAt(); ok {
		_spec.SetField(tickettag.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.SetField(tickettag.FieldUpdatedAt, field.TypeTime, value)
	}
	if ttu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !ttu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tickettag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TicketTagUpdateOne is the builder for updating a single TicketTag entity.
type TicketTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketTagMutation
}

// SetName sets the "name" field.
func (ttuo *TicketTagUpdateOne) SetName(s string) *TicketTagUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableName(s *string) *TicketTagUpdateOne {
	if s != nil {
		ttuo.SetName(*s)
	}
	return ttuo
}

// SetColor sets the "color" field.
func (ttuo *TicketTagUpdateOne) SetColor(s string) *TicketTagUpdateOne {
	ttuo.mutation.SetColor(s)
	return ttuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableColor(s *string) *TicketTagUpdateOne {
	if s != nil {
		ttuo.SetColor(*s)
	}
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TicketTagUpdateOne) SetDescription(s string) *TicketTagUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableDescription(s *string) *TicketTagUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// ClearDescription clears the value of the "description" field.
func (ttuo *TicketTagUpdateOne) ClearDescription() *TicketTagUpdateOne {
	ttuo.mutation.ClearDescription()
	return ttuo
}

// SetIsActive sets the "is_active" field.
func (ttuo *TicketTagUpdateOne) SetIsActive(b bool) *TicketTagUpdateOne {
	ttuo.mutation.SetIsActive(b)
	return ttuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableIsActive(b *bool) *TicketTagUpdateOne {
	if b != nil {
		ttuo.SetIsActive(*b)
	}
	return ttuo
}

// SetTenantID sets the "tenant_id" field.
func (ttuo *TicketTagUpdateOne) SetTenantID(i int) *TicketTagUpdateOne {
	ttuo.mutation.ResetTenantID()
	ttuo.mutation.SetTenantID(i)
	return ttuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableTenantID(i *int) *TicketTagUpdateOne {
	if i != nil {
		ttuo.SetTenantID(*i)
	}
	return ttuo
}

// AddTenantID adds i to the "tenant_id" field.
func (ttuo *TicketTagUpdateOne) AddTenantID(i int) *TicketTagUpdateOne {
	ttuo.mutation.AddTenantID(i)
	return ttuo
}

// SetCreatedAt sets the "created_at" field.
func (ttuo *TicketTagUpdateOne) SetCreatedAt(t time.Time) *TicketTagUpdateOne {
	ttuo.mutation.SetCreatedAt(t)
	return ttuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttuo *TicketTagUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketTagUpdateOne {
	if t != nil {
		ttuo.SetCreatedAt(*t)
	}
	return ttuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ttuo *TicketTagUpdateOne) SetUpdatedAt(t time.Time) *TicketTagUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ttuo *TicketTagUpdateOne) AddTicketIDs(ids ...int) *TicketTagUpdateOne {
	ttuo.mutation.AddTicketIDs(ids...)
	return ttuo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ttuo *TicketTagUpdateOne) AddTickets(t ...*Ticket) *TicketTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTicketIDs(ids...)
}

// Mutation returns the TicketTagMutation object of the builder.
func (ttuo *TicketTagUpdateOne) Mutation() *TicketTagMutation {
	return ttuo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (ttuo *TicketTagUpdateOne) ClearTickets() *TicketTagUpdateOne {
	ttuo.mutation.ClearTickets()
	return ttuo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (ttuo *TicketTagUpdateOne) RemoveTicketIDs(ids ...int) *TicketTagUpdateOne {
	ttuo.mutation.RemoveTicketIDs(ids...)
	return ttuo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (ttuo *TicketTagUpdateOne) RemoveTickets(t ...*Ticket) *TicketTagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTicketIDs(ids...)
}

// Where appends a list predicates to the TicketTagUpdate builder.
func (ttuo *TicketTagUpdateOne) Where(ps ...predicate.TicketTag) *TicketTagUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TicketTagUpdateOne) Select(field string, fields ...string) *TicketTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TicketTag entity.
func (ttuo *TicketTagUpdateOne) Save(ctx context.Context) (*TicketTag, error) {
	ttuo.defaults()
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TicketTagUpdateOne) SaveX(ctx context.Context) *TicketTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TicketTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TicketTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *TicketTagUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdatedAt(); !ok {
		v := tickettag.UpdateDefaultUpdatedAt()
		ttuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TicketTagUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := tickettag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketTag.name": %w`, err)}
		}
	}
	if v, ok := ttuo.mutation.TenantID(); ok {
		if err := tickettag.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketTag.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TicketTagUpdateOne) sqlSave(ctx context.Context) (_node *TicketTag, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tickettag.Table, tickettag.Columns, sqlgraph.NewFieldSpec(tickettag.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tickettag.FieldID)
		for _, f := range fields {
			if !tickettag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tickettag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tickettag.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Color(); ok {
		_spec.SetField(tickettag.FieldColor, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.SetField(tickettag.FieldDescription, field.TypeString, value)
	}
	if ttuo.mutation.DescriptionCleared() {
		_spec.ClearField(tickettag.FieldDescription, field.TypeString)
	}
	if value, ok := ttuo.mutation.IsActive(); ok {
		_spec.SetField(tickettag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttuo.mutation.TenantID(); ok {
		_spec.SetField(tickettag.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.AddedTenantID(); ok {
		_spec.AddField(tickettag.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.CreatedAt(); ok {
		_spec.SetField(tickettag.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tickettag.FieldUpdatedAt, field.TypeTime, value)
	}
	if ttuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !ttuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettag.TicketsTable,
			Columns: []string{tickettag.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tickettag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
