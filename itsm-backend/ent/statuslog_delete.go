// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/statuslog"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatusLogDelete is the builder for deleting a StatusLog entity.
type StatusLogDelete struct {
	config
	hooks    []Hook
	mutation *StatusLogMutation
}

// Where appends a list predicates to the StatusLogDelete builder.
func (sld *StatusLogDelete) Where(ps ...predicate.StatusLog) *StatusLogDelete {
	sld.mutation.Where(ps...)
	return sld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sld *StatusLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sld.sqlExec, sld.mutation, sld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sld *StatusLogDelete) ExecX(ctx context.Context) int {
	n, err := sld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sld *StatusLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(statuslog.Table, sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt))
	if ps := sld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sld.mutation.done = true
	return affected, err
}

// StatusLogDeleteOne is the builder for deleting a single StatusLog entity.
type StatusLogDeleteOne struct {
	sld *StatusLogDelete
}

// Where appends a list predicates to the StatusLogDelete builder.
func (sldo *StatusLogDeleteOne) Where(ps ...predicate.StatusLog) *StatusLogDeleteOne {
	sldo.sld.mutation.Where(ps...)
	return sldo
}

// Exec executes the deletion query.
func (sldo *StatusLogDeleteOne) Exec(ctx context.Context) error {
	n, err := sldo.sld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{statuslog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sldo *StatusLogDeleteOne) ExecX(ctx context.Context) {
	if err := sldo.Exec(ctx); err != nil {
		panic(err)
	}
}
