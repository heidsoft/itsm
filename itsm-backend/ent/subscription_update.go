// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/subscription"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTenantID sets the "tenant_id" field.
func (su *SubscriptionUpdate) SetTenantID(i int) *SubscriptionUpdate {
	su.mutation.SetTenantID(i)
	return su
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTenantID(i *int) *SubscriptionUpdate {
	if i != nil {
		su.SetTenantID(*i)
	}
	return su
}

// SetPlanName sets the "plan_name" field.
func (su *SubscriptionUpdate) SetPlanName(s string) *SubscriptionUpdate {
	su.mutation.SetPlanName(s)
	return su
}

// SetNillablePlanName sets the "plan_name" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePlanName(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetPlanName(*s)
	}
	return su
}

// SetMonthlyPrice sets the "monthly_price" field.
func (su *SubscriptionUpdate) SetMonthlyPrice(f float64) *SubscriptionUpdate {
	su.mutation.ResetMonthlyPrice()
	su.mutation.SetMonthlyPrice(f)
	return su
}

// SetNillableMonthlyPrice sets the "monthly_price" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableMonthlyPrice(f *float64) *SubscriptionUpdate {
	if f != nil {
		su.SetMonthlyPrice(*f)
	}
	return su
}

// AddMonthlyPrice adds f to the "monthly_price" field.
func (su *SubscriptionUpdate) AddMonthlyPrice(f float64) *SubscriptionUpdate {
	su.mutation.AddMonthlyPrice(f)
	return su
}

// SetYearlyPrice sets the "yearly_price" field.
func (su *SubscriptionUpdate) SetYearlyPrice(f float64) *SubscriptionUpdate {
	su.mutation.ResetYearlyPrice()
	su.mutation.SetYearlyPrice(f)
	return su
}

// SetNillableYearlyPrice sets the "yearly_price" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableYearlyPrice(f *float64) *SubscriptionUpdate {
	if f != nil {
		su.SetYearlyPrice(*f)
	}
	return su
}

// AddYearlyPrice adds f to the "yearly_price" field.
func (su *SubscriptionUpdate) AddYearlyPrice(f float64) *SubscriptionUpdate {
	su.mutation.AddYearlyPrice(f)
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(s subscription.Status) *SubscriptionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(s *subscription.Status) *SubscriptionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetStartsAt sets the "starts_at" field.
func (su *SubscriptionUpdate) SetStartsAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetStartsAt(t)
	return su
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStartsAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetStartsAt(*t)
	}
	return su
}

// SetExpiresAt sets the "expires_at" field.
func (su *SubscriptionUpdate) SetExpiresAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetExpiresAt(t)
	return su
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableExpiresAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetExpiresAt(*t)
	}
	return su
}

// SetFeatures sets the "features" field.
func (su *SubscriptionUpdate) SetFeatures(s []string) *SubscriptionUpdate {
	su.mutation.SetFeatures(s)
	return su
}

// AppendFeatures appends s to the "features" field.
func (su *SubscriptionUpdate) AppendFeatures(s []string) *SubscriptionUpdate {
	su.mutation.AppendFeatures(s)
	return su
}

// ClearFeatures clears the value of the "features" field.
func (su *SubscriptionUpdate) ClearFeatures() *SubscriptionUpdate {
	su.mutation.ClearFeatures()
	return su
}

// SetQuota sets the "quota" field.
func (su *SubscriptionUpdate) SetQuota(m map[string]interface{}) *SubscriptionUpdate {
	su.mutation.SetQuota(m)
	return su
}

// ClearQuota clears the value of the "quota" field.
func (su *SubscriptionUpdate) ClearQuota() *SubscriptionUpdate {
	su.mutation.ClearQuota()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscriptionUpdate) SetUpdatedAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (su *SubscriptionUpdate) SetTenant(t *Tenant) *SubscriptionUpdate {
	return su.SetTenantID(t.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (su *SubscriptionUpdate) ClearTenant() *SubscriptionUpdate {
	su.mutation.ClearTenant()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if v, ok := su.mutation.TenantID(); ok {
		if err := subscription.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.tenant_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.PlanName(); ok {
		if err := subscription.PlanNameValidator(v); err != nil {
			return &ValidationError{Name: "plan_name", err: fmt.Errorf(`ent: validator failed for field "Subscription.plan_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.MonthlyPrice(); ok {
		if err := subscription.MonthlyPriceValidator(v); err != nil {
			return &ValidationError{Name: "monthly_price", err: fmt.Errorf(`ent: validator failed for field "Subscription.monthly_price": %w`, err)}
		}
	}
	if v, ok := su.mutation.YearlyPrice(); ok {
		if err := subscription.YearlyPriceValidator(v); err != nil {
			return &ValidationError{Name: "yearly_price", err: fmt.Errorf(`ent: validator failed for field "Subscription.yearly_price": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if su.mutation.TenantCleared() && len(su.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.tenant"`)
	}
	return nil
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.PlanName(); ok {
		_spec.SetField(subscription.FieldPlanName, field.TypeString, value)
	}
	if value, ok := su.mutation.MonthlyPrice(); ok {
		_spec.SetField(subscription.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedMonthlyPrice(); ok {
		_spec.AddField(subscription.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.YearlyPrice(); ok {
		_spec.SetField(subscription.FieldYearlyPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedYearlyPrice(); ok {
		_spec.AddField(subscription.FieldYearlyPrice, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.StartsAt(); ok {
		_spec.SetField(subscription.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Features(); ok {
		_spec.SetField(subscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscription.FieldFeatures, value)
		})
	}
	if su.mutation.FeaturesCleared() {
		_spec.ClearField(subscription.FieldFeatures, field.TypeJSON)
	}
	if value, ok := su.mutation.Quota(); ok {
		_spec.SetField(subscription.FieldQuota, field.TypeJSON, value)
	}
	if su.mutation.QuotaCleared() {
		_spec.ClearField(subscription.FieldQuota, field.TypeJSON)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.TenantTable,
			Columns: []string{subscription.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.TenantTable,
			Columns: []string{subscription.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetTenantID sets the "tenant_id" field.
func (suo *SubscriptionUpdateOne) SetTenantID(i int) *SubscriptionUpdateOne {
	suo.mutation.SetTenantID(i)
	return suo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTenantID(i *int) *SubscriptionUpdateOne {
	if i != nil {
		suo.SetTenantID(*i)
	}
	return suo
}

// SetPlanName sets the "plan_name" field.
func (suo *SubscriptionUpdateOne) SetPlanName(s string) *SubscriptionUpdateOne {
	suo.mutation.SetPlanName(s)
	return suo
}

// SetNillablePlanName sets the "plan_name" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePlanName(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetPlanName(*s)
	}
	return suo
}

// SetMonthlyPrice sets the "monthly_price" field.
func (suo *SubscriptionUpdateOne) SetMonthlyPrice(f float64) *SubscriptionUpdateOne {
	suo.mutation.ResetMonthlyPrice()
	suo.mutation.SetMonthlyPrice(f)
	return suo
}

// SetNillableMonthlyPrice sets the "monthly_price" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableMonthlyPrice(f *float64) *SubscriptionUpdateOne {
	if f != nil {
		suo.SetMonthlyPrice(*f)
	}
	return suo
}

// AddMonthlyPrice adds f to the "monthly_price" field.
func (suo *SubscriptionUpdateOne) AddMonthlyPrice(f float64) *SubscriptionUpdateOne {
	suo.mutation.AddMonthlyPrice(f)
	return suo
}

// SetYearlyPrice sets the "yearly_price" field.
func (suo *SubscriptionUpdateOne) SetYearlyPrice(f float64) *SubscriptionUpdateOne {
	suo.mutation.ResetYearlyPrice()
	suo.mutation.SetYearlyPrice(f)
	return suo
}

// SetNillableYearlyPrice sets the "yearly_price" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableYearlyPrice(f *float64) *SubscriptionUpdateOne {
	if f != nil {
		suo.SetYearlyPrice(*f)
	}
	return suo
}

// AddYearlyPrice adds f to the "yearly_price" field.
func (suo *SubscriptionUpdateOne) AddYearlyPrice(f float64) *SubscriptionUpdateOne {
	suo.mutation.AddYearlyPrice(f)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(s subscription.Status) *SubscriptionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(s *subscription.Status) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetStartsAt sets the "starts_at" field.
func (suo *SubscriptionUpdateOne) SetStartsAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetStartsAt(t)
	return suo
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStartsAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetStartsAt(*t)
	}
	return suo
}

// SetExpiresAt sets the "expires_at" field.
func (suo *SubscriptionUpdateOne) SetExpiresAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetExpiresAt(t)
	return suo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableExpiresAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetExpiresAt(*t)
	}
	return suo
}

// SetFeatures sets the "features" field.
func (suo *SubscriptionUpdateOne) SetFeatures(s []string) *SubscriptionUpdateOne {
	suo.mutation.SetFeatures(s)
	return suo
}

// AppendFeatures appends s to the "features" field.
func (suo *SubscriptionUpdateOne) AppendFeatures(s []string) *SubscriptionUpdateOne {
	suo.mutation.AppendFeatures(s)
	return suo
}

// ClearFeatures clears the value of the "features" field.
func (suo *SubscriptionUpdateOne) ClearFeatures() *SubscriptionUpdateOne {
	suo.mutation.ClearFeatures()
	return suo
}

// SetQuota sets the "quota" field.
func (suo *SubscriptionUpdateOne) SetQuota(m map[string]interface{}) *SubscriptionUpdateOne {
	suo.mutation.SetQuota(m)
	return suo
}

// ClearQuota clears the value of the "quota" field.
func (suo *SubscriptionUpdateOne) ClearQuota() *SubscriptionUpdateOne {
	suo.mutation.ClearQuota()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscriptionUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suo *SubscriptionUpdateOne) SetTenant(t *Tenant) *SubscriptionUpdateOne {
	return suo.SetTenantID(t.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suo *SubscriptionUpdateOne) ClearTenant() *SubscriptionUpdateOne {
	suo.mutation.ClearTenant()
	return suo
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subscription.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if v, ok := suo.mutation.TenantID(); ok {
		if err := subscription.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Subscription.tenant_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PlanName(); ok {
		if err := subscription.PlanNameValidator(v); err != nil {
			return &ValidationError{Name: "plan_name", err: fmt.Errorf(`ent: validator failed for field "Subscription.plan_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.MonthlyPrice(); ok {
		if err := subscription.MonthlyPriceValidator(v); err != nil {
			return &ValidationError{Name: "monthly_price", err: fmt.Errorf(`ent: validator failed for field "Subscription.monthly_price": %w`, err)}
		}
	}
	if v, ok := suo.mutation.YearlyPrice(); ok {
		if err := subscription.YearlyPriceValidator(v); err != nil {
			return &ValidationError{Name: "yearly_price", err: fmt.Errorf(`ent: validator failed for field "Subscription.yearly_price": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if suo.mutation.TenantCleared() && len(suo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.tenant"`)
	}
	return nil
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.PlanName(); ok {
		_spec.SetField(subscription.FieldPlanName, field.TypeString, value)
	}
	if value, ok := suo.mutation.MonthlyPrice(); ok {
		_spec.SetField(subscription.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedMonthlyPrice(); ok {
		_spec.AddField(subscription.FieldMonthlyPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.YearlyPrice(); ok {
		_spec.SetField(subscription.FieldYearlyPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedYearlyPrice(); ok {
		_spec.AddField(subscription.FieldYearlyPrice, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.StartsAt(); ok {
		_spec.SetField(subscription.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Features(); ok {
		_spec.SetField(subscription.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscription.FieldFeatures, value)
		})
	}
	if suo.mutation.FeaturesCleared() {
		_spec.ClearField(subscription.FieldFeatures, field.TypeJSON)
	}
	if value, ok := suo.mutation.Quota(); ok {
		_spec.SetField(subscription.FieldQuota, field.TypeJSON, value)
	}
	if suo.mutation.QuotaCleared() {
		_spec.ClearField(subscription.FieldQuota, field.TypeJSON)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscription.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.TenantTable,
			Columns: []string{subscription.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.TenantTable,
			Columns: []string{subscription.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
