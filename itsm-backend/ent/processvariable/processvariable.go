// Code generated by ent, DO NOT EDIT.

package processvariable

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processvariable type in the database.
	Label = "process_variable"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVariableID holds the string denoting the variable_id field in the database.
	FieldVariableID = "variable_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldVariableName holds the string denoting the variable_name field in the database.
	FieldVariableName = "variable_name"
	// FieldVariableType holds the string denoting the variable_type field in the database.
	FieldVariableType = "variable_type"
	// FieldVariableValue holds the string denoting the variable_value field in the database.
	FieldVariableValue = "variable_value"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// FieldIsTransient holds the string denoting the is_transient field in the database.
	FieldIsTransient = "is_transient"
	// FieldSerializationFormat holds the string denoting the serialization_format field in the database.
	FieldSerializationFormat = "serialization_format"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processvariable in the database.
	Table = "process_variables"
)

// Columns holds all SQL columns for processvariable fields.
var Columns = []string{
	FieldID,
	FieldVariableID,
	FieldProcessInstanceID,
	FieldTaskID,
	FieldVariableName,
	FieldVariableType,
	FieldVariableValue,
	FieldScope,
	FieldIsTransient,
	FieldSerializationFormat,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VariableIDValidator is a validator for the "variable_id" field. It is called by the builders before save.
	VariableIDValidator func(string) error
	// ProcessInstanceIDValidator is a validator for the "process_instance_id" field. It is called by the builders before save.
	ProcessInstanceIDValidator func(string) error
	// VariableNameValidator is a validator for the "variable_name" field. It is called by the builders before save.
	VariableNameValidator func(string) error
	// DefaultVariableType holds the default value on creation for the "variable_type" field.
	DefaultVariableType string
	// DefaultScope holds the default value on creation for the "scope" field.
	DefaultScope string
	// DefaultIsTransient holds the default value on creation for the "is_transient" field.
	DefaultIsTransient bool
	// DefaultSerializationFormat holds the default value on creation for the "serialization_format" field.
	DefaultSerializationFormat string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessVariable queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVariableID orders the results by the variable_id field.
func ByVariableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariableID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByVariableName orders the results by the variable_name field.
func ByVariableName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariableName, opts...).ToFunc()
}

// ByVariableType orders the results by the variable_type field.
func ByVariableType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariableType, opts...).ToFunc()
}

// ByVariableValue orders the results by the variable_value field.
func ByVariableValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVariableValue, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByIsTransient orders the results by the is_transient field.
func ByIsTransient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTransient, opts...).ToFunc()
}

// BySerializationFormat orders the results by the serialization_format field.
func BySerializationFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerializationFormat, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
