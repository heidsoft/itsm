// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processvariable"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessVariableCreate is the builder for creating a ProcessVariable entity.
type ProcessVariableCreate struct {
	config
	mutation *ProcessVariableMutation
	hooks    []Hook
}

// SetVariableID sets the "variable_id" field.
func (pvc *ProcessVariableCreate) SetVariableID(s string) *ProcessVariableCreate {
	pvc.mutation.SetVariableID(s)
	return pvc
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvc *ProcessVariableCreate) SetProcessInstanceID(s string) *ProcessVariableCreate {
	pvc.mutation.SetProcessInstanceID(s)
	return pvc
}

// SetTaskID sets the "task_id" field.
func (pvc *ProcessVariableCreate) SetTaskID(s string) *ProcessVariableCreate {
	pvc.mutation.SetTaskID(s)
	return pvc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableTaskID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetTaskID(*s)
	}
	return pvc
}

// SetVariableName sets the "variable_name" field.
func (pvc *ProcessVariableCreate) SetVariableName(s string) *ProcessVariableCreate {
	pvc.mutation.SetVariableName(s)
	return pvc
}

// SetVariableType sets the "variable_type" field.
func (pvc *ProcessVariableCreate) SetVariableType(s string) *ProcessVariableCreate {
	pvc.mutation.SetVariableType(s)
	return pvc
}

// SetNillableVariableType sets the "variable_type" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableVariableType(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetVariableType(*s)
	}
	return pvc
}

// SetVariableValue sets the "variable_value" field.
func (pvc *ProcessVariableCreate) SetVariableValue(s string) *ProcessVariableCreate {
	pvc.mutation.SetVariableValue(s)
	return pvc
}

// SetNillableVariableValue sets the "variable_value" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableVariableValue(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetVariableValue(*s)
	}
	return pvc
}

// SetScope sets the "scope" field.
func (pvc *ProcessVariableCreate) SetScope(s string) *ProcessVariableCreate {
	pvc.mutation.SetScope(s)
	return pvc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableScope(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetScope(*s)
	}
	return pvc
}

// SetIsTransient sets the "is_transient" field.
func (pvc *ProcessVariableCreate) SetIsTransient(b bool) *ProcessVariableCreate {
	pvc.mutation.SetIsTransient(b)
	return pvc
}

// SetNillableIsTransient sets the "is_transient" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableIsTransient(b *bool) *ProcessVariableCreate {
	if b != nil {
		pvc.SetIsTransient(*b)
	}
	return pvc
}

// SetSerializationFormat sets the "serialization_format" field.
func (pvc *ProcessVariableCreate) SetSerializationFormat(s string) *ProcessVariableCreate {
	pvc.mutation.SetSerializationFormat(s)
	return pvc
}

// SetNillableSerializationFormat sets the "serialization_format" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableSerializationFormat(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetSerializationFormat(*s)
	}
	return pvc
}

// SetTenantID sets the "tenant_id" field.
func (pvc *ProcessVariableCreate) SetTenantID(i int) *ProcessVariableCreate {
	pvc.mutation.SetTenantID(i)
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProcessVariableCreate) SetCreatedAt(t time.Time) *ProcessVariableCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableCreatedAt(t *time.Time) *ProcessVariableCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *ProcessVariableCreate) SetUpdatedAt(t time.Time) *ProcessVariableCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableUpdatedAt(t *time.Time) *ProcessVariableCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvc *ProcessVariableCreate) Mutation() *ProcessVariableMutation {
	return pvc.mutation
}

// Save creates the ProcessVariable in the database.
func (pvc *ProcessVariableCreate) Save(ctx context.Context) (*ProcessVariable, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProcessVariableCreate) SaveX(ctx context.Context) *ProcessVariable {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProcessVariableCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProcessVariableCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *ProcessVariableCreate) defaults() {
	if _, ok := pvc.mutation.VariableType(); !ok {
		v := processvariable.DefaultVariableType
		pvc.mutation.SetVariableType(v)
	}
	if _, ok := pvc.mutation.Scope(); !ok {
		v := processvariable.DefaultScope
		pvc.mutation.SetScope(v)
	}
	if _, ok := pvc.mutation.IsTransient(); !ok {
		v := processvariable.DefaultIsTransient
		pvc.mutation.SetIsTransient(v)
	}
	if _, ok := pvc.mutation.SerializationFormat(); !ok {
		v := processvariable.DefaultSerializationFormat
		pvc.mutation.SetSerializationFormat(v)
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := processvariable.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		v := processvariable.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProcessVariableCreate) check() error {
	if _, ok := pvc.mutation.VariableID(); !ok {
		return &ValidationError{Name: "variable_id", err: errors.New(`ent: missing required field "ProcessVariable.variable_id"`)}
	}
	if v, ok := pvc.mutation.VariableID(); ok {
		if err := processvariable.VariableIDValidator(v); err != nil {
			return &ValidationError{Name: "variable_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_id": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "ProcessVariable.process_instance_id"`)}
	}
	if v, ok := pvc.mutation.ProcessInstanceID(); ok {
		if err := processvariable.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.process_instance_id": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.VariableName(); !ok {
		return &ValidationError{Name: "variable_name", err: errors.New(`ent: missing required field "ProcessVariable.variable_name"`)}
	}
	if v, ok := pvc.mutation.VariableName(); ok {
		if err := processvariable.VariableNameValidator(v); err != nil {
			return &ValidationError{Name: "variable_name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_name": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.VariableType(); !ok {
		return &ValidationError{Name: "variable_type", err: errors.New(`ent: missing required field "ProcessVariable.variable_type"`)}
	}
	if _, ok := pvc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`ent: missing required field "ProcessVariable.scope"`)}
	}
	if _, ok := pvc.mutation.IsTransient(); !ok {
		return &ValidationError{Name: "is_transient", err: errors.New(`ent: missing required field "ProcessVariable.is_transient"`)}
	}
	if _, ok := pvc.mutation.SerializationFormat(); !ok {
		return &ValidationError{Name: "serialization_format", err: errors.New(`ent: missing required field "ProcessVariable.serialization_format"`)}
	}
	if _, ok := pvc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessVariable.tenant_id"`)}
	}
	if v, ok := pvc.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessVariable.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessVariable.updated_at"`)}
	}
	return nil
}

func (pvc *ProcessVariableCreate) sqlSave(ctx context.Context) (*ProcessVariable, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProcessVariableCreate) createSpec() (*ProcessVariable, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessVariable{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(processvariable.Table, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt))
	)
	if value, ok := pvc.mutation.VariableID(); ok {
		_spec.SetField(processvariable.FieldVariableID, field.TypeString, value)
		_node.VariableID = value
	}
	if value, ok := pvc.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeString, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := pvc.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := pvc.mutation.VariableName(); ok {
		_spec.SetField(processvariable.FieldVariableName, field.TypeString, value)
		_node.VariableName = value
	}
	if value, ok := pvc.mutation.VariableType(); ok {
		_spec.SetField(processvariable.FieldVariableType, field.TypeString, value)
		_node.VariableType = value
	}
	if value, ok := pvc.mutation.VariableValue(); ok {
		_spec.SetField(processvariable.FieldVariableValue, field.TypeString, value)
		_node.VariableValue = value
	}
	if value, ok := pvc.mutation.Scope(); ok {
		_spec.SetField(processvariable.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if value, ok := pvc.mutation.IsTransient(); ok {
		_spec.SetField(processvariable.FieldIsTransient, field.TypeBool, value)
		_node.IsTransient = value
	}
	if value, ok := pvc.mutation.SerializationFormat(); ok {
		_spec.SetField(processvariable.FieldSerializationFormat, field.TypeString, value)
		_node.SerializationFormat = value
	}
	if value, ok := pvc.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(processvariable.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessVariableCreateBulk is the builder for creating many ProcessVariable entities in bulk.
type ProcessVariableCreateBulk struct {
	config
	err      error
	builders []*ProcessVariableCreate
}

// Save creates the ProcessVariable entities in the database.
func (pvcb *ProcessVariableCreateBulk) Save(ctx context.Context) ([]*ProcessVariable, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProcessVariable, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessVariableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProcessVariableCreateBulk) SaveX(ctx context.Context) []*ProcessVariable {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProcessVariableCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProcessVariableCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
