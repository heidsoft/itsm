// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CILifecycleStateUpdate is the builder for updating CILifecycleState entities.
type CILifecycleStateUpdate struct {
	config
	hooks    []Hook
	mutation *CILifecycleStateMutation
}

// Where appends a list predicates to the CILifecycleStateUpdate builder.
func (clsu *CILifecycleStateUpdate) Where(ps ...predicate.CILifecycleState) *CILifecycleStateUpdate {
	clsu.mutation.Where(ps...)
	return clsu
}

// SetCiID sets the "ci_id" field.
func (clsu *CILifecycleStateUpdate) SetCiID(i int) *CILifecycleStateUpdate {
	clsu.mutation.SetCiID(i)
	return clsu
}

// SetNillableCiID sets the "ci_id" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableCiID(i *int) *CILifecycleStateUpdate {
	if i != nil {
		clsu.SetCiID(*i)
	}
	return clsu
}

// SetState sets the "state" field.
func (clsu *CILifecycleStateUpdate) SetState(s string) *CILifecycleStateUpdate {
	clsu.mutation.SetState(s)
	return clsu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableState(s *string) *CILifecycleStateUpdate {
	if s != nil {
		clsu.SetState(*s)
	}
	return clsu
}

// SetSubState sets the "sub_state" field.
func (clsu *CILifecycleStateUpdate) SetSubState(s string) *CILifecycleStateUpdate {
	clsu.mutation.SetSubState(s)
	return clsu
}

// SetNillableSubState sets the "sub_state" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableSubState(s *string) *CILifecycleStateUpdate {
	if s != nil {
		clsu.SetSubState(*s)
	}
	return clsu
}

// ClearSubState clears the value of the "sub_state" field.
func (clsu *CILifecycleStateUpdate) ClearSubState() *CILifecycleStateUpdate {
	clsu.mutation.ClearSubState()
	return clsu
}

// SetReason sets the "reason" field.
func (clsu *CILifecycleStateUpdate) SetReason(s string) *CILifecycleStateUpdate {
	clsu.mutation.SetReason(s)
	return clsu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableReason(s *string) *CILifecycleStateUpdate {
	if s != nil {
		clsu.SetReason(*s)
	}
	return clsu
}

// ClearReason clears the value of the "reason" field.
func (clsu *CILifecycleStateUpdate) ClearReason() *CILifecycleStateUpdate {
	clsu.mutation.ClearReason()
	return clsu
}

// SetChangedBy sets the "changed_by" field.
func (clsu *CILifecycleStateUpdate) SetChangedBy(s string) *CILifecycleStateUpdate {
	clsu.mutation.SetChangedBy(s)
	return clsu
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableChangedBy(s *string) *CILifecycleStateUpdate {
	if s != nil {
		clsu.SetChangedBy(*s)
	}
	return clsu
}

// SetChangedAt sets the "changed_at" field.
func (clsu *CILifecycleStateUpdate) SetChangedAt(t time.Time) *CILifecycleStateUpdate {
	clsu.mutation.SetChangedAt(t)
	return clsu
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableChangedAt(t *time.Time) *CILifecycleStateUpdate {
	if t != nil {
		clsu.SetChangedAt(*t)
	}
	return clsu
}

// SetMetadata sets the "metadata" field.
func (clsu *CILifecycleStateUpdate) SetMetadata(m map[string]interface{}) *CILifecycleStateUpdate {
	clsu.mutation.SetMetadata(m)
	return clsu
}

// ClearMetadata clears the value of the "metadata" field.
func (clsu *CILifecycleStateUpdate) ClearMetadata() *CILifecycleStateUpdate {
	clsu.mutation.ClearMetadata()
	return clsu
}

// SetTenantID sets the "tenant_id" field.
func (clsu *CILifecycleStateUpdate) SetTenantID(i int) *CILifecycleStateUpdate {
	clsu.mutation.SetTenantID(i)
	return clsu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (clsu *CILifecycleStateUpdate) SetNillableTenantID(i *int) *CILifecycleStateUpdate {
	if i != nil {
		clsu.SetTenantID(*i)
	}
	return clsu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (clsu *CILifecycleStateUpdate) SetTenant(t *Tenant) *CILifecycleStateUpdate {
	return clsu.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (clsu *CILifecycleStateUpdate) SetConfigurationItemID(id int) *CILifecycleStateUpdate {
	clsu.mutation.SetConfigurationItemID(id)
	return clsu
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (clsu *CILifecycleStateUpdate) SetConfigurationItem(c *ConfigurationItem) *CILifecycleStateUpdate {
	return clsu.SetConfigurationItemID(c.ID)
}

// Mutation returns the CILifecycleStateMutation object of the builder.
func (clsu *CILifecycleStateUpdate) Mutation() *CILifecycleStateMutation {
	return clsu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (clsu *CILifecycleStateUpdate) ClearTenant() *CILifecycleStateUpdate {
	clsu.mutation.ClearTenant()
	return clsu
}

// ClearConfigurationItem clears the "configuration_item" edge to the ConfigurationItem entity.
func (clsu *CILifecycleStateUpdate) ClearConfigurationItem() *CILifecycleStateUpdate {
	clsu.mutation.ClearConfigurationItem()
	return clsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clsu *CILifecycleStateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clsu.sqlSave, clsu.mutation, clsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsu *CILifecycleStateUpdate) SaveX(ctx context.Context) int {
	affected, err := clsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clsu *CILifecycleStateUpdate) Exec(ctx context.Context) error {
	_, err := clsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsu *CILifecycleStateUpdate) ExecX(ctx context.Context) {
	if err := clsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsu *CILifecycleStateUpdate) check() error {
	if v, ok := clsu.mutation.State(); ok {
		if err := cilifecyclestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.state": %w`, err)}
		}
	}
	if v, ok := clsu.mutation.ChangedBy(); ok {
		if err := cilifecyclestate.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.changed_by": %w`, err)}
		}
	}
	if clsu.mutation.TenantCleared() && len(clsu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CILifecycleState.tenant"`)
	}
	if clsu.mutation.ConfigurationItemCleared() && len(clsu.mutation.ConfigurationItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CILifecycleState.configuration_item"`)
	}
	return nil
}

func (clsu *CILifecycleStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cilifecyclestate.Table, cilifecyclestate.Columns, sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt))
	if ps := clsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clsu.mutation.State(); ok {
		_spec.SetField(cilifecyclestate.FieldState, field.TypeString, value)
	}
	if value, ok := clsu.mutation.SubState(); ok {
		_spec.SetField(cilifecyclestate.FieldSubState, field.TypeString, value)
	}
	if clsu.mutation.SubStateCleared() {
		_spec.ClearField(cilifecyclestate.FieldSubState, field.TypeString)
	}
	if value, ok := clsu.mutation.Reason(); ok {
		_spec.SetField(cilifecyclestate.FieldReason, field.TypeString, value)
	}
	if clsu.mutation.ReasonCleared() {
		_spec.ClearField(cilifecyclestate.FieldReason, field.TypeString)
	}
	if value, ok := clsu.mutation.ChangedBy(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedBy, field.TypeString, value)
	}
	if value, ok := clsu.mutation.ChangedAt(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedAt, field.TypeTime, value)
	}
	if value, ok := clsu.mutation.Metadata(); ok {
		_spec.SetField(cilifecyclestate.FieldMetadata, field.TypeJSON, value)
	}
	if clsu.mutation.MetadataCleared() {
		_spec.ClearField(cilifecyclestate.FieldMetadata, field.TypeJSON)
	}
	if clsu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.TenantTable,
			Columns: []string{cilifecyclestate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.TenantTable,
			Columns: []string{cilifecyclestate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsu.mutation.ConfigurationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.ConfigurationItemTable,
			Columns: []string{cilifecyclestate.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsu.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.ConfigurationItemTable,
			Columns: []string{cilifecyclestate.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cilifecyclestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clsu.mutation.done = true
	return n, nil
}

// CILifecycleStateUpdateOne is the builder for updating a single CILifecycleState entity.
type CILifecycleStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CILifecycleStateMutation
}

// SetCiID sets the "ci_id" field.
func (clsuo *CILifecycleStateUpdateOne) SetCiID(i int) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetCiID(i)
	return clsuo
}

// SetNillableCiID sets the "ci_id" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableCiID(i *int) *CILifecycleStateUpdateOne {
	if i != nil {
		clsuo.SetCiID(*i)
	}
	return clsuo
}

// SetState sets the "state" field.
func (clsuo *CILifecycleStateUpdateOne) SetState(s string) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetState(s)
	return clsuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableState(s *string) *CILifecycleStateUpdateOne {
	if s != nil {
		clsuo.SetState(*s)
	}
	return clsuo
}

// SetSubState sets the "sub_state" field.
func (clsuo *CILifecycleStateUpdateOne) SetSubState(s string) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetSubState(s)
	return clsuo
}

// SetNillableSubState sets the "sub_state" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableSubState(s *string) *CILifecycleStateUpdateOne {
	if s != nil {
		clsuo.SetSubState(*s)
	}
	return clsuo
}

// ClearSubState clears the value of the "sub_state" field.
func (clsuo *CILifecycleStateUpdateOne) ClearSubState() *CILifecycleStateUpdateOne {
	clsuo.mutation.ClearSubState()
	return clsuo
}

// SetReason sets the "reason" field.
func (clsuo *CILifecycleStateUpdateOne) SetReason(s string) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetReason(s)
	return clsuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableReason(s *string) *CILifecycleStateUpdateOne {
	if s != nil {
		clsuo.SetReason(*s)
	}
	return clsuo
}

// ClearReason clears the value of the "reason" field.
func (clsuo *CILifecycleStateUpdateOne) ClearReason() *CILifecycleStateUpdateOne {
	clsuo.mutation.ClearReason()
	return clsuo
}

// SetChangedBy sets the "changed_by" field.
func (clsuo *CILifecycleStateUpdateOne) SetChangedBy(s string) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetChangedBy(s)
	return clsuo
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableChangedBy(s *string) *CILifecycleStateUpdateOne {
	if s != nil {
		clsuo.SetChangedBy(*s)
	}
	return clsuo
}

// SetChangedAt sets the "changed_at" field.
func (clsuo *CILifecycleStateUpdateOne) SetChangedAt(t time.Time) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetChangedAt(t)
	return clsuo
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableChangedAt(t *time.Time) *CILifecycleStateUpdateOne {
	if t != nil {
		clsuo.SetChangedAt(*t)
	}
	return clsuo
}

// SetMetadata sets the "metadata" field.
func (clsuo *CILifecycleStateUpdateOne) SetMetadata(m map[string]interface{}) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetMetadata(m)
	return clsuo
}

// ClearMetadata clears the value of the "metadata" field.
func (clsuo *CILifecycleStateUpdateOne) ClearMetadata() *CILifecycleStateUpdateOne {
	clsuo.mutation.ClearMetadata()
	return clsuo
}

// SetTenantID sets the "tenant_id" field.
func (clsuo *CILifecycleStateUpdateOne) SetTenantID(i int) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetTenantID(i)
	return clsuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (clsuo *CILifecycleStateUpdateOne) SetNillableTenantID(i *int) *CILifecycleStateUpdateOne {
	if i != nil {
		clsuo.SetTenantID(*i)
	}
	return clsuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (clsuo *CILifecycleStateUpdateOne) SetTenant(t *Tenant) *CILifecycleStateUpdateOne {
	return clsuo.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (clsuo *CILifecycleStateUpdateOne) SetConfigurationItemID(id int) *CILifecycleStateUpdateOne {
	clsuo.mutation.SetConfigurationItemID(id)
	return clsuo
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (clsuo *CILifecycleStateUpdateOne) SetConfigurationItem(c *ConfigurationItem) *CILifecycleStateUpdateOne {
	return clsuo.SetConfigurationItemID(c.ID)
}

// Mutation returns the CILifecycleStateMutation object of the builder.
func (clsuo *CILifecycleStateUpdateOne) Mutation() *CILifecycleStateMutation {
	return clsuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (clsuo *CILifecycleStateUpdateOne) ClearTenant() *CILifecycleStateUpdateOne {
	clsuo.mutation.ClearTenant()
	return clsuo
}

// ClearConfigurationItem clears the "configuration_item" edge to the ConfigurationItem entity.
func (clsuo *CILifecycleStateUpdateOne) ClearConfigurationItem() *CILifecycleStateUpdateOne {
	clsuo.mutation.ClearConfigurationItem()
	return clsuo
}

// Where appends a list predicates to the CILifecycleStateUpdate builder.
func (clsuo *CILifecycleStateUpdateOne) Where(ps ...predicate.CILifecycleState) *CILifecycleStateUpdateOne {
	clsuo.mutation.Where(ps...)
	return clsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clsuo *CILifecycleStateUpdateOne) Select(field string, fields ...string) *CILifecycleStateUpdateOne {
	clsuo.fields = append([]string{field}, fields...)
	return clsuo
}

// Save executes the query and returns the updated CILifecycleState entity.
func (clsuo *CILifecycleStateUpdateOne) Save(ctx context.Context) (*CILifecycleState, error) {
	return withHooks(ctx, clsuo.sqlSave, clsuo.mutation, clsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsuo *CILifecycleStateUpdateOne) SaveX(ctx context.Context) *CILifecycleState {
	node, err := clsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clsuo *CILifecycleStateUpdateOne) Exec(ctx context.Context) error {
	_, err := clsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsuo *CILifecycleStateUpdateOne) ExecX(ctx context.Context) {
	if err := clsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsuo *CILifecycleStateUpdateOne) check() error {
	if v, ok := clsuo.mutation.State(); ok {
		if err := cilifecyclestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.state": %w`, err)}
		}
	}
	if v, ok := clsuo.mutation.ChangedBy(); ok {
		if err := cilifecyclestate.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.changed_by": %w`, err)}
		}
	}
	if clsuo.mutation.TenantCleared() && len(clsuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CILifecycleState.tenant"`)
	}
	if clsuo.mutation.ConfigurationItemCleared() && len(clsuo.mutation.ConfigurationItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CILifecycleState.configuration_item"`)
	}
	return nil
}

func (clsuo *CILifecycleStateUpdateOne) sqlSave(ctx context.Context) (_node *CILifecycleState, err error) {
	if err := clsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cilifecyclestate.Table, cilifecyclestate.Columns, sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt))
	id, ok := clsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CILifecycleState.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cilifecyclestate.FieldID)
		for _, f := range fields {
			if !cilifecyclestate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cilifecyclestate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clsuo.mutation.State(); ok {
		_spec.SetField(cilifecyclestate.FieldState, field.TypeString, value)
	}
	if value, ok := clsuo.mutation.SubState(); ok {
		_spec.SetField(cilifecyclestate.FieldSubState, field.TypeString, value)
	}
	if clsuo.mutation.SubStateCleared() {
		_spec.ClearField(cilifecyclestate.FieldSubState, field.TypeString)
	}
	if value, ok := clsuo.mutation.Reason(); ok {
		_spec.SetField(cilifecyclestate.FieldReason, field.TypeString, value)
	}
	if clsuo.mutation.ReasonCleared() {
		_spec.ClearField(cilifecyclestate.FieldReason, field.TypeString)
	}
	if value, ok := clsuo.mutation.ChangedBy(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedBy, field.TypeString, value)
	}
	if value, ok := clsuo.mutation.ChangedAt(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedAt, field.TypeTime, value)
	}
	if value, ok := clsuo.mutation.Metadata(); ok {
		_spec.SetField(cilifecyclestate.FieldMetadata, field.TypeJSON, value)
	}
	if clsuo.mutation.MetadataCleared() {
		_spec.ClearField(cilifecyclestate.FieldMetadata, field.TypeJSON)
	}
	if clsuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.TenantTable,
			Columns: []string{cilifecyclestate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.TenantTable,
			Columns: []string{cilifecyclestate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsuo.mutation.ConfigurationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.ConfigurationItemTable,
			Columns: []string{cilifecyclestate.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsuo.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.ConfigurationItemTable,
			Columns: []string{cilifecyclestate.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CILifecycleState{config: clsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cilifecyclestate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clsuo.mutation.done = true
	return _node, nil
}
