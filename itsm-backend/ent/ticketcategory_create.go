// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/ticketcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketCategoryCreate is the builder for creating a TicketCategory entity.
type TicketCategoryCreate struct {
	config
	mutation *TicketCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tcc *TicketCategoryCreate) SetName(s string) *TicketCategoryCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetDescription sets the "description" field.
func (tcc *TicketCategoryCreate) SetDescription(s string) *TicketCategoryCreate {
	tcc.mutation.SetDescription(s)
	return tcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableDescription(s *string) *TicketCategoryCreate {
	if s != nil {
		tcc.SetDescription(*s)
	}
	return tcc
}

// SetCode sets the "code" field.
func (tcc *TicketCategoryCreate) SetCode(s string) *TicketCategoryCreate {
	tcc.mutation.SetCode(s)
	return tcc
}

// SetParentID sets the "parent_id" field.
func (tcc *TicketCategoryCreate) SetParentID(i int) *TicketCategoryCreate {
	tcc.mutation.SetParentID(i)
	return tcc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableParentID(i *int) *TicketCategoryCreate {
	if i != nil {
		tcc.SetParentID(*i)
	}
	return tcc
}

// SetLevel sets the "level" field.
func (tcc *TicketCategoryCreate) SetLevel(i int) *TicketCategoryCreate {
	tcc.mutation.SetLevel(i)
	return tcc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableLevel(i *int) *TicketCategoryCreate {
	if i != nil {
		tcc.SetLevel(*i)
	}
	return tcc
}

// SetSortOrder sets the "sort_order" field.
func (tcc *TicketCategoryCreate) SetSortOrder(i int) *TicketCategoryCreate {
	tcc.mutation.SetSortOrder(i)
	return tcc
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableSortOrder(i *int) *TicketCategoryCreate {
	if i != nil {
		tcc.SetSortOrder(*i)
	}
	return tcc
}

// SetIsActive sets the "is_active" field.
func (tcc *TicketCategoryCreate) SetIsActive(b bool) *TicketCategoryCreate {
	tcc.mutation.SetIsActive(b)
	return tcc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableIsActive(b *bool) *TicketCategoryCreate {
	if b != nil {
		tcc.SetIsActive(*b)
	}
	return tcc
}

// SetTenantID sets the "tenant_id" field.
func (tcc *TicketCategoryCreate) SetTenantID(i int) *TicketCategoryCreate {
	tcc.mutation.SetTenantID(i)
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TicketCategoryCreate) SetCreatedAt(t time.Time) *TicketCategoryCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableCreatedAt(t *time.Time) *TicketCategoryCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TicketCategoryCreate) SetUpdatedAt(t time.Time) *TicketCategoryCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TicketCategoryCreate) SetNillableUpdatedAt(t *time.Time) *TicketCategoryCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tcc *TicketCategoryCreate) AddTicketIDs(ids ...int) *TicketCategoryCreate {
	tcc.mutation.AddTicketIDs(ids...)
	return tcc
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tcc *TicketCategoryCreate) AddTickets(t ...*Ticket) *TicketCategoryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTicketIDs(ids...)
}

// AddChildIDs adds the "children" edge to the TicketCategory entity by IDs.
func (tcc *TicketCategoryCreate) AddChildIDs(ids ...int) *TicketCategoryCreate {
	tcc.mutation.AddChildIDs(ids...)
	return tcc
}

// AddChildren adds the "children" edges to the TicketCategory entity.
func (tcc *TicketCategoryCreate) AddChildren(t ...*TicketCategory) *TicketCategoryCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the TicketCategory entity.
func (tcc *TicketCategoryCreate) SetParent(t *TicketCategory) *TicketCategoryCreate {
	return tcc.SetParentID(t.ID)
}

// Mutation returns the TicketCategoryMutation object of the builder.
func (tcc *TicketCategoryCreate) Mutation() *TicketCategoryMutation {
	return tcc.mutation
}

// Save creates the TicketCategory in the database.
func (tcc *TicketCategoryCreate) Save(ctx context.Context) (*TicketCategory, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TicketCategoryCreate) SaveX(ctx context.Context) *TicketCategory {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TicketCategoryCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TicketCategoryCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TicketCategoryCreate) defaults() {
	if _, ok := tcc.mutation.Level(); !ok {
		v := ticketcategory.DefaultLevel
		tcc.mutation.SetLevel(v)
	}
	if _, ok := tcc.mutation.SortOrder(); !ok {
		v := ticketcategory.DefaultSortOrder
		tcc.mutation.SetSortOrder(v)
	}
	if _, ok := tcc.mutation.IsActive(); !ok {
		v := ticketcategory.DefaultIsActive
		tcc.mutation.SetIsActive(v)
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := ticketcategory.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := ticketcategory.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TicketCategoryCreate) check() error {
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TicketCategory.name"`)}
	}
	if v, ok := tcc.mutation.Name(); ok {
		if err := ticketcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "TicketCategory.code"`)}
	}
	if v, ok := tcc.mutation.Code(); ok {
		if err := ticketcategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.code": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "TicketCategory.level"`)}
	}
	if _, ok := tcc.mutation.SortOrder(); !ok {
		return &ValidationError{Name: "sort_order", err: errors.New(`ent: missing required field "TicketCategory.sort_order"`)}
	}
	if _, ok := tcc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "TicketCategory.is_active"`)}
	}
	if _, ok := tcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TicketCategory.tenant_id"`)}
	}
	if v, ok := tcc.mutation.TenantID(); ok {
		if err := ticketcategory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.tenant_id": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TicketCategory.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TicketCategory.updated_at"`)}
	}
	return nil
}

func (tcc *TicketCategoryCreate) sqlSave(ctx context.Context) (*TicketCategory, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TicketCategoryCreate) createSpec() (*TicketCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &TicketCategory{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(ticketcategory.Table, sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt))
	)
	if value, ok := tcc.mutation.Name(); ok {
		_spec.SetField(ticketcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tcc.mutation.Description(); ok {
		_spec.SetField(ticketcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tcc.mutation.Code(); ok {
		_spec.SetField(ticketcategory.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tcc.mutation.Level(); ok {
		_spec.SetField(ticketcategory.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := tcc.mutation.SortOrder(); ok {
		_spec.SetField(ticketcategory.FieldSortOrder, field.TypeInt, value)
		_node.SortOrder = value
	}
	if value, ok := tcc.mutation.IsActive(); ok {
		_spec.SetField(ticketcategory.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tcc.mutation.TenantID(); ok {
		_spec.SetField(ticketcategory.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(ticketcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tcc.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketcategory.ParentTable,
			Columns: []string{ticketcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TicketCategoryCreateBulk is the builder for creating many TicketCategory entities in bulk.
type TicketCategoryCreateBulk struct {
	config
	err      error
	builders []*TicketCategoryCreate
}

// Save creates the TicketCategory entities in the database.
func (tccb *TicketCategoryCreateBulk) Save(ctx context.Context) ([]*TicketCategory, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TicketCategory, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TicketCategoryCreateBulk) SaveX(ctx context.Context) []*TicketCategory {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TicketCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TicketCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
