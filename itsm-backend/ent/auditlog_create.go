// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/auditlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuditLogCreate is the builder for creating a AuditLog entity.
type AuditLogCreate struct {
	config
	mutation *AuditLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (alc *AuditLogCreate) SetCreatedAt(t time.Time) *AuditLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableCreatedAt(t *time.Time) *AuditLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetTenantID sets the "tenant_id" field.
func (alc *AuditLogCreate) SetTenantID(i int) *AuditLogCreate {
	alc.mutation.SetTenantID(i)
	return alc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableTenantID(i *int) *AuditLogCreate {
	if i != nil {
		alc.SetTenantID(*i)
	}
	return alc
}

// SetUserID sets the "user_id" field.
func (alc *AuditLogCreate) SetUserID(i int) *AuditLogCreate {
	alc.mutation.SetUserID(i)
	return alc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableUserID(i *int) *AuditLogCreate {
	if i != nil {
		alc.SetUserID(*i)
	}
	return alc
}

// SetRequestID sets the "request_id" field.
func (alc *AuditLogCreate) SetRequestID(s string) *AuditLogCreate {
	alc.mutation.SetRequestID(s)
	return alc
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableRequestID(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetRequestID(*s)
	}
	return alc
}

// SetIP sets the "ip" field.
func (alc *AuditLogCreate) SetIP(s string) *AuditLogCreate {
	alc.mutation.SetIP(s)
	return alc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableIP(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetIP(*s)
	}
	return alc
}

// SetResource sets the "resource" field.
func (alc *AuditLogCreate) SetResource(s string) *AuditLogCreate {
	alc.mutation.SetResource(s)
	return alc
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableResource(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetResource(*s)
	}
	return alc
}

// SetAction sets the "action" field.
func (alc *AuditLogCreate) SetAction(s string) *AuditLogCreate {
	alc.mutation.SetAction(s)
	return alc
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableAction(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetAction(*s)
	}
	return alc
}

// SetPath sets the "path" field.
func (alc *AuditLogCreate) SetPath(s string) *AuditLogCreate {
	alc.mutation.SetPath(s)
	return alc
}

// SetMethod sets the "method" field.
func (alc *AuditLogCreate) SetMethod(s string) *AuditLogCreate {
	alc.mutation.SetMethod(s)
	return alc
}

// SetStatusCode sets the "status_code" field.
func (alc *AuditLogCreate) SetStatusCode(i int) *AuditLogCreate {
	alc.mutation.SetStatusCode(i)
	return alc
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableStatusCode(i *int) *AuditLogCreate {
	if i != nil {
		alc.SetStatusCode(*i)
	}
	return alc
}

// SetRequestBody sets the "request_body" field.
func (alc *AuditLogCreate) SetRequestBody(s string) *AuditLogCreate {
	alc.mutation.SetRequestBody(s)
	return alc
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (alc *AuditLogCreate) SetNillableRequestBody(s *string) *AuditLogCreate {
	if s != nil {
		alc.SetRequestBody(*s)
	}
	return alc
}

// Mutation returns the AuditLogMutation object of the builder.
func (alc *AuditLogCreate) Mutation() *AuditLogMutation {
	return alc.mutation
}

// Save creates the AuditLog in the database.
func (alc *AuditLogCreate) Save(ctx context.Context) (*AuditLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AuditLogCreate) SaveX(ctx context.Context) *AuditLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AuditLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AuditLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AuditLogCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := auditlog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.IP(); !ok {
		v := auditlog.DefaultIP
		alc.mutation.SetIP(v)
	}
	if _, ok := alc.mutation.Resource(); !ok {
		v := auditlog.DefaultResource
		alc.mutation.SetResource(v)
	}
	if _, ok := alc.mutation.Action(); !ok {
		v := auditlog.DefaultAction
		alc.mutation.SetAction(v)
	}
	if _, ok := alc.mutation.StatusCode(); !ok {
		v := auditlog.DefaultStatusCode
		alc.mutation.SetStatusCode(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AuditLogCreate) check() error {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AuditLog.created_at"`)}
	}
	if _, ok := alc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "AuditLog.ip"`)}
	}
	if _, ok := alc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "AuditLog.resource"`)}
	}
	if _, ok := alc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AuditLog.action"`)}
	}
	if _, ok := alc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "AuditLog.path"`)}
	}
	if _, ok := alc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "AuditLog.method"`)}
	}
	if _, ok := alc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "AuditLog.status_code"`)}
	}
	return nil
}

func (alc *AuditLogCreate) sqlSave(ctx context.Context) (*AuditLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AuditLogCreate) createSpec() (*AuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &AuditLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(auditlog.Table, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeInt))
	)
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(auditlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.TenantID(); ok {
		_spec.SetField(auditlog.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := alc.mutation.UserID(); ok {
		_spec.SetField(auditlog.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := alc.mutation.RequestID(); ok {
		_spec.SetField(auditlog.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := alc.mutation.IP(); ok {
		_spec.SetField(auditlog.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := alc.mutation.Resource(); ok {
		_spec.SetField(auditlog.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := alc.mutation.Action(); ok {
		_spec.SetField(auditlog.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if value, ok := alc.mutation.Path(); ok {
		_spec.SetField(auditlog.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := alc.mutation.Method(); ok {
		_spec.SetField(auditlog.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := alc.mutation.StatusCode(); ok {
		_spec.SetField(auditlog.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := alc.mutation.RequestBody(); ok {
		_spec.SetField(auditlog.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = &value
	}
	return _node, _spec
}

// AuditLogCreateBulk is the builder for creating many AuditLog entities in bulk.
type AuditLogCreateBulk struct {
	config
	err      error
	builders []*AuditLogCreate
}

// Save creates the AuditLog entities in the database.
func (alcb *AuditLogCreateBulk) Save(ctx context.Context) ([]*AuditLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AuditLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) SaveX(ctx context.Context) []*AuditLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
