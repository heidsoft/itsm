// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/ticketcategory"
	"itsm-backend/ent/tickettag"
	"itsm-backend/ent/tickettemplate"
	"itsm-backend/ent/workflowinstance"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketCreate is the builder for creating a Ticket entity.
type TicketCreate struct {
	config
	mutation *TicketMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (tc *TicketCreate) SetTitle(s string) *TicketCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TicketCreate) SetDescription(s string) *TicketCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TicketCreate) SetNillableDescription(s *string) *TicketCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TicketCreate) SetStatus(s string) *TicketCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TicketCreate) SetNillableStatus(s *string) *TicketCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetPriority sets the "priority" field.
func (tc *TicketCreate) SetPriority(s string) *TicketCreate {
	tc.mutation.SetPriority(s)
	return tc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tc *TicketCreate) SetNillablePriority(s *string) *TicketCreate {
	if s != nil {
		tc.SetPriority(*s)
	}
	return tc
}

// SetTicketNumber sets the "ticket_number" field.
func (tc *TicketCreate) SetTicketNumber(s string) *TicketCreate {
	tc.mutation.SetTicketNumber(s)
	return tc
}

// SetRequesterID sets the "requester_id" field.
func (tc *TicketCreate) SetRequesterID(i int) *TicketCreate {
	tc.mutation.SetRequesterID(i)
	return tc
}

// SetAssigneeID sets the "assignee_id" field.
func (tc *TicketCreate) SetAssigneeID(i int) *TicketCreate {
	tc.mutation.SetAssigneeID(i)
	return tc
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (tc *TicketCreate) SetNillableAssigneeID(i *int) *TicketCreate {
	if i != nil {
		tc.SetAssigneeID(*i)
	}
	return tc
}

// SetTenantID sets the "tenant_id" field.
func (tc *TicketCreate) SetTenantID(i int) *TicketCreate {
	tc.mutation.SetTenantID(i)
	return tc
}

// SetTemplateID sets the "template_id" field.
func (tc *TicketCreate) SetTemplateID(i int) *TicketCreate {
	tc.mutation.SetTemplateID(i)
	return tc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (tc *TicketCreate) SetNillableTemplateID(i *int) *TicketCreate {
	if i != nil {
		tc.SetTemplateID(*i)
	}
	return tc
}

// SetCategoryID sets the "category_id" field.
func (tc *TicketCreate) SetCategoryID(i int) *TicketCreate {
	tc.mutation.SetCategoryID(i)
	return tc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tc *TicketCreate) SetNillableCategoryID(i *int) *TicketCreate {
	if i != nil {
		tc.SetCategoryID(*i)
	}
	return tc
}

// SetParentTicketID sets the "parent_ticket_id" field.
func (tc *TicketCreate) SetParentTicketID(i int) *TicketCreate {
	tc.mutation.SetParentTicketID(i)
	return tc
}

// SetNillableParentTicketID sets the "parent_ticket_id" field if the given value is not nil.
func (tc *TicketCreate) SetNillableParentTicketID(i *int) *TicketCreate {
	if i != nil {
		tc.SetParentTicketID(*i)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TicketCreate) SetCreatedAt(t time.Time) *TicketCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TicketCreate) SetNillableCreatedAt(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TicketCreate) SetUpdatedAt(t time.Time) *TicketCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TicketCreate) SetNillableUpdatedAt(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetTemplate sets the "template" edge to the TicketTemplate entity.
func (tc *TicketCreate) SetTemplate(t *TicketTemplate) *TicketCreate {
	return tc.SetTemplateID(t.ID)
}

// SetCategory sets the "category" edge to the TicketCategory entity.
func (tc *TicketCreate) SetCategory(t *TicketCategory) *TicketCreate {
	return tc.SetCategoryID(t.ID)
}

// AddTagIDs adds the "tags" edge to the TicketTag entity by IDs.
func (tc *TicketCreate) AddTagIDs(ids ...int) *TicketCreate {
	tc.mutation.AddTagIDs(ids...)
	return tc
}

// AddTags adds the "tags" edges to the TicketTag entity.
func (tc *TicketCreate) AddTags(t ...*TicketTag) *TicketCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTagIDs(ids...)
}

// AddRelatedTicketIDs adds the "related_tickets" edge to the Ticket entity by IDs.
func (tc *TicketCreate) AddRelatedTicketIDs(ids ...int) *TicketCreate {
	tc.mutation.AddRelatedTicketIDs(ids...)
	return tc
}

// AddRelatedTickets adds the "related_tickets" edges to the Ticket entity.
func (tc *TicketCreate) AddRelatedTickets(t ...*Ticket) *TicketCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddRelatedTicketIDs(ids...)
}

// SetParentTicket sets the "parent_ticket" edge to the Ticket entity.
func (tc *TicketCreate) SetParentTicket(t *Ticket) *TicketCreate {
	return tc.SetParentTicketID(t.ID)
}

// AddWorkflowInstanceIDs adds the "workflow_instances" edge to the WorkflowInstance entity by IDs.
func (tc *TicketCreate) AddWorkflowInstanceIDs(ids ...int) *TicketCreate {
	tc.mutation.AddWorkflowInstanceIDs(ids...)
	return tc
}

// AddWorkflowInstances adds the "workflow_instances" edges to the WorkflowInstance entity.
func (tc *TicketCreate) AddWorkflowInstances(w ...*WorkflowInstance) *TicketCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return tc.AddWorkflowInstanceIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (tc *TicketCreate) Mutation() *TicketMutation {
	return tc.mutation
}

// Save creates the Ticket in the database.
func (tc *TicketCreate) Save(ctx context.Context) (*Ticket, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TicketCreate) SaveX(ctx context.Context) *Ticket {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TicketCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TicketCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TicketCreate) defaults() {
	if _, ok := tc.mutation.Status(); !ok {
		v := ticket.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.Priority(); !ok {
		v := ticket.DefaultPriority
		tc.mutation.SetPriority(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := ticket.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := ticket.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TicketCreate) check() error {
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Ticket.title"`)}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := ticket.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Ticket.title": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Ticket.status"`)}
	}
	if _, ok := tc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Ticket.priority"`)}
	}
	if _, ok := tc.mutation.TicketNumber(); !ok {
		return &ValidationError{Name: "ticket_number", err: errors.New(`ent: missing required field "Ticket.ticket_number"`)}
	}
	if v, ok := tc.mutation.TicketNumber(); ok {
		if err := ticket.TicketNumberValidator(v); err != nil {
			return &ValidationError{Name: "ticket_number", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_number": %w`, err)}
		}
	}
	if _, ok := tc.mutation.RequesterID(); !ok {
		return &ValidationError{Name: "requester_id", err: errors.New(`ent: missing required field "Ticket.requester_id"`)}
	}
	if v, ok := tc.mutation.RequesterID(); ok {
		if err := ticket.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.requester_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Ticket.tenant_id"`)}
	}
	if v, ok := tc.mutation.TenantID(); ok {
		if err := ticket.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Ticket.tenant_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ticket.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ticket.updated_at"`)}
	}
	return nil
}

func (tc *TicketCreate) sqlSave(ctx context.Context) (*Ticket, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TicketCreate) createSpec() (*Ticket, *sqlgraph.CreateSpec) {
	var (
		_node = &Ticket{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(ticket.Table, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(ticket.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(ticket.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.Priority(); ok {
		_spec.SetField(ticket.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := tc.mutation.TicketNumber(); ok {
		_spec.SetField(ticket.FieldTicketNumber, field.TypeString, value)
		_node.TicketNumber = value
	}
	if value, ok := tc.mutation.RequesterID(); ok {
		_spec.SetField(ticket.FieldRequesterID, field.TypeInt, value)
		_node.RequesterID = value
	}
	if value, ok := tc.mutation.AssigneeID(); ok {
		_spec.SetField(ticket.FieldAssigneeID, field.TypeInt, value)
		_node.AssigneeID = value
	}
	if value, ok := tc.mutation.TenantID(); ok {
		_spec.SetField(ticket.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.TemplateTable,
			Columns: []string{ticket.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tickettemplate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.CategoryTable,
			Columns: []string{ticket.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.TagsTable,
			Columns: []string{ticket.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tickettag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.RelatedTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.RelatedTicketsTable,
			Columns: []string{ticket.RelatedTicketsColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ParentTicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ParentTicketTable,
			Columns: []string{ticket.ParentTicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentTicketID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.WorkflowInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.WorkflowInstancesTable,
			Columns: []string{ticket.WorkflowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowinstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TicketCreateBulk is the builder for creating many Ticket entities in bulk.
type TicketCreateBulk struct {
	config
	err      error
	builders []*TicketCreate
}

// Save creates the Ticket entities in the database.
func (tcb *TicketCreateBulk) Save(ctx context.Context) ([]*Ticket, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Ticket, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TicketCreateBulk) SaveX(ctx context.Context) []*Ticket {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TicketCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TicketCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
