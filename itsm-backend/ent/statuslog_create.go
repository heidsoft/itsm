// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StatusLogCreate is the builder for creating a StatusLog entity.
type StatusLogCreate struct {
	config
	mutation *StatusLogMutation
	hooks    []Hook
}

// SetTicketID sets the "ticket_id" field.
func (slc *StatusLogCreate) SetTicketID(i int) *StatusLogCreate {
	slc.mutation.SetTicketID(i)
	return slc
}

// SetFromStatus sets the "from_status" field.
func (slc *StatusLogCreate) SetFromStatus(s string) *StatusLogCreate {
	slc.mutation.SetFromStatus(s)
	return slc
}

// SetToStatus sets the "to_status" field.
func (slc *StatusLogCreate) SetToStatus(s string) *StatusLogCreate {
	slc.mutation.SetToStatus(s)
	return slc
}

// SetUserID sets the "user_id" field.
func (slc *StatusLogCreate) SetUserID(i int) *StatusLogCreate {
	slc.mutation.SetUserID(i)
	return slc
}

// SetReason sets the "reason" field.
func (slc *StatusLogCreate) SetReason(s string) *StatusLogCreate {
	slc.mutation.SetReason(s)
	return slc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (slc *StatusLogCreate) SetNillableReason(s *string) *StatusLogCreate {
	if s != nil {
		slc.SetReason(*s)
	}
	return slc
}

// SetCreatedAt sets the "created_at" field.
func (slc *StatusLogCreate) SetCreatedAt(t time.Time) *StatusLogCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *StatusLogCreate) SetNillableCreatedAt(t *time.Time) *StatusLogCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (slc *StatusLogCreate) SetTicket(t *Ticket) *StatusLogCreate {
	return slc.SetTicketID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (slc *StatusLogCreate) SetUser(u *User) *StatusLogCreate {
	return slc.SetUserID(u.ID)
}

// Mutation returns the StatusLogMutation object of the builder.
func (slc *StatusLogCreate) Mutation() *StatusLogMutation {
	return slc.mutation
}

// Save creates the StatusLog in the database.
func (slc *StatusLogCreate) Save(ctx context.Context) (*StatusLog, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *StatusLogCreate) SaveX(ctx context.Context) *StatusLog {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *StatusLogCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *StatusLogCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *StatusLogCreate) defaults() {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := statuslog.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *StatusLogCreate) check() error {
	if _, ok := slc.mutation.TicketID(); !ok {
		return &ValidationError{Name: "ticket_id", err: errors.New(`ent: missing required field "StatusLog.ticket_id"`)}
	}
	if v, ok := slc.mutation.TicketID(); ok {
		if err := statuslog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.ticket_id": %w`, err)}
		}
	}
	if _, ok := slc.mutation.FromStatus(); !ok {
		return &ValidationError{Name: "from_status", err: errors.New(`ent: missing required field "StatusLog.from_status"`)}
	}
	if v, ok := slc.mutation.FromStatus(); ok {
		if err := statuslog.FromStatusValidator(v); err != nil {
			return &ValidationError{Name: "from_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.from_status": %w`, err)}
		}
	}
	if _, ok := slc.mutation.ToStatus(); !ok {
		return &ValidationError{Name: "to_status", err: errors.New(`ent: missing required field "StatusLog.to_status"`)}
	}
	if v, ok := slc.mutation.ToStatus(); ok {
		if err := statuslog.ToStatusValidator(v); err != nil {
			return &ValidationError{Name: "to_status", err: fmt.Errorf(`ent: validator failed for field "StatusLog.to_status": %w`, err)}
		}
	}
	if _, ok := slc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "StatusLog.user_id"`)}
	}
	if v, ok := slc.mutation.UserID(); ok {
		if err := statuslog.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "StatusLog.user_id": %w`, err)}
		}
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StatusLog.created_at"`)}
	}
	if len(slc.mutation.TicketIDs()) == 0 {
		return &ValidationError{Name: "ticket", err: errors.New(`ent: missing required edge "StatusLog.ticket"`)}
	}
	if len(slc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "StatusLog.user"`)}
	}
	return nil
}

func (slc *StatusLogCreate) sqlSave(ctx context.Context) (*StatusLog, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *StatusLogCreate) createSpec() (*StatusLog, *sqlgraph.CreateSpec) {
	var (
		_node = &StatusLog{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(statuslog.Table, sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt))
	)
	if value, ok := slc.mutation.FromStatus(); ok {
		_spec.SetField(statuslog.FieldFromStatus, field.TypeString, value)
		_node.FromStatus = value
	}
	if value, ok := slc.mutation.ToStatus(); ok {
		_spec.SetField(statuslog.FieldToStatus, field.TypeString, value)
		_node.ToStatus = value
	}
	if value, ok := slc.mutation.Reason(); ok {
		_spec.SetField(statuslog.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.SetField(statuslog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := slc.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.TicketTable,
			Columns: []string{statuslog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TicketID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statuslog.UserTable,
			Columns: []string{statuslog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatusLogCreateBulk is the builder for creating many StatusLog entities in bulk.
type StatusLogCreateBulk struct {
	config
	err      error
	builders []*StatusLogCreate
}

// Save creates the StatusLog entities in the database.
func (slcb *StatusLogCreateBulk) Save(ctx context.Context) ([]*StatusLog, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*StatusLog, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *StatusLogCreateBulk) SaveX(ctx context.Context) []*StatusLog {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *StatusLogCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *StatusLogCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
