// Code generated by ent, DO NOT EDIT.

package knowledgearticle

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldContent, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldCategory, v))
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTags, v))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldAuthorID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTenantID, v))
}

// IsPublished applies equality check predicate on the "is_published" field. It's identical to IsPublishedEQ.
func IsPublished(v bool) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldIsPublished, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContainsFold(FieldContent, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContainsFold(FieldCategory, v))
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTags, v))
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldTags, v))
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldTags, vs...))
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldTags, vs...))
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldTags, v))
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldTags, v))
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldTags, v))
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldTags, v))
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContains(FieldTags, v))
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasPrefix(FieldTags, v))
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldHasSuffix(FieldTags, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotNull(FieldTags))
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEqualFold(FieldTags, v))
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldContainsFold(FieldTags, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldAuthorID, vs...))
}

// AuthorIDGT applies the GT predicate on the "author_id" field.
func AuthorIDGT(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldAuthorID, v))
}

// AuthorIDGTE applies the GTE predicate on the "author_id" field.
func AuthorIDGTE(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldAuthorID, v))
}

// AuthorIDLT applies the LT predicate on the "author_id" field.
func AuthorIDLT(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldAuthorID, v))
}

// AuthorIDLTE applies the LTE predicate on the "author_id" field.
func AuthorIDLTE(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldAuthorID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldTenantID, v))
}

// IsPublishedEQ applies the EQ predicate on the "is_published" field.
func IsPublishedEQ(v bool) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldIsPublished, v))
}

// IsPublishedNEQ applies the NEQ predicate on the "is_published" field.
func IsPublishedNEQ(v bool) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldIsPublished, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KnowledgeArticle) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KnowledgeArticle) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KnowledgeArticle) predicate.KnowledgeArticle {
	return predicate.KnowledgeArticle(sql.NotPredicates(p))
}
