// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/workflow"
	"itsm-backend/ent/workflowinstance"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// WorkflowInstanceUpdate is the builder for updating WorkflowInstance entities.
type WorkflowInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowInstanceMutation
}

// Where appends a list predicates to the WorkflowInstanceUpdate builder.
func (wiu *WorkflowInstanceUpdate) Where(ps ...predicate.WorkflowInstance) *WorkflowInstanceUpdate {
	wiu.mutation.Where(ps...)
	return wiu
}

// SetStatus sets the "status" field.
func (wiu *WorkflowInstanceUpdate) SetStatus(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetStatus(s)
	return wiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableStatus(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetStatus(*s)
	}
	return wiu
}

// SetCurrentStep sets the "current_step" field.
func (wiu *WorkflowInstanceUpdate) SetCurrentStep(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetCurrentStep(s)
	return wiu
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableCurrentStep(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetCurrentStep(*s)
	}
	return wiu
}

// ClearCurrentStep clears the value of the "current_step" field.
func (wiu *WorkflowInstanceUpdate) ClearCurrentStep() *WorkflowInstanceUpdate {
	wiu.mutation.ClearCurrentStep()
	return wiu
}

// SetContext sets the "context" field.
func (wiu *WorkflowInstanceUpdate) SetContext(u []uint8) *WorkflowInstanceUpdate {
	wiu.mutation.SetContext(u)
	return wiu
}

// AppendContext appends u to the "context" field.
func (wiu *WorkflowInstanceUpdate) AppendContext(u []uint8) *WorkflowInstanceUpdate {
	wiu.mutation.AppendContext(u)
	return wiu
}

// ClearContext clears the value of the "context" field.
func (wiu *WorkflowInstanceUpdate) ClearContext() *WorkflowInstanceUpdate {
	wiu.mutation.ClearContext()
	return wiu
}

// SetWorkflowID sets the "workflow_id" field.
func (wiu *WorkflowInstanceUpdate) SetWorkflowID(i int) *WorkflowInstanceUpdate {
	wiu.mutation.SetWorkflowID(i)
	return wiu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableWorkflowID(i *int) *WorkflowInstanceUpdate {
	if i != nil {
		wiu.SetWorkflowID(*i)
	}
	return wiu
}

// SetEntityID sets the "entity_id" field.
func (wiu *WorkflowInstanceUpdate) SetEntityID(i int) *WorkflowInstanceUpdate {
	wiu.mutation.ResetEntityID()
	wiu.mutation.SetEntityID(i)
	return wiu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableEntityID(i *int) *WorkflowInstanceUpdate {
	if i != nil {
		wiu.SetEntityID(*i)
	}
	return wiu
}

// AddEntityID adds i to the "entity_id" field.
func (wiu *WorkflowInstanceUpdate) AddEntityID(i int) *WorkflowInstanceUpdate {
	wiu.mutation.AddEntityID(i)
	return wiu
}

// SetEntityType sets the "entity_type" field.
func (wiu *WorkflowInstanceUpdate) SetEntityType(s string) *WorkflowInstanceUpdate {
	wiu.mutation.SetEntityType(s)
	return wiu
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableEntityType(s *string) *WorkflowInstanceUpdate {
	if s != nil {
		wiu.SetEntityType(*s)
	}
	return wiu
}

// SetTenantID sets the "tenant_id" field.
func (wiu *WorkflowInstanceUpdate) SetTenantID(i int) *WorkflowInstanceUpdate {
	wiu.mutation.ResetTenantID()
	wiu.mutation.SetTenantID(i)
	return wiu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableTenantID(i *int) *WorkflowInstanceUpdate {
	if i != nil {
		wiu.SetTenantID(*i)
	}
	return wiu
}

// AddTenantID adds i to the "tenant_id" field.
func (wiu *WorkflowInstanceUpdate) AddTenantID(i int) *WorkflowInstanceUpdate {
	wiu.mutation.AddTenantID(i)
	return wiu
}

// SetStartedAt sets the "started_at" field.
func (wiu *WorkflowInstanceUpdate) SetStartedAt(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetStartedAt(t)
	return wiu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableStartedAt(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetStartedAt(*t)
	}
	return wiu
}

// SetCompletedAt sets the "completed_at" field.
func (wiu *WorkflowInstanceUpdate) SetCompletedAt(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetCompletedAt(t)
	return wiu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableCompletedAt(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetCompletedAt(*t)
	}
	return wiu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (wiu *WorkflowInstanceUpdate) ClearCompletedAt() *WorkflowInstanceUpdate {
	wiu.mutation.ClearCompletedAt()
	return wiu
}

// SetCreatedAt sets the "created_at" field.
func (wiu *WorkflowInstanceUpdate) SetCreatedAt(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetCreatedAt(t)
	return wiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wiu *WorkflowInstanceUpdate) SetNillableCreatedAt(t *time.Time) *WorkflowInstanceUpdate {
	if t != nil {
		wiu.SetCreatedAt(*t)
	}
	return wiu
}

// SetUpdatedAt sets the "updated_at" field.
func (wiu *WorkflowInstanceUpdate) SetUpdatedAt(t time.Time) *WorkflowInstanceUpdate {
	wiu.mutation.SetUpdatedAt(t)
	return wiu
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wiu *WorkflowInstanceUpdate) SetWorkflow(w *Workflow) *WorkflowInstanceUpdate {
	return wiu.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowInstanceMutation object of the builder.
func (wiu *WorkflowInstanceUpdate) Mutation() *WorkflowInstanceMutation {
	return wiu.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wiu *WorkflowInstanceUpdate) ClearWorkflow() *WorkflowInstanceUpdate {
	wiu.mutation.ClearWorkflow()
	return wiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wiu *WorkflowInstanceUpdate) Save(ctx context.Context) (int, error) {
	wiu.defaults()
	return withHooks(ctx, wiu.sqlSave, wiu.mutation, wiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiu *WorkflowInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := wiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wiu *WorkflowInstanceUpdate) Exec(ctx context.Context) error {
	_, err := wiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiu *WorkflowInstanceUpdate) ExecX(ctx context.Context) {
	if err := wiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wiu *WorkflowInstanceUpdate) defaults() {
	if _, ok := wiu.mutation.UpdatedAt(); !ok {
		v := workflowinstance.UpdateDefaultUpdatedAt()
		wiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wiu *WorkflowInstanceUpdate) check() error {
	if v, ok := wiu.mutation.WorkflowID(); ok {
		if err := workflowinstance.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.workflow_id": %w`, err)}
		}
	}
	if v, ok := wiu.mutation.EntityID(); ok {
		if err := workflowinstance.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.entity_id": %w`, err)}
		}
	}
	if v, ok := wiu.mutation.TenantID(); ok {
		if err := workflowinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.tenant_id": %w`, err)}
		}
	}
	if wiu.mutation.WorkflowCleared() && len(wiu.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowInstance.workflow"`)
	}
	return nil
}

func (wiu *WorkflowInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowinstance.Table, workflowinstance.Columns, sqlgraph.NewFieldSpec(workflowinstance.FieldID, field.TypeInt))
	if ps := wiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiu.mutation.Status(); ok {
		_spec.SetField(workflowinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := wiu.mutation.CurrentStep(); ok {
		_spec.SetField(workflowinstance.FieldCurrentStep, field.TypeString, value)
	}
	if wiu.mutation.CurrentStepCleared() {
		_spec.ClearField(workflowinstance.FieldCurrentStep, field.TypeString)
	}
	if value, ok := wiu.mutation.Context(); ok {
		_spec.SetField(workflowinstance.FieldContext, field.TypeJSON, value)
	}
	if value, ok := wiu.mutation.AppendedContext(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowinstance.FieldContext, value)
		})
	}
	if wiu.mutation.ContextCleared() {
		_spec.ClearField(workflowinstance.FieldContext, field.TypeJSON)
	}
	if value, ok := wiu.mutation.EntityID(); ok {
		_spec.SetField(workflowinstance.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := wiu.mutation.AddedEntityID(); ok {
		_spec.AddField(workflowinstance.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := wiu.mutation.EntityType(); ok {
		_spec.SetField(workflowinstance.FieldEntityType, field.TypeString, value)
	}
	if value, ok := wiu.mutation.TenantID(); ok {
		_spec.SetField(workflowinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := wiu.mutation.AddedTenantID(); ok {
		_spec.AddField(workflowinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := wiu.mutation.StartedAt(); ok {
		_spec.SetField(workflowinstance.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := wiu.mutation.CompletedAt(); ok {
		_spec.SetField(workflowinstance.FieldCompletedAt, field.TypeTime, value)
	}
	if wiu.mutation.CompletedAtCleared() {
		_spec.ClearField(workflowinstance.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := wiu.mutation.CreatedAt(); ok {
		_spec.SetField(workflowinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wiu.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if wiu.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiu.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wiu.mutation.done = true
	return n, nil
}

// WorkflowInstanceUpdateOne is the builder for updating a single WorkflowInstance entity.
type WorkflowInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowInstanceMutation
}

// SetStatus sets the "status" field.
func (wiuo *WorkflowInstanceUpdateOne) SetStatus(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetStatus(s)
	return wiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableStatus(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetStatus(*s)
	}
	return wiuo
}

// SetCurrentStep sets the "current_step" field.
func (wiuo *WorkflowInstanceUpdateOne) SetCurrentStep(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetCurrentStep(s)
	return wiuo
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableCurrentStep(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetCurrentStep(*s)
	}
	return wiuo
}

// ClearCurrentStep clears the value of the "current_step" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearCurrentStep() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearCurrentStep()
	return wiuo
}

// SetContext sets the "context" field.
func (wiuo *WorkflowInstanceUpdateOne) SetContext(u []uint8) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetContext(u)
	return wiuo
}

// AppendContext appends u to the "context" field.
func (wiuo *WorkflowInstanceUpdateOne) AppendContext(u []uint8) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AppendContext(u)
	return wiuo
}

// ClearContext clears the value of the "context" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearContext() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearContext()
	return wiuo
}

// SetWorkflowID sets the "workflow_id" field.
func (wiuo *WorkflowInstanceUpdateOne) SetWorkflowID(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetWorkflowID(i)
	return wiuo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableWorkflowID(i *int) *WorkflowInstanceUpdateOne {
	if i != nil {
		wiuo.SetWorkflowID(*i)
	}
	return wiuo
}

// SetEntityID sets the "entity_id" field.
func (wiuo *WorkflowInstanceUpdateOne) SetEntityID(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.ResetEntityID()
	wiuo.mutation.SetEntityID(i)
	return wiuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableEntityID(i *int) *WorkflowInstanceUpdateOne {
	if i != nil {
		wiuo.SetEntityID(*i)
	}
	return wiuo
}

// AddEntityID adds i to the "entity_id" field.
func (wiuo *WorkflowInstanceUpdateOne) AddEntityID(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AddEntityID(i)
	return wiuo
}

// SetEntityType sets the "entity_type" field.
func (wiuo *WorkflowInstanceUpdateOne) SetEntityType(s string) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetEntityType(s)
	return wiuo
}

// SetNillableEntityType sets the "entity_type" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableEntityType(s *string) *WorkflowInstanceUpdateOne {
	if s != nil {
		wiuo.SetEntityType(*s)
	}
	return wiuo
}

// SetTenantID sets the "tenant_id" field.
func (wiuo *WorkflowInstanceUpdateOne) SetTenantID(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.ResetTenantID()
	wiuo.mutation.SetTenantID(i)
	return wiuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableTenantID(i *int) *WorkflowInstanceUpdateOne {
	if i != nil {
		wiuo.SetTenantID(*i)
	}
	return wiuo
}

// AddTenantID adds i to the "tenant_id" field.
func (wiuo *WorkflowInstanceUpdateOne) AddTenantID(i int) *WorkflowInstanceUpdateOne {
	wiuo.mutation.AddTenantID(i)
	return wiuo
}

// SetStartedAt sets the "started_at" field.
func (wiuo *WorkflowInstanceUpdateOne) SetStartedAt(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetStartedAt(t)
	return wiuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableStartedAt(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetStartedAt(*t)
	}
	return wiuo
}

// SetCompletedAt sets the "completed_at" field.
func (wiuo *WorkflowInstanceUpdateOne) SetCompletedAt(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetCompletedAt(t)
	return wiuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableCompletedAt(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetCompletedAt(*t)
	}
	return wiuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (wiuo *WorkflowInstanceUpdateOne) ClearCompletedAt() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearCompletedAt()
	return wiuo
}

// SetCreatedAt sets the "created_at" field.
func (wiuo *WorkflowInstanceUpdateOne) SetCreatedAt(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetCreatedAt(t)
	return wiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wiuo *WorkflowInstanceUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkflowInstanceUpdateOne {
	if t != nil {
		wiuo.SetCreatedAt(*t)
	}
	return wiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wiuo *WorkflowInstanceUpdateOne) SetUpdatedAt(t time.Time) *WorkflowInstanceUpdateOne {
	wiuo.mutation.SetUpdatedAt(t)
	return wiuo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wiuo *WorkflowInstanceUpdateOne) SetWorkflow(w *Workflow) *WorkflowInstanceUpdateOne {
	return wiuo.SetWorkflowID(w.ID)
}

// Mutation returns the WorkflowInstanceMutation object of the builder.
func (wiuo *WorkflowInstanceUpdateOne) Mutation() *WorkflowInstanceMutation {
	return wiuo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wiuo *WorkflowInstanceUpdateOne) ClearWorkflow() *WorkflowInstanceUpdateOne {
	wiuo.mutation.ClearWorkflow()
	return wiuo
}

// Where appends a list predicates to the WorkflowInstanceUpdate builder.
func (wiuo *WorkflowInstanceUpdateOne) Where(ps ...predicate.WorkflowInstance) *WorkflowInstanceUpdateOne {
	wiuo.mutation.Where(ps...)
	return wiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wiuo *WorkflowInstanceUpdateOne) Select(field string, fields ...string) *WorkflowInstanceUpdateOne {
	wiuo.fields = append([]string{field}, fields...)
	return wiuo
}

// Save executes the query and returns the updated WorkflowInstance entity.
func (wiuo *WorkflowInstanceUpdateOne) Save(ctx context.Context) (*WorkflowInstance, error) {
	wiuo.defaults()
	return withHooks(ctx, wiuo.sqlSave, wiuo.mutation, wiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wiuo *WorkflowInstanceUpdateOne) SaveX(ctx context.Context) *WorkflowInstance {
	node, err := wiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wiuo *WorkflowInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := wiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wiuo *WorkflowInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := wiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wiuo *WorkflowInstanceUpdateOne) defaults() {
	if _, ok := wiuo.mutation.UpdatedAt(); !ok {
		v := workflowinstance.UpdateDefaultUpdatedAt()
		wiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wiuo *WorkflowInstanceUpdateOne) check() error {
	if v, ok := wiuo.mutation.WorkflowID(); ok {
		if err := workflowinstance.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.workflow_id": %w`, err)}
		}
	}
	if v, ok := wiuo.mutation.EntityID(); ok {
		if err := workflowinstance.EntityIDValidator(v); err != nil {
			return &ValidationError{Name: "entity_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.entity_id": %w`, err)}
		}
	}
	if v, ok := wiuo.mutation.TenantID(); ok {
		if err := workflowinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "WorkflowInstance.tenant_id": %w`, err)}
		}
	}
	if wiuo.mutation.WorkflowCleared() && len(wiuo.mutation.WorkflowIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkflowInstance.workflow"`)
	}
	return nil
}

func (wiuo *WorkflowInstanceUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowInstance, err error) {
	if err := wiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowinstance.Table, workflowinstance.Columns, sqlgraph.NewFieldSpec(workflowinstance.FieldID, field.TypeInt))
	id, ok := wiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowinstance.FieldID)
		for _, f := range fields {
			if !workflowinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wiuo.mutation.Status(); ok {
		_spec.SetField(workflowinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := wiuo.mutation.CurrentStep(); ok {
		_spec.SetField(workflowinstance.FieldCurrentStep, field.TypeString, value)
	}
	if wiuo.mutation.CurrentStepCleared() {
		_spec.ClearField(workflowinstance.FieldCurrentStep, field.TypeString)
	}
	if value, ok := wiuo.mutation.Context(); ok {
		_spec.SetField(workflowinstance.FieldContext, field.TypeJSON, value)
	}
	if value, ok := wiuo.mutation.AppendedContext(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workflowinstance.FieldContext, value)
		})
	}
	if wiuo.mutation.ContextCleared() {
		_spec.ClearField(workflowinstance.FieldContext, field.TypeJSON)
	}
	if value, ok := wiuo.mutation.EntityID(); ok {
		_spec.SetField(workflowinstance.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := wiuo.mutation.AddedEntityID(); ok {
		_spec.AddField(workflowinstance.FieldEntityID, field.TypeInt, value)
	}
	if value, ok := wiuo.mutation.EntityType(); ok {
		_spec.SetField(workflowinstance.FieldEntityType, field.TypeString, value)
	}
	if value, ok := wiuo.mutation.TenantID(); ok {
		_spec.SetField(workflowinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := wiuo.mutation.AddedTenantID(); ok {
		_spec.AddField(workflowinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := wiuo.mutation.StartedAt(); ok {
		_spec.SetField(workflowinstance.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := wiuo.mutation.CompletedAt(); ok {
		_spec.SetField(workflowinstance.FieldCompletedAt, field.TypeTime, value)
	}
	if wiuo.mutation.CompletedAtCleared() {
		_spec.ClearField(workflowinstance.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := wiuo.mutation.CreatedAt(); ok {
		_spec.SetField(workflowinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workflowinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if wiuo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wiuo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowinstance.WorkflowTable,
			Columns: []string{workflowinstance.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowInstance{config: wiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wiuo.mutation.done = true
	return _node, nil
}
