// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApprovalLogUpdate is the builder for updating ApprovalLog entities.
type ApprovalLogUpdate struct {
	config
	hooks    []Hook
	mutation *ApprovalLogMutation
}

// Where appends a list predicates to the ApprovalLogUpdate builder.
func (alu *ApprovalLogUpdate) Where(ps ...predicate.ApprovalLog) *ApprovalLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetApproverID sets the "approver_id" field.
func (alu *ApprovalLogUpdate) SetApproverID(i int) *ApprovalLogUpdate {
	alu.mutation.SetApproverID(i)
	return alu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableApproverID(i *int) *ApprovalLogUpdate {
	if i != nil {
		alu.SetApproverID(*i)
	}
	return alu
}

// SetComment sets the "comment" field.
func (alu *ApprovalLogUpdate) SetComment(s string) *ApprovalLogUpdate {
	alu.mutation.SetComment(s)
	return alu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableComment(s *string) *ApprovalLogUpdate {
	if s != nil {
		alu.SetComment(*s)
	}
	return alu
}

// ClearComment clears the value of the "comment" field.
func (alu *ApprovalLogUpdate) ClearComment() *ApprovalLogUpdate {
	alu.mutation.ClearComment()
	return alu
}

// SetStatus sets the "status" field.
func (alu *ApprovalLogUpdate) SetStatus(a approvallog.Status) *ApprovalLogUpdate {
	alu.mutation.SetStatus(a)
	return alu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableStatus(a *approvallog.Status) *ApprovalLogUpdate {
	if a != nil {
		alu.SetStatus(*a)
	}
	return alu
}

// SetTicketID sets the "ticket_id" field.
func (alu *ApprovalLogUpdate) SetTicketID(i int) *ApprovalLogUpdate {
	alu.mutation.SetTicketID(i)
	return alu
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableTicketID(i *int) *ApprovalLogUpdate {
	if i != nil {
		alu.SetTicketID(*i)
	}
	return alu
}

// SetStepOrder sets the "step_order" field.
func (alu *ApprovalLogUpdate) SetStepOrder(i int) *ApprovalLogUpdate {
	alu.mutation.ResetStepOrder()
	alu.mutation.SetStepOrder(i)
	return alu
}

// SetNillableStepOrder sets the "step_order" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableStepOrder(i *int) *ApprovalLogUpdate {
	if i != nil {
		alu.SetStepOrder(*i)
	}
	return alu
}

// AddStepOrder adds i to the "step_order" field.
func (alu *ApprovalLogUpdate) AddStepOrder(i int) *ApprovalLogUpdate {
	alu.mutation.AddStepOrder(i)
	return alu
}

// SetStepName sets the "step_name" field.
func (alu *ApprovalLogUpdate) SetStepName(s string) *ApprovalLogUpdate {
	alu.mutation.SetStepName(s)
	return alu
}

// SetNillableStepName sets the "step_name" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableStepName(s *string) *ApprovalLogUpdate {
	if s != nil {
		alu.SetStepName(*s)
	}
	return alu
}

// ClearStepName clears the value of the "step_name" field.
func (alu *ApprovalLogUpdate) ClearStepName() *ApprovalLogUpdate {
	alu.mutation.ClearStepName()
	return alu
}

// SetMetadata sets the "metadata" field.
func (alu *ApprovalLogUpdate) SetMetadata(m map[string]interface{}) *ApprovalLogUpdate {
	alu.mutation.SetMetadata(m)
	return alu
}

// ClearMetadata clears the value of the "metadata" field.
func (alu *ApprovalLogUpdate) ClearMetadata() *ApprovalLogUpdate {
	alu.mutation.ClearMetadata()
	return alu
}

// SetApprovedAt sets the "approved_at" field.
func (alu *ApprovalLogUpdate) SetApprovedAt(t time.Time) *ApprovalLogUpdate {
	alu.mutation.SetApprovedAt(t)
	return alu
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (alu *ApprovalLogUpdate) SetNillableApprovedAt(t *time.Time) *ApprovalLogUpdate {
	if t != nil {
		alu.SetApprovedAt(*t)
	}
	return alu
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (alu *ApprovalLogUpdate) ClearApprovedAt() *ApprovalLogUpdate {
	alu.mutation.ClearApprovedAt()
	return alu
}

// SetApprover sets the "approver" edge to the User entity.
func (alu *ApprovalLogUpdate) SetApprover(u *User) *ApprovalLogUpdate {
	return alu.SetApproverID(u.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (alu *ApprovalLogUpdate) SetTicket(t *Ticket) *ApprovalLogUpdate {
	return alu.SetTicketID(t.ID)
}

// Mutation returns the ApprovalLogMutation object of the builder.
func (alu *ApprovalLogUpdate) Mutation() *ApprovalLogMutation {
	return alu.mutation
}

// ClearApprover clears the "approver" edge to the User entity.
func (alu *ApprovalLogUpdate) ClearApprover() *ApprovalLogUpdate {
	alu.mutation.ClearApprover()
	return alu
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (alu *ApprovalLogUpdate) ClearTicket() *ApprovalLogUpdate {
	alu.mutation.ClearTicket()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *ApprovalLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *ApprovalLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *ApprovalLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *ApprovalLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *ApprovalLogUpdate) check() error {
	if v, ok := alu.mutation.ApproverID(); ok {
		if err := approvallog.ApproverIDValidator(v); err != nil {
			return &ValidationError{Name: "approver_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.approver_id": %w`, err)}
		}
	}
	if v, ok := alu.mutation.Status(); ok {
		if err := approvallog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.status": %w`, err)}
		}
	}
	if v, ok := alu.mutation.TicketID(); ok {
		if err := approvallog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.ticket_id": %w`, err)}
		}
	}
	if v, ok := alu.mutation.StepOrder(); ok {
		if err := approvallog.StepOrderValidator(v); err != nil {
			return &ValidationError{Name: "step_order", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_order": %w`, err)}
		}
	}
	if v, ok := alu.mutation.StepName(); ok {
		if err := approvallog.StepNameValidator(v); err != nil {
			return &ValidationError{Name: "step_name", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_name": %w`, err)}
		}
	}
	if alu.mutation.ApproverCleared() && len(alu.mutation.ApproverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApprovalLog.approver"`)
	}
	if alu.mutation.TicketCleared() && len(alu.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApprovalLog.ticket"`)
	}
	return nil
}

func (alu *ApprovalLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(approvallog.Table, approvallog.Columns, sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Comment(); ok {
		_spec.SetField(approvallog.FieldComment, field.TypeString, value)
	}
	if alu.mutation.CommentCleared() {
		_spec.ClearField(approvallog.FieldComment, field.TypeString)
	}
	if value, ok := alu.mutation.Status(); ok {
		_spec.SetField(approvallog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := alu.mutation.StepOrder(); ok {
		_spec.SetField(approvallog.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := alu.mutation.AddedStepOrder(); ok {
		_spec.AddField(approvallog.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := alu.mutation.StepName(); ok {
		_spec.SetField(approvallog.FieldStepName, field.TypeString, value)
	}
	if alu.mutation.StepNameCleared() {
		_spec.ClearField(approvallog.FieldStepName, field.TypeString)
	}
	if value, ok := alu.mutation.Metadata(); ok {
		_spec.SetField(approvallog.FieldMetadata, field.TypeJSON, value)
	}
	if alu.mutation.MetadataCleared() {
		_spec.ClearField(approvallog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := alu.mutation.ApprovedAt(); ok {
		_spec.SetField(approvallog.FieldApprovedAt, field.TypeTime, value)
	}
	if alu.mutation.ApprovedAtCleared() {
		_spec.ClearField(approvallog.FieldApprovedAt, field.TypeTime)
	}
	if alu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.ApproverTable,
			Columns: []string{approvallog.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.ApproverTable,
			Columns: []string{approvallog.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.TicketTable,
			Columns: []string{approvallog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.TicketTable,
			Columns: []string{approvallog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approvallog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// ApprovalLogUpdateOne is the builder for updating a single ApprovalLog entity.
type ApprovalLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApprovalLogMutation
}

// SetApproverID sets the "approver_id" field.
func (aluo *ApprovalLogUpdateOne) SetApproverID(i int) *ApprovalLogUpdateOne {
	aluo.mutation.SetApproverID(i)
	return aluo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableApproverID(i *int) *ApprovalLogUpdateOne {
	if i != nil {
		aluo.SetApproverID(*i)
	}
	return aluo
}

// SetComment sets the "comment" field.
func (aluo *ApprovalLogUpdateOne) SetComment(s string) *ApprovalLogUpdateOne {
	aluo.mutation.SetComment(s)
	return aluo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableComment(s *string) *ApprovalLogUpdateOne {
	if s != nil {
		aluo.SetComment(*s)
	}
	return aluo
}

// ClearComment clears the value of the "comment" field.
func (aluo *ApprovalLogUpdateOne) ClearComment() *ApprovalLogUpdateOne {
	aluo.mutation.ClearComment()
	return aluo
}

// SetStatus sets the "status" field.
func (aluo *ApprovalLogUpdateOne) SetStatus(a approvallog.Status) *ApprovalLogUpdateOne {
	aluo.mutation.SetStatus(a)
	return aluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableStatus(a *approvallog.Status) *ApprovalLogUpdateOne {
	if a != nil {
		aluo.SetStatus(*a)
	}
	return aluo
}

// SetTicketID sets the "ticket_id" field.
func (aluo *ApprovalLogUpdateOne) SetTicketID(i int) *ApprovalLogUpdateOne {
	aluo.mutation.SetTicketID(i)
	return aluo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableTicketID(i *int) *ApprovalLogUpdateOne {
	if i != nil {
		aluo.SetTicketID(*i)
	}
	return aluo
}

// SetStepOrder sets the "step_order" field.
func (aluo *ApprovalLogUpdateOne) SetStepOrder(i int) *ApprovalLogUpdateOne {
	aluo.mutation.ResetStepOrder()
	aluo.mutation.SetStepOrder(i)
	return aluo
}

// SetNillableStepOrder sets the "step_order" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableStepOrder(i *int) *ApprovalLogUpdateOne {
	if i != nil {
		aluo.SetStepOrder(*i)
	}
	return aluo
}

// AddStepOrder adds i to the "step_order" field.
func (aluo *ApprovalLogUpdateOne) AddStepOrder(i int) *ApprovalLogUpdateOne {
	aluo.mutation.AddStepOrder(i)
	return aluo
}

// SetStepName sets the "step_name" field.
func (aluo *ApprovalLogUpdateOne) SetStepName(s string) *ApprovalLogUpdateOne {
	aluo.mutation.SetStepName(s)
	return aluo
}

// SetNillableStepName sets the "step_name" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableStepName(s *string) *ApprovalLogUpdateOne {
	if s != nil {
		aluo.SetStepName(*s)
	}
	return aluo
}

// ClearStepName clears the value of the "step_name" field.
func (aluo *ApprovalLogUpdateOne) ClearStepName() *ApprovalLogUpdateOne {
	aluo.mutation.ClearStepName()
	return aluo
}

// SetMetadata sets the "metadata" field.
func (aluo *ApprovalLogUpdateOne) SetMetadata(m map[string]interface{}) *ApprovalLogUpdateOne {
	aluo.mutation.SetMetadata(m)
	return aluo
}

// ClearMetadata clears the value of the "metadata" field.
func (aluo *ApprovalLogUpdateOne) ClearMetadata() *ApprovalLogUpdateOne {
	aluo.mutation.ClearMetadata()
	return aluo
}

// SetApprovedAt sets the "approved_at" field.
func (aluo *ApprovalLogUpdateOne) SetApprovedAt(t time.Time) *ApprovalLogUpdateOne {
	aluo.mutation.SetApprovedAt(t)
	return aluo
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (aluo *ApprovalLogUpdateOne) SetNillableApprovedAt(t *time.Time) *ApprovalLogUpdateOne {
	if t != nil {
		aluo.SetApprovedAt(*t)
	}
	return aluo
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (aluo *ApprovalLogUpdateOne) ClearApprovedAt() *ApprovalLogUpdateOne {
	aluo.mutation.ClearApprovedAt()
	return aluo
}

// SetApprover sets the "approver" edge to the User entity.
func (aluo *ApprovalLogUpdateOne) SetApprover(u *User) *ApprovalLogUpdateOne {
	return aluo.SetApproverID(u.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (aluo *ApprovalLogUpdateOne) SetTicket(t *Ticket) *ApprovalLogUpdateOne {
	return aluo.SetTicketID(t.ID)
}

// Mutation returns the ApprovalLogMutation object of the builder.
func (aluo *ApprovalLogUpdateOne) Mutation() *ApprovalLogMutation {
	return aluo.mutation
}

// ClearApprover clears the "approver" edge to the User entity.
func (aluo *ApprovalLogUpdateOne) ClearApprover() *ApprovalLogUpdateOne {
	aluo.mutation.ClearApprover()
	return aluo
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (aluo *ApprovalLogUpdateOne) ClearTicket() *ApprovalLogUpdateOne {
	aluo.mutation.ClearTicket()
	return aluo
}

// Where appends a list predicates to the ApprovalLogUpdate builder.
func (aluo *ApprovalLogUpdateOne) Where(ps ...predicate.ApprovalLog) *ApprovalLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *ApprovalLogUpdateOne) Select(field string, fields ...string) *ApprovalLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated ApprovalLog entity.
func (aluo *ApprovalLogUpdateOne) Save(ctx context.Context) (*ApprovalLog, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *ApprovalLogUpdateOne) SaveX(ctx context.Context) *ApprovalLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *ApprovalLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *ApprovalLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *ApprovalLogUpdateOne) check() error {
	if v, ok := aluo.mutation.ApproverID(); ok {
		if err := approvallog.ApproverIDValidator(v); err != nil {
			return &ValidationError{Name: "approver_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.approver_id": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.Status(); ok {
		if err := approvallog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.status": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.TicketID(); ok {
		if err := approvallog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.ticket_id": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.StepOrder(); ok {
		if err := approvallog.StepOrderValidator(v); err != nil {
			return &ValidationError{Name: "step_order", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_order": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.StepName(); ok {
		if err := approvallog.StepNameValidator(v); err != nil {
			return &ValidationError{Name: "step_name", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_name": %w`, err)}
		}
	}
	if aluo.mutation.ApproverCleared() && len(aluo.mutation.ApproverIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApprovalLog.approver"`)
	}
	if aluo.mutation.TicketCleared() && len(aluo.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ApprovalLog.ticket"`)
	}
	return nil
}

func (aluo *ApprovalLogUpdateOne) sqlSave(ctx context.Context) (_node *ApprovalLog, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(approvallog.Table, approvallog.Columns, sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApprovalLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approvallog.FieldID)
		for _, f := range fields {
			if !approvallog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approvallog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Comment(); ok {
		_spec.SetField(approvallog.FieldComment, field.TypeString, value)
	}
	if aluo.mutation.CommentCleared() {
		_spec.ClearField(approvallog.FieldComment, field.TypeString)
	}
	if value, ok := aluo.mutation.Status(); ok {
		_spec.SetField(approvallog.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := aluo.mutation.StepOrder(); ok {
		_spec.SetField(approvallog.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.AddedStepOrder(); ok {
		_spec.AddField(approvallog.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := aluo.mutation.StepName(); ok {
		_spec.SetField(approvallog.FieldStepName, field.TypeString, value)
	}
	if aluo.mutation.StepNameCleared() {
		_spec.ClearField(approvallog.FieldStepName, field.TypeString)
	}
	if value, ok := aluo.mutation.Metadata(); ok {
		_spec.SetField(approvallog.FieldMetadata, field.TypeJSON, value)
	}
	if aluo.mutation.MetadataCleared() {
		_spec.ClearField(approvallog.FieldMetadata, field.TypeJSON)
	}
	if value, ok := aluo.mutation.ApprovedAt(); ok {
		_spec.SetField(approvallog.FieldApprovedAt, field.TypeTime, value)
	}
	if aluo.mutation.ApprovedAtCleared() {
		_spec.ClearField(approvallog.FieldApprovedAt, field.TypeTime)
	}
	if aluo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.ApproverTable,
			Columns: []string{approvallog.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.ApproverTable,
			Columns: []string{approvallog.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.TicketTable,
			Columns: []string{approvallog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.TicketTable,
			Columns: []string{approvallog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ApprovalLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approvallog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
