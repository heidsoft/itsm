// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIRelationshipTypeCreate is the builder for creating a CIRelationshipType entity.
type CIRelationshipTypeCreate struct {
	config
	mutation *CIRelationshipTypeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (crtc *CIRelationshipTypeCreate) SetName(s string) *CIRelationshipTypeCreate {
	crtc.mutation.SetName(s)
	return crtc
}

// SetDisplayName sets the "display_name" field.
func (crtc *CIRelationshipTypeCreate) SetDisplayName(s string) *CIRelationshipTypeCreate {
	crtc.mutation.SetDisplayName(s)
	return crtc
}

// SetDescription sets the "description" field.
func (crtc *CIRelationshipTypeCreate) SetDescription(s string) *CIRelationshipTypeCreate {
	crtc.mutation.SetDescription(s)
	return crtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableDescription(s *string) *CIRelationshipTypeCreate {
	if s != nil {
		crtc.SetDescription(*s)
	}
	return crtc
}

// SetDirection sets the "direction" field.
func (crtc *CIRelationshipTypeCreate) SetDirection(s string) *CIRelationshipTypeCreate {
	crtc.mutation.SetDirection(s)
	return crtc
}

// SetNillableDirection sets the "direction" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableDirection(s *string) *CIRelationshipTypeCreate {
	if s != nil {
		crtc.SetDirection(*s)
	}
	return crtc
}

// SetCardinality sets the "cardinality" field.
func (crtc *CIRelationshipTypeCreate) SetCardinality(s string) *CIRelationshipTypeCreate {
	crtc.mutation.SetCardinality(s)
	return crtc
}

// SetNillableCardinality sets the "cardinality" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableCardinality(s *string) *CIRelationshipTypeCreate {
	if s != nil {
		crtc.SetCardinality(*s)
	}
	return crtc
}

// SetSourceCiTypes sets the "source_ci_types" field.
func (crtc *CIRelationshipTypeCreate) SetSourceCiTypes(s []string) *CIRelationshipTypeCreate {
	crtc.mutation.SetSourceCiTypes(s)
	return crtc
}

// SetTargetCiTypes sets the "target_ci_types" field.
func (crtc *CIRelationshipTypeCreate) SetTargetCiTypes(s []string) *CIRelationshipTypeCreate {
	crtc.mutation.SetTargetCiTypes(s)
	return crtc
}

// SetIsSystem sets the "is_system" field.
func (crtc *CIRelationshipTypeCreate) SetIsSystem(b bool) *CIRelationshipTypeCreate {
	crtc.mutation.SetIsSystem(b)
	return crtc
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableIsSystem(b *bool) *CIRelationshipTypeCreate {
	if b != nil {
		crtc.SetIsSystem(*b)
	}
	return crtc
}

// SetIsActive sets the "is_active" field.
func (crtc *CIRelationshipTypeCreate) SetIsActive(b bool) *CIRelationshipTypeCreate {
	crtc.mutation.SetIsActive(b)
	return crtc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableIsActive(b *bool) *CIRelationshipTypeCreate {
	if b != nil {
		crtc.SetIsActive(*b)
	}
	return crtc
}

// SetTenantID sets the "tenant_id" field.
func (crtc *CIRelationshipTypeCreate) SetTenantID(i int) *CIRelationshipTypeCreate {
	crtc.mutation.SetTenantID(i)
	return crtc
}

// SetCreatedAt sets the "created_at" field.
func (crtc *CIRelationshipTypeCreate) SetCreatedAt(t time.Time) *CIRelationshipTypeCreate {
	crtc.mutation.SetCreatedAt(t)
	return crtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableCreatedAt(t *time.Time) *CIRelationshipTypeCreate {
	if t != nil {
		crtc.SetCreatedAt(*t)
	}
	return crtc
}

// SetUpdatedAt sets the "updated_at" field.
func (crtc *CIRelationshipTypeCreate) SetUpdatedAt(t time.Time) *CIRelationshipTypeCreate {
	crtc.mutation.SetUpdatedAt(t)
	return crtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crtc *CIRelationshipTypeCreate) SetNillableUpdatedAt(t *time.Time) *CIRelationshipTypeCreate {
	if t != nil {
		crtc.SetUpdatedAt(*t)
	}
	return crtc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (crtc *CIRelationshipTypeCreate) SetTenant(t *Tenant) *CIRelationshipTypeCreate {
	return crtc.SetTenantID(t.ID)
}

// AddRelationshipIDs adds the "relationships" edge to the CIRelationship entity by IDs.
func (crtc *CIRelationshipTypeCreate) AddRelationshipIDs(ids ...int) *CIRelationshipTypeCreate {
	crtc.mutation.AddRelationshipIDs(ids...)
	return crtc
}

// AddRelationships adds the "relationships" edges to the CIRelationship entity.
func (crtc *CIRelationshipTypeCreate) AddRelationships(c ...*CIRelationship) *CIRelationshipTypeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return crtc.AddRelationshipIDs(ids...)
}

// Mutation returns the CIRelationshipTypeMutation object of the builder.
func (crtc *CIRelationshipTypeCreate) Mutation() *CIRelationshipTypeMutation {
	return crtc.mutation
}

// Save creates the CIRelationshipType in the database.
func (crtc *CIRelationshipTypeCreate) Save(ctx context.Context) (*CIRelationshipType, error) {
	crtc.defaults()
	return withHooks(ctx, crtc.sqlSave, crtc.mutation, crtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crtc *CIRelationshipTypeCreate) SaveX(ctx context.Context) *CIRelationshipType {
	v, err := crtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crtc *CIRelationshipTypeCreate) Exec(ctx context.Context) error {
	_, err := crtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crtc *CIRelationshipTypeCreate) ExecX(ctx context.Context) {
	if err := crtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crtc *CIRelationshipTypeCreate) defaults() {
	if _, ok := crtc.mutation.Direction(); !ok {
		v := cirelationshiptype.DefaultDirection
		crtc.mutation.SetDirection(v)
	}
	if _, ok := crtc.mutation.Cardinality(); !ok {
		v := cirelationshiptype.DefaultCardinality
		crtc.mutation.SetCardinality(v)
	}
	if _, ok := crtc.mutation.IsSystem(); !ok {
		v := cirelationshiptype.DefaultIsSystem
		crtc.mutation.SetIsSystem(v)
	}
	if _, ok := crtc.mutation.IsActive(); !ok {
		v := cirelationshiptype.DefaultIsActive
		crtc.mutation.SetIsActive(v)
	}
	if _, ok := crtc.mutation.CreatedAt(); !ok {
		v := cirelationshiptype.DefaultCreatedAt()
		crtc.mutation.SetCreatedAt(v)
	}
	if _, ok := crtc.mutation.UpdatedAt(); !ok {
		v := cirelationshiptype.DefaultUpdatedAt()
		crtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crtc *CIRelationshipTypeCreate) check() error {
	if _, ok := crtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CIRelationshipType.name"`)}
	}
	if v, ok := crtc.mutation.Name(); ok {
		if err := cirelationshiptype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.name": %w`, err)}
		}
	}
	if _, ok := crtc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "CIRelationshipType.display_name"`)}
	}
	if v, ok := crtc.mutation.DisplayName(); ok {
		if err := cirelationshiptype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIRelationshipType.display_name": %w`, err)}
		}
	}
	if _, ok := crtc.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`ent: missing required field "CIRelationshipType.direction"`)}
	}
	if _, ok := crtc.mutation.Cardinality(); !ok {
		return &ValidationError{Name: "cardinality", err: errors.New(`ent: missing required field "CIRelationshipType.cardinality"`)}
	}
	if _, ok := crtc.mutation.IsSystem(); !ok {
		return &ValidationError{Name: "is_system", err: errors.New(`ent: missing required field "CIRelationshipType.is_system"`)}
	}
	if _, ok := crtc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "CIRelationshipType.is_active"`)}
	}
	if _, ok := crtc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CIRelationshipType.tenant_id"`)}
	}
	if _, ok := crtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CIRelationshipType.created_at"`)}
	}
	if _, ok := crtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CIRelationshipType.updated_at"`)}
	}
	if len(crtc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CIRelationshipType.tenant"`)}
	}
	return nil
}

func (crtc *CIRelationshipTypeCreate) sqlSave(ctx context.Context) (*CIRelationshipType, error) {
	if err := crtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crtc.mutation.id = &_node.ID
	crtc.mutation.done = true
	return _node, nil
}

func (crtc *CIRelationshipTypeCreate) createSpec() (*CIRelationshipType, *sqlgraph.CreateSpec) {
	var (
		_node = &CIRelationshipType{config: crtc.config}
		_spec = sqlgraph.NewCreateSpec(cirelationshiptype.Table, sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt))
	)
	if value, ok := crtc.mutation.Name(); ok {
		_spec.SetField(cirelationshiptype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := crtc.mutation.DisplayName(); ok {
		_spec.SetField(cirelationshiptype.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := crtc.mutation.Description(); ok {
		_spec.SetField(cirelationshiptype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := crtc.mutation.Direction(); ok {
		_spec.SetField(cirelationshiptype.FieldDirection, field.TypeString, value)
		_node.Direction = value
	}
	if value, ok := crtc.mutation.Cardinality(); ok {
		_spec.SetField(cirelationshiptype.FieldCardinality, field.TypeString, value)
		_node.Cardinality = value
	}
	if value, ok := crtc.mutation.SourceCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldSourceCiTypes, field.TypeJSON, value)
		_node.SourceCiTypes = value
	}
	if value, ok := crtc.mutation.TargetCiTypes(); ok {
		_spec.SetField(cirelationshiptype.FieldTargetCiTypes, field.TypeJSON, value)
		_node.TargetCiTypes = value
	}
	if value, ok := crtc.mutation.IsSystem(); ok {
		_spec.SetField(cirelationshiptype.FieldIsSystem, field.TypeBool, value)
		_node.IsSystem = value
	}
	if value, ok := crtc.mutation.IsActive(); ok {
		_spec.SetField(cirelationshiptype.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := crtc.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crtc.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationshiptype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := crtc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cirelationshiptype.TenantTable,
			Columns: []string{cirelationshiptype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crtc.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cirelationshiptype.RelationshipsTable,
			Columns: []string{cirelationshiptype.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CIRelationshipTypeCreateBulk is the builder for creating many CIRelationshipType entities in bulk.
type CIRelationshipTypeCreateBulk struct {
	config
	err      error
	builders []*CIRelationshipTypeCreate
}

// Save creates the CIRelationshipType entities in the database.
func (crtcb *CIRelationshipTypeCreateBulk) Save(ctx context.Context) ([]*CIRelationshipType, error) {
	if crtcb.err != nil {
		return nil, crtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crtcb.builders))
	nodes := make([]*CIRelationshipType, len(crtcb.builders))
	mutators := make([]Mutator, len(crtcb.builders))
	for i := range crtcb.builders {
		func(i int, root context.Context) {
			builder := crtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CIRelationshipTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crtcb *CIRelationshipTypeCreateBulk) SaveX(ctx context.Context) []*CIRelationshipType {
	v, err := crtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crtcb *CIRelationshipTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := crtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crtcb *CIRelationshipTypeCreateBulk) ExecX(ctx context.Context) {
	if err := crtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
