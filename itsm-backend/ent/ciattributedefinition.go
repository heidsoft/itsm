// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/ciattributedefinition"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CIAttributeDefinition is the model entity for the CIAttributeDefinition schema.
type CIAttributeDefinition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 属性名称
	Name string `json:"name,omitempty"`
	// 显示名称
	DisplayName string `json:"display_name,omitempty"`
	// 属性类型
	Type string `json:"type,omitempty"`
	// 是否必填
	Required bool `json:"required,omitempty"`
	// 是否唯一
	Unique bool `json:"unique,omitempty"`
	// 默认值
	DefaultValue string `json:"default_value,omitempty"`
	// 验证规则
	ValidationRules string `json:"validation_rules,omitempty"`
	// CI类型ID
	CiTypeID int `json:"ci_type_id,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 是否激活
	IsActive bool `json:"is_active,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CIAttributeDefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ciattributedefinition.FieldRequired, ciattributedefinition.FieldUnique, ciattributedefinition.FieldIsActive:
			values[i] = new(sql.NullBool)
		case ciattributedefinition.FieldID, ciattributedefinition.FieldCiTypeID, ciattributedefinition.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case ciattributedefinition.FieldName, ciattributedefinition.FieldDisplayName, ciattributedefinition.FieldType, ciattributedefinition.FieldDefaultValue, ciattributedefinition.FieldValidationRules:
			values[i] = new(sql.NullString)
		case ciattributedefinition.FieldCreatedAt, ciattributedefinition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CIAttributeDefinition fields.
func (cad *CIAttributeDefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ciattributedefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cad.ID = int(value.Int64)
		case ciattributedefinition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cad.Name = value.String
			}
		case ciattributedefinition.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				cad.DisplayName = value.String
			}
		case ciattributedefinition.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cad.Type = value.String
			}
		case ciattributedefinition.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				cad.Required = value.Bool
			}
		case ciattributedefinition.FieldUnique:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field unique", values[i])
			} else if value.Valid {
				cad.Unique = value.Bool
			}
		case ciattributedefinition.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				cad.DefaultValue = value.String
			}
		case ciattributedefinition.FieldValidationRules:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_rules", values[i])
			} else if value.Valid {
				cad.ValidationRules = value.String
			}
		case ciattributedefinition.FieldCiTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ci_type_id", values[i])
			} else if value.Valid {
				cad.CiTypeID = int(value.Int64)
			}
		case ciattributedefinition.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				cad.TenantID = int(value.Int64)
			}
		case ciattributedefinition.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				cad.IsActive = value.Bool
			}
		case ciattributedefinition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cad.CreatedAt = value.Time
			}
		case ciattributedefinition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cad.UpdatedAt = value.Time
			}
		default:
			cad.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CIAttributeDefinition.
// This includes values selected through modifiers, order, etc.
func (cad *CIAttributeDefinition) Value(name string) (ent.Value, error) {
	return cad.selectValues.Get(name)
}

// Update returns a builder for updating this CIAttributeDefinition.
// Note that you need to call CIAttributeDefinition.Unwrap() before calling this method if this CIAttributeDefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (cad *CIAttributeDefinition) Update() *CIAttributeDefinitionUpdateOne {
	return NewCIAttributeDefinitionClient(cad.config).UpdateOne(cad)
}

// Unwrap unwraps the CIAttributeDefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cad *CIAttributeDefinition) Unwrap() *CIAttributeDefinition {
	_tx, ok := cad.config.driver.(*txDriver)
	if !ok {
		panic("ent: CIAttributeDefinition is not a transactional entity")
	}
	cad.config.driver = _tx.drv
	return cad
}

// String implements the fmt.Stringer.
func (cad *CIAttributeDefinition) String() string {
	var builder strings.Builder
	builder.WriteString("CIAttributeDefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cad.ID))
	builder.WriteString("name=")
	builder.WriteString(cad.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(cad.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(cad.Type)
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", cad.Required))
	builder.WriteString(", ")
	builder.WriteString("unique=")
	builder.WriteString(fmt.Sprintf("%v", cad.Unique))
	builder.WriteString(", ")
	builder.WriteString("default_value=")
	builder.WriteString(cad.DefaultValue)
	builder.WriteString(", ")
	builder.WriteString("validation_rules=")
	builder.WriteString(cad.ValidationRules)
	builder.WriteString(", ")
	builder.WriteString("ci_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cad.CiTypeID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cad.TenantID))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", cad.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cad.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cad.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CIAttributeDefinitions is a parsable slice of CIAttributeDefinition.
type CIAttributeDefinitions []*CIAttributeDefinition
