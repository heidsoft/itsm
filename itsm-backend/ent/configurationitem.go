// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/configurationitem"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConfigurationItem is the model entity for the ConfigurationItem schema.
type ConfigurationItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 配置项名称
	Name string `json:"name,omitempty"`
	// 配置项描述
	Description string `json:"description,omitempty"`
	// 配置项类型
	Type string `json:"type,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 位置
	Location string `json:"location,omitempty"`
	// 序列号
	SerialNumber string `json:"serial_number,omitempty"`
	// 型号
	Model string `json:"model,omitempty"`
	// 厂商
	Vendor string `json:"vendor,omitempty"`
	// CI类型ID
	CiTypeID int `json:"ci_type_id,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConfigurationItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case configurationitem.FieldID, configurationitem.FieldCiTypeID, configurationitem.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case configurationitem.FieldName, configurationitem.FieldDescription, configurationitem.FieldType, configurationitem.FieldStatus, configurationitem.FieldLocation, configurationitem.FieldSerialNumber, configurationitem.FieldModel, configurationitem.FieldVendor:
			values[i] = new(sql.NullString)
		case configurationitem.FieldCreatedAt, configurationitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConfigurationItem fields.
func (ci *ConfigurationItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configurationitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case configurationitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ci.Name = value.String
			}
		case configurationitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ci.Description = value.String
			}
		case configurationitem.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ci.Type = value.String
			}
		case configurationitem.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ci.Status = value.String
			}
		case configurationitem.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ci.Location = value.String
			}
		case configurationitem.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				ci.SerialNumber = value.String
			}
		case configurationitem.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				ci.Model = value.String
			}
		case configurationitem.FieldVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vendor", values[i])
			} else if value.Valid {
				ci.Vendor = value.String
			}
		case configurationitem.FieldCiTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ci_type_id", values[i])
			} else if value.Valid {
				ci.CiTypeID = int(value.Int64)
			}
		case configurationitem.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ci.TenantID = int(value.Int64)
			}
		case configurationitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ci.CreatedAt = value.Time
			}
		case configurationitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ci.UpdatedAt = value.Time
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConfigurationItem.
// This includes values selected through modifiers, order, etc.
func (ci *ConfigurationItem) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// Update returns a builder for updating this ConfigurationItem.
// Note that you need to call ConfigurationItem.Unwrap() before calling this method if this ConfigurationItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ConfigurationItem) Update() *ConfigurationItemUpdateOne {
	return NewConfigurationItemClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the ConfigurationItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ConfigurationItem) Unwrap() *ConfigurationItem {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConfigurationItem is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ConfigurationItem) String() string {
	var builder strings.Builder
	builder.WriteString("ConfigurationItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("name=")
	builder.WriteString(ci.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ci.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ci.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ci.Status)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(ci.Location)
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(ci.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(ci.Model)
	builder.WriteString(", ")
	builder.WriteString("vendor=")
	builder.WriteString(ci.Vendor)
	builder.WriteString(", ")
	builder.WriteString("ci_type_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CiTypeID))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ci.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ci.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConfigurationItems is a parsable slice of ConfigurationItem.
type ConfigurationItems []*ConfigurationItem
