// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/incident"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetDepartment sets the "department" field.
func (uu *UserUpdate) SetDepartment(s string) *UserUpdate {
	uu.mutation.SetDepartment(s)
	return uu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDepartment(s *string) *UserUpdate {
	if s != nil {
		uu.SetDepartment(*s)
	}
	return uu
}

// ClearDepartment clears the value of the "department" field.
func (uu *UserUpdate) ClearDepartment() *UserUpdate {
	uu.mutation.ClearDepartment()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetTenantID sets the "tenant_id" field.
func (uu *UserUpdate) SetTenantID(i int) *UserUpdate {
	uu.mutation.SetTenantID(i)
	return uu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantID(i *int) *UserUpdate {
	if i != nil {
		uu.SetTenantID(*i)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) SetTenant(t *Tenant) *UserUpdate {
	return uu.SetTenantID(t.ID)
}

// AddSubmittedTicketIDs adds the "submitted_tickets" edge to the Ticket entity by IDs.
func (uu *UserUpdate) AddSubmittedTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSubmittedTicketIDs(ids...)
	return uu
}

// AddSubmittedTickets adds the "submitted_tickets" edges to the Ticket entity.
func (uu *UserUpdate) AddSubmittedTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddSubmittedTicketIDs(ids...)
}

// AddAssignedTicketIDs adds the "assigned_tickets" edge to the Ticket entity by IDs.
func (uu *UserUpdate) AddAssignedTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAssignedTicketIDs(ids...)
	return uu
}

// AddAssignedTickets adds the "assigned_tickets" edges to the Ticket entity.
func (uu *UserUpdate) AddAssignedTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddAssignedTicketIDs(ids...)
}

// AddApprovalLogIDs adds the "approval_logs" edge to the ApprovalLog entity by IDs.
func (uu *UserUpdate) AddApprovalLogIDs(ids ...int) *UserUpdate {
	uu.mutation.AddApprovalLogIDs(ids...)
	return uu
}

// AddApprovalLogs adds the "approval_logs" edges to the ApprovalLog entity.
func (uu *UserUpdate) AddApprovalLogs(a ...*ApprovalLog) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddApprovalLogIDs(ids...)
}

// AddStatusLogIDs adds the "status_logs" edge to the StatusLog entity by IDs.
func (uu *UserUpdate) AddStatusLogIDs(ids ...int) *UserUpdate {
	uu.mutation.AddStatusLogIDs(ids...)
	return uu
}

// AddStatusLogs adds the "status_logs" edges to the StatusLog entity.
func (uu *UserUpdate) AddStatusLogs(s ...*StatusLog) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStatusLogIDs(ids...)
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by IDs.
func (uu *UserUpdate) AddServiceRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.AddServiceRequestIDs(ids...)
	return uu
}

// AddServiceRequests adds the "service_requests" edges to the ServiceRequest entity.
func (uu *UserUpdate) AddServiceRequests(s ...*ServiceRequest) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddServiceRequestIDs(ids...)
}

// AddReportedIncidentIDs adds the "reported_incidents" edge to the Incident entity by IDs.
func (uu *UserUpdate) AddReportedIncidentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddReportedIncidentIDs(ids...)
	return uu
}

// AddReportedIncidents adds the "reported_incidents" edges to the Incident entity.
func (uu *UserUpdate) AddReportedIncidents(i ...*Incident) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddReportedIncidentIDs(ids...)
}

// AddAssignedIncidentIDs adds the "assigned_incidents" edge to the Incident entity by IDs.
func (uu *UserUpdate) AddAssignedIncidentIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAssignedIncidentIDs(ids...)
	return uu
}

// AddAssignedIncidents adds the "assigned_incidents" edges to the Incident entity.
func (uu *UserUpdate) AddAssignedIncidents(i ...*Incident) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddAssignedIncidentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) ClearTenant() *UserUpdate {
	uu.mutation.ClearTenant()
	return uu
}

// ClearSubmittedTickets clears all "submitted_tickets" edges to the Ticket entity.
func (uu *UserUpdate) ClearSubmittedTickets() *UserUpdate {
	uu.mutation.ClearSubmittedTickets()
	return uu
}

// RemoveSubmittedTicketIDs removes the "submitted_tickets" edge to Ticket entities by IDs.
func (uu *UserUpdate) RemoveSubmittedTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSubmittedTicketIDs(ids...)
	return uu
}

// RemoveSubmittedTickets removes "submitted_tickets" edges to Ticket entities.
func (uu *UserUpdate) RemoveSubmittedTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveSubmittedTicketIDs(ids...)
}

// ClearAssignedTickets clears all "assigned_tickets" edges to the Ticket entity.
func (uu *UserUpdate) ClearAssignedTickets() *UserUpdate {
	uu.mutation.ClearAssignedTickets()
	return uu
}

// RemoveAssignedTicketIDs removes the "assigned_tickets" edge to Ticket entities by IDs.
func (uu *UserUpdate) RemoveAssignedTicketIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAssignedTicketIDs(ids...)
	return uu
}

// RemoveAssignedTickets removes "assigned_tickets" edges to Ticket entities.
func (uu *UserUpdate) RemoveAssignedTickets(t ...*Ticket) *UserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveAssignedTicketIDs(ids...)
}

// ClearApprovalLogs clears all "approval_logs" edges to the ApprovalLog entity.
func (uu *UserUpdate) ClearApprovalLogs() *UserUpdate {
	uu.mutation.ClearApprovalLogs()
	return uu
}

// RemoveApprovalLogIDs removes the "approval_logs" edge to ApprovalLog entities by IDs.
func (uu *UserUpdate) RemoveApprovalLogIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveApprovalLogIDs(ids...)
	return uu
}

// RemoveApprovalLogs removes "approval_logs" edges to ApprovalLog entities.
func (uu *UserUpdate) RemoveApprovalLogs(a ...*ApprovalLog) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveApprovalLogIDs(ids...)
}

// ClearStatusLogs clears all "status_logs" edges to the StatusLog entity.
func (uu *UserUpdate) ClearStatusLogs() *UserUpdate {
	uu.mutation.ClearStatusLogs()
	return uu
}

// RemoveStatusLogIDs removes the "status_logs" edge to StatusLog entities by IDs.
func (uu *UserUpdate) RemoveStatusLogIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveStatusLogIDs(ids...)
	return uu
}

// RemoveStatusLogs removes "status_logs" edges to StatusLog entities.
func (uu *UserUpdate) RemoveStatusLogs(s ...*StatusLog) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStatusLogIDs(ids...)
}

// ClearServiceRequests clears all "service_requests" edges to the ServiceRequest entity.
func (uu *UserUpdate) ClearServiceRequests() *UserUpdate {
	uu.mutation.ClearServiceRequests()
	return uu
}

// RemoveServiceRequestIDs removes the "service_requests" edge to ServiceRequest entities by IDs.
func (uu *UserUpdate) RemoveServiceRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveServiceRequestIDs(ids...)
	return uu
}

// RemoveServiceRequests removes "service_requests" edges to ServiceRequest entities.
func (uu *UserUpdate) RemoveServiceRequests(s ...*ServiceRequest) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveServiceRequestIDs(ids...)
}

// ClearReportedIncidents clears all "reported_incidents" edges to the Incident entity.
func (uu *UserUpdate) ClearReportedIncidents() *UserUpdate {
	uu.mutation.ClearReportedIncidents()
	return uu
}

// RemoveReportedIncidentIDs removes the "reported_incidents" edge to Incident entities by IDs.
func (uu *UserUpdate) RemoveReportedIncidentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveReportedIncidentIDs(ids...)
	return uu
}

// RemoveReportedIncidents removes "reported_incidents" edges to Incident entities.
func (uu *UserUpdate) RemoveReportedIncidents(i ...*Incident) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveReportedIncidentIDs(ids...)
}

// ClearAssignedIncidents clears all "assigned_incidents" edges to the Incident entity.
func (uu *UserUpdate) ClearAssignedIncidents() *UserUpdate {
	uu.mutation.ClearAssignedIncidents()
	return uu
}

// RemoveAssignedIncidentIDs removes the "assigned_incidents" edge to Incident entities by IDs.
func (uu *UserUpdate) RemoveAssignedIncidentIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAssignedIncidentIDs(ids...)
	return uu
}

// RemoveAssignedIncidents removes "assigned_incidents" edges to Incident entities.
func (uu *UserUpdate) RemoveAssignedIncidents(i ...*Incident) *UserUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveAssignedIncidentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uu.mutation.TenantID(); ok {
		if err := user.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "User.tenant_id": %w`, err)}
		}
	}
	if uu.mutation.TenantCleared() && len(uu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uu.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubmittedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubmittedTicketsIDs(); len(nodes) > 0 && !uu.mutation.SubmittedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubmittedTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedTicketsIDs(); len(nodes) > 0 && !uu.mutation.AssignedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApprovalLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApprovalLogsIDs(); len(nodes) > 0 && !uu.mutation.ApprovalLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApprovalLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StatusLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStatusLogsIDs(); len(nodes) > 0 && !uu.mutation.StatusLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StatusLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedServiceRequestsIDs(); len(nodes) > 0 && !uu.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ServiceRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReportedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReportedIncidentsIDs(); len(nodes) > 0 && !uu.mutation.ReportedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReportedIncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AssignedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAssignedIncidentsIDs(); len(nodes) > 0 && !uu.mutation.AssignedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AssignedIncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetDepartment sets the "department" field.
func (uuo *UserUpdateOne) SetDepartment(s string) *UserUpdateOne {
	uuo.mutation.SetDepartment(s)
	return uuo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDepartment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDepartment(*s)
	}
	return uuo
}

// ClearDepartment clears the value of the "department" field.
func (uuo *UserUpdateOne) ClearDepartment() *UserUpdateOne {
	uuo.mutation.ClearDepartment()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetTenantID sets the "tenant_id" field.
func (uuo *UserUpdateOne) SetTenantID(i int) *UserUpdateOne {
	uuo.mutation.SetTenantID(i)
	return uuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetTenantID(*i)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) SetTenant(t *Tenant) *UserUpdateOne {
	return uuo.SetTenantID(t.ID)
}

// AddSubmittedTicketIDs adds the "submitted_tickets" edge to the Ticket entity by IDs.
func (uuo *UserUpdateOne) AddSubmittedTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSubmittedTicketIDs(ids...)
	return uuo
}

// AddSubmittedTickets adds the "submitted_tickets" edges to the Ticket entity.
func (uuo *UserUpdateOne) AddSubmittedTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddSubmittedTicketIDs(ids...)
}

// AddAssignedTicketIDs adds the "assigned_tickets" edge to the Ticket entity by IDs.
func (uuo *UserUpdateOne) AddAssignedTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAssignedTicketIDs(ids...)
	return uuo
}

// AddAssignedTickets adds the "assigned_tickets" edges to the Ticket entity.
func (uuo *UserUpdateOne) AddAssignedTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddAssignedTicketIDs(ids...)
}

// AddApprovalLogIDs adds the "approval_logs" edge to the ApprovalLog entity by IDs.
func (uuo *UserUpdateOne) AddApprovalLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddApprovalLogIDs(ids...)
	return uuo
}

// AddApprovalLogs adds the "approval_logs" edges to the ApprovalLog entity.
func (uuo *UserUpdateOne) AddApprovalLogs(a ...*ApprovalLog) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddApprovalLogIDs(ids...)
}

// AddStatusLogIDs adds the "status_logs" edge to the StatusLog entity by IDs.
func (uuo *UserUpdateOne) AddStatusLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddStatusLogIDs(ids...)
	return uuo
}

// AddStatusLogs adds the "status_logs" edges to the StatusLog entity.
func (uuo *UserUpdateOne) AddStatusLogs(s ...*StatusLog) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStatusLogIDs(ids...)
}

// AddServiceRequestIDs adds the "service_requests" edge to the ServiceRequest entity by IDs.
func (uuo *UserUpdateOne) AddServiceRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddServiceRequestIDs(ids...)
	return uuo
}

// AddServiceRequests adds the "service_requests" edges to the ServiceRequest entity.
func (uuo *UserUpdateOne) AddServiceRequests(s ...*ServiceRequest) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddServiceRequestIDs(ids...)
}

// AddReportedIncidentIDs adds the "reported_incidents" edge to the Incident entity by IDs.
func (uuo *UserUpdateOne) AddReportedIncidentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddReportedIncidentIDs(ids...)
	return uuo
}

// AddReportedIncidents adds the "reported_incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) AddReportedIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddReportedIncidentIDs(ids...)
}

// AddAssignedIncidentIDs adds the "assigned_incidents" edge to the Incident entity by IDs.
func (uuo *UserUpdateOne) AddAssignedIncidentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAssignedIncidentIDs(ids...)
	return uuo
}

// AddAssignedIncidents adds the "assigned_incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) AddAssignedIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddAssignedIncidentIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) ClearTenant() *UserUpdateOne {
	uuo.mutation.ClearTenant()
	return uuo
}

// ClearSubmittedTickets clears all "submitted_tickets" edges to the Ticket entity.
func (uuo *UserUpdateOne) ClearSubmittedTickets() *UserUpdateOne {
	uuo.mutation.ClearSubmittedTickets()
	return uuo
}

// RemoveSubmittedTicketIDs removes the "submitted_tickets" edge to Ticket entities by IDs.
func (uuo *UserUpdateOne) RemoveSubmittedTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSubmittedTicketIDs(ids...)
	return uuo
}

// RemoveSubmittedTickets removes "submitted_tickets" edges to Ticket entities.
func (uuo *UserUpdateOne) RemoveSubmittedTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveSubmittedTicketIDs(ids...)
}

// ClearAssignedTickets clears all "assigned_tickets" edges to the Ticket entity.
func (uuo *UserUpdateOne) ClearAssignedTickets() *UserUpdateOne {
	uuo.mutation.ClearAssignedTickets()
	return uuo
}

// RemoveAssignedTicketIDs removes the "assigned_tickets" edge to Ticket entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedTicketIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAssignedTicketIDs(ids...)
	return uuo
}

// RemoveAssignedTickets removes "assigned_tickets" edges to Ticket entities.
func (uuo *UserUpdateOne) RemoveAssignedTickets(t ...*Ticket) *UserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveAssignedTicketIDs(ids...)
}

// ClearApprovalLogs clears all "approval_logs" edges to the ApprovalLog entity.
func (uuo *UserUpdateOne) ClearApprovalLogs() *UserUpdateOne {
	uuo.mutation.ClearApprovalLogs()
	return uuo
}

// RemoveApprovalLogIDs removes the "approval_logs" edge to ApprovalLog entities by IDs.
func (uuo *UserUpdateOne) RemoveApprovalLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveApprovalLogIDs(ids...)
	return uuo
}

// RemoveApprovalLogs removes "approval_logs" edges to ApprovalLog entities.
func (uuo *UserUpdateOne) RemoveApprovalLogs(a ...*ApprovalLog) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveApprovalLogIDs(ids...)
}

// ClearStatusLogs clears all "status_logs" edges to the StatusLog entity.
func (uuo *UserUpdateOne) ClearStatusLogs() *UserUpdateOne {
	uuo.mutation.ClearStatusLogs()
	return uuo
}

// RemoveStatusLogIDs removes the "status_logs" edge to StatusLog entities by IDs.
func (uuo *UserUpdateOne) RemoveStatusLogIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveStatusLogIDs(ids...)
	return uuo
}

// RemoveStatusLogs removes "status_logs" edges to StatusLog entities.
func (uuo *UserUpdateOne) RemoveStatusLogs(s ...*StatusLog) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStatusLogIDs(ids...)
}

// ClearServiceRequests clears all "service_requests" edges to the ServiceRequest entity.
func (uuo *UserUpdateOne) ClearServiceRequests() *UserUpdateOne {
	uuo.mutation.ClearServiceRequests()
	return uuo
}

// RemoveServiceRequestIDs removes the "service_requests" edge to ServiceRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveServiceRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveServiceRequestIDs(ids...)
	return uuo
}

// RemoveServiceRequests removes "service_requests" edges to ServiceRequest entities.
func (uuo *UserUpdateOne) RemoveServiceRequests(s ...*ServiceRequest) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveServiceRequestIDs(ids...)
}

// ClearReportedIncidents clears all "reported_incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) ClearReportedIncidents() *UserUpdateOne {
	uuo.mutation.ClearReportedIncidents()
	return uuo
}

// RemoveReportedIncidentIDs removes the "reported_incidents" edge to Incident entities by IDs.
func (uuo *UserUpdateOne) RemoveReportedIncidentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveReportedIncidentIDs(ids...)
	return uuo
}

// RemoveReportedIncidents removes "reported_incidents" edges to Incident entities.
func (uuo *UserUpdateOne) RemoveReportedIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveReportedIncidentIDs(ids...)
}

// ClearAssignedIncidents clears all "assigned_incidents" edges to the Incident entity.
func (uuo *UserUpdateOne) ClearAssignedIncidents() *UserUpdateOne {
	uuo.mutation.ClearAssignedIncidents()
	return uuo
}

// RemoveAssignedIncidentIDs removes the "assigned_incidents" edge to Incident entities by IDs.
func (uuo *UserUpdateOne) RemoveAssignedIncidentIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAssignedIncidentIDs(ids...)
	return uuo
}

// RemoveAssignedIncidents removes "assigned_incidents" edges to Incident entities.
func (uuo *UserUpdateOne) RemoveAssignedIncidents(i ...*Incident) *UserUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveAssignedIncidentIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Department(); ok {
		if err := user.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "User.department": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.TenantID(); ok {
		if err := user.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "User.tenant_id": %w`, err)}
		}
	}
	if uuo.mutation.TenantCleared() && len(uuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Department(); ok {
		_spec.SetField(user.FieldDepartment, field.TypeString, value)
	}
	if uuo.mutation.DepartmentCleared() {
		_spec.ClearField(user.FieldDepartment, field.TypeString)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubmittedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubmittedTicketsIDs(); len(nodes) > 0 && !uuo.mutation.SubmittedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubmittedTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmittedTicketsTable,
			Columns: []string{user.SubmittedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedTicketsIDs(); len(nodes) > 0 && !uuo.mutation.AssignedTicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedTicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedTicketsTable,
			Columns: []string{user.AssignedTicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApprovalLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApprovalLogsIDs(); len(nodes) > 0 && !uuo.mutation.ApprovalLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApprovalLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovalLogsTable,
			Columns: []string{user.ApprovalLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StatusLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStatusLogsIDs(); len(nodes) > 0 && !uuo.mutation.StatusLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StatusLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StatusLogsTable,
			Columns: []string{user.StatusLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statuslog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedServiceRequestsIDs(); len(nodes) > 0 && !uuo.mutation.ServiceRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ServiceRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ServiceRequestsTable,
			Columns: []string{user.ServiceRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReportedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReportedIncidentsIDs(); len(nodes) > 0 && !uuo.mutation.ReportedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReportedIncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReportedIncidentsTable,
			Columns: []string{user.ReportedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AssignedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAssignedIncidentsIDs(); len(nodes) > 0 && !uuo.mutation.AssignedIncidentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AssignedIncidentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AssignedIncidentsTable,
			Columns: []string{user.AssignedIncidentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
