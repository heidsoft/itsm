// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIChangeRecordUpdate is the builder for updating CIChangeRecord entities.
type CIChangeRecordUpdate struct {
	config
	hooks    []Hook
	mutation *CIChangeRecordMutation
}

// Where appends a list predicates to the CIChangeRecordUpdate builder.
func (ccru *CIChangeRecordUpdate) Where(ps ...predicate.CIChangeRecord) *CIChangeRecordUpdate {
	ccru.mutation.Where(ps...)
	return ccru
}

// SetCiID sets the "ci_id" field.
func (ccru *CIChangeRecordUpdate) SetCiID(i int) *CIChangeRecordUpdate {
	ccru.mutation.SetCiID(i)
	return ccru
}

// SetNillableCiID sets the "ci_id" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableCiID(i *int) *CIChangeRecordUpdate {
	if i != nil {
		ccru.SetCiID(*i)
	}
	return ccru
}

// SetChangeType sets the "change_type" field.
func (ccru *CIChangeRecordUpdate) SetChangeType(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetChangeType(s)
	return ccru
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableChangeType(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetChangeType(*s)
	}
	return ccru
}

// SetOldValues sets the "old_values" field.
func (ccru *CIChangeRecordUpdate) SetOldValues(m map[string]interface{}) *CIChangeRecordUpdate {
	ccru.mutation.SetOldValues(m)
	return ccru
}

// ClearOldValues clears the value of the "old_values" field.
func (ccru *CIChangeRecordUpdate) ClearOldValues() *CIChangeRecordUpdate {
	ccru.mutation.ClearOldValues()
	return ccru
}

// SetNewValues sets the "new_values" field.
func (ccru *CIChangeRecordUpdate) SetNewValues(m map[string]interface{}) *CIChangeRecordUpdate {
	ccru.mutation.SetNewValues(m)
	return ccru
}

// ClearNewValues clears the value of the "new_values" field.
func (ccru *CIChangeRecordUpdate) ClearNewValues() *CIChangeRecordUpdate {
	ccru.mutation.ClearNewValues()
	return ccru
}

// SetChangedBy sets the "changed_by" field.
func (ccru *CIChangeRecordUpdate) SetChangedBy(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetChangedBy(s)
	return ccru
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableChangedBy(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetChangedBy(*s)
	}
	return ccru
}

// SetChangeSource sets the "change_source" field.
func (ccru *CIChangeRecordUpdate) SetChangeSource(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetChangeSource(s)
	return ccru
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableChangeSource(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetChangeSource(*s)
	}
	return ccru
}

// SetReason sets the "reason" field.
func (ccru *CIChangeRecordUpdate) SetReason(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetReason(s)
	return ccru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableReason(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetReason(*s)
	}
	return ccru
}

// ClearReason clears the value of the "reason" field.
func (ccru *CIChangeRecordUpdate) ClearReason() *CIChangeRecordUpdate {
	ccru.mutation.ClearReason()
	return ccru
}

// SetVersionBefore sets the "version_before" field.
func (ccru *CIChangeRecordUpdate) SetVersionBefore(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetVersionBefore(s)
	return ccru
}

// SetNillableVersionBefore sets the "version_before" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableVersionBefore(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetVersionBefore(*s)
	}
	return ccru
}

// ClearVersionBefore clears the value of the "version_before" field.
func (ccru *CIChangeRecordUpdate) ClearVersionBefore() *CIChangeRecordUpdate {
	ccru.mutation.ClearVersionBefore()
	return ccru
}

// SetVersionAfter sets the "version_after" field.
func (ccru *CIChangeRecordUpdate) SetVersionAfter(s string) *CIChangeRecordUpdate {
	ccru.mutation.SetVersionAfter(s)
	return ccru
}

// SetNillableVersionAfter sets the "version_after" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableVersionAfter(s *string) *CIChangeRecordUpdate {
	if s != nil {
		ccru.SetVersionAfter(*s)
	}
	return ccru
}

// ClearVersionAfter clears the value of the "version_after" field.
func (ccru *CIChangeRecordUpdate) ClearVersionAfter() *CIChangeRecordUpdate {
	ccru.mutation.ClearVersionAfter()
	return ccru
}

// SetTenantID sets the "tenant_id" field.
func (ccru *CIChangeRecordUpdate) SetTenantID(i int) *CIChangeRecordUpdate {
	ccru.mutation.SetTenantID(i)
	return ccru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableTenantID(i *int) *CIChangeRecordUpdate {
	if i != nil {
		ccru.SetTenantID(*i)
	}
	return ccru
}

// SetCreatedAt sets the "created_at" field.
func (ccru *CIChangeRecordUpdate) SetCreatedAt(t time.Time) *CIChangeRecordUpdate {
	ccru.mutation.SetCreatedAt(t)
	return ccru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccru *CIChangeRecordUpdate) SetNillableCreatedAt(t *time.Time) *CIChangeRecordUpdate {
	if t != nil {
		ccru.SetCreatedAt(*t)
	}
	return ccru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccru *CIChangeRecordUpdate) SetTenant(t *Tenant) *CIChangeRecordUpdate {
	return ccru.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (ccru *CIChangeRecordUpdate) SetConfigurationItemID(id int) *CIChangeRecordUpdate {
	ccru.mutation.SetConfigurationItemID(id)
	return ccru
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (ccru *CIChangeRecordUpdate) SetConfigurationItem(c *ConfigurationItem) *CIChangeRecordUpdate {
	return ccru.SetConfigurationItemID(c.ID)
}

// Mutation returns the CIChangeRecordMutation object of the builder.
func (ccru *CIChangeRecordUpdate) Mutation() *CIChangeRecordMutation {
	return ccru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ccru *CIChangeRecordUpdate) ClearTenant() *CIChangeRecordUpdate {
	ccru.mutation.ClearTenant()
	return ccru
}

// ClearConfigurationItem clears the "configuration_item" edge to the ConfigurationItem entity.
func (ccru *CIChangeRecordUpdate) ClearConfigurationItem() *CIChangeRecordUpdate {
	ccru.mutation.ClearConfigurationItem()
	return ccru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccru *CIChangeRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccru.sqlSave, ccru.mutation, ccru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccru *CIChangeRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ccru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccru *CIChangeRecordUpdate) Exec(ctx context.Context) error {
	_, err := ccru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccru *CIChangeRecordUpdate) ExecX(ctx context.Context) {
	if err := ccru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccru *CIChangeRecordUpdate) check() error {
	if v, ok := ccru.mutation.ChangeType(); ok {
		if err := cichangerecord.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.change_type": %w`, err)}
		}
	}
	if v, ok := ccru.mutation.ChangedBy(); ok {
		if err := cichangerecord.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.changed_by": %w`, err)}
		}
	}
	if ccru.mutation.TenantCleared() && len(ccru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIChangeRecord.tenant"`)
	}
	if ccru.mutation.ConfigurationItemCleared() && len(ccru.mutation.ConfigurationItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIChangeRecord.configuration_item"`)
	}
	return nil
}

func (ccru *CIChangeRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cichangerecord.Table, cichangerecord.Columns, sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt))
	if ps := ccru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccru.mutation.ChangeType(); ok {
		_spec.SetField(cichangerecord.FieldChangeType, field.TypeString, value)
	}
	if value, ok := ccru.mutation.OldValues(); ok {
		_spec.SetField(cichangerecord.FieldOldValues, field.TypeJSON, value)
	}
	if ccru.mutation.OldValuesCleared() {
		_spec.ClearField(cichangerecord.FieldOldValues, field.TypeJSON)
	}
	if value, ok := ccru.mutation.NewValues(); ok {
		_spec.SetField(cichangerecord.FieldNewValues, field.TypeJSON, value)
	}
	if ccru.mutation.NewValuesCleared() {
		_spec.ClearField(cichangerecord.FieldNewValues, field.TypeJSON)
	}
	if value, ok := ccru.mutation.ChangedBy(); ok {
		_spec.SetField(cichangerecord.FieldChangedBy, field.TypeString, value)
	}
	if value, ok := ccru.mutation.ChangeSource(); ok {
		_spec.SetField(cichangerecord.FieldChangeSource, field.TypeString, value)
	}
	if value, ok := ccru.mutation.Reason(); ok {
		_spec.SetField(cichangerecord.FieldReason, field.TypeString, value)
	}
	if ccru.mutation.ReasonCleared() {
		_spec.ClearField(cichangerecord.FieldReason, field.TypeString)
	}
	if value, ok := ccru.mutation.VersionBefore(); ok {
		_spec.SetField(cichangerecord.FieldVersionBefore, field.TypeString, value)
	}
	if ccru.mutation.VersionBeforeCleared() {
		_spec.ClearField(cichangerecord.FieldVersionBefore, field.TypeString)
	}
	if value, ok := ccru.mutation.VersionAfter(); ok {
		_spec.SetField(cichangerecord.FieldVersionAfter, field.TypeString, value)
	}
	if ccru.mutation.VersionAfterCleared() {
		_spec.ClearField(cichangerecord.FieldVersionAfter, field.TypeString)
	}
	if value, ok := ccru.mutation.CreatedAt(); ok {
		_spec.SetField(cichangerecord.FieldCreatedAt, field.TypeTime, value)
	}
	if ccru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.TenantTable,
			Columns: []string{cichangerecord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.TenantTable,
			Columns: []string{cichangerecord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccru.mutation.ConfigurationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.ConfigurationItemTable,
			Columns: []string{cichangerecord.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccru.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.ConfigurationItemTable,
			Columns: []string{cichangerecord.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cichangerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccru.mutation.done = true
	return n, nil
}

// CIChangeRecordUpdateOne is the builder for updating a single CIChangeRecord entity.
type CIChangeRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CIChangeRecordMutation
}

// SetCiID sets the "ci_id" field.
func (ccruo *CIChangeRecordUpdateOne) SetCiID(i int) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetCiID(i)
	return ccruo
}

// SetNillableCiID sets the "ci_id" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableCiID(i *int) *CIChangeRecordUpdateOne {
	if i != nil {
		ccruo.SetCiID(*i)
	}
	return ccruo
}

// SetChangeType sets the "change_type" field.
func (ccruo *CIChangeRecordUpdateOne) SetChangeType(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetChangeType(s)
	return ccruo
}

// SetNillableChangeType sets the "change_type" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableChangeType(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetChangeType(*s)
	}
	return ccruo
}

// SetOldValues sets the "old_values" field.
func (ccruo *CIChangeRecordUpdateOne) SetOldValues(m map[string]interface{}) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetOldValues(m)
	return ccruo
}

// ClearOldValues clears the value of the "old_values" field.
func (ccruo *CIChangeRecordUpdateOne) ClearOldValues() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearOldValues()
	return ccruo
}

// SetNewValues sets the "new_values" field.
func (ccruo *CIChangeRecordUpdateOne) SetNewValues(m map[string]interface{}) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetNewValues(m)
	return ccruo
}

// ClearNewValues clears the value of the "new_values" field.
func (ccruo *CIChangeRecordUpdateOne) ClearNewValues() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearNewValues()
	return ccruo
}

// SetChangedBy sets the "changed_by" field.
func (ccruo *CIChangeRecordUpdateOne) SetChangedBy(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetChangedBy(s)
	return ccruo
}

// SetNillableChangedBy sets the "changed_by" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableChangedBy(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetChangedBy(*s)
	}
	return ccruo
}

// SetChangeSource sets the "change_source" field.
func (ccruo *CIChangeRecordUpdateOne) SetChangeSource(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetChangeSource(s)
	return ccruo
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableChangeSource(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetChangeSource(*s)
	}
	return ccruo
}

// SetReason sets the "reason" field.
func (ccruo *CIChangeRecordUpdateOne) SetReason(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetReason(s)
	return ccruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableReason(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetReason(*s)
	}
	return ccruo
}

// ClearReason clears the value of the "reason" field.
func (ccruo *CIChangeRecordUpdateOne) ClearReason() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearReason()
	return ccruo
}

// SetVersionBefore sets the "version_before" field.
func (ccruo *CIChangeRecordUpdateOne) SetVersionBefore(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetVersionBefore(s)
	return ccruo
}

// SetNillableVersionBefore sets the "version_before" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableVersionBefore(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetVersionBefore(*s)
	}
	return ccruo
}

// ClearVersionBefore clears the value of the "version_before" field.
func (ccruo *CIChangeRecordUpdateOne) ClearVersionBefore() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearVersionBefore()
	return ccruo
}

// SetVersionAfter sets the "version_after" field.
func (ccruo *CIChangeRecordUpdateOne) SetVersionAfter(s string) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetVersionAfter(s)
	return ccruo
}

// SetNillableVersionAfter sets the "version_after" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableVersionAfter(s *string) *CIChangeRecordUpdateOne {
	if s != nil {
		ccruo.SetVersionAfter(*s)
	}
	return ccruo
}

// ClearVersionAfter clears the value of the "version_after" field.
func (ccruo *CIChangeRecordUpdateOne) ClearVersionAfter() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearVersionAfter()
	return ccruo
}

// SetTenantID sets the "tenant_id" field.
func (ccruo *CIChangeRecordUpdateOne) SetTenantID(i int) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetTenantID(i)
	return ccruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableTenantID(i *int) *CIChangeRecordUpdateOne {
	if i != nil {
		ccruo.SetTenantID(*i)
	}
	return ccruo
}

// SetCreatedAt sets the "created_at" field.
func (ccruo *CIChangeRecordUpdateOne) SetCreatedAt(t time.Time) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetCreatedAt(t)
	return ccruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccruo *CIChangeRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *CIChangeRecordUpdateOne {
	if t != nil {
		ccruo.SetCreatedAt(*t)
	}
	return ccruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccruo *CIChangeRecordUpdateOne) SetTenant(t *Tenant) *CIChangeRecordUpdateOne {
	return ccruo.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (ccruo *CIChangeRecordUpdateOne) SetConfigurationItemID(id int) *CIChangeRecordUpdateOne {
	ccruo.mutation.SetConfigurationItemID(id)
	return ccruo
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (ccruo *CIChangeRecordUpdateOne) SetConfigurationItem(c *ConfigurationItem) *CIChangeRecordUpdateOne {
	return ccruo.SetConfigurationItemID(c.ID)
}

// Mutation returns the CIChangeRecordMutation object of the builder.
func (ccruo *CIChangeRecordUpdateOne) Mutation() *CIChangeRecordMutation {
	return ccruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ccruo *CIChangeRecordUpdateOne) ClearTenant() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearTenant()
	return ccruo
}

// ClearConfigurationItem clears the "configuration_item" edge to the ConfigurationItem entity.
func (ccruo *CIChangeRecordUpdateOne) ClearConfigurationItem() *CIChangeRecordUpdateOne {
	ccruo.mutation.ClearConfigurationItem()
	return ccruo
}

// Where appends a list predicates to the CIChangeRecordUpdate builder.
func (ccruo *CIChangeRecordUpdateOne) Where(ps ...predicate.CIChangeRecord) *CIChangeRecordUpdateOne {
	ccruo.mutation.Where(ps...)
	return ccruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccruo *CIChangeRecordUpdateOne) Select(field string, fields ...string) *CIChangeRecordUpdateOne {
	ccruo.fields = append([]string{field}, fields...)
	return ccruo
}

// Save executes the query and returns the updated CIChangeRecord entity.
func (ccruo *CIChangeRecordUpdateOne) Save(ctx context.Context) (*CIChangeRecord, error) {
	return withHooks(ctx, ccruo.sqlSave, ccruo.mutation, ccruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccruo *CIChangeRecordUpdateOne) SaveX(ctx context.Context) *CIChangeRecord {
	node, err := ccruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccruo *CIChangeRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ccruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccruo *CIChangeRecordUpdateOne) ExecX(ctx context.Context) {
	if err := ccruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccruo *CIChangeRecordUpdateOne) check() error {
	if v, ok := ccruo.mutation.ChangeType(); ok {
		if err := cichangerecord.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.change_type": %w`, err)}
		}
	}
	if v, ok := ccruo.mutation.ChangedBy(); ok {
		if err := cichangerecord.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.changed_by": %w`, err)}
		}
	}
	if ccruo.mutation.TenantCleared() && len(ccruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIChangeRecord.tenant"`)
	}
	if ccruo.mutation.ConfigurationItemCleared() && len(ccruo.mutation.ConfigurationItemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIChangeRecord.configuration_item"`)
	}
	return nil
}

func (ccruo *CIChangeRecordUpdateOne) sqlSave(ctx context.Context) (_node *CIChangeRecord, err error) {
	if err := ccruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cichangerecord.Table, cichangerecord.Columns, sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt))
	id, ok := ccruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIChangeRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cichangerecord.FieldID)
		for _, f := range fields {
			if !cichangerecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cichangerecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccruo.mutation.ChangeType(); ok {
		_spec.SetField(cichangerecord.FieldChangeType, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.OldValues(); ok {
		_spec.SetField(cichangerecord.FieldOldValues, field.TypeJSON, value)
	}
	if ccruo.mutation.OldValuesCleared() {
		_spec.ClearField(cichangerecord.FieldOldValues, field.TypeJSON)
	}
	if value, ok := ccruo.mutation.NewValues(); ok {
		_spec.SetField(cichangerecord.FieldNewValues, field.TypeJSON, value)
	}
	if ccruo.mutation.NewValuesCleared() {
		_spec.ClearField(cichangerecord.FieldNewValues, field.TypeJSON)
	}
	if value, ok := ccruo.mutation.ChangedBy(); ok {
		_spec.SetField(cichangerecord.FieldChangedBy, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.ChangeSource(); ok {
		_spec.SetField(cichangerecord.FieldChangeSource, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.Reason(); ok {
		_spec.SetField(cichangerecord.FieldReason, field.TypeString, value)
	}
	if ccruo.mutation.ReasonCleared() {
		_spec.ClearField(cichangerecord.FieldReason, field.TypeString)
	}
	if value, ok := ccruo.mutation.VersionBefore(); ok {
		_spec.SetField(cichangerecord.FieldVersionBefore, field.TypeString, value)
	}
	if ccruo.mutation.VersionBeforeCleared() {
		_spec.ClearField(cichangerecord.FieldVersionBefore, field.TypeString)
	}
	if value, ok := ccruo.mutation.VersionAfter(); ok {
		_spec.SetField(cichangerecord.FieldVersionAfter, field.TypeString, value)
	}
	if ccruo.mutation.VersionAfterCleared() {
		_spec.ClearField(cichangerecord.FieldVersionAfter, field.TypeString)
	}
	if value, ok := ccruo.mutation.CreatedAt(); ok {
		_spec.SetField(cichangerecord.FieldCreatedAt, field.TypeTime, value)
	}
	if ccruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.TenantTable,
			Columns: []string{cichangerecord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.TenantTable,
			Columns: []string{cichangerecord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccruo.mutation.ConfigurationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.ConfigurationItemTable,
			Columns: []string{cichangerecord.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccruo.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.ConfigurationItemTable,
			Columns: []string{cichangerecord.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CIChangeRecord{config: ccruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cichangerecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccruo.mutation.done = true
	return _node, nil
}
