// Code generated by ent, DO NOT EDIT.

package statuslog

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLTE(FieldID, id))
}

// TicketID applies equality check predicate on the "ticket_id" field. It's identical to TicketIDEQ.
func TicketID(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldTicketID, v))
}

// FromStatus applies equality check predicate on the "from_status" field. It's identical to FromStatusEQ.
func FromStatus(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldFromStatus, v))
}

// ToStatus applies equality check predicate on the "to_status" field. It's identical to ToStatusEQ.
func ToStatus(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldToStatus, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldUserID, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldReason, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldCreatedAt, v))
}

// TicketIDEQ applies the EQ predicate on the "ticket_id" field.
func TicketIDEQ(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldTicketID, v))
}

// TicketIDNEQ applies the NEQ predicate on the "ticket_id" field.
func TicketIDNEQ(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldTicketID, v))
}

// TicketIDIn applies the In predicate on the "ticket_id" field.
func TicketIDIn(vs ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldTicketID, vs...))
}

// TicketIDNotIn applies the NotIn predicate on the "ticket_id" field.
func TicketIDNotIn(vs ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldTicketID, vs...))
}

// FromStatusEQ applies the EQ predicate on the "from_status" field.
func FromStatusEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldFromStatus, v))
}

// FromStatusNEQ applies the NEQ predicate on the "from_status" field.
func FromStatusNEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldFromStatus, v))
}

// FromStatusIn applies the In predicate on the "from_status" field.
func FromStatusIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldFromStatus, vs...))
}

// FromStatusNotIn applies the NotIn predicate on the "from_status" field.
func FromStatusNotIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldFromStatus, vs...))
}

// FromStatusGT applies the GT predicate on the "from_status" field.
func FromStatusGT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGT(FieldFromStatus, v))
}

// FromStatusGTE applies the GTE predicate on the "from_status" field.
func FromStatusGTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGTE(FieldFromStatus, v))
}

// FromStatusLT applies the LT predicate on the "from_status" field.
func FromStatusLT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLT(FieldFromStatus, v))
}

// FromStatusLTE applies the LTE predicate on the "from_status" field.
func FromStatusLTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLTE(FieldFromStatus, v))
}

// FromStatusContains applies the Contains predicate on the "from_status" field.
func FromStatusContains(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContains(FieldFromStatus, v))
}

// FromStatusHasPrefix applies the HasPrefix predicate on the "from_status" field.
func FromStatusHasPrefix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasPrefix(FieldFromStatus, v))
}

// FromStatusHasSuffix applies the HasSuffix predicate on the "from_status" field.
func FromStatusHasSuffix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasSuffix(FieldFromStatus, v))
}

// FromStatusEqualFold applies the EqualFold predicate on the "from_status" field.
func FromStatusEqualFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEqualFold(FieldFromStatus, v))
}

// FromStatusContainsFold applies the ContainsFold predicate on the "from_status" field.
func FromStatusContainsFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContainsFold(FieldFromStatus, v))
}

// ToStatusEQ applies the EQ predicate on the "to_status" field.
func ToStatusEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldToStatus, v))
}

// ToStatusNEQ applies the NEQ predicate on the "to_status" field.
func ToStatusNEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldToStatus, v))
}

// ToStatusIn applies the In predicate on the "to_status" field.
func ToStatusIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldToStatus, vs...))
}

// ToStatusNotIn applies the NotIn predicate on the "to_status" field.
func ToStatusNotIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldToStatus, vs...))
}

// ToStatusGT applies the GT predicate on the "to_status" field.
func ToStatusGT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGT(FieldToStatus, v))
}

// ToStatusGTE applies the GTE predicate on the "to_status" field.
func ToStatusGTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGTE(FieldToStatus, v))
}

// ToStatusLT applies the LT predicate on the "to_status" field.
func ToStatusLT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLT(FieldToStatus, v))
}

// ToStatusLTE applies the LTE predicate on the "to_status" field.
func ToStatusLTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLTE(FieldToStatus, v))
}

// ToStatusContains applies the Contains predicate on the "to_status" field.
func ToStatusContains(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContains(FieldToStatus, v))
}

// ToStatusHasPrefix applies the HasPrefix predicate on the "to_status" field.
func ToStatusHasPrefix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasPrefix(FieldToStatus, v))
}

// ToStatusHasSuffix applies the HasSuffix predicate on the "to_status" field.
func ToStatusHasSuffix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasSuffix(FieldToStatus, v))
}

// ToStatusEqualFold applies the EqualFold predicate on the "to_status" field.
func ToStatusEqualFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEqualFold(FieldToStatus, v))
}

// ToStatusContainsFold applies the ContainsFold predicate on the "to_status" field.
func ToStatusContainsFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContainsFold(FieldToStatus, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldUserID, vs...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldContainsFold(FieldReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StatusLog {
	return predicate.StatusLog(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTicket applies the HasEdge predicate on the "ticket" edge.
func HasTicket() predicate.StatusLog {
	return predicate.StatusLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketWith applies the HasEdge predicate on the "ticket" edge with a given conditions (other predicates).
func HasTicketWith(preds ...predicate.Ticket) predicate.StatusLog {
	return predicate.StatusLog(func(s *sql.Selector) {
		step := newTicketStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.StatusLog {
	return predicate.StatusLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.StatusLog {
	return predicate.StatusLog(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StatusLog) predicate.StatusLog {
	return predicate.StatusLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StatusLog) predicate.StatusLog {
	return predicate.StatusLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StatusLog) predicate.StatusLog {
	return predicate.StatusLog(sql.NotPredicates(p))
}
