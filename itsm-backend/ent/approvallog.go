// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApprovalLog is the model entity for the ApprovalLog schema.
type ApprovalLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 审批人ID
	ApproverID int `json:"approver_id,omitempty"`
	// 审批意见
	Comment string `json:"comment,omitempty"`
	// 审批状态
	Status approvallog.Status `json:"status,omitempty"`
	// 所属工单ID
	TicketID int `json:"ticket_id,omitempty"`
	// 审批步骤顺序
	StepOrder int `json:"step_order,omitempty"`
	// 审批步骤名称
	StepName string `json:"step_name,omitempty"`
	// 审批元数据
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// 审批时间
	ApprovedAt *time.Time `json:"approved_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApprovalLogQuery when eager-loading is set.
	Edges        ApprovalLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ApprovalLogEdges holds the relations/edges for other nodes in the graph.
type ApprovalLogEdges struct {
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// Ticket holds the value of the ticket edge.
	Ticket *Ticket `json:"ticket,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalLogEdges) ApproverOrErr() (*User, error) {
	if e.Approver != nil {
		return e.Approver, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApprovalLogEdges) TicketOrErr() (*Ticket, error) {
	if e.Ticket != nil {
		return e.Ticket, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: ticket.Label}
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApprovalLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approvallog.FieldMetadata:
			values[i] = new([]byte)
		case approvallog.FieldID, approvallog.FieldApproverID, approvallog.FieldTicketID, approvallog.FieldStepOrder:
			values[i] = new(sql.NullInt64)
		case approvallog.FieldComment, approvallog.FieldStatus, approvallog.FieldStepName:
			values[i] = new(sql.NullString)
		case approvallog.FieldApprovedAt, approvallog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApprovalLog fields.
func (al *ApprovalLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approvallog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case approvallog.FieldApproverID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				al.ApproverID = int(value.Int64)
			}
		case approvallog.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				al.Comment = value.String
			}
		case approvallog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				al.Status = approvallog.Status(value.String)
			}
		case approvallog.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				al.TicketID = int(value.Int64)
			}
		case approvallog.FieldStepOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_order", values[i])
			} else if value.Valid {
				al.StepOrder = int(value.Int64)
			}
		case approvallog.FieldStepName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_name", values[i])
			} else if value.Valid {
				al.StepName = value.String
			}
		case approvallog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case approvallog.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_at", values[i])
			} else if value.Valid {
				al.ApprovedAt = new(time.Time)
				*al.ApprovedAt = value.Time
			}
		case approvallog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApprovalLog.
// This includes values selected through modifiers, order, etc.
func (al *ApprovalLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryApprover queries the "approver" edge of the ApprovalLog entity.
func (al *ApprovalLog) QueryApprover() *UserQuery {
	return NewApprovalLogClient(al.config).QueryApprover(al)
}

// QueryTicket queries the "ticket" edge of the ApprovalLog entity.
func (al *ApprovalLog) QueryTicket() *TicketQuery {
	return NewApprovalLogClient(al.config).QueryTicket(al)
}

// Update returns a builder for updating this ApprovalLog.
// Note that you need to call ApprovalLog.Unwrap() before calling this method if this ApprovalLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *ApprovalLog) Update() *ApprovalLogUpdateOne {
	return NewApprovalLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the ApprovalLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *ApprovalLog) Unwrap() *ApprovalLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApprovalLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *ApprovalLog) String() string {
	var builder strings.Builder
	builder.WriteString("ApprovalLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("approver_id=")
	builder.WriteString(fmt.Sprintf("%v", al.ApproverID))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(al.Comment)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", al.Status))
	builder.WriteString(", ")
	builder.WriteString("ticket_id=")
	builder.WriteString(fmt.Sprintf("%v", al.TicketID))
	builder.WriteString(", ")
	builder.WriteString("step_order=")
	builder.WriteString(fmt.Sprintf("%v", al.StepOrder))
	builder.WriteString(", ")
	builder.WriteString("step_name=")
	builder.WriteString(al.StepName)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", al.Metadata))
	builder.WriteString(", ")
	if v := al.ApprovedAt; v != nil {
		builder.WriteString("approved_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApprovalLogs is a parsable slice of ApprovalLog.
type ApprovalLogs []*ApprovalLog
