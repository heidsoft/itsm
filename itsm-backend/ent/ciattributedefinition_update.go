// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/ciattributedefinition"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CIAttributeDefinitionUpdate is the builder for updating CIAttributeDefinition entities.
type CIAttributeDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *CIAttributeDefinitionMutation
}

// Where appends a list predicates to the CIAttributeDefinitionUpdate builder.
func (cadu *CIAttributeDefinitionUpdate) Where(ps ...predicate.CIAttributeDefinition) *CIAttributeDefinitionUpdate {
	cadu.mutation.Where(ps...)
	return cadu
}

// SetName sets the "name" field.
func (cadu *CIAttributeDefinitionUpdate) SetName(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetName(s)
	return cadu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableName(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetName(*s)
	}
	return cadu
}

// SetDisplayName sets the "display_name" field.
func (cadu *CIAttributeDefinitionUpdate) SetDisplayName(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetDisplayName(s)
	return cadu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableDisplayName(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetDisplayName(*s)
	}
	return cadu
}

// SetDescription sets the "description" field.
func (cadu *CIAttributeDefinitionUpdate) SetDescription(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetDescription(s)
	return cadu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableDescription(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetDescription(*s)
	}
	return cadu
}

// ClearDescription clears the value of the "description" field.
func (cadu *CIAttributeDefinitionUpdate) ClearDescription() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearDescription()
	return cadu
}

// SetDataType sets the "data_type" field.
func (cadu *CIAttributeDefinitionUpdate) SetDataType(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetDataType(s)
	return cadu
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableDataType(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetDataType(*s)
	}
	return cadu
}

// SetIsRequired sets the "is_required" field.
func (cadu *CIAttributeDefinitionUpdate) SetIsRequired(b bool) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetIsRequired(b)
	return cadu
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableIsRequired(b *bool) *CIAttributeDefinitionUpdate {
	if b != nil {
		cadu.SetIsRequired(*b)
	}
	return cadu
}

// SetIsUnique sets the "is_unique" field.
func (cadu *CIAttributeDefinitionUpdate) SetIsUnique(b bool) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetIsUnique(b)
	return cadu
}

// SetNillableIsUnique sets the "is_unique" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableIsUnique(b *bool) *CIAttributeDefinitionUpdate {
	if b != nil {
		cadu.SetIsUnique(*b)
	}
	return cadu
}

// SetDefaultValue sets the "default_value" field.
func (cadu *CIAttributeDefinitionUpdate) SetDefaultValue(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetDefaultValue(s)
	return cadu
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableDefaultValue(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetDefaultValue(*s)
	}
	return cadu
}

// ClearDefaultValue clears the value of the "default_value" field.
func (cadu *CIAttributeDefinitionUpdate) ClearDefaultValue() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearDefaultValue()
	return cadu
}

// SetValidationRules sets the "validation_rules" field.
func (cadu *CIAttributeDefinitionUpdate) SetValidationRules(m map[string]interface{}) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetValidationRules(m)
	return cadu
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (cadu *CIAttributeDefinitionUpdate) ClearValidationRules() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearValidationRules()
	return cadu
}

// SetEnumValues sets the "enum_values" field.
func (cadu *CIAttributeDefinitionUpdate) SetEnumValues(s []string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetEnumValues(s)
	return cadu
}

// AppendEnumValues appends s to the "enum_values" field.
func (cadu *CIAttributeDefinitionUpdate) AppendEnumValues(s []string) *CIAttributeDefinitionUpdate {
	cadu.mutation.AppendEnumValues(s)
	return cadu
}

// ClearEnumValues clears the value of the "enum_values" field.
func (cadu *CIAttributeDefinitionUpdate) ClearEnumValues() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearEnumValues()
	return cadu
}

// SetReferenceType sets the "reference_type" field.
func (cadu *CIAttributeDefinitionUpdate) SetReferenceType(s string) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetReferenceType(s)
	return cadu
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableReferenceType(s *string) *CIAttributeDefinitionUpdate {
	if s != nil {
		cadu.SetReferenceType(*s)
	}
	return cadu
}

// ClearReferenceType clears the value of the "reference_type" field.
func (cadu *CIAttributeDefinitionUpdate) ClearReferenceType() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearReferenceType()
	return cadu
}

// SetDisplayOrder sets the "display_order" field.
func (cadu *CIAttributeDefinitionUpdate) SetDisplayOrder(i int) *CIAttributeDefinitionUpdate {
	cadu.mutation.ResetDisplayOrder()
	cadu.mutation.SetDisplayOrder(i)
	return cadu
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableDisplayOrder(i *int) *CIAttributeDefinitionUpdate {
	if i != nil {
		cadu.SetDisplayOrder(*i)
	}
	return cadu
}

// AddDisplayOrder adds i to the "display_order" field.
func (cadu *CIAttributeDefinitionUpdate) AddDisplayOrder(i int) *CIAttributeDefinitionUpdate {
	cadu.mutation.AddDisplayOrder(i)
	return cadu
}

// SetIsSearchable sets the "is_searchable" field.
func (cadu *CIAttributeDefinitionUpdate) SetIsSearchable(b bool) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetIsSearchable(b)
	return cadu
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableIsSearchable(b *bool) *CIAttributeDefinitionUpdate {
	if b != nil {
		cadu.SetIsSearchable(*b)
	}
	return cadu
}

// SetIsSystem sets the "is_system" field.
func (cadu *CIAttributeDefinitionUpdate) SetIsSystem(b bool) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetIsSystem(b)
	return cadu
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableIsSystem(b *bool) *CIAttributeDefinitionUpdate {
	if b != nil {
		cadu.SetIsSystem(*b)
	}
	return cadu
}

// SetIsActive sets the "is_active" field.
func (cadu *CIAttributeDefinitionUpdate) SetIsActive(b bool) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetIsActive(b)
	return cadu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableIsActive(b *bool) *CIAttributeDefinitionUpdate {
	if b != nil {
		cadu.SetIsActive(*b)
	}
	return cadu
}

// SetCiTypeID sets the "ci_type_id" field.
func (cadu *CIAttributeDefinitionUpdate) SetCiTypeID(i int) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetCiTypeID(i)
	return cadu
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableCiTypeID(i *int) *CIAttributeDefinitionUpdate {
	if i != nil {
		cadu.SetCiTypeID(*i)
	}
	return cadu
}

// SetTenantID sets the "tenant_id" field.
func (cadu *CIAttributeDefinitionUpdate) SetTenantID(i int) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetTenantID(i)
	return cadu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableTenantID(i *int) *CIAttributeDefinitionUpdate {
	if i != nil {
		cadu.SetTenantID(*i)
	}
	return cadu
}

// SetCreatedAt sets the "created_at" field.
func (cadu *CIAttributeDefinitionUpdate) SetCreatedAt(t time.Time) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetCreatedAt(t)
	return cadu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cadu *CIAttributeDefinitionUpdate) SetNillableCreatedAt(t *time.Time) *CIAttributeDefinitionUpdate {
	if t != nil {
		cadu.SetCreatedAt(*t)
	}
	return cadu
}

// SetUpdatedAt sets the "updated_at" field.
func (cadu *CIAttributeDefinitionUpdate) SetUpdatedAt(t time.Time) *CIAttributeDefinitionUpdate {
	cadu.mutation.SetUpdatedAt(t)
	return cadu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cadu *CIAttributeDefinitionUpdate) SetTenant(t *Tenant) *CIAttributeDefinitionUpdate {
	return cadu.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (cadu *CIAttributeDefinitionUpdate) SetCiType(c *CIType) *CIAttributeDefinitionUpdate {
	return cadu.SetCiTypeID(c.ID)
}

// Mutation returns the CIAttributeDefinitionMutation object of the builder.
func (cadu *CIAttributeDefinitionUpdate) Mutation() *CIAttributeDefinitionMutation {
	return cadu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cadu *CIAttributeDefinitionUpdate) ClearTenant() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearTenant()
	return cadu
}

// ClearCiType clears the "ci_type" edge to the CIType entity.
func (cadu *CIAttributeDefinitionUpdate) ClearCiType() *CIAttributeDefinitionUpdate {
	cadu.mutation.ClearCiType()
	return cadu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cadu *CIAttributeDefinitionUpdate) Save(ctx context.Context) (int, error) {
	cadu.defaults()
	return withHooks(ctx, cadu.sqlSave, cadu.mutation, cadu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cadu *CIAttributeDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := cadu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cadu *CIAttributeDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := cadu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cadu *CIAttributeDefinitionUpdate) ExecX(ctx context.Context) {
	if err := cadu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cadu *CIAttributeDefinitionUpdate) defaults() {
	if _, ok := cadu.mutation.UpdatedAt(); !ok {
		v := ciattributedefinition.UpdateDefaultUpdatedAt()
		cadu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cadu *CIAttributeDefinitionUpdate) check() error {
	if v, ok := cadu.mutation.Name(); ok {
		if err := ciattributedefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.name": %w`, err)}
		}
	}
	if v, ok := cadu.mutation.DisplayName(); ok {
		if err := ciattributedefinition.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.display_name": %w`, err)}
		}
	}
	if v, ok := cadu.mutation.DataType(); ok {
		if err := ciattributedefinition.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.data_type": %w`, err)}
		}
	}
	if cadu.mutation.TenantCleared() && len(cadu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIAttributeDefinition.tenant"`)
	}
	if cadu.mutation.CiTypeCleared() && len(cadu.mutation.CiTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIAttributeDefinition.ci_type"`)
	}
	return nil
}

func (cadu *CIAttributeDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cadu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ciattributedefinition.Table, ciattributedefinition.Columns, sqlgraph.NewFieldSpec(ciattributedefinition.FieldID, field.TypeInt))
	if ps := cadu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cadu.mutation.Name(); ok {
		_spec.SetField(ciattributedefinition.FieldName, field.TypeString, value)
	}
	if value, ok := cadu.mutation.DisplayName(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cadu.mutation.Description(); ok {
		_spec.SetField(ciattributedefinition.FieldDescription, field.TypeString, value)
	}
	if cadu.mutation.DescriptionCleared() {
		_spec.ClearField(ciattributedefinition.FieldDescription, field.TypeString)
	}
	if value, ok := cadu.mutation.DataType(); ok {
		_spec.SetField(ciattributedefinition.FieldDataType, field.TypeString, value)
	}
	if value, ok := cadu.mutation.IsRequired(); ok {
		_spec.SetField(ciattributedefinition.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := cadu.mutation.IsUnique(); ok {
		_spec.SetField(ciattributedefinition.FieldIsUnique, field.TypeBool, value)
	}
	if value, ok := cadu.mutation.DefaultValue(); ok {
		_spec.SetField(ciattributedefinition.FieldDefaultValue, field.TypeString, value)
	}
	if cadu.mutation.DefaultValueCleared() {
		_spec.ClearField(ciattributedefinition.FieldDefaultValue, field.TypeString)
	}
	if value, ok := cadu.mutation.ValidationRules(); ok {
		_spec.SetField(ciattributedefinition.FieldValidationRules, field.TypeJSON, value)
	}
	if cadu.mutation.ValidationRulesCleared() {
		_spec.ClearField(ciattributedefinition.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := cadu.mutation.EnumValues(); ok {
		_spec.SetField(ciattributedefinition.FieldEnumValues, field.TypeJSON, value)
	}
	if value, ok := cadu.mutation.AppendedEnumValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ciattributedefinition.FieldEnumValues, value)
		})
	}
	if cadu.mutation.EnumValuesCleared() {
		_spec.ClearField(ciattributedefinition.FieldEnumValues, field.TypeJSON)
	}
	if value, ok := cadu.mutation.ReferenceType(); ok {
		_spec.SetField(ciattributedefinition.FieldReferenceType, field.TypeString, value)
	}
	if cadu.mutation.ReferenceTypeCleared() {
		_spec.ClearField(ciattributedefinition.FieldReferenceType, field.TypeString)
	}
	if value, ok := cadu.mutation.DisplayOrder(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := cadu.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(ciattributedefinition.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := cadu.mutation.IsSearchable(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSearchable, field.TypeBool, value)
	}
	if value, ok := cadu.mutation.IsSystem(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := cadu.mutation.IsActive(); ok {
		_spec.SetField(ciattributedefinition.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := cadu.mutation.CreatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cadu.mutation.UpdatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if cadu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.TenantTable,
			Columns: []string{ciattributedefinition.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cadu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.TenantTable,
			Columns: []string{ciattributedefinition.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cadu.mutation.CiTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.CiTypeTable,
			Columns: []string{ciattributedefinition.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cadu.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.CiTypeTable,
			Columns: []string{ciattributedefinition.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cadu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ciattributedefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cadu.mutation.done = true
	return n, nil
}

// CIAttributeDefinitionUpdateOne is the builder for updating a single CIAttributeDefinition entity.
type CIAttributeDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CIAttributeDefinitionMutation
}

// SetName sets the "name" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetName(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetName(s)
	return caduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableName(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetName(*s)
	}
	return caduo
}

// SetDisplayName sets the "display_name" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetDisplayName(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetDisplayName(s)
	return caduo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableDisplayName(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetDisplayName(*s)
	}
	return caduo
}

// SetDescription sets the "description" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetDescription(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetDescription(s)
	return caduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableDescription(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetDescription(*s)
	}
	return caduo
}

// ClearDescription clears the value of the "description" field.
func (caduo *CIAttributeDefinitionUpdateOne) ClearDescription() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearDescription()
	return caduo
}

// SetDataType sets the "data_type" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetDataType(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetDataType(s)
	return caduo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableDataType(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetDataType(*s)
	}
	return caduo
}

// SetIsRequired sets the "is_required" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetIsRequired(b bool) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetIsRequired(b)
	return caduo
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableIsRequired(b *bool) *CIAttributeDefinitionUpdateOne {
	if b != nil {
		caduo.SetIsRequired(*b)
	}
	return caduo
}

// SetIsUnique sets the "is_unique" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetIsUnique(b bool) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetIsUnique(b)
	return caduo
}

// SetNillableIsUnique sets the "is_unique" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableIsUnique(b *bool) *CIAttributeDefinitionUpdateOne {
	if b != nil {
		caduo.SetIsUnique(*b)
	}
	return caduo
}

// SetDefaultValue sets the "default_value" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetDefaultValue(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetDefaultValue(s)
	return caduo
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableDefaultValue(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetDefaultValue(*s)
	}
	return caduo
}

// ClearDefaultValue clears the value of the "default_value" field.
func (caduo *CIAttributeDefinitionUpdateOne) ClearDefaultValue() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearDefaultValue()
	return caduo
}

// SetValidationRules sets the "validation_rules" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetValidationRules(m map[string]interface{}) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetValidationRules(m)
	return caduo
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (caduo *CIAttributeDefinitionUpdateOne) ClearValidationRules() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearValidationRules()
	return caduo
}

// SetEnumValues sets the "enum_values" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetEnumValues(s []string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetEnumValues(s)
	return caduo
}

// AppendEnumValues appends s to the "enum_values" field.
func (caduo *CIAttributeDefinitionUpdateOne) AppendEnumValues(s []string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.AppendEnumValues(s)
	return caduo
}

// ClearEnumValues clears the value of the "enum_values" field.
func (caduo *CIAttributeDefinitionUpdateOne) ClearEnumValues() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearEnumValues()
	return caduo
}

// SetReferenceType sets the "reference_type" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetReferenceType(s string) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetReferenceType(s)
	return caduo
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableReferenceType(s *string) *CIAttributeDefinitionUpdateOne {
	if s != nil {
		caduo.SetReferenceType(*s)
	}
	return caduo
}

// ClearReferenceType clears the value of the "reference_type" field.
func (caduo *CIAttributeDefinitionUpdateOne) ClearReferenceType() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearReferenceType()
	return caduo
}

// SetDisplayOrder sets the "display_order" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetDisplayOrder(i int) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ResetDisplayOrder()
	caduo.mutation.SetDisplayOrder(i)
	return caduo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableDisplayOrder(i *int) *CIAttributeDefinitionUpdateOne {
	if i != nil {
		caduo.SetDisplayOrder(*i)
	}
	return caduo
}

// AddDisplayOrder adds i to the "display_order" field.
func (caduo *CIAttributeDefinitionUpdateOne) AddDisplayOrder(i int) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.AddDisplayOrder(i)
	return caduo
}

// SetIsSearchable sets the "is_searchable" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetIsSearchable(b bool) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetIsSearchable(b)
	return caduo
}

// SetNillableIsSearchable sets the "is_searchable" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableIsSearchable(b *bool) *CIAttributeDefinitionUpdateOne {
	if b != nil {
		caduo.SetIsSearchable(*b)
	}
	return caduo
}

// SetIsSystem sets the "is_system" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetIsSystem(b bool) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetIsSystem(b)
	return caduo
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableIsSystem(b *bool) *CIAttributeDefinitionUpdateOne {
	if b != nil {
		caduo.SetIsSystem(*b)
	}
	return caduo
}

// SetIsActive sets the "is_active" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetIsActive(b bool) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetIsActive(b)
	return caduo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableIsActive(b *bool) *CIAttributeDefinitionUpdateOne {
	if b != nil {
		caduo.SetIsActive(*b)
	}
	return caduo
}

// SetCiTypeID sets the "ci_type_id" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetCiTypeID(i int) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetCiTypeID(i)
	return caduo
}

// SetNillableCiTypeID sets the "ci_type_id" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableCiTypeID(i *int) *CIAttributeDefinitionUpdateOne {
	if i != nil {
		caduo.SetCiTypeID(*i)
	}
	return caduo
}

// SetTenantID sets the "tenant_id" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetTenantID(i int) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetTenantID(i)
	return caduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableTenantID(i *int) *CIAttributeDefinitionUpdateOne {
	if i != nil {
		caduo.SetTenantID(*i)
	}
	return caduo
}

// SetCreatedAt sets the "created_at" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetCreatedAt(t time.Time) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetCreatedAt(t)
	return caduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (caduo *CIAttributeDefinitionUpdateOne) SetNillableCreatedAt(t *time.Time) *CIAttributeDefinitionUpdateOne {
	if t != nil {
		caduo.SetCreatedAt(*t)
	}
	return caduo
}

// SetUpdatedAt sets the "updated_at" field.
func (caduo *CIAttributeDefinitionUpdateOne) SetUpdatedAt(t time.Time) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.SetUpdatedAt(t)
	return caduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (caduo *CIAttributeDefinitionUpdateOne) SetTenant(t *Tenant) *CIAttributeDefinitionUpdateOne {
	return caduo.SetTenantID(t.ID)
}

// SetCiType sets the "ci_type" edge to the CIType entity.
func (caduo *CIAttributeDefinitionUpdateOne) SetCiType(c *CIType) *CIAttributeDefinitionUpdateOne {
	return caduo.SetCiTypeID(c.ID)
}

// Mutation returns the CIAttributeDefinitionMutation object of the builder.
func (caduo *CIAttributeDefinitionUpdateOne) Mutation() *CIAttributeDefinitionMutation {
	return caduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (caduo *CIAttributeDefinitionUpdateOne) ClearTenant() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearTenant()
	return caduo
}

// ClearCiType clears the "ci_type" edge to the CIType entity.
func (caduo *CIAttributeDefinitionUpdateOne) ClearCiType() *CIAttributeDefinitionUpdateOne {
	caduo.mutation.ClearCiType()
	return caduo
}

// Where appends a list predicates to the CIAttributeDefinitionUpdate builder.
func (caduo *CIAttributeDefinitionUpdateOne) Where(ps ...predicate.CIAttributeDefinition) *CIAttributeDefinitionUpdateOne {
	caduo.mutation.Where(ps...)
	return caduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (caduo *CIAttributeDefinitionUpdateOne) Select(field string, fields ...string) *CIAttributeDefinitionUpdateOne {
	caduo.fields = append([]string{field}, fields...)
	return caduo
}

// Save executes the query and returns the updated CIAttributeDefinition entity.
func (caduo *CIAttributeDefinitionUpdateOne) Save(ctx context.Context) (*CIAttributeDefinition, error) {
	caduo.defaults()
	return withHooks(ctx, caduo.sqlSave, caduo.mutation, caduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (caduo *CIAttributeDefinitionUpdateOne) SaveX(ctx context.Context) *CIAttributeDefinition {
	node, err := caduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (caduo *CIAttributeDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := caduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caduo *CIAttributeDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := caduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (caduo *CIAttributeDefinitionUpdateOne) defaults() {
	if _, ok := caduo.mutation.UpdatedAt(); !ok {
		v := ciattributedefinition.UpdateDefaultUpdatedAt()
		caduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (caduo *CIAttributeDefinitionUpdateOne) check() error {
	if v, ok := caduo.mutation.Name(); ok {
		if err := ciattributedefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.name": %w`, err)}
		}
	}
	if v, ok := caduo.mutation.DisplayName(); ok {
		if err := ciattributedefinition.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.display_name": %w`, err)}
		}
	}
	if v, ok := caduo.mutation.DataType(); ok {
		if err := ciattributedefinition.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`ent: validator failed for field "CIAttributeDefinition.data_type": %w`, err)}
		}
	}
	if caduo.mutation.TenantCleared() && len(caduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIAttributeDefinition.tenant"`)
	}
	if caduo.mutation.CiTypeCleared() && len(caduo.mutation.CiTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIAttributeDefinition.ci_type"`)
	}
	return nil
}

func (caduo *CIAttributeDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *CIAttributeDefinition, err error) {
	if err := caduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ciattributedefinition.Table, ciattributedefinition.Columns, sqlgraph.NewFieldSpec(ciattributedefinition.FieldID, field.TypeInt))
	id, ok := caduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIAttributeDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := caduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ciattributedefinition.FieldID)
		for _, f := range fields {
			if !ciattributedefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ciattributedefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := caduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caduo.mutation.Name(); ok {
		_spec.SetField(ciattributedefinition.FieldName, field.TypeString, value)
	}
	if value, ok := caduo.mutation.DisplayName(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := caduo.mutation.Description(); ok {
		_spec.SetField(ciattributedefinition.FieldDescription, field.TypeString, value)
	}
	if caduo.mutation.DescriptionCleared() {
		_spec.ClearField(ciattributedefinition.FieldDescription, field.TypeString)
	}
	if value, ok := caduo.mutation.DataType(); ok {
		_spec.SetField(ciattributedefinition.FieldDataType, field.TypeString, value)
	}
	if value, ok := caduo.mutation.IsRequired(); ok {
		_spec.SetField(ciattributedefinition.FieldIsRequired, field.TypeBool, value)
	}
	if value, ok := caduo.mutation.IsUnique(); ok {
		_spec.SetField(ciattributedefinition.FieldIsUnique, field.TypeBool, value)
	}
	if value, ok := caduo.mutation.DefaultValue(); ok {
		_spec.SetField(ciattributedefinition.FieldDefaultValue, field.TypeString, value)
	}
	if caduo.mutation.DefaultValueCleared() {
		_spec.ClearField(ciattributedefinition.FieldDefaultValue, field.TypeString)
	}
	if value, ok := caduo.mutation.ValidationRules(); ok {
		_spec.SetField(ciattributedefinition.FieldValidationRules, field.TypeJSON, value)
	}
	if caduo.mutation.ValidationRulesCleared() {
		_spec.ClearField(ciattributedefinition.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := caduo.mutation.EnumValues(); ok {
		_spec.SetField(ciattributedefinition.FieldEnumValues, field.TypeJSON, value)
	}
	if value, ok := caduo.mutation.AppendedEnumValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ciattributedefinition.FieldEnumValues, value)
		})
	}
	if caduo.mutation.EnumValuesCleared() {
		_spec.ClearField(ciattributedefinition.FieldEnumValues, field.TypeJSON)
	}
	if value, ok := caduo.mutation.ReferenceType(); ok {
		_spec.SetField(ciattributedefinition.FieldReferenceType, field.TypeString, value)
	}
	if caduo.mutation.ReferenceTypeCleared() {
		_spec.ClearField(ciattributedefinition.FieldReferenceType, field.TypeString)
	}
	if value, ok := caduo.mutation.DisplayOrder(); ok {
		_spec.SetField(ciattributedefinition.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := caduo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(ciattributedefinition.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := caduo.mutation.IsSearchable(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSearchable, field.TypeBool, value)
	}
	if value, ok := caduo.mutation.IsSystem(); ok {
		_spec.SetField(ciattributedefinition.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := caduo.mutation.IsActive(); ok {
		_spec.SetField(ciattributedefinition.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := caduo.mutation.CreatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := caduo.mutation.UpdatedAt(); ok {
		_spec.SetField(ciattributedefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if caduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.TenantTable,
			Columns: []string{ciattributedefinition.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.TenantTable,
			Columns: []string{ciattributedefinition.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caduo.mutation.CiTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.CiTypeTable,
			Columns: []string{ciattributedefinition.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caduo.mutation.CiTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ciattributedefinition.CiTypeTable,
			Columns: []string{ciattributedefinition.CiTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CIAttributeDefinition{config: caduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, caduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ciattributedefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	caduo.mutation.done = true
	return _node, nil
}
