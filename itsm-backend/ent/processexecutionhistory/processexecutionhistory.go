// Code generated by ent, DO NOT EDIT.

package processexecutionhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processexecutionhistory type in the database.
	Label = "process_execution_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryID holds the string denoting the history_id field in the database.
	FieldHistoryID = "history_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldActivityID holds the string denoting the activity_id field in the database.
	FieldActivityID = "activity_id"
	// FieldActivityName holds the string denoting the activity_name field in the database.
	FieldActivityName = "activity_name"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "activity_type"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldEventDetail holds the string denoting the event_detail field in the database.
	FieldEventDetail = "event_detail"
	// FieldVariables holds the string denoting the variables field in the database.
	FieldVariables = "variables"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldErrorCode holds the string denoting the error_code field in the database.
	FieldErrorCode = "error_code"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the processexecutionhistory in the database.
	Table = "process_execution_histories"
)

// Columns holds all SQL columns for processexecutionhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryID,
	FieldProcessInstanceID,
	FieldProcessDefinitionKey,
	FieldActivityID,
	FieldActivityName,
	FieldActivityType,
	FieldEventType,
	FieldEventDetail,
	FieldVariables,
	FieldUserID,
	FieldUserName,
	FieldTimestamp,
	FieldComment,
	FieldErrorMessage,
	FieldErrorCode,
	FieldTenantID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HistoryIDValidator is a validator for the "history_id" field. It is called by the builders before save.
	HistoryIDValidator func(string) error
	// ProcessInstanceIDValidator is a validator for the "process_instance_id" field. It is called by the builders before save.
	ProcessInstanceIDValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// ActivityTypeValidator is a validator for the "activity_type" field. It is called by the builders before save.
	ActivityTypeValidator func(string) error
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessExecutionHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryID orders the results by the history_id field.
func ByHistoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByActivityID orders the results by the activity_id field.
func ByActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityID, opts...).ToFunc()
}

// ByActivityName orders the results by the activity_name field.
func ByActivityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityName, opts...).ToFunc()
}

// ByActivityType orders the results by the activity_type field.
func ByActivityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityType, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByEventDetail orders the results by the event_detail field.
func ByEventDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventDetail, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByErrorCode orders the results by the error_code field.
func ByErrorCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorCode, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
