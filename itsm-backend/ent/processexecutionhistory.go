// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/processexecutionhistory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessExecutionHistory is the model entity for the ProcessExecutionHistory schema.
type ProcessExecutionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 历史记录ID
	HistoryID string `json:"history_id,omitempty"`
	// 流程实例ID
	ProcessInstanceID string `json:"process_instance_id,omitempty"`
	// 流程定义Key
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 活动ID
	ActivityID string `json:"activity_id,omitempty"`
	// 活动名称
	ActivityName string `json:"activity_name,omitempty"`
	// 活动类型：start_event, user_task, service_task, gateway, end_event
	ActivityType string `json:"activity_type,omitempty"`
	// 事件类型：start, complete, cancel, error
	EventType string `json:"event_type,omitempty"`
	// 事件详情
	EventDetail string `json:"event_detail,omitempty"`
	// 相关变量
	Variables map[string]interface{} `json:"variables,omitempty"`
	// 操作用户ID
	UserID string `json:"user_id,omitempty"`
	// 操作用户名称
	UserName string `json:"user_name,omitempty"`
	// 时间戳
	Timestamp time.Time `json:"timestamp,omitempty"`
	// 备注
	Comment string `json:"comment,omitempty"`
	// 错误信息
	ErrorMessage string `json:"error_message,omitempty"`
	// 错误代码
	ErrorCode string `json:"error_code,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessExecutionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processexecutionhistory.FieldVariables:
			values[i] = new([]byte)
		case processexecutionhistory.FieldID, processexecutionhistory.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processexecutionhistory.FieldHistoryID, processexecutionhistory.FieldProcessInstanceID, processexecutionhistory.FieldProcessDefinitionKey, processexecutionhistory.FieldActivityID, processexecutionhistory.FieldActivityName, processexecutionhistory.FieldActivityType, processexecutionhistory.FieldEventType, processexecutionhistory.FieldEventDetail, processexecutionhistory.FieldUserID, processexecutionhistory.FieldUserName, processexecutionhistory.FieldComment, processexecutionhistory.FieldErrorMessage, processexecutionhistory.FieldErrorCode:
			values[i] = new(sql.NullString)
		case processexecutionhistory.FieldTimestamp, processexecutionhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessExecutionHistory fields.
func (peh *ProcessExecutionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processexecutionhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			peh.ID = int(value.Int64)
		case processexecutionhistory.FieldHistoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field history_id", values[i])
			} else if value.Valid {
				peh.HistoryID = value.String
			}
		case processexecutionhistory.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				peh.ProcessInstanceID = value.String
			}
		case processexecutionhistory.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				peh.ProcessDefinitionKey = value.String
			}
		case processexecutionhistory.FieldActivityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_id", values[i])
			} else if value.Valid {
				peh.ActivityID = value.String
			}
		case processexecutionhistory.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_name", values[i])
			} else if value.Valid {
				peh.ActivityName = value.String
			}
		case processexecutionhistory.FieldActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				peh.ActivityType = value.String
			}
		case processexecutionhistory.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				peh.EventType = value.String
			}
		case processexecutionhistory.FieldEventDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_detail", values[i])
			} else if value.Valid {
				peh.EventDetail = value.String
			}
		case processexecutionhistory.FieldVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &peh.Variables); err != nil {
					return fmt.Errorf("unmarshal field variables: %w", err)
				}
			}
		case processexecutionhistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				peh.UserID = value.String
			}
		case processexecutionhistory.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				peh.UserName = value.String
			}
		case processexecutionhistory.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				peh.Timestamp = value.Time
			}
		case processexecutionhistory.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				peh.Comment = value.String
			}
		case processexecutionhistory.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				peh.ErrorMessage = value.String
			}
		case processexecutionhistory.FieldErrorCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_code", values[i])
			} else if value.Valid {
				peh.ErrorCode = value.String
			}
		case processexecutionhistory.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				peh.TenantID = int(value.Int64)
			}
		case processexecutionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				peh.CreatedAt = value.Time
			}
		default:
			peh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessExecutionHistory.
// This includes values selected through modifiers, order, etc.
func (peh *ProcessExecutionHistory) Value(name string) (ent.Value, error) {
	return peh.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessExecutionHistory.
// Note that you need to call ProcessExecutionHistory.Unwrap() before calling this method if this ProcessExecutionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (peh *ProcessExecutionHistory) Update() *ProcessExecutionHistoryUpdateOne {
	return NewProcessExecutionHistoryClient(peh.config).UpdateOne(peh)
}

// Unwrap unwraps the ProcessExecutionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (peh *ProcessExecutionHistory) Unwrap() *ProcessExecutionHistory {
	_tx, ok := peh.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessExecutionHistory is not a transactional entity")
	}
	peh.config.driver = _tx.drv
	return peh
}

// String implements the fmt.Stringer.
func (peh *ProcessExecutionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessExecutionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", peh.ID))
	builder.WriteString("history_id=")
	builder.WriteString(peh.HistoryID)
	builder.WriteString(", ")
	builder.WriteString("process_instance_id=")
	builder.WriteString(peh.ProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(peh.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("activity_id=")
	builder.WriteString(peh.ActivityID)
	builder.WriteString(", ")
	builder.WriteString("activity_name=")
	builder.WriteString(peh.ActivityName)
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(peh.ActivityType)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(peh.EventType)
	builder.WriteString(", ")
	builder.WriteString("event_detail=")
	builder.WriteString(peh.EventDetail)
	builder.WriteString(", ")
	builder.WriteString("variables=")
	builder.WriteString(fmt.Sprintf("%v", peh.Variables))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(peh.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(peh.UserName)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(peh.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(peh.Comment)
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(peh.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("error_code=")
	builder.WriteString(peh.ErrorCode)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", peh.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(peh.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessExecutionHistories is a parsable slice of ProcessExecutionHistory.
type ProcessExecutionHistories []*ProcessExecutionHistory
