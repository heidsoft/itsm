// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processinstance"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessInstanceUpdate is the builder for updating ProcessInstance entities.
type ProcessInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessInstanceMutation
}

// Where appends a list predicates to the ProcessInstanceUpdate builder.
func (piu *ProcessInstanceUpdate) Where(ps ...predicate.ProcessInstance) *ProcessInstanceUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (piu *ProcessInstanceUpdate) SetProcessInstanceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetProcessInstanceID(s)
	return piu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessInstanceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetProcessInstanceID(*s)
	}
	return piu
}

// SetBusinessKey sets the "business_key" field.
func (piu *ProcessInstanceUpdate) SetBusinessKey(s string) *ProcessInstanceUpdate {
	piu.mutation.SetBusinessKey(s)
	return piu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableBusinessKey(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetBusinessKey(*s)
	}
	return piu
}

// ClearBusinessKey clears the value of the "business_key" field.
func (piu *ProcessInstanceUpdate) ClearBusinessKey() *ProcessInstanceUpdate {
	piu.mutation.ClearBusinessKey()
	return piu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionKey(s string) *ProcessInstanceUpdate {
	piu.mutation.SetProcessDefinitionKey(s)
	return piu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionKey(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetProcessDefinitionKey(*s)
	}
	return piu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetProcessDefinitionID(s)
	return piu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetProcessDefinitionID(*s)
	}
	return piu
}

// SetStatus sets the "status" field.
func (piu *ProcessInstanceUpdate) SetStatus(s string) *ProcessInstanceUpdate {
	piu.mutation.SetStatus(s)
	return piu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableStatus(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetStatus(*s)
	}
	return piu
}

// SetCurrentActivityID sets the "current_activity_id" field.
func (piu *ProcessInstanceUpdate) SetCurrentActivityID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetCurrentActivityID(s)
	return piu
}

// SetNillableCurrentActivityID sets the "current_activity_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableCurrentActivityID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetCurrentActivityID(*s)
	}
	return piu
}

// ClearCurrentActivityID clears the value of the "current_activity_id" field.
func (piu *ProcessInstanceUpdate) ClearCurrentActivityID() *ProcessInstanceUpdate {
	piu.mutation.ClearCurrentActivityID()
	return piu
}

// SetCurrentActivityName sets the "current_activity_name" field.
func (piu *ProcessInstanceUpdate) SetCurrentActivityName(s string) *ProcessInstanceUpdate {
	piu.mutation.SetCurrentActivityName(s)
	return piu
}

// SetNillableCurrentActivityName sets the "current_activity_name" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableCurrentActivityName(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetCurrentActivityName(*s)
	}
	return piu
}

// ClearCurrentActivityName clears the value of the "current_activity_name" field.
func (piu *ProcessInstanceUpdate) ClearCurrentActivityName() *ProcessInstanceUpdate {
	piu.mutation.ClearCurrentActivityName()
	return piu
}

// SetVariables sets the "variables" field.
func (piu *ProcessInstanceUpdate) SetVariables(m map[string]interface{}) *ProcessInstanceUpdate {
	piu.mutation.SetVariables(m)
	return piu
}

// ClearVariables clears the value of the "variables" field.
func (piu *ProcessInstanceUpdate) ClearVariables() *ProcessInstanceUpdate {
	piu.mutation.ClearVariables()
	return piu
}

// SetStartTime sets the "start_time" field.
func (piu *ProcessInstanceUpdate) SetStartTime(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetStartTime(t)
	return piu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableStartTime(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetStartTime(*t)
	}
	return piu
}

// SetEndTime sets the "end_time" field.
func (piu *ProcessInstanceUpdate) SetEndTime(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetEndTime(t)
	return piu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableEndTime(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetEndTime(*t)
	}
	return piu
}

// ClearEndTime clears the value of the "end_time" field.
func (piu *ProcessInstanceUpdate) ClearEndTime() *ProcessInstanceUpdate {
	piu.mutation.ClearEndTime()
	return piu
}

// SetSuspendedTime sets the "suspended_time" field.
func (piu *ProcessInstanceUpdate) SetSuspendedTime(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetSuspendedTime(t)
	return piu
}

// SetNillableSuspendedTime sets the "suspended_time" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableSuspendedTime(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetSuspendedTime(*t)
	}
	return piu
}

// ClearSuspendedTime clears the value of the "suspended_time" field.
func (piu *ProcessInstanceUpdate) ClearSuspendedTime() *ProcessInstanceUpdate {
	piu.mutation.ClearSuspendedTime()
	return piu
}

// SetSuspendedReason sets the "suspended_reason" field.
func (piu *ProcessInstanceUpdate) SetSuspendedReason(s string) *ProcessInstanceUpdate {
	piu.mutation.SetSuspendedReason(s)
	return piu
}

// SetNillableSuspendedReason sets the "suspended_reason" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableSuspendedReason(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetSuspendedReason(*s)
	}
	return piu
}

// ClearSuspendedReason clears the value of the "suspended_reason" field.
func (piu *ProcessInstanceUpdate) ClearSuspendedReason() *ProcessInstanceUpdate {
	piu.mutation.ClearSuspendedReason()
	return piu
}

// SetTenantID sets the "tenant_id" field.
func (piu *ProcessInstanceUpdate) SetTenantID(i int) *ProcessInstanceUpdate {
	piu.mutation.ResetTenantID()
	piu.mutation.SetTenantID(i)
	return piu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableTenantID(i *int) *ProcessInstanceUpdate {
	if i != nil {
		piu.SetTenantID(*i)
	}
	return piu
}

// AddTenantID adds i to the "tenant_id" field.
func (piu *ProcessInstanceUpdate) AddTenantID(i int) *ProcessInstanceUpdate {
	piu.mutation.AddTenantID(i)
	return piu
}

// SetInitiator sets the "initiator" field.
func (piu *ProcessInstanceUpdate) SetInitiator(s string) *ProcessInstanceUpdate {
	piu.mutation.SetInitiator(s)
	return piu
}

// SetNillableInitiator sets the "initiator" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableInitiator(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetInitiator(*s)
	}
	return piu
}

// ClearInitiator clears the value of the "initiator" field.
func (piu *ProcessInstanceUpdate) ClearInitiator() *ProcessInstanceUpdate {
	piu.mutation.ClearInitiator()
	return piu
}

// SetParentProcessInstanceID sets the "parent_process_instance_id" field.
func (piu *ProcessInstanceUpdate) SetParentProcessInstanceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetParentProcessInstanceID(s)
	return piu
}

// SetNillableParentProcessInstanceID sets the "parent_process_instance_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableParentProcessInstanceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetParentProcessInstanceID(*s)
	}
	return piu
}

// ClearParentProcessInstanceID clears the value of the "parent_process_instance_id" field.
func (piu *ProcessInstanceUpdate) ClearParentProcessInstanceID() *ProcessInstanceUpdate {
	piu.mutation.ClearParentProcessInstanceID()
	return piu
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (piu *ProcessInstanceUpdate) SetRootProcessInstanceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetRootProcessInstanceID(s)
	return piu
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableRootProcessInstanceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetRootProcessInstanceID(*s)
	}
	return piu
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (piu *ProcessInstanceUpdate) ClearRootProcessInstanceID() *ProcessInstanceUpdate {
	piu.mutation.ClearRootProcessInstanceID()
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *ProcessInstanceUpdate) SetCreatedAt(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableCreatedAt(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProcessInstanceUpdate) SetUpdatedAt(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// Mutation returns the ProcessInstanceMutation object of the builder.
func (piu *ProcessInstanceUpdate) Mutation() *ProcessInstanceMutation {
	return piu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProcessInstanceUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProcessInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProcessInstanceUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProcessInstanceUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProcessInstanceUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := processinstance.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProcessInstanceUpdate) check() error {
	if v, ok := piu.mutation.ProcessInstanceID(); ok {
		if err := processinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ProcessDefinitionKey(); ok {
		if err := processinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ProcessDefinitionID(); ok {
		if err := processinstance.ProcessDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.TenantID(); ok {
		if err := processinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (piu *ProcessInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processinstance.Table, processinstance.Columns, sqlgraph.NewFieldSpec(processinstance.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := piu.mutation.BusinessKey(); ok {
		_spec.SetField(processinstance.FieldBusinessKey, field.TypeString, value)
	}
	if piu.mutation.BusinessKeyCleared() {
		_spec.ClearField(processinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := piu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := piu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionID, field.TypeString, value)
	}
	if value, ok := piu.mutation.Status(); ok {
		_spec.SetField(processinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := piu.mutation.CurrentActivityID(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityID, field.TypeString, value)
	}
	if piu.mutation.CurrentActivityIDCleared() {
		_spec.ClearField(processinstance.FieldCurrentActivityID, field.TypeString)
	}
	if value, ok := piu.mutation.CurrentActivityName(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityName, field.TypeString, value)
	}
	if piu.mutation.CurrentActivityNameCleared() {
		_spec.ClearField(processinstance.FieldCurrentActivityName, field.TypeString)
	}
	if value, ok := piu.mutation.Variables(); ok {
		_spec.SetField(processinstance.FieldVariables, field.TypeJSON, value)
	}
	if piu.mutation.VariablesCleared() {
		_spec.ClearField(processinstance.FieldVariables, field.TypeJSON)
	}
	if value, ok := piu.mutation.StartTime(); ok {
		_spec.SetField(processinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := piu.mutation.EndTime(); ok {
		_spec.SetField(processinstance.FieldEndTime, field.TypeTime, value)
	}
	if piu.mutation.EndTimeCleared() {
		_spec.ClearField(processinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := piu.mutation.SuspendedTime(); ok {
		_spec.SetField(processinstance.FieldSuspendedTime, field.TypeTime, value)
	}
	if piu.mutation.SuspendedTimeCleared() {
		_spec.ClearField(processinstance.FieldSuspendedTime, field.TypeTime)
	}
	if value, ok := piu.mutation.SuspendedReason(); ok {
		_spec.SetField(processinstance.FieldSuspendedReason, field.TypeString, value)
	}
	if piu.mutation.SuspendedReasonCleared() {
		_spec.ClearField(processinstance.FieldSuspendedReason, field.TypeString)
	}
	if value, ok := piu.mutation.TenantID(); ok {
		_spec.SetField(processinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedTenantID(); ok {
		_spec.AddField(processinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := piu.mutation.Initiator(); ok {
		_spec.SetField(processinstance.FieldInitiator, field.TypeString, value)
	}
	if piu.mutation.InitiatorCleared() {
		_spec.ClearField(processinstance.FieldInitiator, field.TypeString)
	}
	if value, ok := piu.mutation.ParentProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldParentProcessInstanceID, field.TypeString, value)
	}
	if piu.mutation.ParentProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldParentProcessInstanceID, field.TypeString)
	}
	if value, ok := piu.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if piu.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.SetField(processinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(processinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProcessInstanceUpdateOne is the builder for updating a single ProcessInstance entity.
type ProcessInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessInstanceMutation
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessInstanceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetProcessInstanceID(s)
	return piuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessInstanceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetProcessInstanceID(*s)
	}
	return piuo
}

// SetBusinessKey sets the "business_key" field.
func (piuo *ProcessInstanceUpdateOne) SetBusinessKey(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetBusinessKey(s)
	return piuo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableBusinessKey(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetBusinessKey(*s)
	}
	return piuo
}

// ClearBusinessKey clears the value of the "business_key" field.
func (piuo *ProcessInstanceUpdateOne) ClearBusinessKey() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearBusinessKey()
	return piuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionKey(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetProcessDefinitionKey(s)
	return piuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionKey(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetProcessDefinitionKey(*s)
	}
	return piuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetProcessDefinitionID(s)
	return piuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetProcessDefinitionID(*s)
	}
	return piuo
}

// SetStatus sets the "status" field.
func (piuo *ProcessInstanceUpdateOne) SetStatus(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetStatus(s)
	return piuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableStatus(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetStatus(*s)
	}
	return piuo
}

// SetCurrentActivityID sets the "current_activity_id" field.
func (piuo *ProcessInstanceUpdateOne) SetCurrentActivityID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetCurrentActivityID(s)
	return piuo
}

// SetNillableCurrentActivityID sets the "current_activity_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableCurrentActivityID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetCurrentActivityID(*s)
	}
	return piuo
}

// ClearCurrentActivityID clears the value of the "current_activity_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearCurrentActivityID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearCurrentActivityID()
	return piuo
}

// SetCurrentActivityName sets the "current_activity_name" field.
func (piuo *ProcessInstanceUpdateOne) SetCurrentActivityName(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetCurrentActivityName(s)
	return piuo
}

// SetNillableCurrentActivityName sets the "current_activity_name" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableCurrentActivityName(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetCurrentActivityName(*s)
	}
	return piuo
}

// ClearCurrentActivityName clears the value of the "current_activity_name" field.
func (piuo *ProcessInstanceUpdateOne) ClearCurrentActivityName() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearCurrentActivityName()
	return piuo
}

// SetVariables sets the "variables" field.
func (piuo *ProcessInstanceUpdateOne) SetVariables(m map[string]interface{}) *ProcessInstanceUpdateOne {
	piuo.mutation.SetVariables(m)
	return piuo
}

// ClearVariables clears the value of the "variables" field.
func (piuo *ProcessInstanceUpdateOne) ClearVariables() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearVariables()
	return piuo
}

// SetStartTime sets the "start_time" field.
func (piuo *ProcessInstanceUpdateOne) SetStartTime(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetStartTime(t)
	return piuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableStartTime(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetStartTime(*t)
	}
	return piuo
}

// SetEndTime sets the "end_time" field.
func (piuo *ProcessInstanceUpdateOne) SetEndTime(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetEndTime(t)
	return piuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableEndTime(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetEndTime(*t)
	}
	return piuo
}

// ClearEndTime clears the value of the "end_time" field.
func (piuo *ProcessInstanceUpdateOne) ClearEndTime() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearEndTime()
	return piuo
}

// SetSuspendedTime sets the "suspended_time" field.
func (piuo *ProcessInstanceUpdateOne) SetSuspendedTime(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetSuspendedTime(t)
	return piuo
}

// SetNillableSuspendedTime sets the "suspended_time" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableSuspendedTime(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetSuspendedTime(*t)
	}
	return piuo
}

// ClearSuspendedTime clears the value of the "suspended_time" field.
func (piuo *ProcessInstanceUpdateOne) ClearSuspendedTime() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearSuspendedTime()
	return piuo
}

// SetSuspendedReason sets the "suspended_reason" field.
func (piuo *ProcessInstanceUpdateOne) SetSuspendedReason(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetSuspendedReason(s)
	return piuo
}

// SetNillableSuspendedReason sets the "suspended_reason" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableSuspendedReason(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetSuspendedReason(*s)
	}
	return piuo
}

// ClearSuspendedReason clears the value of the "suspended_reason" field.
func (piuo *ProcessInstanceUpdateOne) ClearSuspendedReason() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearSuspendedReason()
	return piuo
}

// SetTenantID sets the "tenant_id" field.
func (piuo *ProcessInstanceUpdateOne) SetTenantID(i int) *ProcessInstanceUpdateOne {
	piuo.mutation.ResetTenantID()
	piuo.mutation.SetTenantID(i)
	return piuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableTenantID(i *int) *ProcessInstanceUpdateOne {
	if i != nil {
		piuo.SetTenantID(*i)
	}
	return piuo
}

// AddTenantID adds i to the "tenant_id" field.
func (piuo *ProcessInstanceUpdateOne) AddTenantID(i int) *ProcessInstanceUpdateOne {
	piuo.mutation.AddTenantID(i)
	return piuo
}

// SetInitiator sets the "initiator" field.
func (piuo *ProcessInstanceUpdateOne) SetInitiator(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetInitiator(s)
	return piuo
}

// SetNillableInitiator sets the "initiator" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableInitiator(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetInitiator(*s)
	}
	return piuo
}

// ClearInitiator clears the value of the "initiator" field.
func (piuo *ProcessInstanceUpdateOne) ClearInitiator() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearInitiator()
	return piuo
}

// SetParentProcessInstanceID sets the "parent_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) SetParentProcessInstanceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetParentProcessInstanceID(s)
	return piuo
}

// SetNillableParentProcessInstanceID sets the "parent_process_instance_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableParentProcessInstanceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetParentProcessInstanceID(*s)
	}
	return piuo
}

// ClearParentProcessInstanceID clears the value of the "parent_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearParentProcessInstanceID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearParentProcessInstanceID()
	return piuo
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) SetRootProcessInstanceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetRootProcessInstanceID(s)
	return piuo
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableRootProcessInstanceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetRootProcessInstanceID(*s)
	}
	return piuo
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearRootProcessInstanceID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearRootProcessInstanceID()
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *ProcessInstanceUpdateOne) SetCreatedAt(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProcessInstanceUpdateOne) SetUpdatedAt(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// Mutation returns the ProcessInstanceMutation object of the builder.
func (piuo *ProcessInstanceUpdateOne) Mutation() *ProcessInstanceMutation {
	return piuo.mutation
}

// Where appends a list predicates to the ProcessInstanceUpdate builder.
func (piuo *ProcessInstanceUpdateOne) Where(ps ...predicate.ProcessInstance) *ProcessInstanceUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProcessInstanceUpdateOne) Select(field string, fields ...string) *ProcessInstanceUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProcessInstance entity.
func (piuo *ProcessInstanceUpdateOne) Save(ctx context.Context) (*ProcessInstance, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProcessInstanceUpdateOne) SaveX(ctx context.Context) *ProcessInstance {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProcessInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProcessInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProcessInstanceUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := processinstance.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProcessInstanceUpdateOne) check() error {
	if v, ok := piuo.mutation.ProcessInstanceID(); ok {
		if err := processinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ProcessDefinitionKey(); ok {
		if err := processinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ProcessDefinitionID(); ok {
		if err := processinstance.ProcessDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.TenantID(); ok {
		if err := processinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProcessInstanceUpdateOne) sqlSave(ctx context.Context) (_node *ProcessInstance, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processinstance.Table, processinstance.Columns, sqlgraph.NewFieldSpec(processinstance.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processinstance.FieldID)
		for _, f := range fields {
			if !processinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.BusinessKey(); ok {
		_spec.SetField(processinstance.FieldBusinessKey, field.TypeString, value)
	}
	if piuo.mutation.BusinessKeyCleared() {
		_spec.ClearField(processinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := piuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := piuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Status(); ok {
		_spec.SetField(processinstance.FieldStatus, field.TypeString, value)
	}
	if value, ok := piuo.mutation.CurrentActivityID(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityID, field.TypeString, value)
	}
	if piuo.mutation.CurrentActivityIDCleared() {
		_spec.ClearField(processinstance.FieldCurrentActivityID, field.TypeString)
	}
	if value, ok := piuo.mutation.CurrentActivityName(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityName, field.TypeString, value)
	}
	if piuo.mutation.CurrentActivityNameCleared() {
		_spec.ClearField(processinstance.FieldCurrentActivityName, field.TypeString)
	}
	if value, ok := piuo.mutation.Variables(); ok {
		_spec.SetField(processinstance.FieldVariables, field.TypeJSON, value)
	}
	if piuo.mutation.VariablesCleared() {
		_spec.ClearField(processinstance.FieldVariables, field.TypeJSON)
	}
	if value, ok := piuo.mutation.StartTime(); ok {
		_spec.SetField(processinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.EndTime(); ok {
		_spec.SetField(processinstance.FieldEndTime, field.TypeTime, value)
	}
	if piuo.mutation.EndTimeCleared() {
		_spec.ClearField(processinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := piuo.mutation.SuspendedTime(); ok {
		_spec.SetField(processinstance.FieldSuspendedTime, field.TypeTime, value)
	}
	if piuo.mutation.SuspendedTimeCleared() {
		_spec.ClearField(processinstance.FieldSuspendedTime, field.TypeTime)
	}
	if value, ok := piuo.mutation.SuspendedReason(); ok {
		_spec.SetField(processinstance.FieldSuspendedReason, field.TypeString, value)
	}
	if piuo.mutation.SuspendedReasonCleared() {
		_spec.ClearField(processinstance.FieldSuspendedReason, field.TypeString)
	}
	if value, ok := piuo.mutation.TenantID(); ok {
		_spec.SetField(processinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedTenantID(); ok {
		_spec.AddField(processinstance.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.Initiator(); ok {
		_spec.SetField(processinstance.FieldInitiator, field.TypeString, value)
	}
	if piuo.mutation.InitiatorCleared() {
		_spec.ClearField(processinstance.FieldInitiator, field.TypeString)
	}
	if value, ok := piuo.mutation.ParentProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldParentProcessInstanceID, field.TypeString, value)
	}
	if piuo.mutation.ParentProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldParentProcessInstanceID, field.TypeString)
	}
	if value, ok := piuo.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if piuo.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.SetField(processinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessInstance{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
