// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApprovalLogCreate is the builder for creating a ApprovalLog entity.
type ApprovalLogCreate struct {
	config
	mutation *ApprovalLogMutation
	hooks    []Hook
}

// SetApproverID sets the "approver_id" field.
func (alc *ApprovalLogCreate) SetApproverID(i int) *ApprovalLogCreate {
	alc.mutation.SetApproverID(i)
	return alc
}

// SetComment sets the "comment" field.
func (alc *ApprovalLogCreate) SetComment(s string) *ApprovalLogCreate {
	alc.mutation.SetComment(s)
	return alc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (alc *ApprovalLogCreate) SetNillableComment(s *string) *ApprovalLogCreate {
	if s != nil {
		alc.SetComment(*s)
	}
	return alc
}

// SetStatus sets the "status" field.
func (alc *ApprovalLogCreate) SetStatus(a approvallog.Status) *ApprovalLogCreate {
	alc.mutation.SetStatus(a)
	return alc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (alc *ApprovalLogCreate) SetNillableStatus(a *approvallog.Status) *ApprovalLogCreate {
	if a != nil {
		alc.SetStatus(*a)
	}
	return alc
}

// SetTicketID sets the "ticket_id" field.
func (alc *ApprovalLogCreate) SetTicketID(i int) *ApprovalLogCreate {
	alc.mutation.SetTicketID(i)
	return alc
}

// SetStepOrder sets the "step_order" field.
func (alc *ApprovalLogCreate) SetStepOrder(i int) *ApprovalLogCreate {
	alc.mutation.SetStepOrder(i)
	return alc
}

// SetStepName sets the "step_name" field.
func (alc *ApprovalLogCreate) SetStepName(s string) *ApprovalLogCreate {
	alc.mutation.SetStepName(s)
	return alc
}

// SetNillableStepName sets the "step_name" field if the given value is not nil.
func (alc *ApprovalLogCreate) SetNillableStepName(s *string) *ApprovalLogCreate {
	if s != nil {
		alc.SetStepName(*s)
	}
	return alc
}

// SetMetadata sets the "metadata" field.
func (alc *ApprovalLogCreate) SetMetadata(m map[string]interface{}) *ApprovalLogCreate {
	alc.mutation.SetMetadata(m)
	return alc
}

// SetApprovedAt sets the "approved_at" field.
func (alc *ApprovalLogCreate) SetApprovedAt(t time.Time) *ApprovalLogCreate {
	alc.mutation.SetApprovedAt(t)
	return alc
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (alc *ApprovalLogCreate) SetNillableApprovedAt(t *time.Time) *ApprovalLogCreate {
	if t != nil {
		alc.SetApprovedAt(*t)
	}
	return alc
}

// SetCreatedAt sets the "created_at" field.
func (alc *ApprovalLogCreate) SetCreatedAt(t time.Time) *ApprovalLogCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *ApprovalLogCreate) SetNillableCreatedAt(t *time.Time) *ApprovalLogCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetApprover sets the "approver" edge to the User entity.
func (alc *ApprovalLogCreate) SetApprover(u *User) *ApprovalLogCreate {
	return alc.SetApproverID(u.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (alc *ApprovalLogCreate) SetTicket(t *Ticket) *ApprovalLogCreate {
	return alc.SetTicketID(t.ID)
}

// Mutation returns the ApprovalLogMutation object of the builder.
func (alc *ApprovalLogCreate) Mutation() *ApprovalLogMutation {
	return alc.mutation
}

// Save creates the ApprovalLog in the database.
func (alc *ApprovalLogCreate) Save(ctx context.Context) (*ApprovalLog, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *ApprovalLogCreate) SaveX(ctx context.Context) *ApprovalLog {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *ApprovalLogCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *ApprovalLogCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *ApprovalLogCreate) defaults() {
	if _, ok := alc.mutation.Status(); !ok {
		v := approvallog.DefaultStatus
		alc.mutation.SetStatus(v)
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := approvallog.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *ApprovalLogCreate) check() error {
	if _, ok := alc.mutation.ApproverID(); !ok {
		return &ValidationError{Name: "approver_id", err: errors.New(`ent: missing required field "ApprovalLog.approver_id"`)}
	}
	if v, ok := alc.mutation.ApproverID(); ok {
		if err := approvallog.ApproverIDValidator(v); err != nil {
			return &ValidationError{Name: "approver_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.approver_id": %w`, err)}
		}
	}
	if _, ok := alc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ApprovalLog.status"`)}
	}
	if v, ok := alc.mutation.Status(); ok {
		if err := approvallog.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.status": %w`, err)}
		}
	}
	if _, ok := alc.mutation.TicketID(); !ok {
		return &ValidationError{Name: "ticket_id", err: errors.New(`ent: missing required field "ApprovalLog.ticket_id"`)}
	}
	if v, ok := alc.mutation.TicketID(); ok {
		if err := approvallog.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.ticket_id": %w`, err)}
		}
	}
	if _, ok := alc.mutation.StepOrder(); !ok {
		return &ValidationError{Name: "step_order", err: errors.New(`ent: missing required field "ApprovalLog.step_order"`)}
	}
	if v, ok := alc.mutation.StepOrder(); ok {
		if err := approvallog.StepOrderValidator(v); err != nil {
			return &ValidationError{Name: "step_order", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_order": %w`, err)}
		}
	}
	if v, ok := alc.mutation.StepName(); ok {
		if err := approvallog.StepNameValidator(v); err != nil {
			return &ValidationError{Name: "step_name", err: fmt.Errorf(`ent: validator failed for field "ApprovalLog.step_name": %w`, err)}
		}
	}
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApprovalLog.created_at"`)}
	}
	if len(alc.mutation.ApproverIDs()) == 0 {
		return &ValidationError{Name: "approver", err: errors.New(`ent: missing required edge "ApprovalLog.approver"`)}
	}
	if len(alc.mutation.TicketIDs()) == 0 {
		return &ValidationError{Name: "ticket", err: errors.New(`ent: missing required edge "ApprovalLog.ticket"`)}
	}
	return nil
}

func (alc *ApprovalLogCreate) sqlSave(ctx context.Context) (*ApprovalLog, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *ApprovalLogCreate) createSpec() (*ApprovalLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ApprovalLog{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(approvallog.Table, sqlgraph.NewFieldSpec(approvallog.FieldID, field.TypeInt))
	)
	if value, ok := alc.mutation.Comment(); ok {
		_spec.SetField(approvallog.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := alc.mutation.Status(); ok {
		_spec.SetField(approvallog.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := alc.mutation.StepOrder(); ok {
		_spec.SetField(approvallog.FieldStepOrder, field.TypeInt, value)
		_node.StepOrder = value
	}
	if value, ok := alc.mutation.StepName(); ok {
		_spec.SetField(approvallog.FieldStepName, field.TypeString, value)
		_node.StepName = value
	}
	if value, ok := alc.mutation.Metadata(); ok {
		_spec.SetField(approvallog.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := alc.mutation.ApprovedAt(); ok {
		_spec.SetField(approvallog.FieldApprovedAt, field.TypeTime, value)
		_node.ApprovedAt = &value
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(approvallog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := alc.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.ApproverTable,
			Columns: []string{approvallog.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := alc.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   approvallog.TicketTable,
			Columns: []string{approvallog.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TicketID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApprovalLogCreateBulk is the builder for creating many ApprovalLog entities in bulk.
type ApprovalLogCreateBulk struct {
	config
	err      error
	builders []*ApprovalLogCreate
}

// Save creates the ApprovalLog entities in the database.
func (alcb *ApprovalLogCreateBulk) Save(ctx context.Context) ([]*ApprovalLog, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*ApprovalLog, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApprovalLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *ApprovalLogCreateBulk) SaveX(ctx context.Context) []*ApprovalLog {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *ApprovalLogCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *ApprovalLogCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
