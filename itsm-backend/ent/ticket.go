// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 工单标题
	Title string `json:"title,omitempty"`
	// 工单描述
	Description string `json:"description,omitempty"`
	// 工单状态
	Status ticket.Status `json:"status,omitempty"`
	// 优先级
	Priority ticket.Priority `json:"priority,omitempty"`
	// 表单字段JSON数据
	FormFields map[string]interface{} `json:"form_fields,omitempty"`
	// 工单编号
	TicketNumber string `json:"ticket_number,omitempty"`
	// 申请人ID
	RequesterID int `json:"requester_id,omitempty"`
	// 处理人ID
	AssigneeID *int `json:"assignee_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges        TicketEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Requester holds the value of the requester edge.
	Requester *User `json:"requester,omitempty"`
	// Assignee holds the value of the assignee edge.
	Assignee *User `json:"assignee,omitempty"`
	// ApprovalLogs holds the value of the approval_logs edge.
	ApprovalLogs []*ApprovalLog `json:"approval_logs,omitempty"`
	// FlowInstance holds the value of the flow_instance edge.
	FlowInstance *FlowInstance `json:"flow_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) RequesterOrErr() (*User, error) {
	if e.Requester != nil {
		return e.Requester, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// AssigneeOrErr returns the Assignee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) AssigneeOrErr() (*User, error) {
	if e.Assignee != nil {
		return e.Assignee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assignee"}
}

// ApprovalLogsOrErr returns the ApprovalLogs value or an error if the edge
// was not loaded in eager-loading.
func (e TicketEdges) ApprovalLogsOrErr() ([]*ApprovalLog, error) {
	if e.loadedTypes[2] {
		return e.ApprovalLogs, nil
	}
	return nil, &NotLoadedError{edge: "approval_logs"}
}

// FlowInstanceOrErr returns the FlowInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) FlowInstanceOrErr() (*FlowInstance, error) {
	if e.FlowInstance != nil {
		return e.FlowInstance, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: flowinstance.Label}
	}
	return nil, &NotLoadedError{edge: "flow_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldFormFields:
			values[i] = new([]byte)
		case ticket.FieldID, ticket.FieldRequesterID, ticket.FieldAssigneeID:
			values[i] = new(sql.NullInt64)
		case ticket.FieldTitle, ticket.FieldDescription, ticket.FieldStatus, ticket.FieldPriority, ticket.FieldTicketNumber:
			values[i] = new(sql.NullString)
		case ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case ticket.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case ticket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = ticket.Status(value.String)
			}
		case ticket.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				t.Priority = ticket.Priority(value.String)
			}
		case ticket.FieldFormFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.FormFields); err != nil {
					return fmt.Errorf("unmarshal field form_fields: %w", err)
				}
			}
		case ticket.FieldTicketNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_number", values[i])
			} else if value.Valid {
				t.TicketNumber = value.String
			}
		case ticket.FieldRequesterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field requester_id", values[i])
			} else if value.Valid {
				t.RequesterID = int(value.Int64)
			}
		case ticket.FieldAssigneeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[i])
			} else if value.Valid {
				t.AssigneeID = new(int)
				*t.AssigneeID = int(value.Int64)
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryRequester queries the "requester" edge of the Ticket entity.
func (t *Ticket) QueryRequester() *UserQuery {
	return NewTicketClient(t.config).QueryRequester(t)
}

// QueryAssignee queries the "assignee" edge of the Ticket entity.
func (t *Ticket) QueryAssignee() *UserQuery {
	return NewTicketClient(t.config).QueryAssignee(t)
}

// QueryApprovalLogs queries the "approval_logs" edge of the Ticket entity.
func (t *Ticket) QueryApprovalLogs() *ApprovalLogQuery {
	return NewTicketClient(t.config).QueryApprovalLogs(t)
}

// QueryFlowInstance queries the "flow_instance" edge of the Ticket entity.
func (t *Ticket) QueryFlowInstance() *FlowInstanceQuery {
	return NewTicketClient(t.config).QueryFlowInstance(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", t.Priority))
	builder.WriteString(", ")
	builder.WriteString("form_fields=")
	builder.WriteString(fmt.Sprintf("%v", t.FormFields))
	builder.WriteString(", ")
	builder.WriteString("ticket_number=")
	builder.WriteString(t.TicketNumber)
	builder.WriteString(", ")
	builder.WriteString("requester_id=")
	builder.WriteString(fmt.Sprintf("%v", t.RequesterID))
	builder.WriteString(", ")
	if v := t.AssigneeID; v != nil {
		builder.WriteString("assignee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
