// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CITypeUpdate is the builder for updating CIType entities.
type CITypeUpdate struct {
	config
	hooks    []Hook
	mutation *CITypeMutation
}

// Where appends a list predicates to the CITypeUpdate builder.
func (ctu *CITypeUpdate) Where(ps ...predicate.CIType) *CITypeUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetName sets the "name" field.
func (ctu *CITypeUpdate) SetName(s string) *CITypeUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableName(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetName(*s)
	}
	return ctu
}

// SetDisplayName sets the "display_name" field.
func (ctu *CITypeUpdate) SetDisplayName(s string) *CITypeUpdate {
	ctu.mutation.SetDisplayName(s)
	return ctu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableDisplayName(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetDisplayName(*s)
	}
	return ctu
}

// SetDescription sets the "description" field.
func (ctu *CITypeUpdate) SetDescription(s string) *CITypeUpdate {
	ctu.mutation.SetDescription(s)
	return ctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableDescription(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetDescription(*s)
	}
	return ctu
}

// ClearDescription clears the value of the "description" field.
func (ctu *CITypeUpdate) ClearDescription() *CITypeUpdate {
	ctu.mutation.ClearDescription()
	return ctu
}

// SetCategory sets the "category" field.
func (ctu *CITypeUpdate) SetCategory(s string) *CITypeUpdate {
	ctu.mutation.SetCategory(s)
	return ctu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableCategory(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetCategory(*s)
	}
	return ctu
}

// SetIcon sets the "icon" field.
func (ctu *CITypeUpdate) SetIcon(s string) *CITypeUpdate {
	ctu.mutation.SetIcon(s)
	return ctu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableIcon(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetIcon(*s)
	}
	return ctu
}

// ClearIcon clears the value of the "icon" field.
func (ctu *CITypeUpdate) ClearIcon() *CITypeUpdate {
	ctu.mutation.ClearIcon()
	return ctu
}

// SetAttributeSchema sets the "attribute_schema" field.
func (ctu *CITypeUpdate) SetAttributeSchema(m map[string]interface{}) *CITypeUpdate {
	ctu.mutation.SetAttributeSchema(m)
	return ctu
}

// ClearAttributeSchema clears the value of the "attribute_schema" field.
func (ctu *CITypeUpdate) ClearAttributeSchema() *CITypeUpdate {
	ctu.mutation.ClearAttributeSchema()
	return ctu
}

// SetValidationRules sets the "validation_rules" field.
func (ctu *CITypeUpdate) SetValidationRules(m map[string]interface{}) *CITypeUpdate {
	ctu.mutation.SetValidationRules(m)
	return ctu
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (ctu *CITypeUpdate) ClearValidationRules() *CITypeUpdate {
	ctu.mutation.ClearValidationRules()
	return ctu
}

// SetIsSystem sets the "is_system" field.
func (ctu *CITypeUpdate) SetIsSystem(b bool) *CITypeUpdate {
	ctu.mutation.SetIsSystem(b)
	return ctu
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableIsSystem(b *bool) *CITypeUpdate {
	if b != nil {
		ctu.SetIsSystem(*b)
	}
	return ctu
}

// SetIsActive sets the "is_active" field.
func (ctu *CITypeUpdate) SetIsActive(b bool) *CITypeUpdate {
	ctu.mutation.SetIsActive(b)
	return ctu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableIsActive(b *bool) *CITypeUpdate {
	if b != nil {
		ctu.SetIsActive(*b)
	}
	return ctu
}

// SetTenantID sets the "tenant_id" field.
func (ctu *CITypeUpdate) SetTenantID(i int) *CITypeUpdate {
	ctu.mutation.SetTenantID(i)
	return ctu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableTenantID(i *int) *CITypeUpdate {
	if i != nil {
		ctu.SetTenantID(*i)
	}
	return ctu
}

// SetCreatedAt sets the "created_at" field.
func (ctu *CITypeUpdate) SetCreatedAt(t time.Time) *CITypeUpdate {
	ctu.mutation.SetCreatedAt(t)
	return ctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableCreatedAt(t *time.Time) *CITypeUpdate {
	if t != nil {
		ctu.SetCreatedAt(*t)
	}
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CITypeUpdate) SetUpdatedAt(t time.Time) *CITypeUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ctu *CITypeUpdate) SetTenant(t *Tenant) *CITypeUpdate {
	return ctu.SetTenantID(t.ID)
}

// AddConfigurationItemIDs adds the "configuration_items" edge to the ConfigurationItem entity by IDs.
func (ctu *CITypeUpdate) AddConfigurationItemIDs(ids ...int) *CITypeUpdate {
	ctu.mutation.AddConfigurationItemIDs(ids...)
	return ctu
}

// AddConfigurationItems adds the "configuration_items" edges to the ConfigurationItem entity.
func (ctu *CITypeUpdate) AddConfigurationItems(c ...*ConfigurationItem) *CITypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddConfigurationItemIDs(ids...)
}

// AddAllowedRelationshipIDs adds the "allowed_relationships" edge to the CIRelationshipType entity by IDs.
func (ctu *CITypeUpdate) AddAllowedRelationshipIDs(ids ...int) *CITypeUpdate {
	ctu.mutation.AddAllowedRelationshipIDs(ids...)
	return ctu
}

// AddAllowedRelationships adds the "allowed_relationships" edges to the CIRelationshipType entity.
func (ctu *CITypeUpdate) AddAllowedRelationships(c ...*CIRelationshipType) *CITypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddAllowedRelationshipIDs(ids...)
}

// Mutation returns the CITypeMutation object of the builder.
func (ctu *CITypeUpdate) Mutation() *CITypeMutation {
	return ctu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ctu *CITypeUpdate) ClearTenant() *CITypeUpdate {
	ctu.mutation.ClearTenant()
	return ctu
}

// ClearConfigurationItems clears all "configuration_items" edges to the ConfigurationItem entity.
func (ctu *CITypeUpdate) ClearConfigurationItems() *CITypeUpdate {
	ctu.mutation.ClearConfigurationItems()
	return ctu
}

// RemoveConfigurationItemIDs removes the "configuration_items" edge to ConfigurationItem entities by IDs.
func (ctu *CITypeUpdate) RemoveConfigurationItemIDs(ids ...int) *CITypeUpdate {
	ctu.mutation.RemoveConfigurationItemIDs(ids...)
	return ctu
}

// RemoveConfigurationItems removes "configuration_items" edges to ConfigurationItem entities.
func (ctu *CITypeUpdate) RemoveConfigurationItems(c ...*ConfigurationItem) *CITypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveConfigurationItemIDs(ids...)
}

// ClearAllowedRelationships clears all "allowed_relationships" edges to the CIRelationshipType entity.
func (ctu *CITypeUpdate) ClearAllowedRelationships() *CITypeUpdate {
	ctu.mutation.ClearAllowedRelationships()
	return ctu
}

// RemoveAllowedRelationshipIDs removes the "allowed_relationships" edge to CIRelationshipType entities by IDs.
func (ctu *CITypeUpdate) RemoveAllowedRelationshipIDs(ids ...int) *CITypeUpdate {
	ctu.mutation.RemoveAllowedRelationshipIDs(ids...)
	return ctu
}

// RemoveAllowedRelationships removes "allowed_relationships" edges to CIRelationshipType entities.
func (ctu *CITypeUpdate) RemoveAllowedRelationships(c ...*CIRelationshipType) *CITypeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveAllowedRelationshipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CITypeUpdate) Save(ctx context.Context) (int, error) {
	ctu.defaults()
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CITypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CITypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CITypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CITypeUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := citype.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *CITypeUpdate) check() error {
	if v, ok := ctu.mutation.Name(); ok {
		if err := citype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIType.name": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.DisplayName(); ok {
		if err := citype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIType.display_name": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Category(); ok {
		if err := citype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "CIType.category": %w`, err)}
		}
	}
	if ctu.mutation.TenantCleared() && len(ctu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIType.tenant"`)
	}
	return nil
}

func (ctu *CITypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(citype.Table, citype.Columns, sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.SetField(citype.FieldName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.DisplayName(); ok {
		_spec.SetField(citype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Description(); ok {
		_spec.SetField(citype.FieldDescription, field.TypeString, value)
	}
	if ctu.mutation.DescriptionCleared() {
		_spec.ClearField(citype.FieldDescription, field.TypeString)
	}
	if value, ok := ctu.mutation.Category(); ok {
		_spec.SetField(citype.FieldCategory, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Icon(); ok {
		_spec.SetField(citype.FieldIcon, field.TypeString, value)
	}
	if ctu.mutation.IconCleared() {
		_spec.ClearField(citype.FieldIcon, field.TypeString)
	}
	if value, ok := ctu.mutation.AttributeSchema(); ok {
		_spec.SetField(citype.FieldAttributeSchema, field.TypeJSON, value)
	}
	if ctu.mutation.AttributeSchemaCleared() {
		_spec.ClearField(citype.FieldAttributeSchema, field.TypeJSON)
	}
	if value, ok := ctu.mutation.ValidationRules(); ok {
		_spec.SetField(citype.FieldValidationRules, field.TypeJSON, value)
	}
	if ctu.mutation.ValidationRulesCleared() {
		_spec.ClearField(citype.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := ctu.mutation.IsSystem(); ok {
		_spec.SetField(citype.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := ctu.mutation.IsActive(); ok {
		_spec.SetField(citype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ctu.mutation.CreatedAt(); ok {
		_spec.SetField(citype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(citype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   citype.TenantTable,
			Columns: []string{citype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   citype.TenantTable,
			Columns: []string{citype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.ConfigurationItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedConfigurationItemsIDs(); len(nodes) > 0 && !ctu.mutation.ConfigurationItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.ConfigurationItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctu.mutation.AllowedRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedAllowedRelationshipsIDs(); len(nodes) > 0 && !ctu.mutation.AllowedRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.AllowedRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CITypeUpdateOne is the builder for updating a single CIType entity.
type CITypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CITypeMutation
}

// SetName sets the "name" field.
func (ctuo *CITypeUpdateOne) SetName(s string) *CITypeUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableName(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetName(*s)
	}
	return ctuo
}

// SetDisplayName sets the "display_name" field.
func (ctuo *CITypeUpdateOne) SetDisplayName(s string) *CITypeUpdateOne {
	ctuo.mutation.SetDisplayName(s)
	return ctuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableDisplayName(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetDisplayName(*s)
	}
	return ctuo
}

// SetDescription sets the "description" field.
func (ctuo *CITypeUpdateOne) SetDescription(s string) *CITypeUpdateOne {
	ctuo.mutation.SetDescription(s)
	return ctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableDescription(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetDescription(*s)
	}
	return ctuo
}

// ClearDescription clears the value of the "description" field.
func (ctuo *CITypeUpdateOne) ClearDescription() *CITypeUpdateOne {
	ctuo.mutation.ClearDescription()
	return ctuo
}

// SetCategory sets the "category" field.
func (ctuo *CITypeUpdateOne) SetCategory(s string) *CITypeUpdateOne {
	ctuo.mutation.SetCategory(s)
	return ctuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableCategory(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetCategory(*s)
	}
	return ctuo
}

// SetIcon sets the "icon" field.
func (ctuo *CITypeUpdateOne) SetIcon(s string) *CITypeUpdateOne {
	ctuo.mutation.SetIcon(s)
	return ctuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableIcon(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetIcon(*s)
	}
	return ctuo
}

// ClearIcon clears the value of the "icon" field.
func (ctuo *CITypeUpdateOne) ClearIcon() *CITypeUpdateOne {
	ctuo.mutation.ClearIcon()
	return ctuo
}

// SetAttributeSchema sets the "attribute_schema" field.
func (ctuo *CITypeUpdateOne) SetAttributeSchema(m map[string]interface{}) *CITypeUpdateOne {
	ctuo.mutation.SetAttributeSchema(m)
	return ctuo
}

// ClearAttributeSchema clears the value of the "attribute_schema" field.
func (ctuo *CITypeUpdateOne) ClearAttributeSchema() *CITypeUpdateOne {
	ctuo.mutation.ClearAttributeSchema()
	return ctuo
}

// SetValidationRules sets the "validation_rules" field.
func (ctuo *CITypeUpdateOne) SetValidationRules(m map[string]interface{}) *CITypeUpdateOne {
	ctuo.mutation.SetValidationRules(m)
	return ctuo
}

// ClearValidationRules clears the value of the "validation_rules" field.
func (ctuo *CITypeUpdateOne) ClearValidationRules() *CITypeUpdateOne {
	ctuo.mutation.ClearValidationRules()
	return ctuo
}

// SetIsSystem sets the "is_system" field.
func (ctuo *CITypeUpdateOne) SetIsSystem(b bool) *CITypeUpdateOne {
	ctuo.mutation.SetIsSystem(b)
	return ctuo
}

// SetNillableIsSystem sets the "is_system" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableIsSystem(b *bool) *CITypeUpdateOne {
	if b != nil {
		ctuo.SetIsSystem(*b)
	}
	return ctuo
}

// SetIsActive sets the "is_active" field.
func (ctuo *CITypeUpdateOne) SetIsActive(b bool) *CITypeUpdateOne {
	ctuo.mutation.SetIsActive(b)
	return ctuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableIsActive(b *bool) *CITypeUpdateOne {
	if b != nil {
		ctuo.SetIsActive(*b)
	}
	return ctuo
}

// SetTenantID sets the "tenant_id" field.
func (ctuo *CITypeUpdateOne) SetTenantID(i int) *CITypeUpdateOne {
	ctuo.mutation.SetTenantID(i)
	return ctuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableTenantID(i *int) *CITypeUpdateOne {
	if i != nil {
		ctuo.SetTenantID(*i)
	}
	return ctuo
}

// SetCreatedAt sets the "created_at" field.
func (ctuo *CITypeUpdateOne) SetCreatedAt(t time.Time) *CITypeUpdateOne {
	ctuo.mutation.SetCreatedAt(t)
	return ctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableCreatedAt(t *time.Time) *CITypeUpdateOne {
	if t != nil {
		ctuo.SetCreatedAt(*t)
	}
	return ctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CITypeUpdateOne) SetUpdatedAt(t time.Time) *CITypeUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ctuo *CITypeUpdateOne) SetTenant(t *Tenant) *CITypeUpdateOne {
	return ctuo.SetTenantID(t.ID)
}

// AddConfigurationItemIDs adds the "configuration_items" edge to the ConfigurationItem entity by IDs.
func (ctuo *CITypeUpdateOne) AddConfigurationItemIDs(ids ...int) *CITypeUpdateOne {
	ctuo.mutation.AddConfigurationItemIDs(ids...)
	return ctuo
}

// AddConfigurationItems adds the "configuration_items" edges to the ConfigurationItem entity.
func (ctuo *CITypeUpdateOne) AddConfigurationItems(c ...*ConfigurationItem) *CITypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddConfigurationItemIDs(ids...)
}

// AddAllowedRelationshipIDs adds the "allowed_relationships" edge to the CIRelationshipType entity by IDs.
func (ctuo *CITypeUpdateOne) AddAllowedRelationshipIDs(ids ...int) *CITypeUpdateOne {
	ctuo.mutation.AddAllowedRelationshipIDs(ids...)
	return ctuo
}

// AddAllowedRelationships adds the "allowed_relationships" edges to the CIRelationshipType entity.
func (ctuo *CITypeUpdateOne) AddAllowedRelationships(c ...*CIRelationshipType) *CITypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddAllowedRelationshipIDs(ids...)
}

// Mutation returns the CITypeMutation object of the builder.
func (ctuo *CITypeUpdateOne) Mutation() *CITypeMutation {
	return ctuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ctuo *CITypeUpdateOne) ClearTenant() *CITypeUpdateOne {
	ctuo.mutation.ClearTenant()
	return ctuo
}

// ClearConfigurationItems clears all "configuration_items" edges to the ConfigurationItem entity.
func (ctuo *CITypeUpdateOne) ClearConfigurationItems() *CITypeUpdateOne {
	ctuo.mutation.ClearConfigurationItems()
	return ctuo
}

// RemoveConfigurationItemIDs removes the "configuration_items" edge to ConfigurationItem entities by IDs.
func (ctuo *CITypeUpdateOne) RemoveConfigurationItemIDs(ids ...int) *CITypeUpdateOne {
	ctuo.mutation.RemoveConfigurationItemIDs(ids...)
	return ctuo
}

// RemoveConfigurationItems removes "configuration_items" edges to ConfigurationItem entities.
func (ctuo *CITypeUpdateOne) RemoveConfigurationItems(c ...*ConfigurationItem) *CITypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveConfigurationItemIDs(ids...)
}

// ClearAllowedRelationships clears all "allowed_relationships" edges to the CIRelationshipType entity.
func (ctuo *CITypeUpdateOne) ClearAllowedRelationships() *CITypeUpdateOne {
	ctuo.mutation.ClearAllowedRelationships()
	return ctuo
}

// RemoveAllowedRelationshipIDs removes the "allowed_relationships" edge to CIRelationshipType entities by IDs.
func (ctuo *CITypeUpdateOne) RemoveAllowedRelationshipIDs(ids ...int) *CITypeUpdateOne {
	ctuo.mutation.RemoveAllowedRelationshipIDs(ids...)
	return ctuo
}

// RemoveAllowedRelationships removes "allowed_relationships" edges to CIRelationshipType entities.
func (ctuo *CITypeUpdateOne) RemoveAllowedRelationships(c ...*CIRelationshipType) *CITypeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveAllowedRelationshipIDs(ids...)
}

// Where appends a list predicates to the CITypeUpdate builder.
func (ctuo *CITypeUpdateOne) Where(ps ...predicate.CIType) *CITypeUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CITypeUpdateOne) Select(field string, fields ...string) *CITypeUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CIType entity.
func (ctuo *CITypeUpdateOne) Save(ctx context.Context) (*CIType, error) {
	ctuo.defaults()
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CITypeUpdateOne) SaveX(ctx context.Context) *CIType {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CITypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CITypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CITypeUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := citype.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *CITypeUpdateOne) check() error {
	if v, ok := ctuo.mutation.Name(); ok {
		if err := citype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIType.name": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.DisplayName(); ok {
		if err := citype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "CIType.display_name": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Category(); ok {
		if err := citype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "CIType.category": %w`, err)}
		}
	}
	if ctuo.mutation.TenantCleared() && len(ctuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CIType.tenant"`)
	}
	return nil
}

func (ctuo *CITypeUpdateOne) sqlSave(ctx context.Context) (_node *CIType, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(citype.Table, citype.Columns, sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, citype.FieldID)
		for _, f := range fields {
			if !citype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != citype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.SetField(citype.FieldName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.DisplayName(); ok {
		_spec.SetField(citype.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Description(); ok {
		_spec.SetField(citype.FieldDescription, field.TypeString, value)
	}
	if ctuo.mutation.DescriptionCleared() {
		_spec.ClearField(citype.FieldDescription, field.TypeString)
	}
	if value, ok := ctuo.mutation.Category(); ok {
		_spec.SetField(citype.FieldCategory, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Icon(); ok {
		_spec.SetField(citype.FieldIcon, field.TypeString, value)
	}
	if ctuo.mutation.IconCleared() {
		_spec.ClearField(citype.FieldIcon, field.TypeString)
	}
	if value, ok := ctuo.mutation.AttributeSchema(); ok {
		_spec.SetField(citype.FieldAttributeSchema, field.TypeJSON, value)
	}
	if ctuo.mutation.AttributeSchemaCleared() {
		_spec.ClearField(citype.FieldAttributeSchema, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.ValidationRules(); ok {
		_spec.SetField(citype.FieldValidationRules, field.TypeJSON, value)
	}
	if ctuo.mutation.ValidationRulesCleared() {
		_spec.ClearField(citype.FieldValidationRules, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.IsSystem(); ok {
		_spec.SetField(citype.FieldIsSystem, field.TypeBool, value)
	}
	if value, ok := ctuo.mutation.IsActive(); ok {
		_spec.SetField(citype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ctuo.mutation.CreatedAt(); ok {
		_spec.SetField(citype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(citype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   citype.TenantTable,
			Columns: []string{citype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   citype.TenantTable,
			Columns: []string{citype.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.ConfigurationItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedConfigurationItemsIDs(); len(nodes) > 0 && !ctuo.mutation.ConfigurationItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.ConfigurationItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.ConfigurationItemsTable,
			Columns: []string{citype.ConfigurationItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ctuo.mutation.AllowedRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedAllowedRelationshipsIDs(); len(nodes) > 0 && !ctuo.mutation.AllowedRelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.AllowedRelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   citype.AllowedRelationshipsTable,
			Columns: []string{citype.AllowedRelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cirelationshiptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CIType{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
