// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CITypeUpdate is the builder for updating CIType entities.
type CITypeUpdate struct {
	config
	hooks    []Hook
	mutation *CITypeMutation
}

// Where appends a list predicates to the CITypeUpdate builder.
func (ctu *CITypeUpdate) Where(ps ...predicate.CIType) *CITypeUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetName sets the "name" field.
func (ctu *CITypeUpdate) SetName(s string) *CITypeUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableName(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetName(*s)
	}
	return ctu
}

// SetDescription sets the "description" field.
func (ctu *CITypeUpdate) SetDescription(s string) *CITypeUpdate {
	ctu.mutation.SetDescription(s)
	return ctu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableDescription(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetDescription(*s)
	}
	return ctu
}

// ClearDescription clears the value of the "description" field.
func (ctu *CITypeUpdate) ClearDescription() *CITypeUpdate {
	ctu.mutation.ClearDescription()
	return ctu
}

// SetIcon sets the "icon" field.
func (ctu *CITypeUpdate) SetIcon(s string) *CITypeUpdate {
	ctu.mutation.SetIcon(s)
	return ctu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableIcon(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetIcon(*s)
	}
	return ctu
}

// ClearIcon clears the value of the "icon" field.
func (ctu *CITypeUpdate) ClearIcon() *CITypeUpdate {
	ctu.mutation.ClearIcon()
	return ctu
}

// SetColor sets the "color" field.
func (ctu *CITypeUpdate) SetColor(s string) *CITypeUpdate {
	ctu.mutation.SetColor(s)
	return ctu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableColor(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetColor(*s)
	}
	return ctu
}

// ClearColor clears the value of the "color" field.
func (ctu *CITypeUpdate) ClearColor() *CITypeUpdate {
	ctu.mutation.ClearColor()
	return ctu
}

// SetAttributeSchema sets the "attribute_schema" field.
func (ctu *CITypeUpdate) SetAttributeSchema(s string) *CITypeUpdate {
	ctu.mutation.SetAttributeSchema(s)
	return ctu
}

// SetNillableAttributeSchema sets the "attribute_schema" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableAttributeSchema(s *string) *CITypeUpdate {
	if s != nil {
		ctu.SetAttributeSchema(*s)
	}
	return ctu
}

// ClearAttributeSchema clears the value of the "attribute_schema" field.
func (ctu *CITypeUpdate) ClearAttributeSchema() *CITypeUpdate {
	ctu.mutation.ClearAttributeSchema()
	return ctu
}

// SetTenantID sets the "tenant_id" field.
func (ctu *CITypeUpdate) SetTenantID(i int) *CITypeUpdate {
	ctu.mutation.ResetTenantID()
	ctu.mutation.SetTenantID(i)
	return ctu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableTenantID(i *int) *CITypeUpdate {
	if i != nil {
		ctu.SetTenantID(*i)
	}
	return ctu
}

// AddTenantID adds i to the "tenant_id" field.
func (ctu *CITypeUpdate) AddTenantID(i int) *CITypeUpdate {
	ctu.mutation.AddTenantID(i)
	return ctu
}

// SetIsActive sets the "is_active" field.
func (ctu *CITypeUpdate) SetIsActive(b bool) *CITypeUpdate {
	ctu.mutation.SetIsActive(b)
	return ctu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableIsActive(b *bool) *CITypeUpdate {
	if b != nil {
		ctu.SetIsActive(*b)
	}
	return ctu
}

// SetCreatedAt sets the "created_at" field.
func (ctu *CITypeUpdate) SetCreatedAt(t time.Time) *CITypeUpdate {
	ctu.mutation.SetCreatedAt(t)
	return ctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctu *CITypeUpdate) SetNillableCreatedAt(t *time.Time) *CITypeUpdate {
	if t != nil {
		ctu.SetCreatedAt(*t)
	}
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CITypeUpdate) SetUpdatedAt(t time.Time) *CITypeUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// Mutation returns the CITypeMutation object of the builder.
func (ctu *CITypeUpdate) Mutation() *CITypeMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CITypeUpdate) Save(ctx context.Context) (int, error) {
	ctu.defaults()
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CITypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CITypeUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CITypeUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CITypeUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := citype.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *CITypeUpdate) check() error {
	if v, ok := ctu.mutation.Name(); ok {
		if err := citype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIType.name": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.TenantID(); ok {
		if err := citype.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CIType.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ctu *CITypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(citype.Table, citype.Columns, sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.SetField(citype.FieldName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Description(); ok {
		_spec.SetField(citype.FieldDescription, field.TypeString, value)
	}
	if ctu.mutation.DescriptionCleared() {
		_spec.ClearField(citype.FieldDescription, field.TypeString)
	}
	if value, ok := ctu.mutation.Icon(); ok {
		_spec.SetField(citype.FieldIcon, field.TypeString, value)
	}
	if ctu.mutation.IconCleared() {
		_spec.ClearField(citype.FieldIcon, field.TypeString)
	}
	if value, ok := ctu.mutation.Color(); ok {
		_spec.SetField(citype.FieldColor, field.TypeString, value)
	}
	if ctu.mutation.ColorCleared() {
		_spec.ClearField(citype.FieldColor, field.TypeString)
	}
	if value, ok := ctu.mutation.AttributeSchema(); ok {
		_spec.SetField(citype.FieldAttributeSchema, field.TypeString, value)
	}
	if ctu.mutation.AttributeSchemaCleared() {
		_spec.ClearField(citype.FieldAttributeSchema, field.TypeString)
	}
	if value, ok := ctu.mutation.TenantID(); ok {
		_spec.SetField(citype.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ctu.mutation.AddedTenantID(); ok {
		_spec.AddField(citype.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ctu.mutation.IsActive(); ok {
		_spec.SetField(citype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ctu.mutation.CreatedAt(); ok {
		_spec.SetField(citype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(citype.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CITypeUpdateOne is the builder for updating a single CIType entity.
type CITypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CITypeMutation
}

// SetName sets the "name" field.
func (ctuo *CITypeUpdateOne) SetName(s string) *CITypeUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableName(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetName(*s)
	}
	return ctuo
}

// SetDescription sets the "description" field.
func (ctuo *CITypeUpdateOne) SetDescription(s string) *CITypeUpdateOne {
	ctuo.mutation.SetDescription(s)
	return ctuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableDescription(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetDescription(*s)
	}
	return ctuo
}

// ClearDescription clears the value of the "description" field.
func (ctuo *CITypeUpdateOne) ClearDescription() *CITypeUpdateOne {
	ctuo.mutation.ClearDescription()
	return ctuo
}

// SetIcon sets the "icon" field.
func (ctuo *CITypeUpdateOne) SetIcon(s string) *CITypeUpdateOne {
	ctuo.mutation.SetIcon(s)
	return ctuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableIcon(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetIcon(*s)
	}
	return ctuo
}

// ClearIcon clears the value of the "icon" field.
func (ctuo *CITypeUpdateOne) ClearIcon() *CITypeUpdateOne {
	ctuo.mutation.ClearIcon()
	return ctuo
}

// SetColor sets the "color" field.
func (ctuo *CITypeUpdateOne) SetColor(s string) *CITypeUpdateOne {
	ctuo.mutation.SetColor(s)
	return ctuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableColor(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetColor(*s)
	}
	return ctuo
}

// ClearColor clears the value of the "color" field.
func (ctuo *CITypeUpdateOne) ClearColor() *CITypeUpdateOne {
	ctuo.mutation.ClearColor()
	return ctuo
}

// SetAttributeSchema sets the "attribute_schema" field.
func (ctuo *CITypeUpdateOne) SetAttributeSchema(s string) *CITypeUpdateOne {
	ctuo.mutation.SetAttributeSchema(s)
	return ctuo
}

// SetNillableAttributeSchema sets the "attribute_schema" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableAttributeSchema(s *string) *CITypeUpdateOne {
	if s != nil {
		ctuo.SetAttributeSchema(*s)
	}
	return ctuo
}

// ClearAttributeSchema clears the value of the "attribute_schema" field.
func (ctuo *CITypeUpdateOne) ClearAttributeSchema() *CITypeUpdateOne {
	ctuo.mutation.ClearAttributeSchema()
	return ctuo
}

// SetTenantID sets the "tenant_id" field.
func (ctuo *CITypeUpdateOne) SetTenantID(i int) *CITypeUpdateOne {
	ctuo.mutation.ResetTenantID()
	ctuo.mutation.SetTenantID(i)
	return ctuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableTenantID(i *int) *CITypeUpdateOne {
	if i != nil {
		ctuo.SetTenantID(*i)
	}
	return ctuo
}

// AddTenantID adds i to the "tenant_id" field.
func (ctuo *CITypeUpdateOne) AddTenantID(i int) *CITypeUpdateOne {
	ctuo.mutation.AddTenantID(i)
	return ctuo
}

// SetIsActive sets the "is_active" field.
func (ctuo *CITypeUpdateOne) SetIsActive(b bool) *CITypeUpdateOne {
	ctuo.mutation.SetIsActive(b)
	return ctuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableIsActive(b *bool) *CITypeUpdateOne {
	if b != nil {
		ctuo.SetIsActive(*b)
	}
	return ctuo
}

// SetCreatedAt sets the "created_at" field.
func (ctuo *CITypeUpdateOne) SetCreatedAt(t time.Time) *CITypeUpdateOne {
	ctuo.mutation.SetCreatedAt(t)
	return ctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctuo *CITypeUpdateOne) SetNillableCreatedAt(t *time.Time) *CITypeUpdateOne {
	if t != nil {
		ctuo.SetCreatedAt(*t)
	}
	return ctuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CITypeUpdateOne) SetUpdatedAt(t time.Time) *CITypeUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// Mutation returns the CITypeMutation object of the builder.
func (ctuo *CITypeUpdateOne) Mutation() *CITypeMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the CITypeUpdate builder.
func (ctuo *CITypeUpdateOne) Where(ps ...predicate.CIType) *CITypeUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CITypeUpdateOne) Select(field string, fields ...string) *CITypeUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CIType entity.
func (ctuo *CITypeUpdateOne) Save(ctx context.Context) (*CIType, error) {
	ctuo.defaults()
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CITypeUpdateOne) SaveX(ctx context.Context) *CIType {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CITypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CITypeUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CITypeUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := citype.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *CITypeUpdateOne) check() error {
	if v, ok := ctuo.mutation.Name(); ok {
		if err := citype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CIType.name": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.TenantID(); ok {
		if err := citype.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CIType.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ctuo *CITypeUpdateOne) sqlSave(ctx context.Context) (_node *CIType, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(citype.Table, citype.Columns, sqlgraph.NewFieldSpec(citype.FieldID, field.TypeInt))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CIType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, citype.FieldID)
		for _, f := range fields {
			if !citype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != citype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.SetField(citype.FieldName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Description(); ok {
		_spec.SetField(citype.FieldDescription, field.TypeString, value)
	}
	if ctuo.mutation.DescriptionCleared() {
		_spec.ClearField(citype.FieldDescription, field.TypeString)
	}
	if value, ok := ctuo.mutation.Icon(); ok {
		_spec.SetField(citype.FieldIcon, field.TypeString, value)
	}
	if ctuo.mutation.IconCleared() {
		_spec.ClearField(citype.FieldIcon, field.TypeString)
	}
	if value, ok := ctuo.mutation.Color(); ok {
		_spec.SetField(citype.FieldColor, field.TypeString, value)
	}
	if ctuo.mutation.ColorCleared() {
		_spec.ClearField(citype.FieldColor, field.TypeString)
	}
	if value, ok := ctuo.mutation.AttributeSchema(); ok {
		_spec.SetField(citype.FieldAttributeSchema, field.TypeString, value)
	}
	if ctuo.mutation.AttributeSchemaCleared() {
		_spec.ClearField(citype.FieldAttributeSchema, field.TypeString)
	}
	if value, ok := ctuo.mutation.TenantID(); ok {
		_spec.SetField(citype.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ctuo.mutation.AddedTenantID(); ok {
		_spec.AddField(citype.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ctuo.mutation.IsActive(); ok {
		_spec.SetField(citype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ctuo.mutation.CreatedAt(); ok {
		_spec.SetField(citype.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(citype.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &CIType{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
