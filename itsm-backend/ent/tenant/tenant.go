// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSettings holds the string denoting the settings field in the database.
	FieldSettings = "settings"
	// FieldQuota holds the string denoting the quota field in the database.
	FieldQuota = "quota"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeTickets holds the string denoting the tickets edge name in mutations.
	EdgeTickets = "tickets"
	// EdgeServiceCatalogs holds the string denoting the service_catalogs edge name in mutations.
	EdgeServiceCatalogs = "service_catalogs"
	// EdgeServiceRequests holds the string denoting the service_requests edge name in mutations.
	EdgeServiceRequests = "service_requests"
	// EdgeSubscriptions holds the string denoting the subscriptions edge name in mutations.
	EdgeSubscriptions = "subscriptions"
	// EdgeConfigurationItems holds the string denoting the configuration_items edge name in mutations.
	EdgeConfigurationItems = "configuration_items"
	// EdgeKnowledgeArticles holds the string denoting the knowledge_articles edge name in mutations.
	EdgeKnowledgeArticles = "knowledge_articles"
	// EdgeWorkflows holds the string denoting the workflows edge name in mutations.
	EdgeWorkflows = "workflows"
	// EdgeCiTypes holds the string denoting the ci_types edge name in mutations.
	EdgeCiTypes = "ci_types"
	// EdgeCiRelationshipTypes holds the string denoting the ci_relationship_types edge name in mutations.
	EdgeCiRelationshipTypes = "ci_relationship_types"
	// EdgeCiRelationships holds the string denoting the ci_relationships edge name in mutations.
	EdgeCiRelationships = "ci_relationships"
	// EdgeCiLifecycleStates holds the string denoting the ci_lifecycle_states edge name in mutations.
	EdgeCiLifecycleStates = "ci_lifecycle_states"
	// EdgeCiChangeRecords holds the string denoting the ci_change_records edge name in mutations.
	EdgeCiChangeRecords = "ci_change_records"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "tenant_id"
	// TicketsTable is the table that holds the tickets relation/edge.
	TicketsTable = "tickets"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "tenant_id"
	// ServiceCatalogsTable is the table that holds the service_catalogs relation/edge.
	ServiceCatalogsTable = "service_catalogs"
	// ServiceCatalogsInverseTable is the table name for the ServiceCatalog entity.
	// It exists in this package in order to avoid circular dependency with the "servicecatalog" package.
	ServiceCatalogsInverseTable = "service_catalogs"
	// ServiceCatalogsColumn is the table column denoting the service_catalogs relation/edge.
	ServiceCatalogsColumn = "tenant_id"
	// ServiceRequestsTable is the table that holds the service_requests relation/edge.
	ServiceRequestsTable = "service_requests"
	// ServiceRequestsInverseTable is the table name for the ServiceRequest entity.
	// It exists in this package in order to avoid circular dependency with the "servicerequest" package.
	ServiceRequestsInverseTable = "service_requests"
	// ServiceRequestsColumn is the table column denoting the service_requests relation/edge.
	ServiceRequestsColumn = "tenant_id"
	// SubscriptionsTable is the table that holds the subscriptions relation/edge.
	SubscriptionsTable = "subscriptions"
	// SubscriptionsInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionsInverseTable = "subscriptions"
	// SubscriptionsColumn is the table column denoting the subscriptions relation/edge.
	SubscriptionsColumn = "tenant_id"
	// ConfigurationItemsTable is the table that holds the configuration_items relation/edge.
	ConfigurationItemsTable = "configuration_items"
	// ConfigurationItemsInverseTable is the table name for the ConfigurationItem entity.
	// It exists in this package in order to avoid circular dependency with the "configurationitem" package.
	ConfigurationItemsInverseTable = "configuration_items"
	// ConfigurationItemsColumn is the table column denoting the configuration_items relation/edge.
	ConfigurationItemsColumn = "tenant_id"
	// KnowledgeArticlesTable is the table that holds the knowledge_articles relation/edge.
	KnowledgeArticlesTable = "knowledge_articles"
	// KnowledgeArticlesInverseTable is the table name for the KnowledgeArticle entity.
	// It exists in this package in order to avoid circular dependency with the "knowledgearticle" package.
	KnowledgeArticlesInverseTable = "knowledge_articles"
	// KnowledgeArticlesColumn is the table column denoting the knowledge_articles relation/edge.
	KnowledgeArticlesColumn = "tenant_id"
	// WorkflowsTable is the table that holds the workflows relation/edge.
	WorkflowsTable = "workflows"
	// WorkflowsInverseTable is the table name for the Workflow entity.
	// It exists in this package in order to avoid circular dependency with the "workflow" package.
	WorkflowsInverseTable = "workflows"
	// WorkflowsColumn is the table column denoting the workflows relation/edge.
	WorkflowsColumn = "tenant_id"
	// CiTypesTable is the table that holds the ci_types relation/edge.
	CiTypesTable = "ci_types"
	// CiTypesInverseTable is the table name for the CIType entity.
	// It exists in this package in order to avoid circular dependency with the "citype" package.
	CiTypesInverseTable = "ci_types"
	// CiTypesColumn is the table column denoting the ci_types relation/edge.
	CiTypesColumn = "tenant_id"
	// CiRelationshipTypesTable is the table that holds the ci_relationship_types relation/edge.
	CiRelationshipTypesTable = "ci_relationship_types"
	// CiRelationshipTypesInverseTable is the table name for the CIRelationshipType entity.
	// It exists in this package in order to avoid circular dependency with the "cirelationshiptype" package.
	CiRelationshipTypesInverseTable = "ci_relationship_types"
	// CiRelationshipTypesColumn is the table column denoting the ci_relationship_types relation/edge.
	CiRelationshipTypesColumn = "tenant_id"
	// CiRelationshipsTable is the table that holds the ci_relationships relation/edge.
	CiRelationshipsTable = "ci_relationships"
	// CiRelationshipsInverseTable is the table name for the CIRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "cirelationship" package.
	CiRelationshipsInverseTable = "ci_relationships"
	// CiRelationshipsColumn is the table column denoting the ci_relationships relation/edge.
	CiRelationshipsColumn = "tenant_id"
	// CiLifecycleStatesTable is the table that holds the ci_lifecycle_states relation/edge.
	CiLifecycleStatesTable = "ci_lifecycle_states"
	// CiLifecycleStatesInverseTable is the table name for the CILifecycleState entity.
	// It exists in this package in order to avoid circular dependency with the "cilifecyclestate" package.
	CiLifecycleStatesInverseTable = "ci_lifecycle_states"
	// CiLifecycleStatesColumn is the table column denoting the ci_lifecycle_states relation/edge.
	CiLifecycleStatesColumn = "tenant_id"
	// CiChangeRecordsTable is the table that holds the ci_change_records relation/edge.
	CiChangeRecordsTable = "ci_change_records"
	// CiChangeRecordsInverseTable is the table name for the CIChangeRecord entity.
	// It exists in this package in order to avoid circular dependency with the "cichangerecord" package.
	CiChangeRecordsInverseTable = "ci_change_records"
	// CiChangeRecordsColumn is the table column denoting the ci_change_records relation/edge.
	CiChangeRecordsColumn = "tenant_id"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCode,
	FieldDomain,
	FieldStatus,
	FieldType,
	FieldSettings,
	FieldQuota,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DomainValidator is a validator for the "domain" field. It is called by the builders before save.
	DomainValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive    Status = "active"
	StatusSuspended Status = "suspended"
	StatusExpired   Status = "expired"
	StatusDeleted   Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusSuspended, StatusExpired, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for status field: %q", s)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// TypeTrial is the default value of the Type enum.
const DefaultType = TypeTrial

// Type values.
const (
	TypeTrial        Type = "trial"
	TypeStandard     Type = "standard"
	TypeProfessional Type = "professional"
	TypeEnterprise   Type = "enterprise"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTrial, TypeStandard, TypeProfessional, TypeEnterprise:
		return nil
	default:
		return fmt.Errorf("tenant: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTicketsCount orders the results by tickets count.
func ByTicketsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTicketsStep(), opts...)
	}
}

// ByTickets orders the results by tickets terms.
func ByTickets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceCatalogsCount orders the results by service_catalogs count.
func ByServiceCatalogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceCatalogsStep(), opts...)
	}
}

// ByServiceCatalogs orders the results by service_catalogs terms.
func ByServiceCatalogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceCatalogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceRequestsCount orders the results by service_requests count.
func ByServiceRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceRequestsStep(), opts...)
	}
}

// ByServiceRequests orders the results by service_requests terms.
func ByServiceRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscriptionsCount orders the results by subscriptions count.
func BySubscriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscriptionsStep(), opts...)
	}
}

// BySubscriptions orders the results by subscriptions terms.
func BySubscriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConfigurationItemsCount orders the results by configuration_items count.
func ByConfigurationItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConfigurationItemsStep(), opts...)
	}
}

// ByConfigurationItems orders the results by configuration_items terms.
func ByConfigurationItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConfigurationItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByKnowledgeArticlesCount orders the results by knowledge_articles count.
func ByKnowledgeArticlesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newKnowledgeArticlesStep(), opts...)
	}
}

// ByKnowledgeArticles orders the results by knowledge_articles terms.
func ByKnowledgeArticles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKnowledgeArticlesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkflowsCount orders the results by workflows count.
func ByWorkflowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkflowsStep(), opts...)
	}
}

// ByWorkflows orders the results by workflows terms.
func ByWorkflows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCiTypesCount orders the results by ci_types count.
func ByCiTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCiTypesStep(), opts...)
	}
}

// ByCiTypes orders the results by ci_types terms.
func ByCiTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCiRelationshipTypesCount orders the results by ci_relationship_types count.
func ByCiRelationshipTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCiRelationshipTypesStep(), opts...)
	}
}

// ByCiRelationshipTypes orders the results by ci_relationship_types terms.
func ByCiRelationshipTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiRelationshipTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCiRelationshipsCount orders the results by ci_relationships count.
func ByCiRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCiRelationshipsStep(), opts...)
	}
}

// ByCiRelationships orders the results by ci_relationships terms.
func ByCiRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCiLifecycleStatesCount orders the results by ci_lifecycle_states count.
func ByCiLifecycleStatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCiLifecycleStatesStep(), opts...)
	}
}

// ByCiLifecycleStates orders the results by ci_lifecycle_states terms.
func ByCiLifecycleStates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiLifecycleStatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCiChangeRecordsCount orders the results by ci_change_records count.
func ByCiChangeRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCiChangeRecordsStep(), opts...)
	}
}

// ByCiChangeRecords orders the results by ci_change_records terms.
func ByCiChangeRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiChangeRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
	)
}
func newTicketsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TicketsTable, TicketsColumn),
	)
}
func newServiceCatalogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceCatalogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceCatalogsTable, ServiceCatalogsColumn),
	)
}
func newServiceRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceRequestsTable, ServiceRequestsColumn),
	)
}
func newSubscriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscriptionsTable, SubscriptionsColumn),
	)
}
func newConfigurationItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConfigurationItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ConfigurationItemsTable, ConfigurationItemsColumn),
	)
}
func newKnowledgeArticlesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KnowledgeArticlesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, KnowledgeArticlesTable, KnowledgeArticlesColumn),
	)
}
func newWorkflowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkflowsTable, WorkflowsColumn),
	)
}
func newCiTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CiTypesTable, CiTypesColumn),
	)
}
func newCiRelationshipTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiRelationshipTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CiRelationshipTypesTable, CiRelationshipTypesColumn),
	)
}
func newCiRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiRelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CiRelationshipsTable, CiRelationshipsColumn),
	)
}
func newCiLifecycleStatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiLifecycleStatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CiLifecycleStatesTable, CiLifecycleStatesColumn),
	)
}
func newCiChangeRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiChangeRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CiChangeRecordsTable, CiChangeRecordsColumn),
	)
}
