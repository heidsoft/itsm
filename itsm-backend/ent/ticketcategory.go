// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/ticketcategory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TicketCategory is the model entity for the TicketCategory schema.
type TicketCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 分类名称
	Name string `json:"name,omitempty"`
	// 分类描述
	Description string `json:"description,omitempty"`
	// 分类代码
	Code string `json:"code,omitempty"`
	// 父分类ID
	ParentID int `json:"parent_id,omitempty"`
	// 分类层级
	Level int `json:"level,omitempty"`
	// 排序顺序
	SortOrder int `json:"sort_order,omitempty"`
	// 是否启用
	IsActive bool `json:"is_active,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketCategoryQuery when eager-loading is set.
	Edges        TicketCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketCategoryEdges holds the relations/edges for other nodes in the graph.
type TicketCategoryEdges struct {
	// 此分类下的工单
	Tickets []*Ticket `json:"tickets,omitempty"`
	// 子分类
	Children []*TicketCategory `json:"children,omitempty"`
	// 父分类
	Parent *TicketCategory `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e TicketCategoryEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[0] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e TicketCategoryEdges) ChildrenOrErr() ([]*TicketCategory, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketCategoryEdges) ParentOrErr() (*TicketCategory, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: ticketcategory.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TicketCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticketcategory.FieldIsActive:
			values[i] = new(sql.NullBool)
		case ticketcategory.FieldID, ticketcategory.FieldParentID, ticketcategory.FieldLevel, ticketcategory.FieldSortOrder, ticketcategory.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case ticketcategory.FieldName, ticketcategory.FieldDescription, ticketcategory.FieldCode:
			values[i] = new(sql.NullString)
		case ticketcategory.FieldCreatedAt, ticketcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TicketCategory fields.
func (tc *TicketCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticketcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case ticketcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		case ticketcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tc.Description = value.String
			}
		case ticketcategory.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				tc.Code = value.String
			}
		case ticketcategory.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				tc.ParentID = int(value.Int64)
			}
		case ticketcategory.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				tc.Level = int(value.Int64)
			}
		case ticketcategory.FieldSortOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_order", values[i])
			} else if value.Valid {
				tc.SortOrder = int(value.Int64)
			}
		case ticketcategory.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				tc.IsActive = value.Bool
			}
		case ticketcategory.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tc.TenantID = int(value.Int64)
			}
		case ticketcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case ticketcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TicketCategory.
// This includes values selected through modifiers, order, etc.
func (tc *TicketCategory) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryTickets queries the "tickets" edge of the TicketCategory entity.
func (tc *TicketCategory) QueryTickets() *TicketQuery {
	return NewTicketCategoryClient(tc.config).QueryTickets(tc)
}

// QueryChildren queries the "children" edge of the TicketCategory entity.
func (tc *TicketCategory) QueryChildren() *TicketCategoryQuery {
	return NewTicketCategoryClient(tc.config).QueryChildren(tc)
}

// QueryParent queries the "parent" edge of the TicketCategory entity.
func (tc *TicketCategory) QueryParent() *TicketCategoryQuery {
	return NewTicketCategoryClient(tc.config).QueryParent(tc)
}

// Update returns a builder for updating this TicketCategory.
// Note that you need to call TicketCategory.Unwrap() before calling this method if this TicketCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TicketCategory) Update() *TicketCategoryUpdateOne {
	return NewTicketCategoryClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TicketCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TicketCategory) Unwrap() *TicketCategory {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TicketCategory is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TicketCategory) String() string {
	var builder strings.Builder
	builder.WriteString("TicketCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("name=")
	builder.WriteString(tc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tc.Description)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(tc.Code)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.ParentID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", tc.Level))
	builder.WriteString(", ")
	builder.WriteString("sort_order=")
	builder.WriteString(fmt.Sprintf("%v", tc.SortOrder))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", tc.IsActive))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TicketCategories is a parsable slice of TicketCategory.
type TicketCategories []*TicketCategory
