// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/slaviolation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SLAViolation is the model entity for the SLAViolation schema.
type SLAViolation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SLA定义ID
	SLADefinitionID int `json:"sla_definition_id,omitempty"`
	// 工单ID
	TicketID int `json:"ticket_id,omitempty"`
	// 违规类型
	ViolationType string `json:"violation_type,omitempty"`
	// 违规时间
	ViolationTime time.Time `json:"violation_time,omitempty"`
	// 违规描述
	Description string `json:"description,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SLAViolation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slaviolation.FieldID, slaviolation.FieldSLADefinitionID, slaviolation.FieldTicketID, slaviolation.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case slaviolation.FieldViolationType, slaviolation.FieldDescription:
			values[i] = new(sql.NullString)
		case slaviolation.FieldViolationTime, slaviolation.FieldCreatedAt, slaviolation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SLAViolation fields.
func (sv *SLAViolation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slaviolation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sv.ID = int(value.Int64)
		case slaviolation.FieldSLADefinitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sla_definition_id", values[i])
			} else if value.Valid {
				sv.SLADefinitionID = int(value.Int64)
			}
		case slaviolation.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				sv.TicketID = int(value.Int64)
			}
		case slaviolation.FieldViolationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field violation_type", values[i])
			} else if value.Valid {
				sv.ViolationType = value.String
			}
		case slaviolation.FieldViolationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field violation_time", values[i])
			} else if value.Valid {
				sv.ViolationTime = value.Time
			}
		case slaviolation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sv.Description = value.String
			}
		case slaviolation.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sv.TenantID = int(value.Int64)
			}
		case slaviolation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sv.CreatedAt = value.Time
			}
		case slaviolation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sv.UpdatedAt = value.Time
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SLAViolation.
// This includes values selected through modifiers, order, etc.
func (sv *SLAViolation) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// Update returns a builder for updating this SLAViolation.
// Note that you need to call SLAViolation.Unwrap() before calling this method if this SLAViolation
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SLAViolation) Update() *SLAViolationUpdateOne {
	return NewSLAViolationClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SLAViolation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SLAViolation) Unwrap() *SLAViolation {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SLAViolation is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SLAViolation) String() string {
	var builder strings.Builder
	builder.WriteString("SLAViolation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("sla_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.SLADefinitionID))
	builder.WriteString(", ")
	builder.WriteString("ticket_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.TicketID))
	builder.WriteString(", ")
	builder.WriteString("violation_type=")
	builder.WriteString(sv.ViolationType)
	builder.WriteString(", ")
	builder.WriteString("violation_time=")
	builder.WriteString(sv.ViolationTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sv.Description)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sv.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SLAViolations is a parsable slice of SLAViolation.
type SLAViolations []*SLAViolation
