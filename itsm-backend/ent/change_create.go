// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/change"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChangeCreate is the builder for creating a Change entity.
type ChangeCreate struct {
	config
	mutation *ChangeMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (cc *ChangeCreate) SetTitle(s string) *ChangeCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ChangeCreate) SetDescription(s string) *ChangeCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableDescription(s *string) *ChangeCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetJustification sets the "justification" field.
func (cc *ChangeCreate) SetJustification(s string) *ChangeCreate {
	cc.mutation.SetJustification(s)
	return cc
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableJustification(s *string) *ChangeCreate {
	if s != nil {
		cc.SetJustification(*s)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *ChangeCreate) SetType(s string) *ChangeCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableType(s *string) *ChangeCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ChangeCreate) SetStatus(s string) *ChangeCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableStatus(s *string) *ChangeCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetPriority sets the "priority" field.
func (cc *ChangeCreate) SetPriority(s string) *ChangeCreate {
	cc.mutation.SetPriority(s)
	return cc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cc *ChangeCreate) SetNillablePriority(s *string) *ChangeCreate {
	if s != nil {
		cc.SetPriority(*s)
	}
	return cc
}

// SetImpactScope sets the "impact_scope" field.
func (cc *ChangeCreate) SetImpactScope(s string) *ChangeCreate {
	cc.mutation.SetImpactScope(s)
	return cc
}

// SetNillableImpactScope sets the "impact_scope" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableImpactScope(s *string) *ChangeCreate {
	if s != nil {
		cc.SetImpactScope(*s)
	}
	return cc
}

// SetRiskLevel sets the "risk_level" field.
func (cc *ChangeCreate) SetRiskLevel(s string) *ChangeCreate {
	cc.mutation.SetRiskLevel(s)
	return cc
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableRiskLevel(s *string) *ChangeCreate {
	if s != nil {
		cc.SetRiskLevel(*s)
	}
	return cc
}

// SetAssigneeID sets the "assignee_id" field.
func (cc *ChangeCreate) SetAssigneeID(i int) *ChangeCreate {
	cc.mutation.SetAssigneeID(i)
	return cc
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableAssigneeID(i *int) *ChangeCreate {
	if i != nil {
		cc.SetAssigneeID(*i)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *ChangeCreate) SetCreatedBy(i int) *ChangeCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetTenantID sets the "tenant_id" field.
func (cc *ChangeCreate) SetTenantID(i int) *ChangeCreate {
	cc.mutation.SetTenantID(i)
	return cc
}

// SetPlannedStartDate sets the "planned_start_date" field.
func (cc *ChangeCreate) SetPlannedStartDate(t time.Time) *ChangeCreate {
	cc.mutation.SetPlannedStartDate(t)
	return cc
}

// SetNillablePlannedStartDate sets the "planned_start_date" field if the given value is not nil.
func (cc *ChangeCreate) SetNillablePlannedStartDate(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetPlannedStartDate(*t)
	}
	return cc
}

// SetPlannedEndDate sets the "planned_end_date" field.
func (cc *ChangeCreate) SetPlannedEndDate(t time.Time) *ChangeCreate {
	cc.mutation.SetPlannedEndDate(t)
	return cc
}

// SetNillablePlannedEndDate sets the "planned_end_date" field if the given value is not nil.
func (cc *ChangeCreate) SetNillablePlannedEndDate(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetPlannedEndDate(*t)
	}
	return cc
}

// SetActualStartDate sets the "actual_start_date" field.
func (cc *ChangeCreate) SetActualStartDate(t time.Time) *ChangeCreate {
	cc.mutation.SetActualStartDate(t)
	return cc
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableActualStartDate(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetActualStartDate(*t)
	}
	return cc
}

// SetActualEndDate sets the "actual_end_date" field.
func (cc *ChangeCreate) SetActualEndDate(t time.Time) *ChangeCreate {
	cc.mutation.SetActualEndDate(t)
	return cc
}

// SetNillableActualEndDate sets the "actual_end_date" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableActualEndDate(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetActualEndDate(*t)
	}
	return cc
}

// SetImplementationPlan sets the "implementation_plan" field.
func (cc *ChangeCreate) SetImplementationPlan(s string) *ChangeCreate {
	cc.mutation.SetImplementationPlan(s)
	return cc
}

// SetNillableImplementationPlan sets the "implementation_plan" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableImplementationPlan(s *string) *ChangeCreate {
	if s != nil {
		cc.SetImplementationPlan(*s)
	}
	return cc
}

// SetRollbackPlan sets the "rollback_plan" field.
func (cc *ChangeCreate) SetRollbackPlan(s string) *ChangeCreate {
	cc.mutation.SetRollbackPlan(s)
	return cc
}

// SetNillableRollbackPlan sets the "rollback_plan" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableRollbackPlan(s *string) *ChangeCreate {
	if s != nil {
		cc.SetRollbackPlan(*s)
	}
	return cc
}

// SetAffectedCis sets the "affected_cis" field.
func (cc *ChangeCreate) SetAffectedCis(s []string) *ChangeCreate {
	cc.mutation.SetAffectedCis(s)
	return cc
}

// SetRelatedTickets sets the "related_tickets" field.
func (cc *ChangeCreate) SetRelatedTickets(s []string) *ChangeCreate {
	cc.mutation.SetRelatedTickets(s)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChangeCreate) SetCreatedAt(t time.Time) *ChangeCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableCreatedAt(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChangeCreate) SetUpdatedAt(t time.Time) *ChangeCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChangeCreate) SetNillableUpdatedAt(t *time.Time) *ChangeCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// Mutation returns the ChangeMutation object of the builder.
func (cc *ChangeCreate) Mutation() *ChangeMutation {
	return cc.mutation
}

// Save creates the Change in the database.
func (cc *ChangeCreate) Save(ctx context.Context) (*Change, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChangeCreate) SaveX(ctx context.Context) *Change {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChangeCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChangeCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChangeCreate) defaults() {
	if _, ok := cc.mutation.GetType(); !ok {
		v := change.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := change.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Priority(); !ok {
		v := change.DefaultPriority
		cc.mutation.SetPriority(v)
	}
	if _, ok := cc.mutation.ImpactScope(); !ok {
		v := change.DefaultImpactScope
		cc.mutation.SetImpactScope(v)
	}
	if _, ok := cc.mutation.RiskLevel(); !ok {
		v := change.DefaultRiskLevel
		cc.mutation.SetRiskLevel(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := change.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := change.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChangeCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Change.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := change.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Change.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Change.type"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Change.status"`)}
	}
	if _, ok := cc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Change.priority"`)}
	}
	if _, ok := cc.mutation.ImpactScope(); !ok {
		return &ValidationError{Name: "impact_scope", err: errors.New(`ent: missing required field "Change.impact_scope"`)}
	}
	if _, ok := cc.mutation.RiskLevel(); !ok {
		return &ValidationError{Name: "risk_level", err: errors.New(`ent: missing required field "Change.risk_level"`)}
	}
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Change.created_by"`)}
	}
	if v, ok := cc.mutation.CreatedBy(); ok {
		if err := change.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Change.created_by": %w`, err)}
		}
	}
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Change.tenant_id"`)}
	}
	if v, ok := cc.mutation.TenantID(); ok {
		if err := change.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Change.tenant_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Change.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Change.updated_at"`)}
	}
	return nil
}

func (cc *ChangeCreate) sqlSave(ctx context.Context) (*Change, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChangeCreate) createSpec() (*Change, *sqlgraph.CreateSpec) {
	var (
		_node = &Change{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(change.Table, sqlgraph.NewFieldSpec(change.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(change.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(change.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Justification(); ok {
		_spec.SetField(change.FieldJustification, field.TypeString, value)
		_node.Justification = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(change.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(change.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Priority(); ok {
		_spec.SetField(change.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := cc.mutation.ImpactScope(); ok {
		_spec.SetField(change.FieldImpactScope, field.TypeString, value)
		_node.ImpactScope = value
	}
	if value, ok := cc.mutation.RiskLevel(); ok {
		_spec.SetField(change.FieldRiskLevel, field.TypeString, value)
		_node.RiskLevel = value
	}
	if value, ok := cc.mutation.AssigneeID(); ok {
		_spec.SetField(change.FieldAssigneeID, field.TypeInt, value)
		_node.AssigneeID = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(change.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.TenantID(); ok {
		_spec.SetField(change.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := cc.mutation.PlannedStartDate(); ok {
		_spec.SetField(change.FieldPlannedStartDate, field.TypeTime, value)
		_node.PlannedStartDate = value
	}
	if value, ok := cc.mutation.PlannedEndDate(); ok {
		_spec.SetField(change.FieldPlannedEndDate, field.TypeTime, value)
		_node.PlannedEndDate = value
	}
	if value, ok := cc.mutation.ActualStartDate(); ok {
		_spec.SetField(change.FieldActualStartDate, field.TypeTime, value)
		_node.ActualStartDate = value
	}
	if value, ok := cc.mutation.ActualEndDate(); ok {
		_spec.SetField(change.FieldActualEndDate, field.TypeTime, value)
		_node.ActualEndDate = value
	}
	if value, ok := cc.mutation.ImplementationPlan(); ok {
		_spec.SetField(change.FieldImplementationPlan, field.TypeString, value)
		_node.ImplementationPlan = value
	}
	if value, ok := cc.mutation.RollbackPlan(); ok {
		_spec.SetField(change.FieldRollbackPlan, field.TypeString, value)
		_node.RollbackPlan = value
	}
	if value, ok := cc.mutation.AffectedCis(); ok {
		_spec.SetField(change.FieldAffectedCis, field.TypeJSON, value)
		_node.AffectedCis = value
	}
	if value, ok := cc.mutation.RelatedTickets(); ok {
		_spec.SetField(change.FieldRelatedTickets, field.TypeJSON, value)
		_node.RelatedTickets = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(change.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(change.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ChangeCreateBulk is the builder for creating many Change entities in bulk.
type ChangeCreateBulk struct {
	config
	err      error
	builders []*ChangeCreate
}

// Save creates the Change entities in the database.
func (ccb *ChangeCreateBulk) Save(ctx context.Context) ([]*Change, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Change, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChangeCreateBulk) SaveX(ctx context.Context) []*Change {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChangeCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
