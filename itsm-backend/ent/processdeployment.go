// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/processdeployment"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessDeployment is the model entity for the ProcessDeployment schema.
type ProcessDeployment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 部署ID，BPMN标准
	DeploymentID string `json:"deployment_id,omitempty"`
	// 部署名称
	DeploymentName string `json:"deployment_name,omitempty"`
	// 部署来源
	DeploymentSource string `json:"deployment_source,omitempty"`
	// 部署时间
	DeploymentTime time.Time `json:"deployment_time,omitempty"`
	// 部署人
	DeployedBy string `json:"deployed_by,omitempty"`
	// 部署备注
	DeploymentComment string `json:"deployment_comment,omitempty"`
	// 是否激活
	IsActive bool `json:"is_active,omitempty"`
	// 部署分类
	DeploymentCategory string `json:"deployment_category,omitempty"`
	// 部署元数据
	DeploymentMetadata map[string]interface{} `json:"deployment_metadata,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessDeployment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processdeployment.FieldDeploymentMetadata:
			values[i] = new([]byte)
		case processdeployment.FieldIsActive:
			values[i] = new(sql.NullBool)
		case processdeployment.FieldID, processdeployment.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processdeployment.FieldDeploymentID, processdeployment.FieldDeploymentName, processdeployment.FieldDeploymentSource, processdeployment.FieldDeployedBy, processdeployment.FieldDeploymentComment, processdeployment.FieldDeploymentCategory:
			values[i] = new(sql.NullString)
		case processdeployment.FieldDeploymentTime, processdeployment.FieldCreatedAt, processdeployment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessDeployment fields.
func (pd *ProcessDeployment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processdeployment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case processdeployment.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				pd.DeploymentID = value.String
			}
		case processdeployment.FieldDeploymentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_name", values[i])
			} else if value.Valid {
				pd.DeploymentName = value.String
			}
		case processdeployment.FieldDeploymentSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_source", values[i])
			} else if value.Valid {
				pd.DeploymentSource = value.String
			}
		case processdeployment.FieldDeploymentTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_time", values[i])
			} else if value.Valid {
				pd.DeploymentTime = value.Time
			}
		case processdeployment.FieldDeployedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployed_by", values[i])
			} else if value.Valid {
				pd.DeployedBy = value.String
			}
		case processdeployment.FieldDeploymentComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_comment", values[i])
			} else if value.Valid {
				pd.DeploymentComment = value.String
			}
		case processdeployment.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pd.IsActive = value.Bool
			}
		case processdeployment.FieldDeploymentCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_category", values[i])
			} else if value.Valid {
				pd.DeploymentCategory = value.String
			}
		case processdeployment.FieldDeploymentMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.DeploymentMetadata); err != nil {
					return fmt.Errorf("unmarshal field deployment_metadata: %w", err)
				}
			}
		case processdeployment.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pd.TenantID = int(value.Int64)
			}
		case processdeployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case processdeployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessDeployment.
// This includes values selected through modifiers, order, etc.
func (pd *ProcessDeployment) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessDeployment.
// Note that you need to call ProcessDeployment.Unwrap() before calling this method if this ProcessDeployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcessDeployment) Update() *ProcessDeploymentUpdateOne {
	return NewProcessDeploymentClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProcessDeployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcessDeployment) Unwrap() *ProcessDeployment {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessDeployment is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcessDeployment) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessDeployment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("deployment_id=")
	builder.WriteString(pd.DeploymentID)
	builder.WriteString(", ")
	builder.WriteString("deployment_name=")
	builder.WriteString(pd.DeploymentName)
	builder.WriteString(", ")
	builder.WriteString("deployment_source=")
	builder.WriteString(pd.DeploymentSource)
	builder.WriteString(", ")
	builder.WriteString("deployment_time=")
	builder.WriteString(pd.DeploymentTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deployed_by=")
	builder.WriteString(pd.DeployedBy)
	builder.WriteString(", ")
	builder.WriteString("deployment_comment=")
	builder.WriteString(pd.DeploymentComment)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsActive))
	builder.WriteString(", ")
	builder.WriteString("deployment_category=")
	builder.WriteString(pd.DeploymentCategory)
	builder.WriteString(", ")
	builder.WriteString("deployment_metadata=")
	builder.WriteString(fmt.Sprintf("%v", pd.DeploymentMetadata))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessDeployments is a parsable slice of ProcessDeployment.
type ProcessDeployments []*ProcessDeployment
