// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/incident"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IncidentUpdate is the builder for updating Incident entities.
type IncidentUpdate struct {
	config
	hooks    []Hook
	mutation *IncidentMutation
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iu *IncidentUpdate) Where(ps ...predicate.Incident) *IncidentUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetTitle sets the "title" field.
func (iu *IncidentUpdate) SetTitle(s string) *IncidentUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableTitle(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *IncidentUpdate) SetDescription(s string) *IncidentUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableDescription(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *IncidentUpdate) ClearDescription() *IncidentUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetStatus sets the "status" field.
func (iu *IncidentUpdate) SetStatus(s string) *IncidentUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableStatus(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetPriority sets the "priority" field.
func (iu *IncidentUpdate) SetPriority(s string) *IncidentUpdate {
	iu.mutation.SetPriority(s)
	return iu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillablePriority(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetPriority(*s)
	}
	return iu
}

// SetIncidentNumber sets the "incident_number" field.
func (iu *IncidentUpdate) SetIncidentNumber(s string) *IncidentUpdate {
	iu.mutation.SetIncidentNumber(s)
	return iu
}

// SetNillableIncidentNumber sets the "incident_number" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableIncidentNumber(s *string) *IncidentUpdate {
	if s != nil {
		iu.SetIncidentNumber(*s)
	}
	return iu
}

// SetReporterID sets the "reporter_id" field.
func (iu *IncidentUpdate) SetReporterID(i int) *IncidentUpdate {
	iu.mutation.ResetReporterID()
	iu.mutation.SetReporterID(i)
	return iu
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableReporterID(i *int) *IncidentUpdate {
	if i != nil {
		iu.SetReporterID(*i)
	}
	return iu
}

// AddReporterID adds i to the "reporter_id" field.
func (iu *IncidentUpdate) AddReporterID(i int) *IncidentUpdate {
	iu.mutation.AddReporterID(i)
	return iu
}

// SetAssigneeID sets the "assignee_id" field.
func (iu *IncidentUpdate) SetAssigneeID(i int) *IncidentUpdate {
	iu.mutation.ResetAssigneeID()
	iu.mutation.SetAssigneeID(i)
	return iu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableAssigneeID(i *int) *IncidentUpdate {
	if i != nil {
		iu.SetAssigneeID(*i)
	}
	return iu
}

// AddAssigneeID adds i to the "assignee_id" field.
func (iu *IncidentUpdate) AddAssigneeID(i int) *IncidentUpdate {
	iu.mutation.AddAssigneeID(i)
	return iu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (iu *IncidentUpdate) ClearAssigneeID() *IncidentUpdate {
	iu.mutation.ClearAssigneeID()
	return iu
}

// SetConfigurationItemID sets the "configuration_item_id" field.
func (iu *IncidentUpdate) SetConfigurationItemID(i int) *IncidentUpdate {
	iu.mutation.ResetConfigurationItemID()
	iu.mutation.SetConfigurationItemID(i)
	return iu
}

// SetNillableConfigurationItemID sets the "configuration_item_id" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableConfigurationItemID(i *int) *IncidentUpdate {
	if i != nil {
		iu.SetConfigurationItemID(*i)
	}
	return iu
}

// AddConfigurationItemID adds i to the "configuration_item_id" field.
func (iu *IncidentUpdate) AddConfigurationItemID(i int) *IncidentUpdate {
	iu.mutation.AddConfigurationItemID(i)
	return iu
}

// ClearConfigurationItemID clears the value of the "configuration_item_id" field.
func (iu *IncidentUpdate) ClearConfigurationItemID() *IncidentUpdate {
	iu.mutation.ClearConfigurationItemID()
	return iu
}

// SetResolvedAt sets the "resolved_at" field.
func (iu *IncidentUpdate) SetResolvedAt(t time.Time) *IncidentUpdate {
	iu.mutation.SetResolvedAt(t)
	return iu
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableResolvedAt(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetResolvedAt(*t)
	}
	return iu
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (iu *IncidentUpdate) ClearResolvedAt() *IncidentUpdate {
	iu.mutation.ClearResolvedAt()
	return iu
}

// SetClosedAt sets the "closed_at" field.
func (iu *IncidentUpdate) SetClosedAt(t time.Time) *IncidentUpdate {
	iu.mutation.SetClosedAt(t)
	return iu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableClosedAt(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetClosedAt(*t)
	}
	return iu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iu *IncidentUpdate) ClearClosedAt() *IncidentUpdate {
	iu.mutation.ClearClosedAt()
	return iu
}

// SetTenantID sets the "tenant_id" field.
func (iu *IncidentUpdate) SetTenantID(i int) *IncidentUpdate {
	iu.mutation.ResetTenantID()
	iu.mutation.SetTenantID(i)
	return iu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableTenantID(i *int) *IncidentUpdate {
	if i != nil {
		iu.SetTenantID(*i)
	}
	return iu
}

// AddTenantID adds i to the "tenant_id" field.
func (iu *IncidentUpdate) AddTenantID(i int) *IncidentUpdate {
	iu.mutation.AddTenantID(i)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IncidentUpdate) SetCreatedAt(t time.Time) *IncidentUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IncidentUpdate) SetNillableCreatedAt(t *time.Time) *IncidentUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IncidentUpdate) SetUpdatedAt(t time.Time) *IncidentUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// Mutation returns the IncidentMutation object of the builder.
func (iu *IncidentUpdate) Mutation() *IncidentMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IncidentUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IncidentUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IncidentUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IncidentUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IncidentUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := incident.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IncidentUpdate) check() error {
	if v, ok := iu.mutation.Title(); ok {
		if err := incident.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Incident.title": %w`, err)}
		}
	}
	if v, ok := iu.mutation.IncidentNumber(); ok {
		if err := incident.IncidentNumberValidator(v); err != nil {
			return &ValidationError{Name: "incident_number", err: fmt.Errorf(`ent: validator failed for field "Incident.incident_number": %w`, err)}
		}
	}
	if v, ok := iu.mutation.ReporterID(); ok {
		if err := incident.ReporterIDValidator(v); err != nil {
			return &ValidationError{Name: "reporter_id", err: fmt.Errorf(`ent: validator failed for field "Incident.reporter_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.TenantID(); ok {
		if err := incident.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Incident.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (iu *IncidentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(incident.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(incident.FieldDescription, field.TypeString)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(incident.FieldStatus, field.TypeString, value)
	}
	if value, ok := iu.mutation.Priority(); ok {
		_spec.SetField(incident.FieldPriority, field.TypeString, value)
	}
	if value, ok := iu.mutation.IncidentNumber(); ok {
		_spec.SetField(incident.FieldIncidentNumber, field.TypeString, value)
	}
	if value, ok := iu.mutation.ReporterID(); ok {
		_spec.SetField(incident.FieldReporterID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedReporterID(); ok {
		_spec.AddField(incident.FieldReporterID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AssigneeID(); ok {
		_spec.SetField(incident.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedAssigneeID(); ok {
		_spec.AddField(incident.FieldAssigneeID, field.TypeInt, value)
	}
	if iu.mutation.AssigneeIDCleared() {
		_spec.ClearField(incident.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := iu.mutation.ConfigurationItemID(); ok {
		_spec.SetField(incident.FieldConfigurationItemID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedConfigurationItemID(); ok {
		_spec.AddField(incident.FieldConfigurationItemID, field.TypeInt, value)
	}
	if iu.mutation.ConfigurationItemIDCleared() {
		_spec.ClearField(incident.FieldConfigurationItemID, field.TypeInt)
	}
	if value, ok := iu.mutation.ResolvedAt(); ok {
		_spec.SetField(incident.FieldResolvedAt, field.TypeTime, value)
	}
	if iu.mutation.ResolvedAtCleared() {
		_spec.ClearField(incident.FieldResolvedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.ClosedAt(); ok {
		_spec.SetField(incident.FieldClosedAt, field.TypeTime, value)
	}
	if iu.mutation.ClosedAtCleared() {
		_spec.ClearField(incident.FieldClosedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.TenantID(); ok {
		_spec.SetField(incident.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedTenantID(); ok {
		_spec.AddField(incident.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(incident.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IncidentUpdateOne is the builder for updating a single Incident entity.
type IncidentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncidentMutation
}

// SetTitle sets the "title" field.
func (iuo *IncidentUpdateOne) SetTitle(s string) *IncidentUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableTitle(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *IncidentUpdateOne) SetDescription(s string) *IncidentUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableDescription(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *IncidentUpdateOne) ClearDescription() *IncidentUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *IncidentUpdateOne) SetStatus(s string) *IncidentUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableStatus(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetPriority sets the "priority" field.
func (iuo *IncidentUpdateOne) SetPriority(s string) *IncidentUpdateOne {
	iuo.mutation.SetPriority(s)
	return iuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillablePriority(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetPriority(*s)
	}
	return iuo
}

// SetIncidentNumber sets the "incident_number" field.
func (iuo *IncidentUpdateOne) SetIncidentNumber(s string) *IncidentUpdateOne {
	iuo.mutation.SetIncidentNumber(s)
	return iuo
}

// SetNillableIncidentNumber sets the "incident_number" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableIncidentNumber(s *string) *IncidentUpdateOne {
	if s != nil {
		iuo.SetIncidentNumber(*s)
	}
	return iuo
}

// SetReporterID sets the "reporter_id" field.
func (iuo *IncidentUpdateOne) SetReporterID(i int) *IncidentUpdateOne {
	iuo.mutation.ResetReporterID()
	iuo.mutation.SetReporterID(i)
	return iuo
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableReporterID(i *int) *IncidentUpdateOne {
	if i != nil {
		iuo.SetReporterID(*i)
	}
	return iuo
}

// AddReporterID adds i to the "reporter_id" field.
func (iuo *IncidentUpdateOne) AddReporterID(i int) *IncidentUpdateOne {
	iuo.mutation.AddReporterID(i)
	return iuo
}

// SetAssigneeID sets the "assignee_id" field.
func (iuo *IncidentUpdateOne) SetAssigneeID(i int) *IncidentUpdateOne {
	iuo.mutation.ResetAssigneeID()
	iuo.mutation.SetAssigneeID(i)
	return iuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableAssigneeID(i *int) *IncidentUpdateOne {
	if i != nil {
		iuo.SetAssigneeID(*i)
	}
	return iuo
}

// AddAssigneeID adds i to the "assignee_id" field.
func (iuo *IncidentUpdateOne) AddAssigneeID(i int) *IncidentUpdateOne {
	iuo.mutation.AddAssigneeID(i)
	return iuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (iuo *IncidentUpdateOne) ClearAssigneeID() *IncidentUpdateOne {
	iuo.mutation.ClearAssigneeID()
	return iuo
}

// SetConfigurationItemID sets the "configuration_item_id" field.
func (iuo *IncidentUpdateOne) SetConfigurationItemID(i int) *IncidentUpdateOne {
	iuo.mutation.ResetConfigurationItemID()
	iuo.mutation.SetConfigurationItemID(i)
	return iuo
}

// SetNillableConfigurationItemID sets the "configuration_item_id" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableConfigurationItemID(i *int) *IncidentUpdateOne {
	if i != nil {
		iuo.SetConfigurationItemID(*i)
	}
	return iuo
}

// AddConfigurationItemID adds i to the "configuration_item_id" field.
func (iuo *IncidentUpdateOne) AddConfigurationItemID(i int) *IncidentUpdateOne {
	iuo.mutation.AddConfigurationItemID(i)
	return iuo
}

// ClearConfigurationItemID clears the value of the "configuration_item_id" field.
func (iuo *IncidentUpdateOne) ClearConfigurationItemID() *IncidentUpdateOne {
	iuo.mutation.ClearConfigurationItemID()
	return iuo
}

// SetResolvedAt sets the "resolved_at" field.
func (iuo *IncidentUpdateOne) SetResolvedAt(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetResolvedAt(t)
	return iuo
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableResolvedAt(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetResolvedAt(*t)
	}
	return iuo
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (iuo *IncidentUpdateOne) ClearResolvedAt() *IncidentUpdateOne {
	iuo.mutation.ClearResolvedAt()
	return iuo
}

// SetClosedAt sets the "closed_at" field.
func (iuo *IncidentUpdateOne) SetClosedAt(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetClosedAt(t)
	return iuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableClosedAt(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetClosedAt(*t)
	}
	return iuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iuo *IncidentUpdateOne) ClearClosedAt() *IncidentUpdateOne {
	iuo.mutation.ClearClosedAt()
	return iuo
}

// SetTenantID sets the "tenant_id" field.
func (iuo *IncidentUpdateOne) SetTenantID(i int) *IncidentUpdateOne {
	iuo.mutation.ResetTenantID()
	iuo.mutation.SetTenantID(i)
	return iuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableTenantID(i *int) *IncidentUpdateOne {
	if i != nil {
		iuo.SetTenantID(*i)
	}
	return iuo
}

// AddTenantID adds i to the "tenant_id" field.
func (iuo *IncidentUpdateOne) AddTenantID(i int) *IncidentUpdateOne {
	iuo.mutation.AddTenantID(i)
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IncidentUpdateOne) SetCreatedAt(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IncidentUpdateOne) SetNillableCreatedAt(t *time.Time) *IncidentUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IncidentUpdateOne) SetUpdatedAt(t time.Time) *IncidentUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// Mutation returns the IncidentMutation object of the builder.
func (iuo *IncidentUpdateOne) Mutation() *IncidentMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IncidentUpdate builder.
func (iuo *IncidentUpdateOne) Where(ps ...predicate.Incident) *IncidentUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IncidentUpdateOne) Select(field string, fields ...string) *IncidentUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Incident entity.
func (iuo *IncidentUpdateOne) Save(ctx context.Context) (*Incident, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IncidentUpdateOne) SaveX(ctx context.Context) *Incident {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IncidentUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IncidentUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IncidentUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := incident.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IncidentUpdateOne) check() error {
	if v, ok := iuo.mutation.Title(); ok {
		if err := incident.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Incident.title": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.IncidentNumber(); ok {
		if err := incident.IncidentNumberValidator(v); err != nil {
			return &ValidationError{Name: "incident_number", err: fmt.Errorf(`ent: validator failed for field "Incident.incident_number": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.ReporterID(); ok {
		if err := incident.ReporterIDValidator(v); err != nil {
			return &ValidationError{Name: "reporter_id", err: fmt.Errorf(`ent: validator failed for field "Incident.reporter_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.TenantID(); ok {
		if err := incident.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Incident.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (iuo *IncidentUpdateOne) sqlSave(ctx context.Context) (_node *Incident, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(incident.Table, incident.Columns, sqlgraph.NewFieldSpec(incident.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Incident.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incident.FieldID)
		for _, f := range fields {
			if !incident.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incident.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(incident.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(incident.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(incident.FieldDescription, field.TypeString)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(incident.FieldStatus, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Priority(); ok {
		_spec.SetField(incident.FieldPriority, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IncidentNumber(); ok {
		_spec.SetField(incident.FieldIncidentNumber, field.TypeString, value)
	}
	if value, ok := iuo.mutation.ReporterID(); ok {
		_spec.SetField(incident.FieldReporterID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedReporterID(); ok {
		_spec.AddField(incident.FieldReporterID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AssigneeID(); ok {
		_spec.SetField(incident.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedAssigneeID(); ok {
		_spec.AddField(incident.FieldAssigneeID, field.TypeInt, value)
	}
	if iuo.mutation.AssigneeIDCleared() {
		_spec.ClearField(incident.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := iuo.mutation.ConfigurationItemID(); ok {
		_spec.SetField(incident.FieldConfigurationItemID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedConfigurationItemID(); ok {
		_spec.AddField(incident.FieldConfigurationItemID, field.TypeInt, value)
	}
	if iuo.mutation.ConfigurationItemIDCleared() {
		_spec.ClearField(incident.FieldConfigurationItemID, field.TypeInt)
	}
	if value, ok := iuo.mutation.ResolvedAt(); ok {
		_spec.SetField(incident.FieldResolvedAt, field.TypeTime, value)
	}
	if iuo.mutation.ResolvedAtCleared() {
		_spec.ClearField(incident.FieldResolvedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.ClosedAt(); ok {
		_spec.SetField(incident.FieldClosedAt, field.TypeTime, value)
	}
	if iuo.mutation.ClosedAtCleared() {
		_spec.ClearField(incident.FieldClosedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.TenantID(); ok {
		_spec.SetField(incident.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedTenantID(); ok {
		_spec.AddField(incident.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(incident.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(incident.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Incident{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incident.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
