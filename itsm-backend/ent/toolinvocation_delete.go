// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/toolinvocation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ToolInvocationDelete is the builder for deleting a ToolInvocation entity.
type ToolInvocationDelete struct {
	config
	hooks    []Hook
	mutation *ToolInvocationMutation
}

// Where appends a list predicates to the ToolInvocationDelete builder.
func (tid *ToolInvocationDelete) Where(ps ...predicate.ToolInvocation) *ToolInvocationDelete {
	tid.mutation.Where(ps...)
	return tid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tid *ToolInvocationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tid.sqlExec, tid.mutation, tid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tid *ToolInvocationDelete) ExecX(ctx context.Context) int {
	n, err := tid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tid *ToolInvocationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(toolinvocation.Table, sqlgraph.NewFieldSpec(toolinvocation.FieldID, field.TypeInt))
	if ps := tid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tid.mutation.done = true
	return affected, err
}

// ToolInvocationDeleteOne is the builder for deleting a single ToolInvocation entity.
type ToolInvocationDeleteOne struct {
	tid *ToolInvocationDelete
}

// Where appends a list predicates to the ToolInvocationDelete builder.
func (tido *ToolInvocationDeleteOne) Where(ps ...predicate.ToolInvocation) *ToolInvocationDeleteOne {
	tido.tid.mutation.Where(ps...)
	return tido
}

// Exec executes the deletion query.
func (tido *ToolInvocationDeleteOne) Exec(ctx context.Context) error {
	n, err := tido.tid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{toolinvocation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tido *ToolInvocationDeleteOne) ExecX(ctx context.Context) {
	if err := tido.Exec(ctx); err != nil {
		panic(err)
	}
}
