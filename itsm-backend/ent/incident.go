// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/incident"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Incident is the model entity for the Incident schema.
type Incident struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 事件标题
	Title string `json:"title,omitempty"`
	// 事件描述
	Description string `json:"description,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 优先级
	Priority string `json:"priority,omitempty"`
	// 事件编号
	IncidentNumber string `json:"incident_number,omitempty"`
	// 报告人ID
	ReporterID int `json:"reporter_id,omitempty"`
	// 处理人ID
	AssigneeID int `json:"assignee_id,omitempty"`
	// 配置项ID
	ConfigurationItemID int `json:"configuration_item_id,omitempty"`
	// 解决时间
	ResolvedAt time.Time `json:"resolved_at,omitempty"`
	// 关闭时间
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Incident) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incident.FieldID, incident.FieldReporterID, incident.FieldAssigneeID, incident.FieldConfigurationItemID, incident.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case incident.FieldTitle, incident.FieldDescription, incident.FieldStatus, incident.FieldPriority, incident.FieldIncidentNumber:
			values[i] = new(sql.NullString)
		case incident.FieldResolvedAt, incident.FieldClosedAt, incident.FieldCreatedAt, incident.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Incident fields.
func (i *Incident) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case incident.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case incident.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case incident.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case incident.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case incident.FieldPriority:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[j])
			} else if value.Valid {
				i.Priority = value.String
			}
		case incident.FieldIncidentNumber:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field incident_number", values[j])
			} else if value.Valid {
				i.IncidentNumber = value.String
			}
		case incident.FieldReporterID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reporter_id", values[j])
			} else if value.Valid {
				i.ReporterID = int(value.Int64)
			}
		case incident.FieldAssigneeID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[j])
			} else if value.Valid {
				i.AssigneeID = int(value.Int64)
			}
		case incident.FieldConfigurationItemID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field configuration_item_id", values[j])
			} else if value.Valid {
				i.ConfigurationItemID = int(value.Int64)
			}
		case incident.FieldResolvedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_at", values[j])
			} else if value.Valid {
				i.ResolvedAt = value.Time
			}
		case incident.FieldClosedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[j])
			} else if value.Valid {
				i.ClosedAt = value.Time
			}
		case incident.FieldTenantID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[j])
			} else if value.Valid {
				i.TenantID = int(value.Int64)
			}
		case incident.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case incident.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Incident.
// This includes values selected through modifiers, order, etc.
func (i *Incident) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Incident.
// Note that you need to call Incident.Unwrap() before calling this method if this Incident
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Incident) Update() *IncidentUpdateOne {
	return NewIncidentClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Incident entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Incident) Unwrap() *Incident {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Incident is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Incident) String() string {
	var builder strings.Builder
	builder.WriteString("Incident(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(i.Priority)
	builder.WriteString(", ")
	builder.WriteString("incident_number=")
	builder.WriteString(i.IncidentNumber)
	builder.WriteString(", ")
	builder.WriteString("reporter_id=")
	builder.WriteString(fmt.Sprintf("%v", i.ReporterID))
	builder.WriteString(", ")
	builder.WriteString("assignee_id=")
	builder.WriteString(fmt.Sprintf("%v", i.AssigneeID))
	builder.WriteString(", ")
	builder.WriteString("configuration_item_id=")
	builder.WriteString(fmt.Sprintf("%v", i.ConfigurationItemID))
	builder.WriteString(", ")
	builder.WriteString("resolved_at=")
	builder.WriteString(i.ResolvedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(i.ClosedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", i.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Incidents is a parsable slice of Incident.
type Incidents []*Incident
