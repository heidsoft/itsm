// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KnowledgeArticleCreate is the builder for creating a KnowledgeArticle entity.
type KnowledgeArticleCreate struct {
	config
	mutation *KnowledgeArticleMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (kac *KnowledgeArticleCreate) SetTitle(s string) *KnowledgeArticleCreate {
	kac.mutation.SetTitle(s)
	return kac
}

// SetContent sets the "content" field.
func (kac *KnowledgeArticleCreate) SetContent(s string) *KnowledgeArticleCreate {
	kac.mutation.SetContent(s)
	return kac
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kac *KnowledgeArticleCreate) SetNillableContent(s *string) *KnowledgeArticleCreate {
	if s != nil {
		kac.SetContent(*s)
	}
	return kac
}

// SetCategory sets the "category" field.
func (kac *KnowledgeArticleCreate) SetCategory(s string) *KnowledgeArticleCreate {
	kac.mutation.SetCategory(s)
	return kac
}

// SetStatus sets the "status" field.
func (kac *KnowledgeArticleCreate) SetStatus(s string) *KnowledgeArticleCreate {
	kac.mutation.SetStatus(s)
	return kac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kac *KnowledgeArticleCreate) SetNillableStatus(s *string) *KnowledgeArticleCreate {
	if s != nil {
		kac.SetStatus(*s)
	}
	return kac
}

// SetAuthor sets the "author" field.
func (kac *KnowledgeArticleCreate) SetAuthor(s string) *KnowledgeArticleCreate {
	kac.mutation.SetAuthor(s)
	return kac
}

// SetViews sets the "views" field.
func (kac *KnowledgeArticleCreate) SetViews(i int) *KnowledgeArticleCreate {
	kac.mutation.SetViews(i)
	return kac
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (kac *KnowledgeArticleCreate) SetNillableViews(i *int) *KnowledgeArticleCreate {
	if i != nil {
		kac.SetViews(*i)
	}
	return kac
}

// SetTags sets the "tags" field.
func (kac *KnowledgeArticleCreate) SetTags(s []string) *KnowledgeArticleCreate {
	kac.mutation.SetTags(s)
	return kac
}

// SetTenantID sets the "tenant_id" field.
func (kac *KnowledgeArticleCreate) SetTenantID(i int) *KnowledgeArticleCreate {
	kac.mutation.SetTenantID(i)
	return kac
}

// SetCreatedAt sets the "created_at" field.
func (kac *KnowledgeArticleCreate) SetCreatedAt(t time.Time) *KnowledgeArticleCreate {
	kac.mutation.SetCreatedAt(t)
	return kac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kac *KnowledgeArticleCreate) SetNillableCreatedAt(t *time.Time) *KnowledgeArticleCreate {
	if t != nil {
		kac.SetCreatedAt(*t)
	}
	return kac
}

// SetUpdatedAt sets the "updated_at" field.
func (kac *KnowledgeArticleCreate) SetUpdatedAt(t time.Time) *KnowledgeArticleCreate {
	kac.mutation.SetUpdatedAt(t)
	return kac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (kac *KnowledgeArticleCreate) SetNillableUpdatedAt(t *time.Time) *KnowledgeArticleCreate {
	if t != nil {
		kac.SetUpdatedAt(*t)
	}
	return kac
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (kac *KnowledgeArticleCreate) SetTenant(t *Tenant) *KnowledgeArticleCreate {
	return kac.SetTenantID(t.ID)
}

// Mutation returns the KnowledgeArticleMutation object of the builder.
func (kac *KnowledgeArticleCreate) Mutation() *KnowledgeArticleMutation {
	return kac.mutation
}

// Save creates the KnowledgeArticle in the database.
func (kac *KnowledgeArticleCreate) Save(ctx context.Context) (*KnowledgeArticle, error) {
	kac.defaults()
	return withHooks(ctx, kac.sqlSave, kac.mutation, kac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kac *KnowledgeArticleCreate) SaveX(ctx context.Context) *KnowledgeArticle {
	v, err := kac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kac *KnowledgeArticleCreate) Exec(ctx context.Context) error {
	_, err := kac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kac *KnowledgeArticleCreate) ExecX(ctx context.Context) {
	if err := kac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kac *KnowledgeArticleCreate) defaults() {
	if _, ok := kac.mutation.Status(); !ok {
		v := knowledgearticle.DefaultStatus
		kac.mutation.SetStatus(v)
	}
	if _, ok := kac.mutation.Views(); !ok {
		v := knowledgearticle.DefaultViews
		kac.mutation.SetViews(v)
	}
	if _, ok := kac.mutation.CreatedAt(); !ok {
		v := knowledgearticle.DefaultCreatedAt()
		kac.mutation.SetCreatedAt(v)
	}
	if _, ok := kac.mutation.UpdatedAt(); !ok {
		v := knowledgearticle.DefaultUpdatedAt()
		kac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kac *KnowledgeArticleCreate) check() error {
	if _, ok := kac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "KnowledgeArticle.title"`)}
	}
	if v, ok := kac.mutation.Title(); ok {
		if err := knowledgearticle.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.title": %w`, err)}
		}
	}
	if _, ok := kac.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "KnowledgeArticle.category"`)}
	}
	if v, ok := kac.mutation.Category(); ok {
		if err := knowledgearticle.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.category": %w`, err)}
		}
	}
	if _, ok := kac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "KnowledgeArticle.status"`)}
	}
	if _, ok := kac.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "KnowledgeArticle.author"`)}
	}
	if v, ok := kac.mutation.Author(); ok {
		if err := knowledgearticle.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "KnowledgeArticle.author": %w`, err)}
		}
	}
	if _, ok := kac.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "KnowledgeArticle.views"`)}
	}
	if _, ok := kac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "KnowledgeArticle.tenant_id"`)}
	}
	if _, ok := kac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "KnowledgeArticle.created_at"`)}
	}
	if _, ok := kac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "KnowledgeArticle.updated_at"`)}
	}
	if len(kac.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "KnowledgeArticle.tenant"`)}
	}
	return nil
}

func (kac *KnowledgeArticleCreate) sqlSave(ctx context.Context) (*KnowledgeArticle, error) {
	if err := kac.check(); err != nil {
		return nil, err
	}
	_node, _spec := kac.createSpec()
	if err := sqlgraph.CreateNode(ctx, kac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	kac.mutation.id = &_node.ID
	kac.mutation.done = true
	return _node, nil
}

func (kac *KnowledgeArticleCreate) createSpec() (*KnowledgeArticle, *sqlgraph.CreateSpec) {
	var (
		_node = &KnowledgeArticle{config: kac.config}
		_spec = sqlgraph.NewCreateSpec(knowledgearticle.Table, sqlgraph.NewFieldSpec(knowledgearticle.FieldID, field.TypeInt))
	)
	if value, ok := kac.mutation.Title(); ok {
		_spec.SetField(knowledgearticle.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := kac.mutation.Content(); ok {
		_spec.SetField(knowledgearticle.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := kac.mutation.Category(); ok {
		_spec.SetField(knowledgearticle.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := kac.mutation.Status(); ok {
		_spec.SetField(knowledgearticle.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := kac.mutation.Author(); ok {
		_spec.SetField(knowledgearticle.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := kac.mutation.Views(); ok {
		_spec.SetField(knowledgearticle.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	if value, ok := kac.mutation.Tags(); ok {
		_spec.SetField(knowledgearticle.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := kac.mutation.CreatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := kac.mutation.UpdatedAt(); ok {
		_spec.SetField(knowledgearticle.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := kac.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   knowledgearticle.TenantTable,
			Columns: []string{knowledgearticle.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KnowledgeArticleCreateBulk is the builder for creating many KnowledgeArticle entities in bulk.
type KnowledgeArticleCreateBulk struct {
	config
	err      error
	builders []*KnowledgeArticleCreate
}

// Save creates the KnowledgeArticle entities in the database.
func (kacb *KnowledgeArticleCreateBulk) Save(ctx context.Context) ([]*KnowledgeArticle, error) {
	if kacb.err != nil {
		return nil, kacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kacb.builders))
	nodes := make([]*KnowledgeArticle, len(kacb.builders))
	mutators := make([]Mutator, len(kacb.builders))
	for i := range kacb.builders {
		func(i int, root context.Context) {
			builder := kacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KnowledgeArticleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kacb *KnowledgeArticleCreateBulk) SaveX(ctx context.Context) []*KnowledgeArticle {
	v, err := kacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kacb *KnowledgeArticleCreateBulk) Exec(ctx context.Context) error {
	_, err := kacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kacb *KnowledgeArticleCreateBulk) ExecX(ctx context.Context) {
	if err := kacb.Exec(ctx); err != nil {
		panic(err)
	}
}
