// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/tickettemplate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TicketTemplateUpdate is the builder for updating TicketTemplate entities.
type TicketTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *TicketTemplateMutation
}

// Where appends a list predicates to the TicketTemplateUpdate builder.
func (ttu *TicketTemplateUpdate) Where(ps ...predicate.TicketTemplate) *TicketTemplateUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "name" field.
func (ttu *TicketTemplateUpdate) SetName(s string) *TicketTemplateUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableName(s *string) *TicketTemplateUpdate {
	if s != nil {
		ttu.SetName(*s)
	}
	return ttu
}

// SetDescription sets the "description" field.
func (ttu *TicketTemplateUpdate) SetDescription(s string) *TicketTemplateUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableDescription(s *string) *TicketTemplateUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// ClearDescription clears the value of the "description" field.
func (ttu *TicketTemplateUpdate) ClearDescription() *TicketTemplateUpdate {
	ttu.mutation.ClearDescription()
	return ttu
}

// SetCategory sets the "category" field.
func (ttu *TicketTemplateUpdate) SetCategory(s string) *TicketTemplateUpdate {
	ttu.mutation.SetCategory(s)
	return ttu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableCategory(s *string) *TicketTemplateUpdate {
	if s != nil {
		ttu.SetCategory(*s)
	}
	return ttu
}

// SetPriority sets the "priority" field.
func (ttu *TicketTemplateUpdate) SetPriority(s string) *TicketTemplateUpdate {
	ttu.mutation.SetPriority(s)
	return ttu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillablePriority(s *string) *TicketTemplateUpdate {
	if s != nil {
		ttu.SetPriority(*s)
	}
	return ttu
}

// SetFormFields sets the "form_fields" field.
func (ttu *TicketTemplateUpdate) SetFormFields(u []uint8) *TicketTemplateUpdate {
	ttu.mutation.SetFormFields(u)
	return ttu
}

// AppendFormFields appends u to the "form_fields" field.
func (ttu *TicketTemplateUpdate) AppendFormFields(u []uint8) *TicketTemplateUpdate {
	ttu.mutation.AppendFormFields(u)
	return ttu
}

// ClearFormFields clears the value of the "form_fields" field.
func (ttu *TicketTemplateUpdate) ClearFormFields() *TicketTemplateUpdate {
	ttu.mutation.ClearFormFields()
	return ttu
}

// SetWorkflowSteps sets the "workflow_steps" field.
func (ttu *TicketTemplateUpdate) SetWorkflowSteps(u []uint8) *TicketTemplateUpdate {
	ttu.mutation.SetWorkflowSteps(u)
	return ttu
}

// AppendWorkflowSteps appends u to the "workflow_steps" field.
func (ttu *TicketTemplateUpdate) AppendWorkflowSteps(u []uint8) *TicketTemplateUpdate {
	ttu.mutation.AppendWorkflowSteps(u)
	return ttu
}

// ClearWorkflowSteps clears the value of the "workflow_steps" field.
func (ttu *TicketTemplateUpdate) ClearWorkflowSteps() *TicketTemplateUpdate {
	ttu.mutation.ClearWorkflowSteps()
	return ttu
}

// SetIsActive sets the "is_active" field.
func (ttu *TicketTemplateUpdate) SetIsActive(b bool) *TicketTemplateUpdate {
	ttu.mutation.SetIsActive(b)
	return ttu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableIsActive(b *bool) *TicketTemplateUpdate {
	if b != nil {
		ttu.SetIsActive(*b)
	}
	return ttu
}

// SetTenantID sets the "tenant_id" field.
func (ttu *TicketTemplateUpdate) SetTenantID(i int) *TicketTemplateUpdate {
	ttu.mutation.ResetTenantID()
	ttu.mutation.SetTenantID(i)
	return ttu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableTenantID(i *int) *TicketTemplateUpdate {
	if i != nil {
		ttu.SetTenantID(*i)
	}
	return ttu
}

// AddTenantID adds i to the "tenant_id" field.
func (ttu *TicketTemplateUpdate) AddTenantID(i int) *TicketTemplateUpdate {
	ttu.mutation.AddTenantID(i)
	return ttu
}

// SetCreatedAt sets the "created_at" field.
func (ttu *TicketTemplateUpdate) SetCreatedAt(t time.Time) *TicketTemplateUpdate {
	ttu.mutation.SetCreatedAt(t)
	return ttu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttu *TicketTemplateUpdate) SetNillableCreatedAt(t *time.Time) *TicketTemplateUpdate {
	if t != nil {
		ttu.SetCreatedAt(*t)
	}
	return ttu
}

// SetUpdatedAt sets the "updated_at" field.
func (ttu *TicketTemplateUpdate) SetUpdatedAt(t time.Time) *TicketTemplateUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ttu *TicketTemplateUpdate) AddTicketIDs(ids ...int) *TicketTemplateUpdate {
	ttu.mutation.AddTicketIDs(ids...)
	return ttu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ttu *TicketTemplateUpdate) AddTickets(t ...*Ticket) *TicketTemplateUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTicketIDs(ids...)
}

// Mutation returns the TicketTemplateMutation object of the builder.
func (ttu *TicketTemplateUpdate) Mutation() *TicketTemplateMutation {
	return ttu.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (ttu *TicketTemplateUpdate) ClearTickets() *TicketTemplateUpdate {
	ttu.mutation.ClearTickets()
	return ttu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (ttu *TicketTemplateUpdate) RemoveTicketIDs(ids ...int) *TicketTemplateUpdate {
	ttu.mutation.RemoveTicketIDs(ids...)
	return ttu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (ttu *TicketTemplateUpdate) RemoveTickets(t ...*Ticket) *TicketTemplateUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTicketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TicketTemplateUpdate) Save(ctx context.Context) (int, error) {
	ttu.defaults()
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TicketTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TicketTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TicketTemplateUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttu *TicketTemplateUpdate) defaults() {
	if _, ok := ttu.mutation.UpdatedAt(); !ok {
		v := tickettemplate.UpdateDefaultUpdatedAt()
		ttu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TicketTemplateUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := tickettemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.name": %w`, err)}
		}
	}
	if v, ok := ttu.mutation.Category(); ok {
		if err := tickettemplate.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.category": %w`, err)}
		}
	}
	if v, ok := ttu.mutation.TenantID(); ok {
		if err := tickettemplate.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ttu *TicketTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tickettemplate.Table, tickettemplate.Columns, sqlgraph.NewFieldSpec(tickettemplate.FieldID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tickettemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.SetField(tickettemplate.FieldDescription, field.TypeString, value)
	}
	if ttu.mutation.DescriptionCleared() {
		_spec.ClearField(tickettemplate.FieldDescription, field.TypeString)
	}
	if value, ok := ttu.mutation.Category(); ok {
		_spec.SetField(tickettemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Priority(); ok {
		_spec.SetField(tickettemplate.FieldPriority, field.TypeString, value)
	}
	if value, ok := ttu.mutation.FormFields(); ok {
		_spec.SetField(tickettemplate.FieldFormFields, field.TypeJSON, value)
	}
	if value, ok := ttu.mutation.AppendedFormFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tickettemplate.FieldFormFields, value)
		})
	}
	if ttu.mutation.FormFieldsCleared() {
		_spec.ClearField(tickettemplate.FieldFormFields, field.TypeJSON)
	}
	if value, ok := ttu.mutation.WorkflowSteps(); ok {
		_spec.SetField(tickettemplate.FieldWorkflowSteps, field.TypeJSON, value)
	}
	if value, ok := ttu.mutation.AppendedWorkflowSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tickettemplate.FieldWorkflowSteps, value)
		})
	}
	if ttu.mutation.WorkflowStepsCleared() {
		_spec.ClearField(tickettemplate.FieldWorkflowSteps, field.TypeJSON)
	}
	if value, ok := ttu.mutation.IsActive(); ok {
		_spec.SetField(tickettemplate.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttu.mutation.TenantID(); ok {
		_spec.SetField(tickettemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.AddedTenantID(); ok {
		_spec.AddField(tickettemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttu.mutation.CreatedAt(); ok {
		_spec.SetField(tickettemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.SetField(tickettemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ttu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !ttu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tickettemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TicketTemplateUpdateOne is the builder for updating a single TicketTemplate entity.
type TicketTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketTemplateMutation
}

// SetName sets the "name" field.
func (ttuo *TicketTemplateUpdateOne) SetName(s string) *TicketTemplateUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableName(s *string) *TicketTemplateUpdateOne {
	if s != nil {
		ttuo.SetName(*s)
	}
	return ttuo
}

// SetDescription sets the "description" field.
func (ttuo *TicketTemplateUpdateOne) SetDescription(s string) *TicketTemplateUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableDescription(s *string) *TicketTemplateUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// ClearDescription clears the value of the "description" field.
func (ttuo *TicketTemplateUpdateOne) ClearDescription() *TicketTemplateUpdateOne {
	ttuo.mutation.ClearDescription()
	return ttuo
}

// SetCategory sets the "category" field.
func (ttuo *TicketTemplateUpdateOne) SetCategory(s string) *TicketTemplateUpdateOne {
	ttuo.mutation.SetCategory(s)
	return ttuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableCategory(s *string) *TicketTemplateUpdateOne {
	if s != nil {
		ttuo.SetCategory(*s)
	}
	return ttuo
}

// SetPriority sets the "priority" field.
func (ttuo *TicketTemplateUpdateOne) SetPriority(s string) *TicketTemplateUpdateOne {
	ttuo.mutation.SetPriority(s)
	return ttuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillablePriority(s *string) *TicketTemplateUpdateOne {
	if s != nil {
		ttuo.SetPriority(*s)
	}
	return ttuo
}

// SetFormFields sets the "form_fields" field.
func (ttuo *TicketTemplateUpdateOne) SetFormFields(u []uint8) *TicketTemplateUpdateOne {
	ttuo.mutation.SetFormFields(u)
	return ttuo
}

// AppendFormFields appends u to the "form_fields" field.
func (ttuo *TicketTemplateUpdateOne) AppendFormFields(u []uint8) *TicketTemplateUpdateOne {
	ttuo.mutation.AppendFormFields(u)
	return ttuo
}

// ClearFormFields clears the value of the "form_fields" field.
func (ttuo *TicketTemplateUpdateOne) ClearFormFields() *TicketTemplateUpdateOne {
	ttuo.mutation.ClearFormFields()
	return ttuo
}

// SetWorkflowSteps sets the "workflow_steps" field.
func (ttuo *TicketTemplateUpdateOne) SetWorkflowSteps(u []uint8) *TicketTemplateUpdateOne {
	ttuo.mutation.SetWorkflowSteps(u)
	return ttuo
}

// AppendWorkflowSteps appends u to the "workflow_steps" field.
func (ttuo *TicketTemplateUpdateOne) AppendWorkflowSteps(u []uint8) *TicketTemplateUpdateOne {
	ttuo.mutation.AppendWorkflowSteps(u)
	return ttuo
}

// ClearWorkflowSteps clears the value of the "workflow_steps" field.
func (ttuo *TicketTemplateUpdateOne) ClearWorkflowSteps() *TicketTemplateUpdateOne {
	ttuo.mutation.ClearWorkflowSteps()
	return ttuo
}

// SetIsActive sets the "is_active" field.
func (ttuo *TicketTemplateUpdateOne) SetIsActive(b bool) *TicketTemplateUpdateOne {
	ttuo.mutation.SetIsActive(b)
	return ttuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableIsActive(b *bool) *TicketTemplateUpdateOne {
	if b != nil {
		ttuo.SetIsActive(*b)
	}
	return ttuo
}

// SetTenantID sets the "tenant_id" field.
func (ttuo *TicketTemplateUpdateOne) SetTenantID(i int) *TicketTemplateUpdateOne {
	ttuo.mutation.ResetTenantID()
	ttuo.mutation.SetTenantID(i)
	return ttuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableTenantID(i *int) *TicketTemplateUpdateOne {
	if i != nil {
		ttuo.SetTenantID(*i)
	}
	return ttuo
}

// AddTenantID adds i to the "tenant_id" field.
func (ttuo *TicketTemplateUpdateOne) AddTenantID(i int) *TicketTemplateUpdateOne {
	ttuo.mutation.AddTenantID(i)
	return ttuo
}

// SetCreatedAt sets the "created_at" field.
func (ttuo *TicketTemplateUpdateOne) SetCreatedAt(t time.Time) *TicketTemplateUpdateOne {
	ttuo.mutation.SetCreatedAt(t)
	return ttuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttuo *TicketTemplateUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketTemplateUpdateOne {
	if t != nil {
		ttuo.SetCreatedAt(*t)
	}
	return ttuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ttuo *TicketTemplateUpdateOne) SetUpdatedAt(t time.Time) *TicketTemplateUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ttuo *TicketTemplateUpdateOne) AddTicketIDs(ids ...int) *TicketTemplateUpdateOne {
	ttuo.mutation.AddTicketIDs(ids...)
	return ttuo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ttuo *TicketTemplateUpdateOne) AddTickets(t ...*Ticket) *TicketTemplateUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTicketIDs(ids...)
}

// Mutation returns the TicketTemplateMutation object of the builder.
func (ttuo *TicketTemplateUpdateOne) Mutation() *TicketTemplateMutation {
	return ttuo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (ttuo *TicketTemplateUpdateOne) ClearTickets() *TicketTemplateUpdateOne {
	ttuo.mutation.ClearTickets()
	return ttuo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (ttuo *TicketTemplateUpdateOne) RemoveTicketIDs(ids ...int) *TicketTemplateUpdateOne {
	ttuo.mutation.RemoveTicketIDs(ids...)
	return ttuo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (ttuo *TicketTemplateUpdateOne) RemoveTickets(t ...*Ticket) *TicketTemplateUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTicketIDs(ids...)
}

// Where appends a list predicates to the TicketTemplateUpdate builder.
func (ttuo *TicketTemplateUpdateOne) Where(ps ...predicate.TicketTemplate) *TicketTemplateUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TicketTemplateUpdateOne) Select(field string, fields ...string) *TicketTemplateUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TicketTemplate entity.
func (ttuo *TicketTemplateUpdateOne) Save(ctx context.Context) (*TicketTemplate, error) {
	ttuo.defaults()
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TicketTemplateUpdateOne) SaveX(ctx context.Context) *TicketTemplate {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TicketTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TicketTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttuo *TicketTemplateUpdateOne) defaults() {
	if _, ok := ttuo.mutation.UpdatedAt(); !ok {
		v := tickettemplate.UpdateDefaultUpdatedAt()
		ttuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TicketTemplateUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := tickettemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.name": %w`, err)}
		}
	}
	if v, ok := ttuo.mutation.Category(); ok {
		if err := tickettemplate.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.category": %w`, err)}
		}
	}
	if v, ok := ttuo.mutation.TenantID(); ok {
		if err := tickettemplate.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketTemplate.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TicketTemplateUpdateOne) sqlSave(ctx context.Context) (_node *TicketTemplate, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tickettemplate.Table, tickettemplate.Columns, sqlgraph.NewFieldSpec(tickettemplate.FieldID, field.TypeInt))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tickettemplate.FieldID)
		for _, f := range fields {
			if !tickettemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tickettemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tickettemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.SetField(tickettemplate.FieldDescription, field.TypeString, value)
	}
	if ttuo.mutation.DescriptionCleared() {
		_spec.ClearField(tickettemplate.FieldDescription, field.TypeString)
	}
	if value, ok := ttuo.mutation.Category(); ok {
		_spec.SetField(tickettemplate.FieldCategory, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Priority(); ok {
		_spec.SetField(tickettemplate.FieldPriority, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.FormFields(); ok {
		_spec.SetField(tickettemplate.FieldFormFields, field.TypeJSON, value)
	}
	if value, ok := ttuo.mutation.AppendedFormFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tickettemplate.FieldFormFields, value)
		})
	}
	if ttuo.mutation.FormFieldsCleared() {
		_spec.ClearField(tickettemplate.FieldFormFields, field.TypeJSON)
	}
	if value, ok := ttuo.mutation.WorkflowSteps(); ok {
		_spec.SetField(tickettemplate.FieldWorkflowSteps, field.TypeJSON, value)
	}
	if value, ok := ttuo.mutation.AppendedWorkflowSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tickettemplate.FieldWorkflowSteps, value)
		})
	}
	if ttuo.mutation.WorkflowStepsCleared() {
		_spec.ClearField(tickettemplate.FieldWorkflowSteps, field.TypeJSON)
	}
	if value, ok := ttuo.mutation.IsActive(); ok {
		_spec.SetField(tickettemplate.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttuo.mutation.TenantID(); ok {
		_spec.SetField(tickettemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.AddedTenantID(); ok {
		_spec.AddField(tickettemplate.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := ttuo.mutation.CreatedAt(); ok {
		_spec.SetField(tickettemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tickettemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ttuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !ttuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tickettemplate.TicketsTable,
			Columns: []string{tickettemplate.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketTemplate{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tickettemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
