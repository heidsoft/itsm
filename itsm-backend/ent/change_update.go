// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/change"
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ChangeUpdate is the builder for updating Change entities.
type ChangeUpdate struct {
	config
	hooks    []Hook
	mutation *ChangeMutation
}

// Where appends a list predicates to the ChangeUpdate builder.
func (cu *ChangeUpdate) Where(ps ...predicate.Change) *ChangeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChangeUpdate) SetTitle(s string) *ChangeUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableTitle(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChangeUpdate) SetDescription(s string) *ChangeUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableDescription(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ChangeUpdate) ClearDescription() *ChangeUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetJustification sets the "justification" field.
func (cu *ChangeUpdate) SetJustification(s string) *ChangeUpdate {
	cu.mutation.SetJustification(s)
	return cu
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableJustification(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetJustification(*s)
	}
	return cu
}

// ClearJustification clears the value of the "justification" field.
func (cu *ChangeUpdate) ClearJustification() *ChangeUpdate {
	cu.mutation.ClearJustification()
	return cu
}

// SetType sets the "type" field.
func (cu *ChangeUpdate) SetType(s string) *ChangeUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableType(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *ChangeUpdate) SetStatus(s string) *ChangeUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableStatus(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetPriority sets the "priority" field.
func (cu *ChangeUpdate) SetPriority(s string) *ChangeUpdate {
	cu.mutation.SetPriority(s)
	return cu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillablePriority(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetPriority(*s)
	}
	return cu
}

// SetImpactScope sets the "impact_scope" field.
func (cu *ChangeUpdate) SetImpactScope(s string) *ChangeUpdate {
	cu.mutation.SetImpactScope(s)
	return cu
}

// SetNillableImpactScope sets the "impact_scope" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableImpactScope(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetImpactScope(*s)
	}
	return cu
}

// SetRiskLevel sets the "risk_level" field.
func (cu *ChangeUpdate) SetRiskLevel(s string) *ChangeUpdate {
	cu.mutation.SetRiskLevel(s)
	return cu
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableRiskLevel(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetRiskLevel(*s)
	}
	return cu
}

// SetAssigneeID sets the "assignee_id" field.
func (cu *ChangeUpdate) SetAssigneeID(i int) *ChangeUpdate {
	cu.mutation.ResetAssigneeID()
	cu.mutation.SetAssigneeID(i)
	return cu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableAssigneeID(i *int) *ChangeUpdate {
	if i != nil {
		cu.SetAssigneeID(*i)
	}
	return cu
}

// AddAssigneeID adds i to the "assignee_id" field.
func (cu *ChangeUpdate) AddAssigneeID(i int) *ChangeUpdate {
	cu.mutation.AddAssigneeID(i)
	return cu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (cu *ChangeUpdate) ClearAssigneeID() *ChangeUpdate {
	cu.mutation.ClearAssigneeID()
	return cu
}

// SetCreatedBy sets the "created_by" field.
func (cu *ChangeUpdate) SetCreatedBy(i int) *ChangeUpdate {
	cu.mutation.ResetCreatedBy()
	cu.mutation.SetCreatedBy(i)
	return cu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableCreatedBy(i *int) *ChangeUpdate {
	if i != nil {
		cu.SetCreatedBy(*i)
	}
	return cu
}

// AddCreatedBy adds i to the "created_by" field.
func (cu *ChangeUpdate) AddCreatedBy(i int) *ChangeUpdate {
	cu.mutation.AddCreatedBy(i)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *ChangeUpdate) SetTenantID(i int) *ChangeUpdate {
	cu.mutation.ResetTenantID()
	cu.mutation.SetTenantID(i)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableTenantID(i *int) *ChangeUpdate {
	if i != nil {
		cu.SetTenantID(*i)
	}
	return cu
}

// AddTenantID adds i to the "tenant_id" field.
func (cu *ChangeUpdate) AddTenantID(i int) *ChangeUpdate {
	cu.mutation.AddTenantID(i)
	return cu
}

// SetPlannedStartDate sets the "planned_start_date" field.
func (cu *ChangeUpdate) SetPlannedStartDate(t time.Time) *ChangeUpdate {
	cu.mutation.SetPlannedStartDate(t)
	return cu
}

// SetNillablePlannedStartDate sets the "planned_start_date" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillablePlannedStartDate(t *time.Time) *ChangeUpdate {
	if t != nil {
		cu.SetPlannedStartDate(*t)
	}
	return cu
}

// ClearPlannedStartDate clears the value of the "planned_start_date" field.
func (cu *ChangeUpdate) ClearPlannedStartDate() *ChangeUpdate {
	cu.mutation.ClearPlannedStartDate()
	return cu
}

// SetPlannedEndDate sets the "planned_end_date" field.
func (cu *ChangeUpdate) SetPlannedEndDate(t time.Time) *ChangeUpdate {
	cu.mutation.SetPlannedEndDate(t)
	return cu
}

// SetNillablePlannedEndDate sets the "planned_end_date" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillablePlannedEndDate(t *time.Time) *ChangeUpdate {
	if t != nil {
		cu.SetPlannedEndDate(*t)
	}
	return cu
}

// ClearPlannedEndDate clears the value of the "planned_end_date" field.
func (cu *ChangeUpdate) ClearPlannedEndDate() *ChangeUpdate {
	cu.mutation.ClearPlannedEndDate()
	return cu
}

// SetActualStartDate sets the "actual_start_date" field.
func (cu *ChangeUpdate) SetActualStartDate(t time.Time) *ChangeUpdate {
	cu.mutation.SetActualStartDate(t)
	return cu
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableActualStartDate(t *time.Time) *ChangeUpdate {
	if t != nil {
		cu.SetActualStartDate(*t)
	}
	return cu
}

// ClearActualStartDate clears the value of the "actual_start_date" field.
func (cu *ChangeUpdate) ClearActualStartDate() *ChangeUpdate {
	cu.mutation.ClearActualStartDate()
	return cu
}

// SetActualEndDate sets the "actual_end_date" field.
func (cu *ChangeUpdate) SetActualEndDate(t time.Time) *ChangeUpdate {
	cu.mutation.SetActualEndDate(t)
	return cu
}

// SetNillableActualEndDate sets the "actual_end_date" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableActualEndDate(t *time.Time) *ChangeUpdate {
	if t != nil {
		cu.SetActualEndDate(*t)
	}
	return cu
}

// ClearActualEndDate clears the value of the "actual_end_date" field.
func (cu *ChangeUpdate) ClearActualEndDate() *ChangeUpdate {
	cu.mutation.ClearActualEndDate()
	return cu
}

// SetImplementationPlan sets the "implementation_plan" field.
func (cu *ChangeUpdate) SetImplementationPlan(s string) *ChangeUpdate {
	cu.mutation.SetImplementationPlan(s)
	return cu
}

// SetNillableImplementationPlan sets the "implementation_plan" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableImplementationPlan(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetImplementationPlan(*s)
	}
	return cu
}

// ClearImplementationPlan clears the value of the "implementation_plan" field.
func (cu *ChangeUpdate) ClearImplementationPlan() *ChangeUpdate {
	cu.mutation.ClearImplementationPlan()
	return cu
}

// SetRollbackPlan sets the "rollback_plan" field.
func (cu *ChangeUpdate) SetRollbackPlan(s string) *ChangeUpdate {
	cu.mutation.SetRollbackPlan(s)
	return cu
}

// SetNillableRollbackPlan sets the "rollback_plan" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableRollbackPlan(s *string) *ChangeUpdate {
	if s != nil {
		cu.SetRollbackPlan(*s)
	}
	return cu
}

// ClearRollbackPlan clears the value of the "rollback_plan" field.
func (cu *ChangeUpdate) ClearRollbackPlan() *ChangeUpdate {
	cu.mutation.ClearRollbackPlan()
	return cu
}

// SetAffectedCis sets the "affected_cis" field.
func (cu *ChangeUpdate) SetAffectedCis(s []string) *ChangeUpdate {
	cu.mutation.SetAffectedCis(s)
	return cu
}

// AppendAffectedCis appends s to the "affected_cis" field.
func (cu *ChangeUpdate) AppendAffectedCis(s []string) *ChangeUpdate {
	cu.mutation.AppendAffectedCis(s)
	return cu
}

// ClearAffectedCis clears the value of the "affected_cis" field.
func (cu *ChangeUpdate) ClearAffectedCis() *ChangeUpdate {
	cu.mutation.ClearAffectedCis()
	return cu
}

// SetRelatedTickets sets the "related_tickets" field.
func (cu *ChangeUpdate) SetRelatedTickets(s []string) *ChangeUpdate {
	cu.mutation.SetRelatedTickets(s)
	return cu
}

// AppendRelatedTickets appends s to the "related_tickets" field.
func (cu *ChangeUpdate) AppendRelatedTickets(s []string) *ChangeUpdate {
	cu.mutation.AppendRelatedTickets(s)
	return cu
}

// ClearRelatedTickets clears the value of the "related_tickets" field.
func (cu *ChangeUpdate) ClearRelatedTickets() *ChangeUpdate {
	cu.mutation.ClearRelatedTickets()
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ChangeUpdate) SetCreatedAt(t time.Time) *ChangeUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ChangeUpdate) SetNillableCreatedAt(t *time.Time) *ChangeUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChangeUpdate) SetUpdatedAt(t time.Time) *ChangeUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the ChangeMutation object of the builder.
func (cu *ChangeUpdate) Mutation() *ChangeMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChangeUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChangeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChangeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChangeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChangeUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := change.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChangeUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := change.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Change.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CreatedBy(); ok {
		if err := change.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Change.created_by": %w`, err)}
		}
	}
	if v, ok := cu.mutation.TenantID(); ok {
		if err := change.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Change.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (cu *ChangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(change.Table, change.Columns, sqlgraph.NewFieldSpec(change.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(change.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(change.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(change.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Justification(); ok {
		_spec.SetField(change.FieldJustification, field.TypeString, value)
	}
	if cu.mutation.JustificationCleared() {
		_spec.ClearField(change.FieldJustification, field.TypeString)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(change.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(change.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.Priority(); ok {
		_spec.SetField(change.FieldPriority, field.TypeString, value)
	}
	if value, ok := cu.mutation.ImpactScope(); ok {
		_spec.SetField(change.FieldImpactScope, field.TypeString, value)
	}
	if value, ok := cu.mutation.RiskLevel(); ok {
		_spec.SetField(change.FieldRiskLevel, field.TypeString, value)
	}
	if value, ok := cu.mutation.AssigneeID(); ok {
		_spec.SetField(change.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedAssigneeID(); ok {
		_spec.AddField(change.FieldAssigneeID, field.TypeInt, value)
	}
	if cu.mutation.AssigneeIDCleared() {
		_spec.ClearField(change.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := cu.mutation.CreatedBy(); ok {
		_spec.SetField(change.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(change.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.TenantID(); ok {
		_spec.SetField(change.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTenantID(); ok {
		_spec.AddField(change.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.PlannedStartDate(); ok {
		_spec.SetField(change.FieldPlannedStartDate, field.TypeTime, value)
	}
	if cu.mutation.PlannedStartDateCleared() {
		_spec.ClearField(change.FieldPlannedStartDate, field.TypeTime)
	}
	if value, ok := cu.mutation.PlannedEndDate(); ok {
		_spec.SetField(change.FieldPlannedEndDate, field.TypeTime, value)
	}
	if cu.mutation.PlannedEndDateCleared() {
		_spec.ClearField(change.FieldPlannedEndDate, field.TypeTime)
	}
	if value, ok := cu.mutation.ActualStartDate(); ok {
		_spec.SetField(change.FieldActualStartDate, field.TypeTime, value)
	}
	if cu.mutation.ActualStartDateCleared() {
		_spec.ClearField(change.FieldActualStartDate, field.TypeTime)
	}
	if value, ok := cu.mutation.ActualEndDate(); ok {
		_spec.SetField(change.FieldActualEndDate, field.TypeTime, value)
	}
	if cu.mutation.ActualEndDateCleared() {
		_spec.ClearField(change.FieldActualEndDate, field.TypeTime)
	}
	if value, ok := cu.mutation.ImplementationPlan(); ok {
		_spec.SetField(change.FieldImplementationPlan, field.TypeString, value)
	}
	if cu.mutation.ImplementationPlanCleared() {
		_spec.ClearField(change.FieldImplementationPlan, field.TypeString)
	}
	if value, ok := cu.mutation.RollbackPlan(); ok {
		_spec.SetField(change.FieldRollbackPlan, field.TypeString, value)
	}
	if cu.mutation.RollbackPlanCleared() {
		_spec.ClearField(change.FieldRollbackPlan, field.TypeString)
	}
	if value, ok := cu.mutation.AffectedCis(); ok {
		_spec.SetField(change.FieldAffectedCis, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedAffectedCis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, change.FieldAffectedCis, value)
		})
	}
	if cu.mutation.AffectedCisCleared() {
		_spec.ClearField(change.FieldAffectedCis, field.TypeJSON)
	}
	if value, ok := cu.mutation.RelatedTickets(); ok {
		_spec.SetField(change.FieldRelatedTickets, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedRelatedTickets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, change.FieldRelatedTickets, value)
		})
	}
	if cu.mutation.RelatedTicketsCleared() {
		_spec.ClearField(change.FieldRelatedTickets, field.TypeJSON)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(change.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(change.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{change.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChangeUpdateOne is the builder for updating a single Change entity.
type ChangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChangeMutation
}

// SetTitle sets the "title" field.
func (cuo *ChangeUpdateOne) SetTitle(s string) *ChangeUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableTitle(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChangeUpdateOne) SetDescription(s string) *ChangeUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableDescription(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ChangeUpdateOne) ClearDescription() *ChangeUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetJustification sets the "justification" field.
func (cuo *ChangeUpdateOne) SetJustification(s string) *ChangeUpdateOne {
	cuo.mutation.SetJustification(s)
	return cuo
}

// SetNillableJustification sets the "justification" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableJustification(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetJustification(*s)
	}
	return cuo
}

// ClearJustification clears the value of the "justification" field.
func (cuo *ChangeUpdateOne) ClearJustification() *ChangeUpdateOne {
	cuo.mutation.ClearJustification()
	return cuo
}

// SetType sets the "type" field.
func (cuo *ChangeUpdateOne) SetType(s string) *ChangeUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableType(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ChangeUpdateOne) SetStatus(s string) *ChangeUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableStatus(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetPriority sets the "priority" field.
func (cuo *ChangeUpdateOne) SetPriority(s string) *ChangeUpdateOne {
	cuo.mutation.SetPriority(s)
	return cuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillablePriority(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetPriority(*s)
	}
	return cuo
}

// SetImpactScope sets the "impact_scope" field.
func (cuo *ChangeUpdateOne) SetImpactScope(s string) *ChangeUpdateOne {
	cuo.mutation.SetImpactScope(s)
	return cuo
}

// SetNillableImpactScope sets the "impact_scope" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableImpactScope(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetImpactScope(*s)
	}
	return cuo
}

// SetRiskLevel sets the "risk_level" field.
func (cuo *ChangeUpdateOne) SetRiskLevel(s string) *ChangeUpdateOne {
	cuo.mutation.SetRiskLevel(s)
	return cuo
}

// SetNillableRiskLevel sets the "risk_level" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableRiskLevel(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetRiskLevel(*s)
	}
	return cuo
}

// SetAssigneeID sets the "assignee_id" field.
func (cuo *ChangeUpdateOne) SetAssigneeID(i int) *ChangeUpdateOne {
	cuo.mutation.ResetAssigneeID()
	cuo.mutation.SetAssigneeID(i)
	return cuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableAssigneeID(i *int) *ChangeUpdateOne {
	if i != nil {
		cuo.SetAssigneeID(*i)
	}
	return cuo
}

// AddAssigneeID adds i to the "assignee_id" field.
func (cuo *ChangeUpdateOne) AddAssigneeID(i int) *ChangeUpdateOne {
	cuo.mutation.AddAssigneeID(i)
	return cuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (cuo *ChangeUpdateOne) ClearAssigneeID() *ChangeUpdateOne {
	cuo.mutation.ClearAssigneeID()
	return cuo
}

// SetCreatedBy sets the "created_by" field.
func (cuo *ChangeUpdateOne) SetCreatedBy(i int) *ChangeUpdateOne {
	cuo.mutation.ResetCreatedBy()
	cuo.mutation.SetCreatedBy(i)
	return cuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableCreatedBy(i *int) *ChangeUpdateOne {
	if i != nil {
		cuo.SetCreatedBy(*i)
	}
	return cuo
}

// AddCreatedBy adds i to the "created_by" field.
func (cuo *ChangeUpdateOne) AddCreatedBy(i int) *ChangeUpdateOne {
	cuo.mutation.AddCreatedBy(i)
	return cuo
}

// SetTenantID sets the "tenant_id" field.
func (cuo *ChangeUpdateOne) SetTenantID(i int) *ChangeUpdateOne {
	cuo.mutation.ResetTenantID()
	cuo.mutation.SetTenantID(i)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableTenantID(i *int) *ChangeUpdateOne {
	if i != nil {
		cuo.SetTenantID(*i)
	}
	return cuo
}

// AddTenantID adds i to the "tenant_id" field.
func (cuo *ChangeUpdateOne) AddTenantID(i int) *ChangeUpdateOne {
	cuo.mutation.AddTenantID(i)
	return cuo
}

// SetPlannedStartDate sets the "planned_start_date" field.
func (cuo *ChangeUpdateOne) SetPlannedStartDate(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetPlannedStartDate(t)
	return cuo
}

// SetNillablePlannedStartDate sets the "planned_start_date" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillablePlannedStartDate(t *time.Time) *ChangeUpdateOne {
	if t != nil {
		cuo.SetPlannedStartDate(*t)
	}
	return cuo
}

// ClearPlannedStartDate clears the value of the "planned_start_date" field.
func (cuo *ChangeUpdateOne) ClearPlannedStartDate() *ChangeUpdateOne {
	cuo.mutation.ClearPlannedStartDate()
	return cuo
}

// SetPlannedEndDate sets the "planned_end_date" field.
func (cuo *ChangeUpdateOne) SetPlannedEndDate(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetPlannedEndDate(t)
	return cuo
}

// SetNillablePlannedEndDate sets the "planned_end_date" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillablePlannedEndDate(t *time.Time) *ChangeUpdateOne {
	if t != nil {
		cuo.SetPlannedEndDate(*t)
	}
	return cuo
}

// ClearPlannedEndDate clears the value of the "planned_end_date" field.
func (cuo *ChangeUpdateOne) ClearPlannedEndDate() *ChangeUpdateOne {
	cuo.mutation.ClearPlannedEndDate()
	return cuo
}

// SetActualStartDate sets the "actual_start_date" field.
func (cuo *ChangeUpdateOne) SetActualStartDate(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetActualStartDate(t)
	return cuo
}

// SetNillableActualStartDate sets the "actual_start_date" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableActualStartDate(t *time.Time) *ChangeUpdateOne {
	if t != nil {
		cuo.SetActualStartDate(*t)
	}
	return cuo
}

// ClearActualStartDate clears the value of the "actual_start_date" field.
func (cuo *ChangeUpdateOne) ClearActualStartDate() *ChangeUpdateOne {
	cuo.mutation.ClearActualStartDate()
	return cuo
}

// SetActualEndDate sets the "actual_end_date" field.
func (cuo *ChangeUpdateOne) SetActualEndDate(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetActualEndDate(t)
	return cuo
}

// SetNillableActualEndDate sets the "actual_end_date" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableActualEndDate(t *time.Time) *ChangeUpdateOne {
	if t != nil {
		cuo.SetActualEndDate(*t)
	}
	return cuo
}

// ClearActualEndDate clears the value of the "actual_end_date" field.
func (cuo *ChangeUpdateOne) ClearActualEndDate() *ChangeUpdateOne {
	cuo.mutation.ClearActualEndDate()
	return cuo
}

// SetImplementationPlan sets the "implementation_plan" field.
func (cuo *ChangeUpdateOne) SetImplementationPlan(s string) *ChangeUpdateOne {
	cuo.mutation.SetImplementationPlan(s)
	return cuo
}

// SetNillableImplementationPlan sets the "implementation_plan" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableImplementationPlan(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetImplementationPlan(*s)
	}
	return cuo
}

// ClearImplementationPlan clears the value of the "implementation_plan" field.
func (cuo *ChangeUpdateOne) ClearImplementationPlan() *ChangeUpdateOne {
	cuo.mutation.ClearImplementationPlan()
	return cuo
}

// SetRollbackPlan sets the "rollback_plan" field.
func (cuo *ChangeUpdateOne) SetRollbackPlan(s string) *ChangeUpdateOne {
	cuo.mutation.SetRollbackPlan(s)
	return cuo
}

// SetNillableRollbackPlan sets the "rollback_plan" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableRollbackPlan(s *string) *ChangeUpdateOne {
	if s != nil {
		cuo.SetRollbackPlan(*s)
	}
	return cuo
}

// ClearRollbackPlan clears the value of the "rollback_plan" field.
func (cuo *ChangeUpdateOne) ClearRollbackPlan() *ChangeUpdateOne {
	cuo.mutation.ClearRollbackPlan()
	return cuo
}

// SetAffectedCis sets the "affected_cis" field.
func (cuo *ChangeUpdateOne) SetAffectedCis(s []string) *ChangeUpdateOne {
	cuo.mutation.SetAffectedCis(s)
	return cuo
}

// AppendAffectedCis appends s to the "affected_cis" field.
func (cuo *ChangeUpdateOne) AppendAffectedCis(s []string) *ChangeUpdateOne {
	cuo.mutation.AppendAffectedCis(s)
	return cuo
}

// ClearAffectedCis clears the value of the "affected_cis" field.
func (cuo *ChangeUpdateOne) ClearAffectedCis() *ChangeUpdateOne {
	cuo.mutation.ClearAffectedCis()
	return cuo
}

// SetRelatedTickets sets the "related_tickets" field.
func (cuo *ChangeUpdateOne) SetRelatedTickets(s []string) *ChangeUpdateOne {
	cuo.mutation.SetRelatedTickets(s)
	return cuo
}

// AppendRelatedTickets appends s to the "related_tickets" field.
func (cuo *ChangeUpdateOne) AppendRelatedTickets(s []string) *ChangeUpdateOne {
	cuo.mutation.AppendRelatedTickets(s)
	return cuo
}

// ClearRelatedTickets clears the value of the "related_tickets" field.
func (cuo *ChangeUpdateOne) ClearRelatedTickets() *ChangeUpdateOne {
	cuo.mutation.ClearRelatedTickets()
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ChangeUpdateOne) SetCreatedAt(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ChangeUpdateOne) SetNillableCreatedAt(t *time.Time) *ChangeUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChangeUpdateOne) SetUpdatedAt(t time.Time) *ChangeUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the ChangeMutation object of the builder.
func (cuo *ChangeUpdateOne) Mutation() *ChangeMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChangeUpdate builder.
func (cuo *ChangeUpdateOne) Where(ps ...predicate.Change) *ChangeUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChangeUpdateOne) Select(field string, fields ...string) *ChangeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Change entity.
func (cuo *ChangeUpdateOne) Save(ctx context.Context) (*Change, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChangeUpdateOne) SaveX(ctx context.Context) *Change {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChangeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChangeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChangeUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := change.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChangeUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := change.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Change.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CreatedBy(); ok {
		if err := change.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Change.created_by": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.TenantID(); ok {
		if err := change.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "Change.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (cuo *ChangeUpdateOne) sqlSave(ctx context.Context) (_node *Change, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(change.Table, change.Columns, sqlgraph.NewFieldSpec(change.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Change.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, change.FieldID)
		for _, f := range fields {
			if !change.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != change.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(change.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(change.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(change.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Justification(); ok {
		_spec.SetField(change.FieldJustification, field.TypeString, value)
	}
	if cuo.mutation.JustificationCleared() {
		_spec.ClearField(change.FieldJustification, field.TypeString)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(change.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(change.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Priority(); ok {
		_spec.SetField(change.FieldPriority, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ImpactScope(); ok {
		_spec.SetField(change.FieldImpactScope, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RiskLevel(); ok {
		_spec.SetField(change.FieldRiskLevel, field.TypeString, value)
	}
	if value, ok := cuo.mutation.AssigneeID(); ok {
		_spec.SetField(change.FieldAssigneeID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedAssigneeID(); ok {
		_spec.AddField(change.FieldAssigneeID, field.TypeInt, value)
	}
	if cuo.mutation.AssigneeIDCleared() {
		_spec.ClearField(change.FieldAssigneeID, field.TypeInt)
	}
	if value, ok := cuo.mutation.CreatedBy(); ok {
		_spec.SetField(change.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(change.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.TenantID(); ok {
		_spec.SetField(change.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTenantID(); ok {
		_spec.AddField(change.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.PlannedStartDate(); ok {
		_spec.SetField(change.FieldPlannedStartDate, field.TypeTime, value)
	}
	if cuo.mutation.PlannedStartDateCleared() {
		_spec.ClearField(change.FieldPlannedStartDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.PlannedEndDate(); ok {
		_spec.SetField(change.FieldPlannedEndDate, field.TypeTime, value)
	}
	if cuo.mutation.PlannedEndDateCleared() {
		_spec.ClearField(change.FieldPlannedEndDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.ActualStartDate(); ok {
		_spec.SetField(change.FieldActualStartDate, field.TypeTime, value)
	}
	if cuo.mutation.ActualStartDateCleared() {
		_spec.ClearField(change.FieldActualStartDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.ActualEndDate(); ok {
		_spec.SetField(change.FieldActualEndDate, field.TypeTime, value)
	}
	if cuo.mutation.ActualEndDateCleared() {
		_spec.ClearField(change.FieldActualEndDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.ImplementationPlan(); ok {
		_spec.SetField(change.FieldImplementationPlan, field.TypeString, value)
	}
	if cuo.mutation.ImplementationPlanCleared() {
		_spec.ClearField(change.FieldImplementationPlan, field.TypeString)
	}
	if value, ok := cuo.mutation.RollbackPlan(); ok {
		_spec.SetField(change.FieldRollbackPlan, field.TypeString, value)
	}
	if cuo.mutation.RollbackPlanCleared() {
		_spec.ClearField(change.FieldRollbackPlan, field.TypeString)
	}
	if value, ok := cuo.mutation.AffectedCis(); ok {
		_spec.SetField(change.FieldAffectedCis, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedAffectedCis(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, change.FieldAffectedCis, value)
		})
	}
	if cuo.mutation.AffectedCisCleared() {
		_spec.ClearField(change.FieldAffectedCis, field.TypeJSON)
	}
	if value, ok := cuo.mutation.RelatedTickets(); ok {
		_spec.SetField(change.FieldRelatedTickets, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedRelatedTickets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, change.FieldRelatedTickets, value)
		})
	}
	if cuo.mutation.RelatedTicketsCleared() {
		_spec.ClearField(change.FieldRelatedTickets, field.TypeJSON)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(change.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(change.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Change{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{change.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
