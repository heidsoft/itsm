// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/processdefinition"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessDefinition is the model entity for the ProcessDefinition schema.
type ProcessDefinition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 流程定义Key，BPMN标准
	Key string `json:"key,omitempty"`
	// 流程定义名称
	Name string `json:"name,omitempty"`
	// 流程描述
	Description string `json:"description,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 流程分类
	Category string `json:"category,omitempty"`
	// BPMN XML定义内容
	BpmnXML []uint8 `json:"bpmn_xml,omitempty"`
	// 流程变量定义
	ProcessVariables map[string]interface{} `json:"process_variables,omitempty"`
	// 是否激活
	IsActive bool `json:"is_active,omitempty"`
	// 是否最新版本
	IsLatest bool `json:"is_latest,omitempty"`
	// 部署ID
	DeploymentID int `json:"deployment_id,omitempty"`
	// 部署名称
	DeploymentName string `json:"deployment_name,omitempty"`
	// 部署时间
	DeployedAt time.Time `json:"deployed_at,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessDefinition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processdefinition.FieldBpmnXML, processdefinition.FieldProcessVariables:
			values[i] = new([]byte)
		case processdefinition.FieldIsActive, processdefinition.FieldIsLatest:
			values[i] = new(sql.NullBool)
		case processdefinition.FieldID, processdefinition.FieldDeploymentID, processdefinition.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processdefinition.FieldKey, processdefinition.FieldName, processdefinition.FieldDescription, processdefinition.FieldVersion, processdefinition.FieldCategory, processdefinition.FieldDeploymentName:
			values[i] = new(sql.NullString)
		case processdefinition.FieldDeployedAt, processdefinition.FieldCreatedAt, processdefinition.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessDefinition fields.
func (pd *ProcessDefinition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processdefinition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case processdefinition.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				pd.Key = value.String
			}
		case processdefinition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pd.Name = value.String
			}
		case processdefinition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pd.Description = value.String
			}
		case processdefinition.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pd.Version = value.String
			}
		case processdefinition.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				pd.Category = value.String
			}
		case processdefinition.FieldBpmnXML:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bpmn_xml", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.BpmnXML); err != nil {
					return fmt.Errorf("unmarshal field bpmn_xml: %w", err)
				}
			}
		case processdefinition.FieldProcessVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field process_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pd.ProcessVariables); err != nil {
					return fmt.Errorf("unmarshal field process_variables: %w", err)
				}
			}
		case processdefinition.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pd.IsActive = value.Bool
			}
		case processdefinition.FieldIsLatest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_latest", values[i])
			} else if value.Valid {
				pd.IsLatest = value.Bool
			}
		case processdefinition.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				pd.DeploymentID = int(value.Int64)
			}
		case processdefinition.FieldDeploymentName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_name", values[i])
			} else if value.Valid {
				pd.DeploymentName = value.String
			}
		case processdefinition.FieldDeployedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deployed_at", values[i])
			} else if value.Valid {
				pd.DeployedAt = value.Time
			}
		case processdefinition.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pd.TenantID = int(value.Int64)
			}
		case processdefinition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pd.CreatedAt = value.Time
			}
		case processdefinition.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pd.UpdatedAt = value.Time
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessDefinition.
// This includes values selected through modifiers, order, etc.
func (pd *ProcessDefinition) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessDefinition.
// Note that you need to call ProcessDefinition.Unwrap() before calling this method if this ProcessDefinition
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcessDefinition) Update() *ProcessDefinitionUpdateOne {
	return NewProcessDefinitionClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the ProcessDefinition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcessDefinition) Unwrap() *ProcessDefinition {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessDefinition is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcessDefinition) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessDefinition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("key=")
	builder.WriteString(pd.Key)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pd.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pd.Description)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pd.Version)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(pd.Category)
	builder.WriteString(", ")
	builder.WriteString("bpmn_xml=")
	builder.WriteString(fmt.Sprintf("%v", pd.BpmnXML))
	builder.WriteString(", ")
	builder.WriteString("process_variables=")
	builder.WriteString(fmt.Sprintf("%v", pd.ProcessVariables))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_latest=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsLatest))
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.DeploymentID))
	builder.WriteString(", ")
	builder.WriteString("deployment_name=")
	builder.WriteString(pd.DeploymentName)
	builder.WriteString(", ")
	builder.WriteString("deployed_at=")
	builder.WriteString(pd.DeployedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessDefinitions is a parsable slice of ProcessDefinition.
type ProcessDefinitions []*ProcessDefinition
