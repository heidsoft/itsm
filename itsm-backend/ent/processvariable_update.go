// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processvariable"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessVariableUpdate is the builder for updating ProcessVariable entities.
type ProcessVariableUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessVariableMutation
}

// Where appends a list predicates to the ProcessVariableUpdate builder.
func (pvu *ProcessVariableUpdate) Where(ps ...predicate.ProcessVariable) *ProcessVariableUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetVariableID sets the "variable_id" field.
func (pvu *ProcessVariableUpdate) SetVariableID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetVariableID(s)
	return pvu
}

// SetNillableVariableID sets the "variable_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableVariableID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetVariableID(*s)
	}
	return pvu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvu *ProcessVariableUpdate) SetProcessInstanceID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetProcessInstanceID(s)
	return pvu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableProcessInstanceID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetProcessInstanceID(*s)
	}
	return pvu
}

// SetTaskID sets the "task_id" field.
func (pvu *ProcessVariableUpdate) SetTaskID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetTaskID(s)
	return pvu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTaskID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetTaskID(*s)
	}
	return pvu
}

// ClearTaskID clears the value of the "task_id" field.
func (pvu *ProcessVariableUpdate) ClearTaskID() *ProcessVariableUpdate {
	pvu.mutation.ClearTaskID()
	return pvu
}

// SetVariableName sets the "variable_name" field.
func (pvu *ProcessVariableUpdate) SetVariableName(s string) *ProcessVariableUpdate {
	pvu.mutation.SetVariableName(s)
	return pvu
}

// SetNillableVariableName sets the "variable_name" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableVariableName(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetVariableName(*s)
	}
	return pvu
}

// SetVariableType sets the "variable_type" field.
func (pvu *ProcessVariableUpdate) SetVariableType(s string) *ProcessVariableUpdate {
	pvu.mutation.SetVariableType(s)
	return pvu
}

// SetNillableVariableType sets the "variable_type" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableVariableType(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetVariableType(*s)
	}
	return pvu
}

// SetVariableValue sets the "variable_value" field.
func (pvu *ProcessVariableUpdate) SetVariableValue(s string) *ProcessVariableUpdate {
	pvu.mutation.SetVariableValue(s)
	return pvu
}

// SetNillableVariableValue sets the "variable_value" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableVariableValue(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetVariableValue(*s)
	}
	return pvu
}

// ClearVariableValue clears the value of the "variable_value" field.
func (pvu *ProcessVariableUpdate) ClearVariableValue() *ProcessVariableUpdate {
	pvu.mutation.ClearVariableValue()
	return pvu
}

// SetScope sets the "scope" field.
func (pvu *ProcessVariableUpdate) SetScope(s string) *ProcessVariableUpdate {
	pvu.mutation.SetScope(s)
	return pvu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableScope(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetScope(*s)
	}
	return pvu
}

// SetIsTransient sets the "is_transient" field.
func (pvu *ProcessVariableUpdate) SetIsTransient(b bool) *ProcessVariableUpdate {
	pvu.mutation.SetIsTransient(b)
	return pvu
}

// SetNillableIsTransient sets the "is_transient" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableIsTransient(b *bool) *ProcessVariableUpdate {
	if b != nil {
		pvu.SetIsTransient(*b)
	}
	return pvu
}

// SetSerializationFormat sets the "serialization_format" field.
func (pvu *ProcessVariableUpdate) SetSerializationFormat(s string) *ProcessVariableUpdate {
	pvu.mutation.SetSerializationFormat(s)
	return pvu
}

// SetNillableSerializationFormat sets the "serialization_format" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableSerializationFormat(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetSerializationFormat(*s)
	}
	return pvu
}

// SetTenantID sets the "tenant_id" field.
func (pvu *ProcessVariableUpdate) SetTenantID(i int) *ProcessVariableUpdate {
	pvu.mutation.ResetTenantID()
	pvu.mutation.SetTenantID(i)
	return pvu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTenantID(i *int) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetTenantID(*i)
	}
	return pvu
}

// AddTenantID adds i to the "tenant_id" field.
func (pvu *ProcessVariableUpdate) AddTenantID(i int) *ProcessVariableUpdate {
	pvu.mutation.AddTenantID(i)
	return pvu
}

// SetCreatedAt sets the "created_at" field.
func (pvu *ProcessVariableUpdate) SetCreatedAt(t time.Time) *ProcessVariableUpdate {
	pvu.mutation.SetCreatedAt(t)
	return pvu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableCreatedAt(t *time.Time) *ProcessVariableUpdate {
	if t != nil {
		pvu.SetCreatedAt(*t)
	}
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *ProcessVariableUpdate) SetUpdatedAt(t time.Time) *ProcessVariableUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvu *ProcessVariableUpdate) Mutation() *ProcessVariableMutation {
	return pvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProcessVariableUpdate) Save(ctx context.Context) (int, error) {
	pvu.defaults()
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProcessVariableUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProcessVariableUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProcessVariableUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *ProcessVariableUpdate) defaults() {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		v := processvariable.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *ProcessVariableUpdate) check() error {
	if v, ok := pvu.mutation.VariableID(); ok {
		if err := processvariable.VariableIDValidator(v); err != nil {
			return &ValidationError{Name: "variable_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.ProcessInstanceID(); ok {
		if err := processvariable.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.process_instance_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.VariableName(); ok {
		if err := processvariable.VariableNameValidator(v); err != nil {
			return &ValidationError{Name: "variable_name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_name": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pvu *ProcessVariableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processvariable.Table, processvariable.Columns, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.VariableID(); ok {
		_spec.SetField(processvariable.FieldVariableID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeString, value)
	}
	if pvu.mutation.TaskIDCleared() {
		_spec.ClearField(processvariable.FieldTaskID, field.TypeString)
	}
	if value, ok := pvu.mutation.VariableName(); ok {
		_spec.SetField(processvariable.FieldVariableName, field.TypeString, value)
	}
	if value, ok := pvu.mutation.VariableType(); ok {
		_spec.SetField(processvariable.FieldVariableType, field.TypeString, value)
	}
	if value, ok := pvu.mutation.VariableValue(); ok {
		_spec.SetField(processvariable.FieldVariableValue, field.TypeString, value)
	}
	if pvu.mutation.VariableValueCleared() {
		_spec.ClearField(processvariable.FieldVariableValue, field.TypeString)
	}
	if value, ok := pvu.mutation.Scope(); ok {
		_spec.SetField(processvariable.FieldScope, field.TypeString, value)
	}
	if value, ok := pvu.mutation.IsTransient(); ok {
		_spec.SetField(processvariable.FieldIsTransient, field.TypeBool, value)
	}
	if value, ok := pvu.mutation.SerializationFormat(); ok {
		_spec.SetField(processvariable.FieldSerializationFormat, field.TypeString, value)
	}
	if value, ok := pvu.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedTenantID(); ok {
		_spec.AddField(processvariable.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.CreatedAt(); ok {
		_spec.SetField(processvariable.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processvariable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProcessVariableUpdateOne is the builder for updating a single ProcessVariable entity.
type ProcessVariableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessVariableMutation
}

// SetVariableID sets the "variable_id" field.
func (pvuo *ProcessVariableUpdateOne) SetVariableID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetVariableID(s)
	return pvuo
}

// SetNillableVariableID sets the "variable_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableVariableID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetVariableID(*s)
	}
	return pvuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) SetProcessInstanceID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetProcessInstanceID(s)
	return pvuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableProcessInstanceID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetProcessInstanceID(*s)
	}
	return pvuo
}

// SetTaskID sets the "task_id" field.
func (pvuo *ProcessVariableUpdateOne) SetTaskID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetTaskID(s)
	return pvuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTaskID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetTaskID(*s)
	}
	return pvuo
}

// ClearTaskID clears the value of the "task_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearTaskID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearTaskID()
	return pvuo
}

// SetVariableName sets the "variable_name" field.
func (pvuo *ProcessVariableUpdateOne) SetVariableName(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetVariableName(s)
	return pvuo
}

// SetNillableVariableName sets the "variable_name" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableVariableName(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetVariableName(*s)
	}
	return pvuo
}

// SetVariableType sets the "variable_type" field.
func (pvuo *ProcessVariableUpdateOne) SetVariableType(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetVariableType(s)
	return pvuo
}

// SetNillableVariableType sets the "variable_type" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableVariableType(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetVariableType(*s)
	}
	return pvuo
}

// SetVariableValue sets the "variable_value" field.
func (pvuo *ProcessVariableUpdateOne) SetVariableValue(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetVariableValue(s)
	return pvuo
}

// SetNillableVariableValue sets the "variable_value" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableVariableValue(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetVariableValue(*s)
	}
	return pvuo
}

// ClearVariableValue clears the value of the "variable_value" field.
func (pvuo *ProcessVariableUpdateOne) ClearVariableValue() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearVariableValue()
	return pvuo
}

// SetScope sets the "scope" field.
func (pvuo *ProcessVariableUpdateOne) SetScope(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetScope(s)
	return pvuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableScope(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetScope(*s)
	}
	return pvuo
}

// SetIsTransient sets the "is_transient" field.
func (pvuo *ProcessVariableUpdateOne) SetIsTransient(b bool) *ProcessVariableUpdateOne {
	pvuo.mutation.SetIsTransient(b)
	return pvuo
}

// SetNillableIsTransient sets the "is_transient" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableIsTransient(b *bool) *ProcessVariableUpdateOne {
	if b != nil {
		pvuo.SetIsTransient(*b)
	}
	return pvuo
}

// SetSerializationFormat sets the "serialization_format" field.
func (pvuo *ProcessVariableUpdateOne) SetSerializationFormat(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetSerializationFormat(s)
	return pvuo
}

// SetNillableSerializationFormat sets the "serialization_format" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableSerializationFormat(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetSerializationFormat(*s)
	}
	return pvuo
}

// SetTenantID sets the "tenant_id" field.
func (pvuo *ProcessVariableUpdateOne) SetTenantID(i int) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetTenantID()
	pvuo.mutation.SetTenantID(i)
	return pvuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTenantID(i *int) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetTenantID(*i)
	}
	return pvuo
}

// AddTenantID adds i to the "tenant_id" field.
func (pvuo *ProcessVariableUpdateOne) AddTenantID(i int) *ProcessVariableUpdateOne {
	pvuo.mutation.AddTenantID(i)
	return pvuo
}

// SetCreatedAt sets the "created_at" field.
func (pvuo *ProcessVariableUpdateOne) SetCreatedAt(t time.Time) *ProcessVariableUpdateOne {
	pvuo.mutation.SetCreatedAt(t)
	return pvuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessVariableUpdateOne {
	if t != nil {
		pvuo.SetCreatedAt(*t)
	}
	return pvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *ProcessVariableUpdateOne) SetUpdatedAt(t time.Time) *ProcessVariableUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvuo *ProcessVariableUpdateOne) Mutation() *ProcessVariableMutation {
	return pvuo.mutation
}

// Where appends a list predicates to the ProcessVariableUpdate builder.
func (pvuo *ProcessVariableUpdateOne) Where(ps ...predicate.ProcessVariable) *ProcessVariableUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProcessVariableUpdateOne) Select(field string, fields ...string) *ProcessVariableUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProcessVariable entity.
func (pvuo *ProcessVariableUpdateOne) Save(ctx context.Context) (*ProcessVariable, error) {
	pvuo.defaults()
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProcessVariableUpdateOne) SaveX(ctx context.Context) *ProcessVariable {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProcessVariableUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProcessVariableUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *ProcessVariableUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		v := processvariable.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *ProcessVariableUpdateOne) check() error {
	if v, ok := pvuo.mutation.VariableID(); ok {
		if err := processvariable.VariableIDValidator(v); err != nil {
			return &ValidationError{Name: "variable_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.ProcessInstanceID(); ok {
		if err := processvariable.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.process_instance_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.VariableName(); ok {
		if err := processvariable.VariableNameValidator(v); err != nil {
			return &ValidationError{Name: "variable_name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.variable_name": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pvuo *ProcessVariableUpdateOne) sqlSave(ctx context.Context) (_node *ProcessVariable, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processvariable.Table, processvariable.Columns, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessVariable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processvariable.FieldID)
		for _, f := range fields {
			if !processvariable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processvariable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.VariableID(); ok {
		_spec.SetField(processvariable.FieldVariableID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeString, value)
	}
	if pvuo.mutation.TaskIDCleared() {
		_spec.ClearField(processvariable.FieldTaskID, field.TypeString)
	}
	if value, ok := pvuo.mutation.VariableName(); ok {
		_spec.SetField(processvariable.FieldVariableName, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.VariableType(); ok {
		_spec.SetField(processvariable.FieldVariableType, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.VariableValue(); ok {
		_spec.SetField(processvariable.FieldVariableValue, field.TypeString, value)
	}
	if pvuo.mutation.VariableValueCleared() {
		_spec.ClearField(processvariable.FieldVariableValue, field.TypeString)
	}
	if value, ok := pvuo.mutation.Scope(); ok {
		_spec.SetField(processvariable.FieldScope, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.IsTransient(); ok {
		_spec.SetField(processvariable.FieldIsTransient, field.TypeBool, value)
	}
	if value, ok := pvuo.mutation.SerializationFormat(); ok {
		_spec.SetField(processvariable.FieldSerializationFormat, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedTenantID(); ok {
		_spec.AddField(processvariable.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.CreatedAt(); ok {
		_spec.SetField(processvariable.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessVariable{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processvariable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
