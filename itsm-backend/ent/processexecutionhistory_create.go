// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processexecutionhistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessExecutionHistoryCreate is the builder for creating a ProcessExecutionHistory entity.
type ProcessExecutionHistoryCreate struct {
	config
	mutation *ProcessExecutionHistoryMutation
	hooks    []Hook
}

// SetHistoryID sets the "history_id" field.
func (pehc *ProcessExecutionHistoryCreate) SetHistoryID(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetHistoryID(s)
	return pehc
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pehc *ProcessExecutionHistoryCreate) SetProcessInstanceID(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetProcessInstanceID(s)
	return pehc
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (pehc *ProcessExecutionHistoryCreate) SetProcessDefinitionKey(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetProcessDefinitionKey(s)
	return pehc
}

// SetActivityID sets the "activity_id" field.
func (pehc *ProcessExecutionHistoryCreate) SetActivityID(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetActivityID(s)
	return pehc
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableActivityID(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetActivityID(*s)
	}
	return pehc
}

// SetActivityName sets the "activity_name" field.
func (pehc *ProcessExecutionHistoryCreate) SetActivityName(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetActivityName(s)
	return pehc
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableActivityName(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetActivityName(*s)
	}
	return pehc
}

// SetActivityType sets the "activity_type" field.
func (pehc *ProcessExecutionHistoryCreate) SetActivityType(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetActivityType(s)
	return pehc
}

// SetEventType sets the "event_type" field.
func (pehc *ProcessExecutionHistoryCreate) SetEventType(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetEventType(s)
	return pehc
}

// SetEventDetail sets the "event_detail" field.
func (pehc *ProcessExecutionHistoryCreate) SetEventDetail(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetEventDetail(s)
	return pehc
}

// SetNillableEventDetail sets the "event_detail" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableEventDetail(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetEventDetail(*s)
	}
	return pehc
}

// SetVariables sets the "variables" field.
func (pehc *ProcessExecutionHistoryCreate) SetVariables(m map[string]interface{}) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetVariables(m)
	return pehc
}

// SetUserID sets the "user_id" field.
func (pehc *ProcessExecutionHistoryCreate) SetUserID(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetUserID(s)
	return pehc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableUserID(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetUserID(*s)
	}
	return pehc
}

// SetUserName sets the "user_name" field.
func (pehc *ProcessExecutionHistoryCreate) SetUserName(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetUserName(s)
	return pehc
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableUserName(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetUserName(*s)
	}
	return pehc
}

// SetTimestamp sets the "timestamp" field.
func (pehc *ProcessExecutionHistoryCreate) SetTimestamp(t time.Time) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetTimestamp(t)
	return pehc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableTimestamp(t *time.Time) *ProcessExecutionHistoryCreate {
	if t != nil {
		pehc.SetTimestamp(*t)
	}
	return pehc
}

// SetComment sets the "comment" field.
func (pehc *ProcessExecutionHistoryCreate) SetComment(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetComment(s)
	return pehc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableComment(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetComment(*s)
	}
	return pehc
}

// SetErrorMessage sets the "error_message" field.
func (pehc *ProcessExecutionHistoryCreate) SetErrorMessage(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetErrorMessage(s)
	return pehc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableErrorMessage(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetErrorMessage(*s)
	}
	return pehc
}

// SetErrorCode sets the "error_code" field.
func (pehc *ProcessExecutionHistoryCreate) SetErrorCode(s string) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetErrorCode(s)
	return pehc
}

// SetNillableErrorCode sets the "error_code" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableErrorCode(s *string) *ProcessExecutionHistoryCreate {
	if s != nil {
		pehc.SetErrorCode(*s)
	}
	return pehc
}

// SetTenantID sets the "tenant_id" field.
func (pehc *ProcessExecutionHistoryCreate) SetTenantID(i int) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetTenantID(i)
	return pehc
}

// SetCreatedAt sets the "created_at" field.
func (pehc *ProcessExecutionHistoryCreate) SetCreatedAt(t time.Time) *ProcessExecutionHistoryCreate {
	pehc.mutation.SetCreatedAt(t)
	return pehc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pehc *ProcessExecutionHistoryCreate) SetNillableCreatedAt(t *time.Time) *ProcessExecutionHistoryCreate {
	if t != nil {
		pehc.SetCreatedAt(*t)
	}
	return pehc
}

// Mutation returns the ProcessExecutionHistoryMutation object of the builder.
func (pehc *ProcessExecutionHistoryCreate) Mutation() *ProcessExecutionHistoryMutation {
	return pehc.mutation
}

// Save creates the ProcessExecutionHistory in the database.
func (pehc *ProcessExecutionHistoryCreate) Save(ctx context.Context) (*ProcessExecutionHistory, error) {
	pehc.defaults()
	return withHooks(ctx, pehc.sqlSave, pehc.mutation, pehc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pehc *ProcessExecutionHistoryCreate) SaveX(ctx context.Context) *ProcessExecutionHistory {
	v, err := pehc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pehc *ProcessExecutionHistoryCreate) Exec(ctx context.Context) error {
	_, err := pehc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pehc *ProcessExecutionHistoryCreate) ExecX(ctx context.Context) {
	if err := pehc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pehc *ProcessExecutionHistoryCreate) defaults() {
	if _, ok := pehc.mutation.Timestamp(); !ok {
		v := processexecutionhistory.DefaultTimestamp()
		pehc.mutation.SetTimestamp(v)
	}
	if _, ok := pehc.mutation.CreatedAt(); !ok {
		v := processexecutionhistory.DefaultCreatedAt()
		pehc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pehc *ProcessExecutionHistoryCreate) check() error {
	if _, ok := pehc.mutation.HistoryID(); !ok {
		return &ValidationError{Name: "history_id", err: errors.New(`ent: missing required field "ProcessExecutionHistory.history_id"`)}
	}
	if v, ok := pehc.mutation.HistoryID(); ok {
		if err := processexecutionhistory.HistoryIDValidator(v); err != nil {
			return &ValidationError{Name: "history_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.history_id": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "ProcessExecutionHistory.process_instance_id"`)}
	}
	if v, ok := pehc.mutation.ProcessInstanceID(); ok {
		if err := processexecutionhistory.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_instance_id": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.ProcessDefinitionKey(); !ok {
		return &ValidationError{Name: "process_definition_key", err: errors.New(`ent: missing required field "ProcessExecutionHistory.process_definition_key"`)}
	}
	if v, ok := pehc.mutation.ProcessDefinitionKey(); ok {
		if err := processexecutionhistory.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.process_definition_key": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "ProcessExecutionHistory.activity_type"`)}
	}
	if v, ok := pehc.mutation.ActivityType(); ok {
		if err := processexecutionhistory.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.activity_type": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "ProcessExecutionHistory.event_type"`)}
	}
	if v, ok := pehc.mutation.EventType(); ok {
		if err := processexecutionhistory.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.event_type": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ProcessExecutionHistory.timestamp"`)}
	}
	if _, ok := pehc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessExecutionHistory.tenant_id"`)}
	}
	if v, ok := pehc.mutation.TenantID(); ok {
		if err := processexecutionhistory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessExecutionHistory.tenant_id": %w`, err)}
		}
	}
	if _, ok := pehc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessExecutionHistory.created_at"`)}
	}
	return nil
}

func (pehc *ProcessExecutionHistoryCreate) sqlSave(ctx context.Context) (*ProcessExecutionHistory, error) {
	if err := pehc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pehc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pehc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pehc.mutation.id = &_node.ID
	pehc.mutation.done = true
	return _node, nil
}

func (pehc *ProcessExecutionHistoryCreate) createSpec() (*ProcessExecutionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessExecutionHistory{config: pehc.config}
		_spec = sqlgraph.NewCreateSpec(processexecutionhistory.Table, sqlgraph.NewFieldSpec(processexecutionhistory.FieldID, field.TypeInt))
	)
	if value, ok := pehc.mutation.HistoryID(); ok {
		_spec.SetField(processexecutionhistory.FieldHistoryID, field.TypeString, value)
		_node.HistoryID = value
	}
	if value, ok := pehc.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessInstanceID, field.TypeString, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := pehc.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processexecutionhistory.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := pehc.mutation.ActivityID(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityID, field.TypeString, value)
		_node.ActivityID = value
	}
	if value, ok := pehc.mutation.ActivityName(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityName, field.TypeString, value)
		_node.ActivityName = value
	}
	if value, ok := pehc.mutation.ActivityType(); ok {
		_spec.SetField(processexecutionhistory.FieldActivityType, field.TypeString, value)
		_node.ActivityType = value
	}
	if value, ok := pehc.mutation.EventType(); ok {
		_spec.SetField(processexecutionhistory.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := pehc.mutation.EventDetail(); ok {
		_spec.SetField(processexecutionhistory.FieldEventDetail, field.TypeString, value)
		_node.EventDetail = value
	}
	if value, ok := pehc.mutation.Variables(); ok {
		_spec.SetField(processexecutionhistory.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := pehc.mutation.UserID(); ok {
		_spec.SetField(processexecutionhistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := pehc.mutation.UserName(); ok {
		_spec.SetField(processexecutionhistory.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := pehc.mutation.Timestamp(); ok {
		_spec.SetField(processexecutionhistory.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := pehc.mutation.Comment(); ok {
		_spec.SetField(processexecutionhistory.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := pehc.mutation.ErrorMessage(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := pehc.mutation.ErrorCode(); ok {
		_spec.SetField(processexecutionhistory.FieldErrorCode, field.TypeString, value)
		_node.ErrorCode = value
	}
	if value, ok := pehc.mutation.TenantID(); ok {
		_spec.SetField(processexecutionhistory.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pehc.mutation.CreatedAt(); ok {
		_spec.SetField(processexecutionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ProcessExecutionHistoryCreateBulk is the builder for creating many ProcessExecutionHistory entities in bulk.
type ProcessExecutionHistoryCreateBulk struct {
	config
	err      error
	builders []*ProcessExecutionHistoryCreate
}

// Save creates the ProcessExecutionHistory entities in the database.
func (pehcb *ProcessExecutionHistoryCreateBulk) Save(ctx context.Context) ([]*ProcessExecutionHistory, error) {
	if pehcb.err != nil {
		return nil, pehcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pehcb.builders))
	nodes := make([]*ProcessExecutionHistory, len(pehcb.builders))
	mutators := make([]Mutator, len(pehcb.builders))
	for i := range pehcb.builders {
		func(i int, root context.Context) {
			builder := pehcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessExecutionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pehcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pehcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pehcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pehcb *ProcessExecutionHistoryCreateBulk) SaveX(ctx context.Context) []*ProcessExecutionHistory {
	v, err := pehcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pehcb *ProcessExecutionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pehcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pehcb *ProcessExecutionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := pehcb.Exec(ctx); err != nil {
		panic(err)
	}
}
