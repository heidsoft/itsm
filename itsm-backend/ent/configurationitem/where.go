// Code generated by ent, DO NOT EDIT.

package configurationitem

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldDescription, v))
}

// CiTypeID applies equality check predicate on the "ci_type_id" field. It's identical to CiTypeIDEQ.
func CiTypeID(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldCiTypeID, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldSerialNumber, v))
}

// AssetTag applies equality check predicate on the "asset_tag" field. It's identical to AssetTagEQ.
func AssetTag(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldAssetTag, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldStatus, v))
}

// LifecycleState applies equality check predicate on the "lifecycle_state" field. It's identical to LifecycleStateEQ.
func LifecycleState(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLifecycleState, v))
}

// BusinessService applies equality check predicate on the "business_service" field. It's identical to BusinessServiceEQ.
func BusinessService(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldBusinessService, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldOwner, v))
}

// Environment applies equality check predicate on the "environment" field. It's identical to EnvironmentEQ.
func Environment(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldEnvironment, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLocation, v))
}

// LastDiscovered applies equality check predicate on the "last_discovered" field. It's identical to LastDiscoveredEQ.
func LastDiscovered(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLastDiscovered, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldVersion, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldDisplayName))
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldDisplayName))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldDescription, v))
}

// CiTypeIDEQ applies the EQ predicate on the "ci_type_id" field.
func CiTypeIDEQ(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldCiTypeID, v))
}

// CiTypeIDNEQ applies the NEQ predicate on the "ci_type_id" field.
func CiTypeIDNEQ(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldCiTypeID, v))
}

// CiTypeIDIn applies the In predicate on the "ci_type_id" field.
func CiTypeIDIn(vs ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldCiTypeID, vs...))
}

// CiTypeIDNotIn applies the NotIn predicate on the "ci_type_id" field.
func CiTypeIDNotIn(vs ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldCiTypeID, vs...))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberIsNil applies the IsNil predicate on the "serial_number" field.
func SerialNumberIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldSerialNumber))
}

// SerialNumberNotNil applies the NotNil predicate on the "serial_number" field.
func SerialNumberNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldSerialNumber))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldSerialNumber, v))
}

// AssetTagEQ applies the EQ predicate on the "asset_tag" field.
func AssetTagEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldAssetTag, v))
}

// AssetTagNEQ applies the NEQ predicate on the "asset_tag" field.
func AssetTagNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldAssetTag, v))
}

// AssetTagIn applies the In predicate on the "asset_tag" field.
func AssetTagIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldAssetTag, vs...))
}

// AssetTagNotIn applies the NotIn predicate on the "asset_tag" field.
func AssetTagNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldAssetTag, vs...))
}

// AssetTagGT applies the GT predicate on the "asset_tag" field.
func AssetTagGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldAssetTag, v))
}

// AssetTagGTE applies the GTE predicate on the "asset_tag" field.
func AssetTagGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldAssetTag, v))
}

// AssetTagLT applies the LT predicate on the "asset_tag" field.
func AssetTagLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldAssetTag, v))
}

// AssetTagLTE applies the LTE predicate on the "asset_tag" field.
func AssetTagLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldAssetTag, v))
}

// AssetTagContains applies the Contains predicate on the "asset_tag" field.
func AssetTagContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldAssetTag, v))
}

// AssetTagHasPrefix applies the HasPrefix predicate on the "asset_tag" field.
func AssetTagHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldAssetTag, v))
}

// AssetTagHasSuffix applies the HasSuffix predicate on the "asset_tag" field.
func AssetTagHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldAssetTag, v))
}

// AssetTagIsNil applies the IsNil predicate on the "asset_tag" field.
func AssetTagIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldAssetTag))
}

// AssetTagNotNil applies the NotNil predicate on the "asset_tag" field.
func AssetTagNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldAssetTag))
}

// AssetTagEqualFold applies the EqualFold predicate on the "asset_tag" field.
func AssetTagEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldAssetTag, v))
}

// AssetTagContainsFold applies the ContainsFold predicate on the "asset_tag" field.
func AssetTagContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldAssetTag, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldStatus, v))
}

// LifecycleStateEQ applies the EQ predicate on the "lifecycle_state" field.
func LifecycleStateEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLifecycleState, v))
}

// LifecycleStateNEQ applies the NEQ predicate on the "lifecycle_state" field.
func LifecycleStateNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldLifecycleState, v))
}

// LifecycleStateIn applies the In predicate on the "lifecycle_state" field.
func LifecycleStateIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldLifecycleState, vs...))
}

// LifecycleStateNotIn applies the NotIn predicate on the "lifecycle_state" field.
func LifecycleStateNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldLifecycleState, vs...))
}

// LifecycleStateGT applies the GT predicate on the "lifecycle_state" field.
func LifecycleStateGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldLifecycleState, v))
}

// LifecycleStateGTE applies the GTE predicate on the "lifecycle_state" field.
func LifecycleStateGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldLifecycleState, v))
}

// LifecycleStateLT applies the LT predicate on the "lifecycle_state" field.
func LifecycleStateLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldLifecycleState, v))
}

// LifecycleStateLTE applies the LTE predicate on the "lifecycle_state" field.
func LifecycleStateLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldLifecycleState, v))
}

// LifecycleStateContains applies the Contains predicate on the "lifecycle_state" field.
func LifecycleStateContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldLifecycleState, v))
}

// LifecycleStateHasPrefix applies the HasPrefix predicate on the "lifecycle_state" field.
func LifecycleStateHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldLifecycleState, v))
}

// LifecycleStateHasSuffix applies the HasSuffix predicate on the "lifecycle_state" field.
func LifecycleStateHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldLifecycleState, v))
}

// LifecycleStateEqualFold applies the EqualFold predicate on the "lifecycle_state" field.
func LifecycleStateEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldLifecycleState, v))
}

// LifecycleStateContainsFold applies the ContainsFold predicate on the "lifecycle_state" field.
func LifecycleStateContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldLifecycleState, v))
}

// BusinessServiceEQ applies the EQ predicate on the "business_service" field.
func BusinessServiceEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldBusinessService, v))
}

// BusinessServiceNEQ applies the NEQ predicate on the "business_service" field.
func BusinessServiceNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldBusinessService, v))
}

// BusinessServiceIn applies the In predicate on the "business_service" field.
func BusinessServiceIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldBusinessService, vs...))
}

// BusinessServiceNotIn applies the NotIn predicate on the "business_service" field.
func BusinessServiceNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldBusinessService, vs...))
}

// BusinessServiceGT applies the GT predicate on the "business_service" field.
func BusinessServiceGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldBusinessService, v))
}

// BusinessServiceGTE applies the GTE predicate on the "business_service" field.
func BusinessServiceGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldBusinessService, v))
}

// BusinessServiceLT applies the LT predicate on the "business_service" field.
func BusinessServiceLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldBusinessService, v))
}

// BusinessServiceLTE applies the LTE predicate on the "business_service" field.
func BusinessServiceLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldBusinessService, v))
}

// BusinessServiceContains applies the Contains predicate on the "business_service" field.
func BusinessServiceContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldBusinessService, v))
}

// BusinessServiceHasPrefix applies the HasPrefix predicate on the "business_service" field.
func BusinessServiceHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldBusinessService, v))
}

// BusinessServiceHasSuffix applies the HasSuffix predicate on the "business_service" field.
func BusinessServiceHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldBusinessService, v))
}

// BusinessServiceIsNil applies the IsNil predicate on the "business_service" field.
func BusinessServiceIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldBusinessService))
}

// BusinessServiceNotNil applies the NotNil predicate on the "business_service" field.
func BusinessServiceNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldBusinessService))
}

// BusinessServiceEqualFold applies the EqualFold predicate on the "business_service" field.
func BusinessServiceEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldBusinessService, v))
}

// BusinessServiceContainsFold applies the ContainsFold predicate on the "business_service" field.
func BusinessServiceContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldBusinessService, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerIsNil applies the IsNil predicate on the "owner" field.
func OwnerIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldOwner))
}

// OwnerNotNil applies the NotNil predicate on the "owner" field.
func OwnerNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldOwner))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldOwner, v))
}

// EnvironmentEQ applies the EQ predicate on the "environment" field.
func EnvironmentEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldEnvironment, v))
}

// EnvironmentNEQ applies the NEQ predicate on the "environment" field.
func EnvironmentNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldEnvironment, v))
}

// EnvironmentIn applies the In predicate on the "environment" field.
func EnvironmentIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldEnvironment, vs...))
}

// EnvironmentNotIn applies the NotIn predicate on the "environment" field.
func EnvironmentNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldEnvironment, vs...))
}

// EnvironmentGT applies the GT predicate on the "environment" field.
func EnvironmentGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldEnvironment, v))
}

// EnvironmentGTE applies the GTE predicate on the "environment" field.
func EnvironmentGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldEnvironment, v))
}

// EnvironmentLT applies the LT predicate on the "environment" field.
func EnvironmentLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldEnvironment, v))
}

// EnvironmentLTE applies the LTE predicate on the "environment" field.
func EnvironmentLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldEnvironment, v))
}

// EnvironmentContains applies the Contains predicate on the "environment" field.
func EnvironmentContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldEnvironment, v))
}

// EnvironmentHasPrefix applies the HasPrefix predicate on the "environment" field.
func EnvironmentHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldEnvironment, v))
}

// EnvironmentHasSuffix applies the HasSuffix predicate on the "environment" field.
func EnvironmentHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldEnvironment, v))
}

// EnvironmentIsNil applies the IsNil predicate on the "environment" field.
func EnvironmentIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldEnvironment))
}

// EnvironmentNotNil applies the NotNil predicate on the "environment" field.
func EnvironmentNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldEnvironment))
}

// EnvironmentEqualFold applies the EqualFold predicate on the "environment" field.
func EnvironmentEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldEnvironment, v))
}

// EnvironmentContainsFold applies the ContainsFold predicate on the "environment" field.
func EnvironmentContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldEnvironment, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldLocation, v))
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldAttributes))
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldAttributes))
}

// MonitoringDataIsNil applies the IsNil predicate on the "monitoring_data" field.
func MonitoringDataIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldMonitoringData))
}

// MonitoringDataNotNil applies the NotNil predicate on the "monitoring_data" field.
func MonitoringDataNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldMonitoringData))
}

// DiscoverySourceIsNil applies the IsNil predicate on the "discovery_source" field.
func DiscoverySourceIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldDiscoverySource))
}

// DiscoverySourceNotNil applies the NotNil predicate on the "discovery_source" field.
func DiscoverySourceNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldDiscoverySource))
}

// LastDiscoveredEQ applies the EQ predicate on the "last_discovered" field.
func LastDiscoveredEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldLastDiscovered, v))
}

// LastDiscoveredNEQ applies the NEQ predicate on the "last_discovered" field.
func LastDiscoveredNEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldLastDiscovered, v))
}

// LastDiscoveredIn applies the In predicate on the "last_discovered" field.
func LastDiscoveredIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldLastDiscovered, vs...))
}

// LastDiscoveredNotIn applies the NotIn predicate on the "last_discovered" field.
func LastDiscoveredNotIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldLastDiscovered, vs...))
}

// LastDiscoveredGT applies the GT predicate on the "last_discovered" field.
func LastDiscoveredGT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldLastDiscovered, v))
}

// LastDiscoveredGTE applies the GTE predicate on the "last_discovered" field.
func LastDiscoveredGTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldLastDiscovered, v))
}

// LastDiscoveredLT applies the LT predicate on the "last_discovered" field.
func LastDiscoveredLT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldLastDiscovered, v))
}

// LastDiscoveredLTE applies the LTE predicate on the "last_discovered" field.
func LastDiscoveredLTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldLastDiscovered, v))
}

// LastDiscoveredIsNil applies the IsNil predicate on the "last_discovered" field.
func LastDiscoveredIsNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIsNull(FieldLastDiscovered))
}

// LastDiscoveredNotNil applies the NotNil predicate on the "last_discovered" field.
func LastDiscoveredNotNil() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotNull(FieldLastDiscovered))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldContainsFold(FieldVersion, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldTenantID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCiType applies the HasEdge predicate on the "ci_type" edge.
func HasCiType() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CiTypeTable, CiTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCiTypeWith applies the HasEdge predicate on the "ci_type" edge with a given conditions (other predicates).
func HasCiTypeWith(preds ...predicate.CIType) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newCiTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutgoingRelationships applies the HasEdge predicate on the "outgoing_relationships" edge.
func HasOutgoingRelationships() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OutgoingRelationshipsTable, OutgoingRelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutgoingRelationshipsWith applies the HasEdge predicate on the "outgoing_relationships" edge with a given conditions (other predicates).
func HasOutgoingRelationshipsWith(preds ...predicate.CIRelationship) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newOutgoingRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncomingRelationships applies the HasEdge predicate on the "incoming_relationships" edge.
func HasIncomingRelationships() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncomingRelationshipsTable, IncomingRelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncomingRelationshipsWith applies the HasEdge predicate on the "incoming_relationships" edge with a given conditions (other predicates).
func HasIncomingRelationshipsWith(preds ...predicate.CIRelationship) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newIncomingRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLifecycleStates applies the HasEdge predicate on the "lifecycle_states" edge.
func HasLifecycleStates() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LifecycleStatesTable, LifecycleStatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLifecycleStatesWith applies the HasEdge predicate on the "lifecycle_states" edge with a given conditions (other predicates).
func HasLifecycleStatesWith(preds ...predicate.CILifecycleState) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newLifecycleStatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChangeRecords applies the HasEdge predicate on the "change_records" edge.
func HasChangeRecords() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChangeRecordsTable, ChangeRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangeRecordsWith applies the HasEdge predicate on the "change_records" edge with a given conditions (other predicates).
func HasChangeRecordsWith(preds ...predicate.CIChangeRecord) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newChangeRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIncidents applies the HasEdge predicate on the "incidents" edge.
func HasIncidents() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IncidentsTable, IncidentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIncidentsWith applies the HasEdge predicate on the "incidents" edge with a given conditions (other predicates).
func HasIncidentsWith(preds ...predicate.Ticket) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newIncidentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChanges applies the HasEdge predicate on the "changes" edge.
func HasChanges() predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChangesTable, ChangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChangesWith applies the HasEdge predicate on the "changes" edge with a given conditions (other predicates).
func HasChangesWith(preds ...predicate.Ticket) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(func(s *sql.Selector) {
		step := newChangesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConfigurationItem) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConfigurationItem) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConfigurationItem) predicate.ConfigurationItem {
	return predicate.ConfigurationItem(sql.NotPredicates(p))
}
