// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/servicecatalog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceCatalogUpdate is the builder for updating ServiceCatalog entities.
type ServiceCatalogUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceCatalogMutation
}

// Where appends a list predicates to the ServiceCatalogUpdate builder.
func (scu *ServiceCatalogUpdate) Where(ps ...predicate.ServiceCatalog) *ServiceCatalogUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetName sets the "name" field.
func (scu *ServiceCatalogUpdate) SetName(s string) *ServiceCatalogUpdate {
	scu.mutation.SetName(s)
	return scu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableName(s *string) *ServiceCatalogUpdate {
	if s != nil {
		scu.SetName(*s)
	}
	return scu
}

// SetDescription sets the "description" field.
func (scu *ServiceCatalogUpdate) SetDescription(s string) *ServiceCatalogUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableDescription(s *string) *ServiceCatalogUpdate {
	if s != nil {
		scu.SetDescription(*s)
	}
	return scu
}

// ClearDescription clears the value of the "description" field.
func (scu *ServiceCatalogUpdate) ClearDescription() *ServiceCatalogUpdate {
	scu.mutation.ClearDescription()
	return scu
}

// SetCategory sets the "category" field.
func (scu *ServiceCatalogUpdate) SetCategory(s string) *ServiceCatalogUpdate {
	scu.mutation.SetCategory(s)
	return scu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableCategory(s *string) *ServiceCatalogUpdate {
	if s != nil {
		scu.SetCategory(*s)
	}
	return scu
}

// ClearCategory clears the value of the "category" field.
func (scu *ServiceCatalogUpdate) ClearCategory() *ServiceCatalogUpdate {
	scu.mutation.ClearCategory()
	return scu
}

// SetPrice sets the "price" field.
func (scu *ServiceCatalogUpdate) SetPrice(f float64) *ServiceCatalogUpdate {
	scu.mutation.ResetPrice()
	scu.mutation.SetPrice(f)
	return scu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillablePrice(f *float64) *ServiceCatalogUpdate {
	if f != nil {
		scu.SetPrice(*f)
	}
	return scu
}

// AddPrice adds f to the "price" field.
func (scu *ServiceCatalogUpdate) AddPrice(f float64) *ServiceCatalogUpdate {
	scu.mutation.AddPrice(f)
	return scu
}

// ClearPrice clears the value of the "price" field.
func (scu *ServiceCatalogUpdate) ClearPrice() *ServiceCatalogUpdate {
	scu.mutation.ClearPrice()
	return scu
}

// SetDeliveryTime sets the "delivery_time" field.
func (scu *ServiceCatalogUpdate) SetDeliveryTime(i int) *ServiceCatalogUpdate {
	scu.mutation.ResetDeliveryTime()
	scu.mutation.SetDeliveryTime(i)
	return scu
}

// SetNillableDeliveryTime sets the "delivery_time" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableDeliveryTime(i *int) *ServiceCatalogUpdate {
	if i != nil {
		scu.SetDeliveryTime(*i)
	}
	return scu
}

// AddDeliveryTime adds i to the "delivery_time" field.
func (scu *ServiceCatalogUpdate) AddDeliveryTime(i int) *ServiceCatalogUpdate {
	scu.mutation.AddDeliveryTime(i)
	return scu
}

// ClearDeliveryTime clears the value of the "delivery_time" field.
func (scu *ServiceCatalogUpdate) ClearDeliveryTime() *ServiceCatalogUpdate {
	scu.mutation.ClearDeliveryTime()
	return scu
}

// SetStatus sets the "status" field.
func (scu *ServiceCatalogUpdate) SetStatus(s string) *ServiceCatalogUpdate {
	scu.mutation.SetStatus(s)
	return scu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableStatus(s *string) *ServiceCatalogUpdate {
	if s != nil {
		scu.SetStatus(*s)
	}
	return scu
}

// SetTenantID sets the "tenant_id" field.
func (scu *ServiceCatalogUpdate) SetTenantID(i int) *ServiceCatalogUpdate {
	scu.mutation.ResetTenantID()
	scu.mutation.SetTenantID(i)
	return scu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableTenantID(i *int) *ServiceCatalogUpdate {
	if i != nil {
		scu.SetTenantID(*i)
	}
	return scu
}

// AddTenantID adds i to the "tenant_id" field.
func (scu *ServiceCatalogUpdate) AddTenantID(i int) *ServiceCatalogUpdate {
	scu.mutation.AddTenantID(i)
	return scu
}

// SetIsActive sets the "is_active" field.
func (scu *ServiceCatalogUpdate) SetIsActive(b bool) *ServiceCatalogUpdate {
	scu.mutation.SetIsActive(b)
	return scu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableIsActive(b *bool) *ServiceCatalogUpdate {
	if b != nil {
		scu.SetIsActive(*b)
	}
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *ServiceCatalogUpdate) SetCreatedAt(t time.Time) *ServiceCatalogUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *ServiceCatalogUpdate) SetNillableCreatedAt(t *time.Time) *ServiceCatalogUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *ServiceCatalogUpdate) SetUpdatedAt(t time.Time) *ServiceCatalogUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// Mutation returns the ServiceCatalogMutation object of the builder.
func (scu *ServiceCatalogUpdate) Mutation() *ServiceCatalogMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ServiceCatalogUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ServiceCatalogUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ServiceCatalogUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ServiceCatalogUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ServiceCatalogUpdate) defaults() {
	if _, ok := scu.mutation.UpdatedAt(); !ok {
		v := servicecatalog.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scu *ServiceCatalogUpdate) check() error {
	if v, ok := scu.mutation.Name(); ok {
		if err := servicecatalog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.name": %w`, err)}
		}
	}
	if v, ok := scu.mutation.TenantID(); ok {
		if err := servicecatalog.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (scu *ServiceCatalogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicecatalog.Table, servicecatalog.Columns, sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Name(); ok {
		_spec.SetField(servicecatalog.FieldName, field.TypeString, value)
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.SetField(servicecatalog.FieldDescription, field.TypeString, value)
	}
	if scu.mutation.DescriptionCleared() {
		_spec.ClearField(servicecatalog.FieldDescription, field.TypeString)
	}
	if value, ok := scu.mutation.Category(); ok {
		_spec.SetField(servicecatalog.FieldCategory, field.TypeString, value)
	}
	if scu.mutation.CategoryCleared() {
		_spec.ClearField(servicecatalog.FieldCategory, field.TypeString)
	}
	if value, ok := scu.mutation.Price(); ok {
		_spec.SetField(servicecatalog.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := scu.mutation.AddedPrice(); ok {
		_spec.AddField(servicecatalog.FieldPrice, field.TypeFloat64, value)
	}
	if scu.mutation.PriceCleared() {
		_spec.ClearField(servicecatalog.FieldPrice, field.TypeFloat64)
	}
	if value, ok := scu.mutation.DeliveryTime(); ok {
		_spec.SetField(servicecatalog.FieldDeliveryTime, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedDeliveryTime(); ok {
		_spec.AddField(servicecatalog.FieldDeliveryTime, field.TypeInt, value)
	}
	if scu.mutation.DeliveryTimeCleared() {
		_spec.ClearField(servicecatalog.FieldDeliveryTime, field.TypeInt)
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.SetField(servicecatalog.FieldStatus, field.TypeString, value)
	}
	if value, ok := scu.mutation.TenantID(); ok {
		_spec.SetField(servicecatalog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedTenantID(); ok {
		_spec.AddField(servicecatalog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := scu.mutation.IsActive(); ok {
		_spec.SetField(servicecatalog.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(servicecatalog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(servicecatalog.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicecatalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ServiceCatalogUpdateOne is the builder for updating a single ServiceCatalog entity.
type ServiceCatalogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceCatalogMutation
}

// SetName sets the "name" field.
func (scuo *ServiceCatalogUpdateOne) SetName(s string) *ServiceCatalogUpdateOne {
	scuo.mutation.SetName(s)
	return scuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableName(s *string) *ServiceCatalogUpdateOne {
	if s != nil {
		scuo.SetName(*s)
	}
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *ServiceCatalogUpdateOne) SetDescription(s string) *ServiceCatalogUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableDescription(s *string) *ServiceCatalogUpdateOne {
	if s != nil {
		scuo.SetDescription(*s)
	}
	return scuo
}

// ClearDescription clears the value of the "description" field.
func (scuo *ServiceCatalogUpdateOne) ClearDescription() *ServiceCatalogUpdateOne {
	scuo.mutation.ClearDescription()
	return scuo
}

// SetCategory sets the "category" field.
func (scuo *ServiceCatalogUpdateOne) SetCategory(s string) *ServiceCatalogUpdateOne {
	scuo.mutation.SetCategory(s)
	return scuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableCategory(s *string) *ServiceCatalogUpdateOne {
	if s != nil {
		scuo.SetCategory(*s)
	}
	return scuo
}

// ClearCategory clears the value of the "category" field.
func (scuo *ServiceCatalogUpdateOne) ClearCategory() *ServiceCatalogUpdateOne {
	scuo.mutation.ClearCategory()
	return scuo
}

// SetPrice sets the "price" field.
func (scuo *ServiceCatalogUpdateOne) SetPrice(f float64) *ServiceCatalogUpdateOne {
	scuo.mutation.ResetPrice()
	scuo.mutation.SetPrice(f)
	return scuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillablePrice(f *float64) *ServiceCatalogUpdateOne {
	if f != nil {
		scuo.SetPrice(*f)
	}
	return scuo
}

// AddPrice adds f to the "price" field.
func (scuo *ServiceCatalogUpdateOne) AddPrice(f float64) *ServiceCatalogUpdateOne {
	scuo.mutation.AddPrice(f)
	return scuo
}

// ClearPrice clears the value of the "price" field.
func (scuo *ServiceCatalogUpdateOne) ClearPrice() *ServiceCatalogUpdateOne {
	scuo.mutation.ClearPrice()
	return scuo
}

// SetDeliveryTime sets the "delivery_time" field.
func (scuo *ServiceCatalogUpdateOne) SetDeliveryTime(i int) *ServiceCatalogUpdateOne {
	scuo.mutation.ResetDeliveryTime()
	scuo.mutation.SetDeliveryTime(i)
	return scuo
}

// SetNillableDeliveryTime sets the "delivery_time" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableDeliveryTime(i *int) *ServiceCatalogUpdateOne {
	if i != nil {
		scuo.SetDeliveryTime(*i)
	}
	return scuo
}

// AddDeliveryTime adds i to the "delivery_time" field.
func (scuo *ServiceCatalogUpdateOne) AddDeliveryTime(i int) *ServiceCatalogUpdateOne {
	scuo.mutation.AddDeliveryTime(i)
	return scuo
}

// ClearDeliveryTime clears the value of the "delivery_time" field.
func (scuo *ServiceCatalogUpdateOne) ClearDeliveryTime() *ServiceCatalogUpdateOne {
	scuo.mutation.ClearDeliveryTime()
	return scuo
}

// SetStatus sets the "status" field.
func (scuo *ServiceCatalogUpdateOne) SetStatus(s string) *ServiceCatalogUpdateOne {
	scuo.mutation.SetStatus(s)
	return scuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableStatus(s *string) *ServiceCatalogUpdateOne {
	if s != nil {
		scuo.SetStatus(*s)
	}
	return scuo
}

// SetTenantID sets the "tenant_id" field.
func (scuo *ServiceCatalogUpdateOne) SetTenantID(i int) *ServiceCatalogUpdateOne {
	scuo.mutation.ResetTenantID()
	scuo.mutation.SetTenantID(i)
	return scuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableTenantID(i *int) *ServiceCatalogUpdateOne {
	if i != nil {
		scuo.SetTenantID(*i)
	}
	return scuo
}

// AddTenantID adds i to the "tenant_id" field.
func (scuo *ServiceCatalogUpdateOne) AddTenantID(i int) *ServiceCatalogUpdateOne {
	scuo.mutation.AddTenantID(i)
	return scuo
}

// SetIsActive sets the "is_active" field.
func (scuo *ServiceCatalogUpdateOne) SetIsActive(b bool) *ServiceCatalogUpdateOne {
	scuo.mutation.SetIsActive(b)
	return scuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableIsActive(b *bool) *ServiceCatalogUpdateOne {
	if b != nil {
		scuo.SetIsActive(*b)
	}
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *ServiceCatalogUpdateOne) SetCreatedAt(t time.Time) *ServiceCatalogUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *ServiceCatalogUpdateOne) SetNillableCreatedAt(t *time.Time) *ServiceCatalogUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *ServiceCatalogUpdateOne) SetUpdatedAt(t time.Time) *ServiceCatalogUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// Mutation returns the ServiceCatalogMutation object of the builder.
func (scuo *ServiceCatalogUpdateOne) Mutation() *ServiceCatalogMutation {
	return scuo.mutation
}

// Where appends a list predicates to the ServiceCatalogUpdate builder.
func (scuo *ServiceCatalogUpdateOne) Where(ps ...predicate.ServiceCatalog) *ServiceCatalogUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ServiceCatalogUpdateOne) Select(field string, fields ...string) *ServiceCatalogUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ServiceCatalog entity.
func (scuo *ServiceCatalogUpdateOne) Save(ctx context.Context) (*ServiceCatalog, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ServiceCatalogUpdateOne) SaveX(ctx context.Context) *ServiceCatalog {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ServiceCatalogUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ServiceCatalogUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ServiceCatalogUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdatedAt(); !ok {
		v := servicecatalog.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scuo *ServiceCatalogUpdateOne) check() error {
	if v, ok := scuo.mutation.Name(); ok {
		if err := servicecatalog.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.name": %w`, err)}
		}
	}
	if v, ok := scuo.mutation.TenantID(); ok {
		if err := servicecatalog.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ServiceCatalog.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (scuo *ServiceCatalogUpdateOne) sqlSave(ctx context.Context) (_node *ServiceCatalog, err error) {
	if err := scuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(servicecatalog.Table, servicecatalog.Columns, sqlgraph.NewFieldSpec(servicecatalog.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceCatalog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicecatalog.FieldID)
		for _, f := range fields {
			if !servicecatalog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicecatalog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Name(); ok {
		_spec.SetField(servicecatalog.FieldName, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.SetField(servicecatalog.FieldDescription, field.TypeString, value)
	}
	if scuo.mutation.DescriptionCleared() {
		_spec.ClearField(servicecatalog.FieldDescription, field.TypeString)
	}
	if value, ok := scuo.mutation.Category(); ok {
		_spec.SetField(servicecatalog.FieldCategory, field.TypeString, value)
	}
	if scuo.mutation.CategoryCleared() {
		_spec.ClearField(servicecatalog.FieldCategory, field.TypeString)
	}
	if value, ok := scuo.mutation.Price(); ok {
		_spec.SetField(servicecatalog.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := scuo.mutation.AddedPrice(); ok {
		_spec.AddField(servicecatalog.FieldPrice, field.TypeFloat64, value)
	}
	if scuo.mutation.PriceCleared() {
		_spec.ClearField(servicecatalog.FieldPrice, field.TypeFloat64)
	}
	if value, ok := scuo.mutation.DeliveryTime(); ok {
		_spec.SetField(servicecatalog.FieldDeliveryTime, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedDeliveryTime(); ok {
		_spec.AddField(servicecatalog.FieldDeliveryTime, field.TypeInt, value)
	}
	if scuo.mutation.DeliveryTimeCleared() {
		_spec.ClearField(servicecatalog.FieldDeliveryTime, field.TypeInt)
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.SetField(servicecatalog.FieldStatus, field.TypeString, value)
	}
	if value, ok := scuo.mutation.TenantID(); ok {
		_spec.SetField(servicecatalog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedTenantID(); ok {
		_spec.AddField(servicecatalog.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.IsActive(); ok {
		_spec.SetField(servicecatalog.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(servicecatalog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(servicecatalog.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ServiceCatalog{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicecatalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
