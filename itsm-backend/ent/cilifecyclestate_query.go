// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/tenant"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CILifecycleStateQuery is the builder for querying CILifecycleState entities.
type CILifecycleStateQuery struct {
	config
	ctx                   *QueryContext
	order                 []cilifecyclestate.OrderOption
	inters                []Interceptor
	predicates            []predicate.CILifecycleState
	withTenant            *TenantQuery
	withConfigurationItem *ConfigurationItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CILifecycleStateQuery builder.
func (clsq *CILifecycleStateQuery) Where(ps ...predicate.CILifecycleState) *CILifecycleStateQuery {
	clsq.predicates = append(clsq.predicates, ps...)
	return clsq
}

// Limit the number of records to be returned by this query.
func (clsq *CILifecycleStateQuery) Limit(limit int) *CILifecycleStateQuery {
	clsq.ctx.Limit = &limit
	return clsq
}

// Offset to start from.
func (clsq *CILifecycleStateQuery) Offset(offset int) *CILifecycleStateQuery {
	clsq.ctx.Offset = &offset
	return clsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clsq *CILifecycleStateQuery) Unique(unique bool) *CILifecycleStateQuery {
	clsq.ctx.Unique = &unique
	return clsq
}

// Order specifies how the records should be ordered.
func (clsq *CILifecycleStateQuery) Order(o ...cilifecyclestate.OrderOption) *CILifecycleStateQuery {
	clsq.order = append(clsq.order, o...)
	return clsq
}

// QueryTenant chains the current query on the "tenant" edge.
func (clsq *CILifecycleStateQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: clsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cilifecyclestate.Table, cilifecyclestate.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cilifecyclestate.TenantTable, cilifecyclestate.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(clsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConfigurationItem chains the current query on the "configuration_item" edge.
func (clsq *CILifecycleStateQuery) QueryConfigurationItem() *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: clsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cilifecyclestate.Table, cilifecyclestate.FieldID, selector),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cilifecyclestate.ConfigurationItemTable, cilifecyclestate.ConfigurationItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(clsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CILifecycleState entity from the query.
// Returns a *NotFoundError when no CILifecycleState was found.
func (clsq *CILifecycleStateQuery) First(ctx context.Context) (*CILifecycleState, error) {
	nodes, err := clsq.Limit(1).All(setContextOp(ctx, clsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cilifecyclestate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) FirstX(ctx context.Context) *CILifecycleState {
	node, err := clsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CILifecycleState ID from the query.
// Returns a *NotFoundError when no CILifecycleState ID was found.
func (clsq *CILifecycleStateQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clsq.Limit(1).IDs(setContextOp(ctx, clsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cilifecyclestate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) FirstIDX(ctx context.Context) int {
	id, err := clsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CILifecycleState entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CILifecycleState entity is found.
// Returns a *NotFoundError when no CILifecycleState entities are found.
func (clsq *CILifecycleStateQuery) Only(ctx context.Context) (*CILifecycleState, error) {
	nodes, err := clsq.Limit(2).All(setContextOp(ctx, clsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cilifecyclestate.Label}
	default:
		return nil, &NotSingularError{cilifecyclestate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) OnlyX(ctx context.Context) *CILifecycleState {
	node, err := clsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CILifecycleState ID in the query.
// Returns a *NotSingularError when more than one CILifecycleState ID is found.
// Returns a *NotFoundError when no entities are found.
func (clsq *CILifecycleStateQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clsq.Limit(2).IDs(setContextOp(ctx, clsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cilifecyclestate.Label}
	default:
		err = &NotSingularError{cilifecyclestate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) OnlyIDX(ctx context.Context) int {
	id, err := clsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CILifecycleStates.
func (clsq *CILifecycleStateQuery) All(ctx context.Context) ([]*CILifecycleState, error) {
	ctx = setContextOp(ctx, clsq.ctx, ent.OpQueryAll)
	if err := clsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CILifecycleState, *CILifecycleStateQuery]()
	return withInterceptors[[]*CILifecycleState](ctx, clsq, qr, clsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) AllX(ctx context.Context) []*CILifecycleState {
	nodes, err := clsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CILifecycleState IDs.
func (clsq *CILifecycleStateQuery) IDs(ctx context.Context) (ids []int, err error) {
	if clsq.ctx.Unique == nil && clsq.path != nil {
		clsq.Unique(true)
	}
	ctx = setContextOp(ctx, clsq.ctx, ent.OpQueryIDs)
	if err = clsq.Select(cilifecyclestate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) IDsX(ctx context.Context) []int {
	ids, err := clsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clsq *CILifecycleStateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clsq.ctx, ent.OpQueryCount)
	if err := clsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clsq, querierCount[*CILifecycleStateQuery](), clsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) CountX(ctx context.Context) int {
	count, err := clsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clsq *CILifecycleStateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clsq.ctx, ent.OpQueryExist)
	switch _, err := clsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clsq *CILifecycleStateQuery) ExistX(ctx context.Context) bool {
	exist, err := clsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CILifecycleStateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clsq *CILifecycleStateQuery) Clone() *CILifecycleStateQuery {
	if clsq == nil {
		return nil
	}
	return &CILifecycleStateQuery{
		config:                clsq.config,
		ctx:                   clsq.ctx.Clone(),
		order:                 append([]cilifecyclestate.OrderOption{}, clsq.order...),
		inters:                append([]Interceptor{}, clsq.inters...),
		predicates:            append([]predicate.CILifecycleState{}, clsq.predicates...),
		withTenant:            clsq.withTenant.Clone(),
		withConfigurationItem: clsq.withConfigurationItem.Clone(),
		// clone intermediate query.
		sql:  clsq.sql.Clone(),
		path: clsq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (clsq *CILifecycleStateQuery) WithTenant(opts ...func(*TenantQuery)) *CILifecycleStateQuery {
	query := (&TenantClient{config: clsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clsq.withTenant = query
	return clsq
}

// WithConfigurationItem tells the query-builder to eager-load the nodes that are connected to
// the "configuration_item" edge. The optional arguments are used to configure the query builder of the edge.
func (clsq *CILifecycleStateQuery) WithConfigurationItem(opts ...func(*ConfigurationItemQuery)) *CILifecycleStateQuery {
	query := (&ConfigurationItemClient{config: clsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clsq.withConfigurationItem = query
	return clsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CiID int `json:"ci_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CILifecycleState.Query().
//		GroupBy(cilifecyclestate.FieldCiID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (clsq *CILifecycleStateQuery) GroupBy(field string, fields ...string) *CILifecycleStateGroupBy {
	clsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CILifecycleStateGroupBy{build: clsq}
	grbuild.flds = &clsq.ctx.Fields
	grbuild.label = cilifecyclestate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CiID int `json:"ci_id,omitempty"`
//	}
//
//	client.CILifecycleState.Query().
//		Select(cilifecyclestate.FieldCiID).
//		Scan(ctx, &v)
func (clsq *CILifecycleStateQuery) Select(fields ...string) *CILifecycleStateSelect {
	clsq.ctx.Fields = append(clsq.ctx.Fields, fields...)
	sbuild := &CILifecycleStateSelect{CILifecycleStateQuery: clsq}
	sbuild.label = cilifecyclestate.Label
	sbuild.flds, sbuild.scan = &clsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CILifecycleStateSelect configured with the given aggregations.
func (clsq *CILifecycleStateQuery) Aggregate(fns ...AggregateFunc) *CILifecycleStateSelect {
	return clsq.Select().Aggregate(fns...)
}

func (clsq *CILifecycleStateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clsq); err != nil {
				return err
			}
		}
	}
	for _, f := range clsq.ctx.Fields {
		if !cilifecyclestate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if clsq.path != nil {
		prev, err := clsq.path(ctx)
		if err != nil {
			return err
		}
		clsq.sql = prev
	}
	return nil
}

func (clsq *CILifecycleStateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CILifecycleState, error) {
	var (
		nodes       = []*CILifecycleState{}
		_spec       = clsq.querySpec()
		loadedTypes = [2]bool{
			clsq.withTenant != nil,
			clsq.withConfigurationItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CILifecycleState).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CILifecycleState{config: clsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clsq.withTenant; query != nil {
		if err := clsq.loadTenant(ctx, query, nodes, nil,
			func(n *CILifecycleState, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := clsq.withConfigurationItem; query != nil {
		if err := clsq.loadConfigurationItem(ctx, query, nodes, nil,
			func(n *CILifecycleState, e *ConfigurationItem) { n.Edges.ConfigurationItem = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clsq *CILifecycleStateQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*CILifecycleState, init func(*CILifecycleState), assign func(*CILifecycleState, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CILifecycleState)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clsq *CILifecycleStateQuery) loadConfigurationItem(ctx context.Context, query *ConfigurationItemQuery, nodes []*CILifecycleState, init func(*CILifecycleState), assign func(*CILifecycleState, *ConfigurationItem)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CILifecycleState)
	for i := range nodes {
		fk := nodes[i].CiID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(configurationitem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ci_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (clsq *CILifecycleStateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clsq.querySpec()
	_spec.Node.Columns = clsq.ctx.Fields
	if len(clsq.ctx.Fields) > 0 {
		_spec.Unique = clsq.ctx.Unique != nil && *clsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clsq.driver, _spec)
}

func (clsq *CILifecycleStateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cilifecyclestate.Table, cilifecyclestate.Columns, sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt))
	_spec.From = clsq.sql
	if unique := clsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clsq.path != nil {
		_spec.Unique = true
	}
	if fields := clsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cilifecyclestate.FieldID)
		for i := range fields {
			if fields[i] != cilifecyclestate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clsq.withTenant != nil {
			_spec.Node.AddColumnOnce(cilifecyclestate.FieldTenantID)
		}
		if clsq.withConfigurationItem != nil {
			_spec.Node.AddColumnOnce(cilifecyclestate.FieldCiID)
		}
	}
	if ps := clsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clsq *CILifecycleStateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clsq.driver.Dialect())
	t1 := builder.Table(cilifecyclestate.Table)
	columns := clsq.ctx.Fields
	if len(columns) == 0 {
		columns = cilifecyclestate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clsq.sql != nil {
		selector = clsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clsq.ctx.Unique != nil && *clsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clsq.predicates {
		p(selector)
	}
	for _, p := range clsq.order {
		p(selector)
	}
	if offset := clsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CILifecycleStateGroupBy is the group-by builder for CILifecycleState entities.
type CILifecycleStateGroupBy struct {
	selector
	build *CILifecycleStateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clsgb *CILifecycleStateGroupBy) Aggregate(fns ...AggregateFunc) *CILifecycleStateGroupBy {
	clsgb.fns = append(clsgb.fns, fns...)
	return clsgb
}

// Scan applies the selector query and scans the result into the given value.
func (clsgb *CILifecycleStateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clsgb.build.ctx, ent.OpQueryGroupBy)
	if err := clsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CILifecycleStateQuery, *CILifecycleStateGroupBy](ctx, clsgb.build, clsgb, clsgb.build.inters, v)
}

func (clsgb *CILifecycleStateGroupBy) sqlScan(ctx context.Context, root *CILifecycleStateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clsgb.fns))
	for _, fn := range clsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clsgb.flds)+len(clsgb.fns))
		for _, f := range *clsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CILifecycleStateSelect is the builder for selecting fields of CILifecycleState entities.
type CILifecycleStateSelect struct {
	*CILifecycleStateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (clss *CILifecycleStateSelect) Aggregate(fns ...AggregateFunc) *CILifecycleStateSelect {
	clss.fns = append(clss.fns, fns...)
	return clss
}

// Scan applies the selector query and scans the result into the given value.
func (clss *CILifecycleStateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clss.ctx, ent.OpQuerySelect)
	if err := clss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CILifecycleStateQuery, *CILifecycleStateSelect](ctx, clss.CILifecycleStateQuery, clss, clss.inters, v)
}

func (clss *CILifecycleStateSelect) sqlScan(ctx context.Context, root *CILifecycleStateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(clss.fns))
	for _, fn := range clss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*clss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
