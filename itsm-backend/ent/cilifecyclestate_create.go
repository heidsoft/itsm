// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CILifecycleStateCreate is the builder for creating a CILifecycleState entity.
type CILifecycleStateCreate struct {
	config
	mutation *CILifecycleStateMutation
	hooks    []Hook
}

// SetCiID sets the "ci_id" field.
func (clsc *CILifecycleStateCreate) SetCiID(i int) *CILifecycleStateCreate {
	clsc.mutation.SetCiID(i)
	return clsc
}

// SetState sets the "state" field.
func (clsc *CILifecycleStateCreate) SetState(s string) *CILifecycleStateCreate {
	clsc.mutation.SetState(s)
	return clsc
}

// SetSubState sets the "sub_state" field.
func (clsc *CILifecycleStateCreate) SetSubState(s string) *CILifecycleStateCreate {
	clsc.mutation.SetSubState(s)
	return clsc
}

// SetNillableSubState sets the "sub_state" field if the given value is not nil.
func (clsc *CILifecycleStateCreate) SetNillableSubState(s *string) *CILifecycleStateCreate {
	if s != nil {
		clsc.SetSubState(*s)
	}
	return clsc
}

// SetReason sets the "reason" field.
func (clsc *CILifecycleStateCreate) SetReason(s string) *CILifecycleStateCreate {
	clsc.mutation.SetReason(s)
	return clsc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (clsc *CILifecycleStateCreate) SetNillableReason(s *string) *CILifecycleStateCreate {
	if s != nil {
		clsc.SetReason(*s)
	}
	return clsc
}

// SetChangedBy sets the "changed_by" field.
func (clsc *CILifecycleStateCreate) SetChangedBy(s string) *CILifecycleStateCreate {
	clsc.mutation.SetChangedBy(s)
	return clsc
}

// SetChangedAt sets the "changed_at" field.
func (clsc *CILifecycleStateCreate) SetChangedAt(t time.Time) *CILifecycleStateCreate {
	clsc.mutation.SetChangedAt(t)
	return clsc
}

// SetNillableChangedAt sets the "changed_at" field if the given value is not nil.
func (clsc *CILifecycleStateCreate) SetNillableChangedAt(t *time.Time) *CILifecycleStateCreate {
	if t != nil {
		clsc.SetChangedAt(*t)
	}
	return clsc
}

// SetMetadata sets the "metadata" field.
func (clsc *CILifecycleStateCreate) SetMetadata(m map[string]interface{}) *CILifecycleStateCreate {
	clsc.mutation.SetMetadata(m)
	return clsc
}

// SetTenantID sets the "tenant_id" field.
func (clsc *CILifecycleStateCreate) SetTenantID(i int) *CILifecycleStateCreate {
	clsc.mutation.SetTenantID(i)
	return clsc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (clsc *CILifecycleStateCreate) SetTenant(t *Tenant) *CILifecycleStateCreate {
	return clsc.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (clsc *CILifecycleStateCreate) SetConfigurationItemID(id int) *CILifecycleStateCreate {
	clsc.mutation.SetConfigurationItemID(id)
	return clsc
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (clsc *CILifecycleStateCreate) SetConfigurationItem(c *ConfigurationItem) *CILifecycleStateCreate {
	return clsc.SetConfigurationItemID(c.ID)
}

// Mutation returns the CILifecycleStateMutation object of the builder.
func (clsc *CILifecycleStateCreate) Mutation() *CILifecycleStateMutation {
	return clsc.mutation
}

// Save creates the CILifecycleState in the database.
func (clsc *CILifecycleStateCreate) Save(ctx context.Context) (*CILifecycleState, error) {
	clsc.defaults()
	return withHooks(ctx, clsc.sqlSave, clsc.mutation, clsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clsc *CILifecycleStateCreate) SaveX(ctx context.Context) *CILifecycleState {
	v, err := clsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clsc *CILifecycleStateCreate) Exec(ctx context.Context) error {
	_, err := clsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsc *CILifecycleStateCreate) ExecX(ctx context.Context) {
	if err := clsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clsc *CILifecycleStateCreate) defaults() {
	if _, ok := clsc.mutation.ChangedAt(); !ok {
		v := cilifecyclestate.DefaultChangedAt()
		clsc.mutation.SetChangedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsc *CILifecycleStateCreate) check() error {
	if _, ok := clsc.mutation.CiID(); !ok {
		return &ValidationError{Name: "ci_id", err: errors.New(`ent: missing required field "CILifecycleState.ci_id"`)}
	}
	if _, ok := clsc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CILifecycleState.state"`)}
	}
	if v, ok := clsc.mutation.State(); ok {
		if err := cilifecyclestate.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.state": %w`, err)}
		}
	}
	if _, ok := clsc.mutation.ChangedBy(); !ok {
		return &ValidationError{Name: "changed_by", err: errors.New(`ent: missing required field "CILifecycleState.changed_by"`)}
	}
	if v, ok := clsc.mutation.ChangedBy(); ok {
		if err := cilifecyclestate.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CILifecycleState.changed_by": %w`, err)}
		}
	}
	if _, ok := clsc.mutation.ChangedAt(); !ok {
		return &ValidationError{Name: "changed_at", err: errors.New(`ent: missing required field "CILifecycleState.changed_at"`)}
	}
	if _, ok := clsc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CILifecycleState.tenant_id"`)}
	}
	if len(clsc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CILifecycleState.tenant"`)}
	}
	if len(clsc.mutation.ConfigurationItemIDs()) == 0 {
		return &ValidationError{Name: "configuration_item", err: errors.New(`ent: missing required edge "CILifecycleState.configuration_item"`)}
	}
	return nil
}

func (clsc *CILifecycleStateCreate) sqlSave(ctx context.Context) (*CILifecycleState, error) {
	if err := clsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clsc.mutation.id = &_node.ID
	clsc.mutation.done = true
	return _node, nil
}

func (clsc *CILifecycleStateCreate) createSpec() (*CILifecycleState, *sqlgraph.CreateSpec) {
	var (
		_node = &CILifecycleState{config: clsc.config}
		_spec = sqlgraph.NewCreateSpec(cilifecyclestate.Table, sqlgraph.NewFieldSpec(cilifecyclestate.FieldID, field.TypeInt))
	)
	if value, ok := clsc.mutation.State(); ok {
		_spec.SetField(cilifecyclestate.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := clsc.mutation.SubState(); ok {
		_spec.SetField(cilifecyclestate.FieldSubState, field.TypeString, value)
		_node.SubState = value
	}
	if value, ok := clsc.mutation.Reason(); ok {
		_spec.SetField(cilifecyclestate.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := clsc.mutation.ChangedBy(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedBy, field.TypeString, value)
		_node.ChangedBy = value
	}
	if value, ok := clsc.mutation.ChangedAt(); ok {
		_spec.SetField(cilifecyclestate.FieldChangedAt, field.TypeTime, value)
		_node.ChangedAt = value
	}
	if value, ok := clsc.mutation.Metadata(); ok {
		_spec.SetField(cilifecyclestate.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := clsc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.TenantTable,
			Columns: []string{cilifecyclestate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clsc.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cilifecyclestate.ConfigurationItemTable,
			Columns: []string{cilifecyclestate.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CiID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CILifecycleStateCreateBulk is the builder for creating many CILifecycleState entities in bulk.
type CILifecycleStateCreateBulk struct {
	config
	err      error
	builders []*CILifecycleStateCreate
}

// Save creates the CILifecycleState entities in the database.
func (clscb *CILifecycleStateCreateBulk) Save(ctx context.Context) ([]*CILifecycleState, error) {
	if clscb.err != nil {
		return nil, clscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clscb.builders))
	nodes := make([]*CILifecycleState, len(clscb.builders))
	mutators := make([]Mutator, len(clscb.builders))
	for i := range clscb.builders {
		func(i int, root context.Context) {
			builder := clscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CILifecycleStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clscb *CILifecycleStateCreateBulk) SaveX(ctx context.Context) []*CILifecycleState {
	v, err := clscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clscb *CILifecycleStateCreateBulk) Exec(ctx context.Context) error {
	_, err := clscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clscb *CILifecycleStateCreateBulk) ExecX(ctx context.Context) {
	if err := clscb.Exec(ctx); err != nil {
		panic(err)
	}
}
