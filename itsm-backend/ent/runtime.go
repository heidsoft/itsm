// Code generated by ent, DO NOT EDIT.

package ent

import (
	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/schema"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	approvallogFields := schema.ApprovalLog{}.Fields()
	_ = approvallogFields
	// approvallogDescApproverID is the schema descriptor for approver_id field.
	approvallogDescApproverID := approvallogFields[0].Descriptor()
	// approvallog.ApproverIDValidator is a validator for the "approver_id" field. It is called by the builders before save.
	approvallog.ApproverIDValidator = approvallogDescApproverID.Validators[0].(func(int) error)
	// approvallogDescTicketID is the schema descriptor for ticket_id field.
	approvallogDescTicketID := approvallogFields[3].Descriptor()
	// approvallog.TicketIDValidator is a validator for the "ticket_id" field. It is called by the builders before save.
	approvallog.TicketIDValidator = approvallogDescTicketID.Validators[0].(func(int) error)
	// approvallogDescStepOrder is the schema descriptor for step_order field.
	approvallogDescStepOrder := approvallogFields[4].Descriptor()
	// approvallog.StepOrderValidator is a validator for the "step_order" field. It is called by the builders before save.
	approvallog.StepOrderValidator = approvallogDescStepOrder.Validators[0].(func(int) error)
	// approvallogDescStepName is the schema descriptor for step_name field.
	approvallogDescStepName := approvallogFields[5].Descriptor()
	// approvallog.StepNameValidator is a validator for the "step_name" field. It is called by the builders before save.
	approvallog.StepNameValidator = approvallogDescStepName.Validators[0].(func(string) error)
	// approvallogDescCreatedAt is the schema descriptor for created_at field.
	approvallogDescCreatedAt := approvallogFields[8].Descriptor()
	// approvallog.DefaultCreatedAt holds the default value on creation for the created_at field.
	approvallog.DefaultCreatedAt = approvallogDescCreatedAt.Default.(func() time.Time)
	flowinstanceFields := schema.FlowInstance{}.Fields()
	_ = flowinstanceFields
	// flowinstanceDescFlowDefinitionID is the schema descriptor for flow_definition_id field.
	flowinstanceDescFlowDefinitionID := flowinstanceFields[0].Descriptor()
	// flowinstance.FlowDefinitionIDValidator is a validator for the "flow_definition_id" field. It is called by the builders before save.
	flowinstance.FlowDefinitionIDValidator = func() func(string) error {
		validators := flowinstanceDescFlowDefinitionID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(flow_definition_id string) error {
			for _, fn := range fns {
				if err := fn(flow_definition_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// flowinstanceDescFlowName is the schema descriptor for flow_name field.
	flowinstanceDescFlowName := flowinstanceFields[1].Descriptor()
	// flowinstance.FlowNameValidator is a validator for the "flow_name" field. It is called by the builders before save.
	flowinstance.FlowNameValidator = func() func(string) error {
		validators := flowinstanceDescFlowName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(flow_name string) error {
			for _, fn := range fns {
				if err := fn(flow_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// flowinstanceDescFlowVersion is the schema descriptor for flow_version field.
	flowinstanceDescFlowVersion := flowinstanceFields[2].Descriptor()
	// flowinstance.DefaultFlowVersion holds the default value on creation for the flow_version field.
	flowinstance.DefaultFlowVersion = flowinstanceDescFlowVersion.Default.(string)
	// flowinstance.FlowVersionValidator is a validator for the "flow_version" field. It is called by the builders before save.
	flowinstance.FlowVersionValidator = flowinstanceDescFlowVersion.Validators[0].(func(string) error)
	// flowinstanceDescCurrentStep is the schema descriptor for current_step field.
	flowinstanceDescCurrentStep := flowinstanceFields[4].Descriptor()
	// flowinstance.DefaultCurrentStep holds the default value on creation for the current_step field.
	flowinstance.DefaultCurrentStep = flowinstanceDescCurrentStep.Default.(int)
	// flowinstance.CurrentStepValidator is a validator for the "current_step" field. It is called by the builders before save.
	flowinstance.CurrentStepValidator = flowinstanceDescCurrentStep.Validators[0].(func(int) error)
	// flowinstanceDescTotalSteps is the schema descriptor for total_steps field.
	flowinstanceDescTotalSteps := flowinstanceFields[5].Descriptor()
	// flowinstance.TotalStepsValidator is a validator for the "total_steps" field. It is called by the builders before save.
	flowinstance.TotalStepsValidator = flowinstanceDescTotalSteps.Validators[0].(func(int) error)
	// flowinstanceDescTicketID is the schema descriptor for ticket_id field.
	flowinstanceDescTicketID := flowinstanceFields[9].Descriptor()
	// flowinstance.TicketIDValidator is a validator for the "ticket_id" field. It is called by the builders before save.
	flowinstance.TicketIDValidator = flowinstanceDescTicketID.Validators[0].(func(int) error)
	// flowinstanceDescStartedAt is the schema descriptor for started_at field.
	flowinstanceDescStartedAt := flowinstanceFields[10].Descriptor()
	// flowinstance.DefaultStartedAt holds the default value on creation for the started_at field.
	flowinstance.DefaultStartedAt = flowinstanceDescStartedAt.Default.(func() time.Time)
	// flowinstanceDescUpdatedAt is the schema descriptor for updated_at field.
	flowinstanceDescUpdatedAt := flowinstanceFields[12].Descriptor()
	// flowinstance.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	flowinstance.DefaultUpdatedAt = flowinstanceDescUpdatedAt.Default.(func() time.Time)
	// flowinstance.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	flowinstance.UpdateDefaultUpdatedAt = flowinstanceDescUpdatedAt.UpdateDefault.(func() time.Time)
	ticketFields := schema.Ticket{}.Fields()
	_ = ticketFields
	// ticketDescTitle is the schema descriptor for title field.
	ticketDescTitle := ticketFields[0].Descriptor()
	// ticket.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	ticket.TitleValidator = func() func(string) error {
		validators := ticketDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// ticketDescTicketNumber is the schema descriptor for ticket_number field.
	ticketDescTicketNumber := ticketFields[5].Descriptor()
	// ticket.TicketNumberValidator is a validator for the "ticket_number" field. It is called by the builders before save.
	ticket.TicketNumberValidator = func() func(string) error {
		validators := ticketDescTicketNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(ticket_number string) error {
			for _, fn := range fns {
				if err := fn(ticket_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// ticketDescRequesterID is the schema descriptor for requester_id field.
	ticketDescRequesterID := ticketFields[6].Descriptor()
	// ticket.RequesterIDValidator is a validator for the "requester_id" field. It is called by the builders before save.
	ticket.RequesterIDValidator = ticketDescRequesterID.Validators[0].(func(int) error)
	// ticketDescAssigneeID is the schema descriptor for assignee_id field.
	ticketDescAssigneeID := ticketFields[7].Descriptor()
	// ticket.AssigneeIDValidator is a validator for the "assignee_id" field. It is called by the builders before save.
	ticket.AssigneeIDValidator = ticketDescAssigneeID.Validators[0].(func(int) error)
	// ticketDescCreatedAt is the schema descriptor for created_at field.
	ticketDescCreatedAt := ticketFields[8].Descriptor()
	// ticket.DefaultCreatedAt holds the default value on creation for the created_at field.
	ticket.DefaultCreatedAt = ticketDescCreatedAt.Default.(func() time.Time)
	// ticketDescUpdatedAt is the schema descriptor for updated_at field.
	ticketDescUpdatedAt := ticketFields[9].Descriptor()
	// ticket.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	ticket.DefaultUpdatedAt = ticketDescUpdatedAt.Default.(func() time.Time)
	// ticket.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	ticket.UpdateDefaultUpdatedAt = ticketDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[2].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescDepartment is the schema descriptor for department field.
	userDescDepartment := userFields[3].Descriptor()
	// user.DepartmentValidator is a validator for the "department" field. It is called by the builders before save.
	user.DepartmentValidator = userDescDepartment.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[4].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[6].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[8].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
