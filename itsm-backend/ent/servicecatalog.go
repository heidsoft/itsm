// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/servicecatalog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ServiceCatalog is the model entity for the ServiceCatalog schema.
type ServiceCatalog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 服务名称
	Name string `json:"name,omitempty"`
	// 服务描述
	Description string `json:"description,omitempty"`
	// 服务分类
	Category string `json:"category,omitempty"`
	// 价格
	Price float64 `json:"price,omitempty"`
	// 交付时间（天）
	DeliveryTime int `json:"delivery_time,omitempty"`
	// 状态
	Status string `json:"status,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 是否激活
	IsActive bool `json:"is_active,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceCatalog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicecatalog.FieldIsActive:
			values[i] = new(sql.NullBool)
		case servicecatalog.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case servicecatalog.FieldID, servicecatalog.FieldDeliveryTime, servicecatalog.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case servicecatalog.FieldName, servicecatalog.FieldDescription, servicecatalog.FieldCategory, servicecatalog.FieldStatus:
			values[i] = new(sql.NullString)
		case servicecatalog.FieldCreatedAt, servicecatalog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceCatalog fields.
func (sc *ServiceCatalog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicecatalog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case servicecatalog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case servicecatalog.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sc.Description = value.String
			}
		case servicecatalog.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				sc.Category = value.String
			}
		case servicecatalog.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				sc.Price = value.Float64
			}
		case servicecatalog.FieldDeliveryTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_time", values[i])
			} else if value.Valid {
				sc.DeliveryTime = int(value.Int64)
			}
		case servicecatalog.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sc.Status = value.String
			}
		case servicecatalog.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				sc.TenantID = int(value.Int64)
			}
		case servicecatalog.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sc.IsActive = value.Bool
			}
		case servicecatalog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case servicecatalog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceCatalog.
// This includes values selected through modifiers, order, etc.
func (sc *ServiceCatalog) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this ServiceCatalog.
// Note that you need to call ServiceCatalog.Unwrap() before calling this method if this ServiceCatalog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ServiceCatalog) Update() *ServiceCatalogUpdateOne {
	return NewServiceCatalogClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ServiceCatalog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ServiceCatalog) Unwrap() *ServiceCatalog {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceCatalog is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ServiceCatalog) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceCatalog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sc.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(sc.Category)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", sc.Price))
	builder.WriteString(", ")
	builder.WriteString("delivery_time=")
	builder.WriteString(fmt.Sprintf("%v", sc.DeliveryTime))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sc.Status)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sc.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceCatalogs is a parsable slice of ServiceCatalog.
type ServiceCatalogs []*ServiceCatalog
