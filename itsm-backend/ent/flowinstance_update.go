// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FlowInstanceUpdate is the builder for updating FlowInstance entities.
type FlowInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *FlowInstanceMutation
}

// Where appends a list predicates to the FlowInstanceUpdate builder.
func (fiu *FlowInstanceUpdate) Where(ps ...predicate.FlowInstance) *FlowInstanceUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (fiu *FlowInstanceUpdate) SetFlowDefinitionID(s string) *FlowInstanceUpdate {
	fiu.mutation.SetFlowDefinitionID(s)
	return fiu
}

// SetNillableFlowDefinitionID sets the "flow_definition_id" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableFlowDefinitionID(s *string) *FlowInstanceUpdate {
	if s != nil {
		fiu.SetFlowDefinitionID(*s)
	}
	return fiu
}

// SetFlowName sets the "flow_name" field.
func (fiu *FlowInstanceUpdate) SetFlowName(s string) *FlowInstanceUpdate {
	fiu.mutation.SetFlowName(s)
	return fiu
}

// SetNillableFlowName sets the "flow_name" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableFlowName(s *string) *FlowInstanceUpdate {
	if s != nil {
		fiu.SetFlowName(*s)
	}
	return fiu
}

// SetFlowVersion sets the "flow_version" field.
func (fiu *FlowInstanceUpdate) SetFlowVersion(s string) *FlowInstanceUpdate {
	fiu.mutation.SetFlowVersion(s)
	return fiu
}

// SetNillableFlowVersion sets the "flow_version" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableFlowVersion(s *string) *FlowInstanceUpdate {
	if s != nil {
		fiu.SetFlowVersion(*s)
	}
	return fiu
}

// ClearFlowVersion clears the value of the "flow_version" field.
func (fiu *FlowInstanceUpdate) ClearFlowVersion() *FlowInstanceUpdate {
	fiu.mutation.ClearFlowVersion()
	return fiu
}

// SetStatus sets the "status" field.
func (fiu *FlowInstanceUpdate) SetStatus(f flowinstance.Status) *FlowInstanceUpdate {
	fiu.mutation.SetStatus(f)
	return fiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableStatus(f *flowinstance.Status) *FlowInstanceUpdate {
	if f != nil {
		fiu.SetStatus(*f)
	}
	return fiu
}

// SetCurrentStep sets the "current_step" field.
func (fiu *FlowInstanceUpdate) SetCurrentStep(i int) *FlowInstanceUpdate {
	fiu.mutation.ResetCurrentStep()
	fiu.mutation.SetCurrentStep(i)
	return fiu
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableCurrentStep(i *int) *FlowInstanceUpdate {
	if i != nil {
		fiu.SetCurrentStep(*i)
	}
	return fiu
}

// AddCurrentStep adds i to the "current_step" field.
func (fiu *FlowInstanceUpdate) AddCurrentStep(i int) *FlowInstanceUpdate {
	fiu.mutation.AddCurrentStep(i)
	return fiu
}

// SetTotalSteps sets the "total_steps" field.
func (fiu *FlowInstanceUpdate) SetTotalSteps(i int) *FlowInstanceUpdate {
	fiu.mutation.ResetTotalSteps()
	fiu.mutation.SetTotalSteps(i)
	return fiu
}

// SetNillableTotalSteps sets the "total_steps" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableTotalSteps(i *int) *FlowInstanceUpdate {
	if i != nil {
		fiu.SetTotalSteps(*i)
	}
	return fiu
}

// AddTotalSteps adds i to the "total_steps" field.
func (fiu *FlowInstanceUpdate) AddTotalSteps(i int) *FlowInstanceUpdate {
	fiu.mutation.AddTotalSteps(i)
	return fiu
}

// SetStepConfig sets the "step_config" field.
func (fiu *FlowInstanceUpdate) SetStepConfig(m map[string]interface{}) *FlowInstanceUpdate {
	fiu.mutation.SetStepConfig(m)
	return fiu
}

// ClearStepConfig clears the value of the "step_config" field.
func (fiu *FlowInstanceUpdate) ClearStepConfig() *FlowInstanceUpdate {
	fiu.mutation.ClearStepConfig()
	return fiu
}

// SetVariables sets the "variables" field.
func (fiu *FlowInstanceUpdate) SetVariables(m map[string]interface{}) *FlowInstanceUpdate {
	fiu.mutation.SetVariables(m)
	return fiu
}

// ClearVariables clears the value of the "variables" field.
func (fiu *FlowInstanceUpdate) ClearVariables() *FlowInstanceUpdate {
	fiu.mutation.ClearVariables()
	return fiu
}

// SetExecutionHistory sets the "execution_history" field.
func (fiu *FlowInstanceUpdate) SetExecutionHistory(m []map[string]interface{}) *FlowInstanceUpdate {
	fiu.mutation.SetExecutionHistory(m)
	return fiu
}

// AppendExecutionHistory appends m to the "execution_history" field.
func (fiu *FlowInstanceUpdate) AppendExecutionHistory(m []map[string]interface{}) *FlowInstanceUpdate {
	fiu.mutation.AppendExecutionHistory(m)
	return fiu
}

// ClearExecutionHistory clears the value of the "execution_history" field.
func (fiu *FlowInstanceUpdate) ClearExecutionHistory() *FlowInstanceUpdate {
	fiu.mutation.ClearExecutionHistory()
	return fiu
}

// SetTicketID sets the "ticket_id" field.
func (fiu *FlowInstanceUpdate) SetTicketID(i int) *FlowInstanceUpdate {
	fiu.mutation.SetTicketID(i)
	return fiu
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableTicketID(i *int) *FlowInstanceUpdate {
	if i != nil {
		fiu.SetTicketID(*i)
	}
	return fiu
}

// SetCompletedAt sets the "completed_at" field.
func (fiu *FlowInstanceUpdate) SetCompletedAt(t time.Time) *FlowInstanceUpdate {
	fiu.mutation.SetCompletedAt(t)
	return fiu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableCompletedAt(t *time.Time) *FlowInstanceUpdate {
	if t != nil {
		fiu.SetCompletedAt(*t)
	}
	return fiu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (fiu *FlowInstanceUpdate) ClearCompletedAt() *FlowInstanceUpdate {
	fiu.mutation.ClearCompletedAt()
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FlowInstanceUpdate) SetUpdatedAt(t time.Time) *FlowInstanceUpdate {
	fiu.mutation.SetUpdatedAt(t)
	return fiu
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (fiu *FlowInstanceUpdate) SetTicket(t *Ticket) *FlowInstanceUpdate {
	return fiu.SetTicketID(t.ID)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fiu *FlowInstanceUpdate) Mutation() *FlowInstanceMutation {
	return fiu.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (fiu *FlowInstanceUpdate) ClearTicket() *FlowInstanceUpdate {
	fiu.mutation.ClearTicket()
	return fiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FlowInstanceUpdate) Save(ctx context.Context) (int, error) {
	fiu.defaults()
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FlowInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FlowInstanceUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FlowInstanceUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FlowInstanceUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := flowinstance.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FlowInstanceUpdate) check() error {
	if v, ok := fiu.mutation.FlowDefinitionID(); ok {
		if err := flowinstance.FlowDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_definition_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_definition_id": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.FlowName(); ok {
		if err := flowinstance.FlowNameValidator(v); err != nil {
			return &ValidationError{Name: "flow_name", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_name": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.FlowVersion(); ok {
		if err := flowinstance.FlowVersionValidator(v); err != nil {
			return &ValidationError{Name: "flow_version", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_version": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.Status(); ok {
		if err := flowinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.status": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.CurrentStep(); ok {
		if err := flowinstance.CurrentStepValidator(v); err != nil {
			return &ValidationError{Name: "current_step", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.current_step": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.TotalSteps(); ok {
		if err := flowinstance.TotalStepsValidator(v); err != nil {
			return &ValidationError{Name: "total_steps", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.total_steps": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.TicketID(); ok {
		if err := flowinstance.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ticket_id": %w`, err)}
		}
	}
	if fiu.mutation.TicketCleared() && len(fiu.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FlowInstance.ticket"`)
	}
	return nil
}

func (fiu *FlowInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(flowinstance.Table, flowinstance.Columns, sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.FlowDefinitionID(); ok {
		_spec.SetField(flowinstance.FieldFlowDefinitionID, field.TypeString, value)
	}
	if value, ok := fiu.mutation.FlowName(); ok {
		_spec.SetField(flowinstance.FieldFlowName, field.TypeString, value)
	}
	if value, ok := fiu.mutation.FlowVersion(); ok {
		_spec.SetField(flowinstance.FieldFlowVersion, field.TypeString, value)
	}
	if fiu.mutation.FlowVersionCleared() {
		_spec.ClearField(flowinstance.FieldFlowVersion, field.TypeString)
	}
	if value, ok := fiu.mutation.Status(); ok {
		_spec.SetField(flowinstance.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fiu.mutation.CurrentStep(); ok {
		_spec.SetField(flowinstance.FieldCurrentStep, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.AddedCurrentStep(); ok {
		_spec.AddField(flowinstance.FieldCurrentStep, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.TotalSteps(); ok {
		_spec.SetField(flowinstance.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.AddedTotalSteps(); ok {
		_spec.AddField(flowinstance.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := fiu.mutation.StepConfig(); ok {
		_spec.SetField(flowinstance.FieldStepConfig, field.TypeJSON, value)
	}
	if fiu.mutation.StepConfigCleared() {
		_spec.ClearField(flowinstance.FieldStepConfig, field.TypeJSON)
	}
	if value, ok := fiu.mutation.Variables(); ok {
		_spec.SetField(flowinstance.FieldVariables, field.TypeJSON, value)
	}
	if fiu.mutation.VariablesCleared() {
		_spec.ClearField(flowinstance.FieldVariables, field.TypeJSON)
	}
	if value, ok := fiu.mutation.ExecutionHistory(); ok {
		_spec.SetField(flowinstance.FieldExecutionHistory, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedExecutionHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, flowinstance.FieldExecutionHistory, value)
		})
	}
	if fiu.mutation.ExecutionHistoryCleared() {
		_spec.ClearField(flowinstance.FieldExecutionHistory, field.TypeJSON)
	}
	if value, ok := fiu.mutation.CompletedAt(); ok {
		_spec.SetField(flowinstance.FieldCompletedAt, field.TypeTime, value)
	}
	if fiu.mutation.CompletedAtCleared() {
		_spec.ClearField(flowinstance.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.SetField(flowinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if fiu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flowinstance.TicketTable,
			Columns: []string{flowinstance.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flowinstance.TicketTable,
			Columns: []string{flowinstance.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FlowInstanceUpdateOne is the builder for updating a single FlowInstance entity.
type FlowInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlowInstanceMutation
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (fiuo *FlowInstanceUpdateOne) SetFlowDefinitionID(s string) *FlowInstanceUpdateOne {
	fiuo.mutation.SetFlowDefinitionID(s)
	return fiuo
}

// SetNillableFlowDefinitionID sets the "flow_definition_id" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableFlowDefinitionID(s *string) *FlowInstanceUpdateOne {
	if s != nil {
		fiuo.SetFlowDefinitionID(*s)
	}
	return fiuo
}

// SetFlowName sets the "flow_name" field.
func (fiuo *FlowInstanceUpdateOne) SetFlowName(s string) *FlowInstanceUpdateOne {
	fiuo.mutation.SetFlowName(s)
	return fiuo
}

// SetNillableFlowName sets the "flow_name" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableFlowName(s *string) *FlowInstanceUpdateOne {
	if s != nil {
		fiuo.SetFlowName(*s)
	}
	return fiuo
}

// SetFlowVersion sets the "flow_version" field.
func (fiuo *FlowInstanceUpdateOne) SetFlowVersion(s string) *FlowInstanceUpdateOne {
	fiuo.mutation.SetFlowVersion(s)
	return fiuo
}

// SetNillableFlowVersion sets the "flow_version" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableFlowVersion(s *string) *FlowInstanceUpdateOne {
	if s != nil {
		fiuo.SetFlowVersion(*s)
	}
	return fiuo
}

// ClearFlowVersion clears the value of the "flow_version" field.
func (fiuo *FlowInstanceUpdateOne) ClearFlowVersion() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearFlowVersion()
	return fiuo
}

// SetStatus sets the "status" field.
func (fiuo *FlowInstanceUpdateOne) SetStatus(f flowinstance.Status) *FlowInstanceUpdateOne {
	fiuo.mutation.SetStatus(f)
	return fiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableStatus(f *flowinstance.Status) *FlowInstanceUpdateOne {
	if f != nil {
		fiuo.SetStatus(*f)
	}
	return fiuo
}

// SetCurrentStep sets the "current_step" field.
func (fiuo *FlowInstanceUpdateOne) SetCurrentStep(i int) *FlowInstanceUpdateOne {
	fiuo.mutation.ResetCurrentStep()
	fiuo.mutation.SetCurrentStep(i)
	return fiuo
}

// SetNillableCurrentStep sets the "current_step" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableCurrentStep(i *int) *FlowInstanceUpdateOne {
	if i != nil {
		fiuo.SetCurrentStep(*i)
	}
	return fiuo
}

// AddCurrentStep adds i to the "current_step" field.
func (fiuo *FlowInstanceUpdateOne) AddCurrentStep(i int) *FlowInstanceUpdateOne {
	fiuo.mutation.AddCurrentStep(i)
	return fiuo
}

// SetTotalSteps sets the "total_steps" field.
func (fiuo *FlowInstanceUpdateOne) SetTotalSteps(i int) *FlowInstanceUpdateOne {
	fiuo.mutation.ResetTotalSteps()
	fiuo.mutation.SetTotalSteps(i)
	return fiuo
}

// SetNillableTotalSteps sets the "total_steps" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableTotalSteps(i *int) *FlowInstanceUpdateOne {
	if i != nil {
		fiuo.SetTotalSteps(*i)
	}
	return fiuo
}

// AddTotalSteps adds i to the "total_steps" field.
func (fiuo *FlowInstanceUpdateOne) AddTotalSteps(i int) *FlowInstanceUpdateOne {
	fiuo.mutation.AddTotalSteps(i)
	return fiuo
}

// SetStepConfig sets the "step_config" field.
func (fiuo *FlowInstanceUpdateOne) SetStepConfig(m map[string]interface{}) *FlowInstanceUpdateOne {
	fiuo.mutation.SetStepConfig(m)
	return fiuo
}

// ClearStepConfig clears the value of the "step_config" field.
func (fiuo *FlowInstanceUpdateOne) ClearStepConfig() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearStepConfig()
	return fiuo
}

// SetVariables sets the "variables" field.
func (fiuo *FlowInstanceUpdateOne) SetVariables(m map[string]interface{}) *FlowInstanceUpdateOne {
	fiuo.mutation.SetVariables(m)
	return fiuo
}

// ClearVariables clears the value of the "variables" field.
func (fiuo *FlowInstanceUpdateOne) ClearVariables() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearVariables()
	return fiuo
}

// SetExecutionHistory sets the "execution_history" field.
func (fiuo *FlowInstanceUpdateOne) SetExecutionHistory(m []map[string]interface{}) *FlowInstanceUpdateOne {
	fiuo.mutation.SetExecutionHistory(m)
	return fiuo
}

// AppendExecutionHistory appends m to the "execution_history" field.
func (fiuo *FlowInstanceUpdateOne) AppendExecutionHistory(m []map[string]interface{}) *FlowInstanceUpdateOne {
	fiuo.mutation.AppendExecutionHistory(m)
	return fiuo
}

// ClearExecutionHistory clears the value of the "execution_history" field.
func (fiuo *FlowInstanceUpdateOne) ClearExecutionHistory() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearExecutionHistory()
	return fiuo
}

// SetTicketID sets the "ticket_id" field.
func (fiuo *FlowInstanceUpdateOne) SetTicketID(i int) *FlowInstanceUpdateOne {
	fiuo.mutation.SetTicketID(i)
	return fiuo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableTicketID(i *int) *FlowInstanceUpdateOne {
	if i != nil {
		fiuo.SetTicketID(*i)
	}
	return fiuo
}

// SetCompletedAt sets the "completed_at" field.
func (fiuo *FlowInstanceUpdateOne) SetCompletedAt(t time.Time) *FlowInstanceUpdateOne {
	fiuo.mutation.SetCompletedAt(t)
	return fiuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableCompletedAt(t *time.Time) *FlowInstanceUpdateOne {
	if t != nil {
		fiuo.SetCompletedAt(*t)
	}
	return fiuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (fiuo *FlowInstanceUpdateOne) ClearCompletedAt() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearCompletedAt()
	return fiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FlowInstanceUpdateOne) SetUpdatedAt(t time.Time) *FlowInstanceUpdateOne {
	fiuo.mutation.SetUpdatedAt(t)
	return fiuo
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (fiuo *FlowInstanceUpdateOne) SetTicket(t *Ticket) *FlowInstanceUpdateOne {
	return fiuo.SetTicketID(t.ID)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fiuo *FlowInstanceUpdateOne) Mutation() *FlowInstanceMutation {
	return fiuo.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (fiuo *FlowInstanceUpdateOne) ClearTicket() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearTicket()
	return fiuo
}

// Where appends a list predicates to the FlowInstanceUpdate builder.
func (fiuo *FlowInstanceUpdateOne) Where(ps ...predicate.FlowInstance) *FlowInstanceUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FlowInstanceUpdateOne) Select(field string, fields ...string) *FlowInstanceUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FlowInstance entity.
func (fiuo *FlowInstanceUpdateOne) Save(ctx context.Context) (*FlowInstance, error) {
	fiuo.defaults()
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FlowInstanceUpdateOne) SaveX(ctx context.Context) *FlowInstance {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FlowInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FlowInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FlowInstanceUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := flowinstance.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FlowInstanceUpdateOne) check() error {
	if v, ok := fiuo.mutation.FlowDefinitionID(); ok {
		if err := flowinstance.FlowDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_definition_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_definition_id": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.FlowName(); ok {
		if err := flowinstance.FlowNameValidator(v); err != nil {
			return &ValidationError{Name: "flow_name", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_name": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.FlowVersion(); ok {
		if err := flowinstance.FlowVersionValidator(v); err != nil {
			return &ValidationError{Name: "flow_version", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_version": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.Status(); ok {
		if err := flowinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.status": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.CurrentStep(); ok {
		if err := flowinstance.CurrentStepValidator(v); err != nil {
			return &ValidationError{Name: "current_step", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.current_step": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.TotalSteps(); ok {
		if err := flowinstance.TotalStepsValidator(v); err != nil {
			return &ValidationError{Name: "total_steps", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.total_steps": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.TicketID(); ok {
		if err := flowinstance.TicketIDValidator(v); err != nil {
			return &ValidationError{Name: "ticket_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ticket_id": %w`, err)}
		}
	}
	if fiuo.mutation.TicketCleared() && len(fiuo.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FlowInstance.ticket"`)
	}
	return nil
}

func (fiuo *FlowInstanceUpdateOne) sqlSave(ctx context.Context) (_node *FlowInstance, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(flowinstance.Table, flowinstance.Columns, sqlgraph.NewFieldSpec(flowinstance.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FlowInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flowinstance.FieldID)
		for _, f := range fields {
			if !flowinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flowinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.FlowDefinitionID(); ok {
		_spec.SetField(flowinstance.FieldFlowDefinitionID, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.FlowName(); ok {
		_spec.SetField(flowinstance.FieldFlowName, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.FlowVersion(); ok {
		_spec.SetField(flowinstance.FieldFlowVersion, field.TypeString, value)
	}
	if fiuo.mutation.FlowVersionCleared() {
		_spec.ClearField(flowinstance.FieldFlowVersion, field.TypeString)
	}
	if value, ok := fiuo.mutation.Status(); ok {
		_spec.SetField(flowinstance.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := fiuo.mutation.CurrentStep(); ok {
		_spec.SetField(flowinstance.FieldCurrentStep, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.AddedCurrentStep(); ok {
		_spec.AddField(flowinstance.FieldCurrentStep, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.TotalSteps(); ok {
		_spec.SetField(flowinstance.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.AddedTotalSteps(); ok {
		_spec.AddField(flowinstance.FieldTotalSteps, field.TypeInt, value)
	}
	if value, ok := fiuo.mutation.StepConfig(); ok {
		_spec.SetField(flowinstance.FieldStepConfig, field.TypeJSON, value)
	}
	if fiuo.mutation.StepConfigCleared() {
		_spec.ClearField(flowinstance.FieldStepConfig, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.Variables(); ok {
		_spec.SetField(flowinstance.FieldVariables, field.TypeJSON, value)
	}
	if fiuo.mutation.VariablesCleared() {
		_spec.ClearField(flowinstance.FieldVariables, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.ExecutionHistory(); ok {
		_spec.SetField(flowinstance.FieldExecutionHistory, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedExecutionHistory(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, flowinstance.FieldExecutionHistory, value)
		})
	}
	if fiuo.mutation.ExecutionHistoryCleared() {
		_spec.ClearField(flowinstance.FieldExecutionHistory, field.TypeJSON)
	}
	if value, ok := fiuo.mutation.CompletedAt(); ok {
		_spec.SetField(flowinstance.FieldCompletedAt, field.TypeTime, value)
	}
	if fiuo.mutation.CompletedAtCleared() {
		_spec.ClearField(flowinstance.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(flowinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if fiuo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flowinstance.TicketTable,
			Columns: []string{flowinstance.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flowinstance.TicketTable,
			Columns: []string{flowinstance.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FlowInstance{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
