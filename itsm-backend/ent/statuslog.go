// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StatusLog is the model entity for the StatusLog schema.
type StatusLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 工单ID
	TicketID int `json:"ticket_id,omitempty"`
	// 原状态
	FromStatus string `json:"from_status,omitempty"`
	// 目标状态
	ToStatus string `json:"to_status,omitempty"`
	// 操作用户ID
	UserID int `json:"user_id,omitempty"`
	// 变更原因
	Reason string `json:"reason,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusLogQuery when eager-loading is set.
	Edges                StatusLogEdges `json:"edges"`
	incident_status_logs *int
	selectValues         sql.SelectValues
}

// StatusLogEdges holds the relations/edges for other nodes in the graph.
type StatusLogEdges struct {
	// Ticket holds the value of the ticket edge.
	Ticket *Ticket `json:"ticket,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusLogEdges) TicketOrErr() (*Ticket, error) {
	if e.Ticket != nil {
		return e.Ticket, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ticket.Label}
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statuslog.FieldID, statuslog.FieldTicketID, statuslog.FieldUserID:
			values[i] = new(sql.NullInt64)
		case statuslog.FieldFromStatus, statuslog.FieldToStatus, statuslog.FieldReason:
			values[i] = new(sql.NullString)
		case statuslog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case statuslog.ForeignKeys[0]: // incident_status_logs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusLog fields.
func (sl *StatusLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statuslog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case statuslog.FieldTicketID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_id", values[i])
			} else if value.Valid {
				sl.TicketID = int(value.Int64)
			}
		case statuslog.FieldFromStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_status", values[i])
			} else if value.Valid {
				sl.FromStatus = value.String
			}
		case statuslog.FieldToStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_status", values[i])
			} else if value.Valid {
				sl.ToStatus = value.String
			}
		case statuslog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sl.UserID = int(value.Int64)
			}
		case statuslog.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				sl.Reason = value.String
			}
		case statuslog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		case statuslog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field incident_status_logs", value)
			} else if value.Valid {
				sl.incident_status_logs = new(int)
				*sl.incident_status_logs = int(value.Int64)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StatusLog.
// This includes values selected through modifiers, order, etc.
func (sl *StatusLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryTicket queries the "ticket" edge of the StatusLog entity.
func (sl *StatusLog) QueryTicket() *TicketQuery {
	return NewStatusLogClient(sl.config).QueryTicket(sl)
}

// QueryUser queries the "user" edge of the StatusLog entity.
func (sl *StatusLog) QueryUser() *UserQuery {
	return NewStatusLogClient(sl.config).QueryUser(sl)
}

// Update returns a builder for updating this StatusLog.
// Note that you need to call StatusLog.Unwrap() before calling this method if this StatusLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *StatusLog) Update() *StatusLogUpdateOne {
	return NewStatusLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the StatusLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *StatusLog) Unwrap() *StatusLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *StatusLog) String() string {
	var builder strings.Builder
	builder.WriteString("StatusLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("ticket_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.TicketID))
	builder.WriteString(", ")
	builder.WriteString("from_status=")
	builder.WriteString(sl.FromStatus)
	builder.WriteString(", ")
	builder.WriteString("to_status=")
	builder.WriteString(sl.ToStatus)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sl.UserID))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(sl.Reason)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// StatusLogs is a parsable slice of StatusLog.
type StatusLogs []*StatusLog
