// Code generated by ent, DO NOT EDIT.

package servicerequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the servicerequest type in the database.
	Label = "service_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCatalogID holds the string denoting the catalog_id field in the database.
	FieldCatalogID = "catalog_id"
	// FieldRequesterID holds the string denoting the requester_id field in the database.
	FieldRequesterID = "requester_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the servicerequest in the database.
	Table = "service_requests"
)

// Columns holds all SQL columns for servicerequest fields.
var Columns = []string{
	FieldID,
	FieldCatalogID,
	FieldRequesterID,
	FieldStatus,
	FieldReason,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CatalogIDValidator is a validator for the "catalog_id" field. It is called by the builders before save.
	CatalogIDValidator func(int) error
	// RequesterIDValidator is a validator for the "requester_id" field. It is called by the builders before save.
	RequesterIDValidator func(int) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ServiceRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCatalogID orders the results by the catalog_id field.
func ByCatalogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCatalogID, opts...).ToFunc()
}

// ByRequesterID orders the results by the requester_id field.
func ByRequesterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
