// Code generated by ent, DO NOT EDIT.

package servicerequest

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldID, id))
}

// CatalogID applies equality check predicate on the "catalog_id" field. It's identical to CatalogIDEQ.
func CatalogID(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldCatalogID, v))
}

// RequesterID applies equality check predicate on the "requester_id" field. It's identical to RequesterIDEQ.
func RequesterID(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRequesterID, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldReason, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CatalogIDEQ applies the EQ predicate on the "catalog_id" field.
func CatalogIDEQ(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldCatalogID, v))
}

// CatalogIDNEQ applies the NEQ predicate on the "catalog_id" field.
func CatalogIDNEQ(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldCatalogID, v))
}

// CatalogIDIn applies the In predicate on the "catalog_id" field.
func CatalogIDIn(vs ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldCatalogID, vs...))
}

// CatalogIDNotIn applies the NotIn predicate on the "catalog_id" field.
func CatalogIDNotIn(vs ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldCatalogID, vs...))
}

// RequesterIDEQ applies the EQ predicate on the "requester_id" field.
func RequesterIDEQ(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldRequesterID, v))
}

// RequesterIDNEQ applies the NEQ predicate on the "requester_id" field.
func RequesterIDNEQ(v int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldRequesterID, v))
}

// RequesterIDIn applies the In predicate on the "requester_id" field.
func RequesterIDIn(vs ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldRequesterID, vs...))
}

// RequesterIDNotIn applies the NotIn predicate on the "requester_id" field.
func RequesterIDNotIn(vs ...int) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldRequesterID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldContainsFold(FieldReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// HasCatalog applies the HasEdge predicate on the "catalog" edge.
func HasCatalog() predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CatalogTable, CatalogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCatalogWith applies the HasEdge predicate on the "catalog" edge with a given conditions (other predicates).
func HasCatalogWith(preds ...predicate.ServiceCatalog) predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		step := newCatalogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.User) predicate.ServiceRequest {
	return predicate.ServiceRequest(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceRequest) predicate.ServiceRequest {
	return predicate.ServiceRequest(sql.NotPredicates(p))
}
