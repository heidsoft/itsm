// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processtask"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessTaskCreate is the builder for creating a ProcessTask entity.
type ProcessTaskCreate struct {
	config
	mutation *ProcessTaskMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (ptc *ProcessTaskCreate) SetTaskID(s string) *ProcessTaskCreate {
	ptc.mutation.SetTaskID(s)
	return ptc
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (ptc *ProcessTaskCreate) SetProcessInstanceID(s string) *ProcessTaskCreate {
	ptc.mutation.SetProcessInstanceID(s)
	return ptc
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (ptc *ProcessTaskCreate) SetProcessDefinitionKey(s string) *ProcessTaskCreate {
	ptc.mutation.SetProcessDefinitionKey(s)
	return ptc
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (ptc *ProcessTaskCreate) SetTaskDefinitionKey(s string) *ProcessTaskCreate {
	ptc.mutation.SetTaskDefinitionKey(s)
	return ptc
}

// SetTaskName sets the "task_name" field.
func (ptc *ProcessTaskCreate) SetTaskName(s string) *ProcessTaskCreate {
	ptc.mutation.SetTaskName(s)
	return ptc
}

// SetTaskType sets the "task_type" field.
func (ptc *ProcessTaskCreate) SetTaskType(s string) *ProcessTaskCreate {
	ptc.mutation.SetTaskType(s)
	return ptc
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableTaskType(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetTaskType(*s)
	}
	return ptc
}

// SetAssignee sets the "assignee" field.
func (ptc *ProcessTaskCreate) SetAssignee(s string) *ProcessTaskCreate {
	ptc.mutation.SetAssignee(s)
	return ptc
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableAssignee(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetAssignee(*s)
	}
	return ptc
}

// SetCandidateUsers sets the "candidate_users" field.
func (ptc *ProcessTaskCreate) SetCandidateUsers(s string) *ProcessTaskCreate {
	ptc.mutation.SetCandidateUsers(s)
	return ptc
}

// SetNillableCandidateUsers sets the "candidate_users" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableCandidateUsers(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetCandidateUsers(*s)
	}
	return ptc
}

// SetCandidateGroups sets the "candidate_groups" field.
func (ptc *ProcessTaskCreate) SetCandidateGroups(s string) *ProcessTaskCreate {
	ptc.mutation.SetCandidateGroups(s)
	return ptc
}

// SetNillableCandidateGroups sets the "candidate_groups" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableCandidateGroups(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetCandidateGroups(*s)
	}
	return ptc
}

// SetStatus sets the "status" field.
func (ptc *ProcessTaskCreate) SetStatus(s string) *ProcessTaskCreate {
	ptc.mutation.SetStatus(s)
	return ptc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableStatus(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetStatus(*s)
	}
	return ptc
}

// SetPriority sets the "priority" field.
func (ptc *ProcessTaskCreate) SetPriority(s string) *ProcessTaskCreate {
	ptc.mutation.SetPriority(s)
	return ptc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillablePriority(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetPriority(*s)
	}
	return ptc
}

// SetDueDate sets the "due_date" field.
func (ptc *ProcessTaskCreate) SetDueDate(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetDueDate(t)
	return ptc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableDueDate(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetDueDate(*t)
	}
	return ptc
}

// SetCreatedTime sets the "created_time" field.
func (ptc *ProcessTaskCreate) SetCreatedTime(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetCreatedTime(t)
	return ptc
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableCreatedTime(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetCreatedTime(*t)
	}
	return ptc
}

// SetAssignedTime sets the "assigned_time" field.
func (ptc *ProcessTaskCreate) SetAssignedTime(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetAssignedTime(t)
	return ptc
}

// SetNillableAssignedTime sets the "assigned_time" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableAssignedTime(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetAssignedTime(*t)
	}
	return ptc
}

// SetStartedTime sets the "started_time" field.
func (ptc *ProcessTaskCreate) SetStartedTime(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetStartedTime(t)
	return ptc
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableStartedTime(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetStartedTime(*t)
	}
	return ptc
}

// SetCompletedTime sets the "completed_time" field.
func (ptc *ProcessTaskCreate) SetCompletedTime(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetCompletedTime(t)
	return ptc
}

// SetNillableCompletedTime sets the "completed_time" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableCompletedTime(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetCompletedTime(*t)
	}
	return ptc
}

// SetFormKey sets the "form_key" field.
func (ptc *ProcessTaskCreate) SetFormKey(s string) *ProcessTaskCreate {
	ptc.mutation.SetFormKey(s)
	return ptc
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableFormKey(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetFormKey(*s)
	}
	return ptc
}

// SetTaskVariables sets the "task_variables" field.
func (ptc *ProcessTaskCreate) SetTaskVariables(m map[string]interface{}) *ProcessTaskCreate {
	ptc.mutation.SetTaskVariables(m)
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *ProcessTaskCreate) SetDescription(s string) *ProcessTaskCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableDescription(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetParentTaskID sets the "parent_task_id" field.
func (ptc *ProcessTaskCreate) SetParentTaskID(s string) *ProcessTaskCreate {
	ptc.mutation.SetParentTaskID(s)
	return ptc
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableParentTaskID(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetParentTaskID(*s)
	}
	return ptc
}

// SetRootTaskID sets the "root_task_id" field.
func (ptc *ProcessTaskCreate) SetRootTaskID(s string) *ProcessTaskCreate {
	ptc.mutation.SetRootTaskID(s)
	return ptc
}

// SetNillableRootTaskID sets the "root_task_id" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableRootTaskID(s *string) *ProcessTaskCreate {
	if s != nil {
		ptc.SetRootTaskID(*s)
	}
	return ptc
}

// SetTenantID sets the "tenant_id" field.
func (ptc *ProcessTaskCreate) SetTenantID(i int) *ProcessTaskCreate {
	ptc.mutation.SetTenantID(i)
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProcessTaskCreate) SetCreatedAt(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableCreatedAt(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *ProcessTaskCreate) SetUpdatedAt(t time.Time) *ProcessTaskCreate {
	ptc.mutation.SetUpdatedAt(t)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *ProcessTaskCreate) SetNillableUpdatedAt(t *time.Time) *ProcessTaskCreate {
	if t != nil {
		ptc.SetUpdatedAt(*t)
	}
	return ptc
}

// Mutation returns the ProcessTaskMutation object of the builder.
func (ptc *ProcessTaskCreate) Mutation() *ProcessTaskMutation {
	return ptc.mutation
}

// Save creates the ProcessTask in the database.
func (ptc *ProcessTaskCreate) Save(ctx context.Context) (*ProcessTask, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProcessTaskCreate) SaveX(ctx context.Context) *ProcessTask {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProcessTaskCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProcessTaskCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProcessTaskCreate) defaults() {
	if _, ok := ptc.mutation.TaskType(); !ok {
		v := processtask.DefaultTaskType
		ptc.mutation.SetTaskType(v)
	}
	if _, ok := ptc.mutation.Status(); !ok {
		v := processtask.DefaultStatus
		ptc.mutation.SetStatus(v)
	}
	if _, ok := ptc.mutation.Priority(); !ok {
		v := processtask.DefaultPriority
		ptc.mutation.SetPriority(v)
	}
	if _, ok := ptc.mutation.CreatedTime(); !ok {
		v := processtask.DefaultCreatedTime()
		ptc.mutation.SetCreatedTime(v)
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := processtask.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		v := processtask.DefaultUpdatedAt()
		ptc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProcessTaskCreate) check() error {
	if _, ok := ptc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "ProcessTask.task_id"`)}
	}
	if v, ok := ptc.mutation.TaskID(); ok {
		if err := processtask.TaskIDValidator(v); err != nil {
			return &ValidationError{Name: "task_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_id": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "ProcessTask.process_instance_id"`)}
	}
	if v, ok := ptc.mutation.ProcessInstanceID(); ok {
		if err := processtask.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_instance_id": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.ProcessDefinitionKey(); !ok {
		return &ValidationError{Name: "process_definition_key", err: errors.New(`ent: missing required field "ProcessTask.process_definition_key"`)}
	}
	if v, ok := ptc.mutation.ProcessDefinitionKey(); ok {
		if err := processtask.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.process_definition_key": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.TaskDefinitionKey(); !ok {
		return &ValidationError{Name: "task_definition_key", err: errors.New(`ent: missing required field "ProcessTask.task_definition_key"`)}
	}
	if v, ok := ptc.mutation.TaskDefinitionKey(); ok {
		if err := processtask.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_definition_key": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`ent: missing required field "ProcessTask.task_name"`)}
	}
	if v, ok := ptc.mutation.TaskName(); ok {
		if err := processtask.TaskNameValidator(v); err != nil {
			return &ValidationError{Name: "task_name", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.task_name": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.TaskType(); !ok {
		return &ValidationError{Name: "task_type", err: errors.New(`ent: missing required field "ProcessTask.task_type"`)}
	}
	if _, ok := ptc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcessTask.status"`)}
	}
	if _, ok := ptc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "ProcessTask.priority"`)}
	}
	if _, ok := ptc.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "ProcessTask.created_time"`)}
	}
	if _, ok := ptc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessTask.tenant_id"`)}
	}
	if v, ok := ptc.mutation.TenantID(); ok {
		if err := processtask.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessTask.tenant_id": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessTask.created_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessTask.updated_at"`)}
	}
	return nil
}

func (ptc *ProcessTaskCreate) sqlSave(ctx context.Context) (*ProcessTask, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProcessTaskCreate) createSpec() (*ProcessTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessTask{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(processtask.Table, sqlgraph.NewFieldSpec(processtask.FieldID, field.TypeInt))
	)
	if value, ok := ptc.mutation.TaskID(); ok {
		_spec.SetField(processtask.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := ptc.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processtask.FieldProcessInstanceID, field.TypeString, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := ptc.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processtask.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := ptc.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(processtask.FieldTaskDefinitionKey, field.TypeString, value)
		_node.TaskDefinitionKey = value
	}
	if value, ok := ptc.mutation.TaskName(); ok {
		_spec.SetField(processtask.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := ptc.mutation.TaskType(); ok {
		_spec.SetField(processtask.FieldTaskType, field.TypeString, value)
		_node.TaskType = value
	}
	if value, ok := ptc.mutation.Assignee(); ok {
		_spec.SetField(processtask.FieldAssignee, field.TypeString, value)
		_node.Assignee = value
	}
	if value, ok := ptc.mutation.CandidateUsers(); ok {
		_spec.SetField(processtask.FieldCandidateUsers, field.TypeString, value)
		_node.CandidateUsers = value
	}
	if value, ok := ptc.mutation.CandidateGroups(); ok {
		_spec.SetField(processtask.FieldCandidateGroups, field.TypeString, value)
		_node.CandidateGroups = value
	}
	if value, ok := ptc.mutation.Status(); ok {
		_spec.SetField(processtask.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ptc.mutation.Priority(); ok {
		_spec.SetField(processtask.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := ptc.mutation.DueDate(); ok {
		_spec.SetField(processtask.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := ptc.mutation.CreatedTime(); ok {
		_spec.SetField(processtask.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := ptc.mutation.AssignedTime(); ok {
		_spec.SetField(processtask.FieldAssignedTime, field.TypeTime, value)
		_node.AssignedTime = value
	}
	if value, ok := ptc.mutation.StartedTime(); ok {
		_spec.SetField(processtask.FieldStartedTime, field.TypeTime, value)
		_node.StartedTime = value
	}
	if value, ok := ptc.mutation.CompletedTime(); ok {
		_spec.SetField(processtask.FieldCompletedTime, field.TypeTime, value)
		_node.CompletedTime = value
	}
	if value, ok := ptc.mutation.FormKey(); ok {
		_spec.SetField(processtask.FieldFormKey, field.TypeString, value)
		_node.FormKey = value
	}
	if value, ok := ptc.mutation.TaskVariables(); ok {
		_spec.SetField(processtask.FieldTaskVariables, field.TypeJSON, value)
		_node.TaskVariables = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(processtask.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.ParentTaskID(); ok {
		_spec.SetField(processtask.FieldParentTaskID, field.TypeString, value)
		_node.ParentTaskID = value
	}
	if value, ok := ptc.mutation.RootTaskID(); ok {
		_spec.SetField(processtask.FieldRootTaskID, field.TypeString, value)
		_node.RootTaskID = value
	}
	if value, ok := ptc.mutation.TenantID(); ok {
		_spec.SetField(processtask.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(processtask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.SetField(processtask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessTaskCreateBulk is the builder for creating many ProcessTask entities in bulk.
type ProcessTaskCreateBulk struct {
	config
	err      error
	builders []*ProcessTaskCreate
}

// Save creates the ProcessTask entities in the database.
func (ptcb *ProcessTaskCreateBulk) Save(ctx context.Context) ([]*ProcessTask, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProcessTask, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProcessTaskCreateBulk) SaveX(ctx context.Context) []*ProcessTask {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProcessTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProcessTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
