// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/prompttemplate"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PromptTemplate is the model entity for the PromptTemplate schema.
type PromptTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Template holds the value of the "template" field.
	Template string `json:"template,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromptTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prompttemplate.FieldMetadata:
			values[i] = new([]byte)
		case prompttemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case prompttemplate.FieldName, prompttemplate.FieldVersion, prompttemplate.FieldTemplate, prompttemplate.FieldDescription:
			values[i] = new(sql.NullString)
		case prompttemplate.FieldCreatedAt, prompttemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromptTemplate fields.
func (pt *PromptTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prompttemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case prompttemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case prompttemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case prompttemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case prompttemplate.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pt.Version = value.String
			}
		case prompttemplate.FieldTemplate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template", values[i])
			} else if value.Valid {
				pt.Template = value.String
			}
		case prompttemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case prompttemplate.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromptTemplate.
// This includes values selected through modifiers, order, etc.
func (pt *PromptTemplate) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// Update returns a builder for updating this PromptTemplate.
// Note that you need to call PromptTemplate.Unwrap() before calling this method if this PromptTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PromptTemplate) Update() *PromptTemplateUpdateOne {
	return NewPromptTemplateClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PromptTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PromptTemplate) Unwrap() *PromptTemplate {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromptTemplate is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PromptTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("PromptTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(pt.Version)
	builder.WriteString(", ")
	builder.WriteString("template=")
	builder.WriteString(pt.Template)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", pt.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// PromptTemplates is a parsable slice of PromptTemplate.
type PromptTemplates []*PromptTemplate
