// Code generated by ent, DO NOT EDIT.

package processdeployment

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processdeployment type in the database.
	Label = "process_deployment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldDeploymentName holds the string denoting the deployment_name field in the database.
	FieldDeploymentName = "deployment_name"
	// FieldDeploymentSource holds the string denoting the deployment_source field in the database.
	FieldDeploymentSource = "deployment_source"
	// FieldDeploymentTime holds the string denoting the deployment_time field in the database.
	FieldDeploymentTime = "deployment_time"
	// FieldDeployedBy holds the string denoting the deployed_by field in the database.
	FieldDeployedBy = "deployed_by"
	// FieldDeploymentComment holds the string denoting the deployment_comment field in the database.
	FieldDeploymentComment = "deployment_comment"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldDeploymentCategory holds the string denoting the deployment_category field in the database.
	FieldDeploymentCategory = "deployment_category"
	// FieldDeploymentMetadata holds the string denoting the deployment_metadata field in the database.
	FieldDeploymentMetadata = "deployment_metadata"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processdeployment in the database.
	Table = "process_deployments"
)

// Columns holds all SQL columns for processdeployment fields.
var Columns = []string{
	FieldID,
	FieldDeploymentID,
	FieldDeploymentName,
	FieldDeploymentSource,
	FieldDeploymentTime,
	FieldDeployedBy,
	FieldDeploymentComment,
	FieldIsActive,
	FieldDeploymentCategory,
	FieldDeploymentMetadata,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DeploymentIDValidator is a validator for the "deployment_id" field. It is called by the builders before save.
	DeploymentIDValidator func(string) error
	// DeploymentNameValidator is a validator for the "deployment_name" field. It is called by the builders before save.
	DeploymentNameValidator func(string) error
	// DefaultDeploymentTime holds the default value on creation for the "deployment_time" field.
	DefaultDeploymentTime func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultDeploymentCategory holds the default value on creation for the "deployment_category" field.
	DefaultDeploymentCategory string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessDeployment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeploymentID orders the results by the deployment_id field.
func ByDeploymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentID, opts...).ToFunc()
}

// ByDeploymentName orders the results by the deployment_name field.
func ByDeploymentName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentName, opts...).ToFunc()
}

// ByDeploymentSource orders the results by the deployment_source field.
func ByDeploymentSource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentSource, opts...).ToFunc()
}

// ByDeploymentTime orders the results by the deployment_time field.
func ByDeploymentTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentTime, opts...).ToFunc()
}

// ByDeployedBy orders the results by the deployed_by field.
func ByDeployedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeployedBy, opts...).ToFunc()
}

// ByDeploymentComment orders the results by the deployment_comment field.
func ByDeploymentComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentComment, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByDeploymentCategory orders the results by the deployment_category field.
func ByDeploymentCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentCategory, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
