// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"itsm-backend/ent/migrate"

	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/ciattributedefinition"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/cilifecyclestate"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/cirelationshiptype"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/incident"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/subscription"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"
	"itsm-backend/ent/workflow"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApprovalLog is the client for interacting with the ApprovalLog builders.
	ApprovalLog *ApprovalLogClient
	// CIAttributeDefinition is the client for interacting with the CIAttributeDefinition builders.
	CIAttributeDefinition *CIAttributeDefinitionClient
	// CIChangeRecord is the client for interacting with the CIChangeRecord builders.
	CIChangeRecord *CIChangeRecordClient
	// CILifecycleState is the client for interacting with the CILifecycleState builders.
	CILifecycleState *CILifecycleStateClient
	// CIRelationship is the client for interacting with the CIRelationship builders.
	CIRelationship *CIRelationshipClient
	// CIRelationshipType is the client for interacting with the CIRelationshipType builders.
	CIRelationshipType *CIRelationshipTypeClient
	// CIType is the client for interacting with the CIType builders.
	CIType *CITypeClient
	// ConfigurationItem is the client for interacting with the ConfigurationItem builders.
	ConfigurationItem *ConfigurationItemClient
	// FlowInstance is the client for interacting with the FlowInstance builders.
	FlowInstance *FlowInstanceClient
	// Incident is the client for interacting with the Incident builders.
	Incident *IncidentClient
	// KnowledgeArticle is the client for interacting with the KnowledgeArticle builders.
	KnowledgeArticle *KnowledgeArticleClient
	// ServiceCatalog is the client for interacting with the ServiceCatalog builders.
	ServiceCatalog *ServiceCatalogClient
	// ServiceRequest is the client for interacting with the ServiceRequest builders.
	ServiceRequest *ServiceRequestClient
	// StatusLog is the client for interacting with the StatusLog builders.
	StatusLog *StatusLogClient
	// Subscription is the client for interacting with the Subscription builders.
	Subscription *SubscriptionClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// Ticket is the client for interacting with the Ticket builders.
	Ticket *TicketClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Workflow is the client for interacting with the Workflow builders.
	Workflow *WorkflowClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApprovalLog = NewApprovalLogClient(c.config)
	c.CIAttributeDefinition = NewCIAttributeDefinitionClient(c.config)
	c.CIChangeRecord = NewCIChangeRecordClient(c.config)
	c.CILifecycleState = NewCILifecycleStateClient(c.config)
	c.CIRelationship = NewCIRelationshipClient(c.config)
	c.CIRelationshipType = NewCIRelationshipTypeClient(c.config)
	c.CIType = NewCITypeClient(c.config)
	c.ConfigurationItem = NewConfigurationItemClient(c.config)
	c.FlowInstance = NewFlowInstanceClient(c.config)
	c.Incident = NewIncidentClient(c.config)
	c.KnowledgeArticle = NewKnowledgeArticleClient(c.config)
	c.ServiceCatalog = NewServiceCatalogClient(c.config)
	c.ServiceRequest = NewServiceRequestClient(c.config)
	c.StatusLog = NewStatusLogClient(c.config)
	c.Subscription = NewSubscriptionClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.Ticket = NewTicketClient(c.config)
	c.User = NewUserClient(c.config)
	c.Workflow = NewWorkflowClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApprovalLog:           NewApprovalLogClient(cfg),
		CIAttributeDefinition: NewCIAttributeDefinitionClient(cfg),
		CIChangeRecord:        NewCIChangeRecordClient(cfg),
		CILifecycleState:      NewCILifecycleStateClient(cfg),
		CIRelationship:        NewCIRelationshipClient(cfg),
		CIRelationshipType:    NewCIRelationshipTypeClient(cfg),
		CIType:                NewCITypeClient(cfg),
		ConfigurationItem:     NewConfigurationItemClient(cfg),
		FlowInstance:          NewFlowInstanceClient(cfg),
		Incident:              NewIncidentClient(cfg),
		KnowledgeArticle:      NewKnowledgeArticleClient(cfg),
		ServiceCatalog:        NewServiceCatalogClient(cfg),
		ServiceRequest:        NewServiceRequestClient(cfg),
		StatusLog:             NewStatusLogClient(cfg),
		Subscription:          NewSubscriptionClient(cfg),
		Tenant:                NewTenantClient(cfg),
		Ticket:                NewTicketClient(cfg),
		User:                  NewUserClient(cfg),
		Workflow:              NewWorkflowClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		ApprovalLog:           NewApprovalLogClient(cfg),
		CIAttributeDefinition: NewCIAttributeDefinitionClient(cfg),
		CIChangeRecord:        NewCIChangeRecordClient(cfg),
		CILifecycleState:      NewCILifecycleStateClient(cfg),
		CIRelationship:        NewCIRelationshipClient(cfg),
		CIRelationshipType:    NewCIRelationshipTypeClient(cfg),
		CIType:                NewCITypeClient(cfg),
		ConfigurationItem:     NewConfigurationItemClient(cfg),
		FlowInstance:          NewFlowInstanceClient(cfg),
		Incident:              NewIncidentClient(cfg),
		KnowledgeArticle:      NewKnowledgeArticleClient(cfg),
		ServiceCatalog:        NewServiceCatalogClient(cfg),
		ServiceRequest:        NewServiceRequestClient(cfg),
		StatusLog:             NewStatusLogClient(cfg),
		Subscription:          NewSubscriptionClient(cfg),
		Tenant:                NewTenantClient(cfg),
		Ticket:                NewTicketClient(cfg),
		User:                  NewUserClient(cfg),
		Workflow:              NewWorkflowClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApprovalLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApprovalLog, c.CIAttributeDefinition, c.CIChangeRecord, c.CILifecycleState,
		c.CIRelationship, c.CIRelationshipType, c.CIType, c.ConfigurationItem,
		c.FlowInstance, c.Incident, c.KnowledgeArticle, c.ServiceCatalog,
		c.ServiceRequest, c.StatusLog, c.Subscription, c.Tenant, c.Ticket, c.User,
		c.Workflow,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApprovalLog, c.CIAttributeDefinition, c.CIChangeRecord, c.CILifecycleState,
		c.CIRelationship, c.CIRelationshipType, c.CIType, c.ConfigurationItem,
		c.FlowInstance, c.Incident, c.KnowledgeArticle, c.ServiceCatalog,
		c.ServiceRequest, c.StatusLog, c.Subscription, c.Tenant, c.Ticket, c.User,
		c.Workflow,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApprovalLogMutation:
		return c.ApprovalLog.mutate(ctx, m)
	case *CIAttributeDefinitionMutation:
		return c.CIAttributeDefinition.mutate(ctx, m)
	case *CIChangeRecordMutation:
		return c.CIChangeRecord.mutate(ctx, m)
	case *CILifecycleStateMutation:
		return c.CILifecycleState.mutate(ctx, m)
	case *CIRelationshipMutation:
		return c.CIRelationship.mutate(ctx, m)
	case *CIRelationshipTypeMutation:
		return c.CIRelationshipType.mutate(ctx, m)
	case *CITypeMutation:
		return c.CIType.mutate(ctx, m)
	case *ConfigurationItemMutation:
		return c.ConfigurationItem.mutate(ctx, m)
	case *FlowInstanceMutation:
		return c.FlowInstance.mutate(ctx, m)
	case *IncidentMutation:
		return c.Incident.mutate(ctx, m)
	case *KnowledgeArticleMutation:
		return c.KnowledgeArticle.mutate(ctx, m)
	case *ServiceCatalogMutation:
		return c.ServiceCatalog.mutate(ctx, m)
	case *ServiceRequestMutation:
		return c.ServiceRequest.mutate(ctx, m)
	case *StatusLogMutation:
		return c.StatusLog.mutate(ctx, m)
	case *SubscriptionMutation:
		return c.Subscription.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *TicketMutation:
		return c.Ticket.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkflowMutation:
		return c.Workflow.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApprovalLogClient is a client for the ApprovalLog schema.
type ApprovalLogClient struct {
	config
}

// NewApprovalLogClient returns a client for the ApprovalLog from the given config.
func NewApprovalLogClient(c config) *ApprovalLogClient {
	return &ApprovalLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approvallog.Hooks(f(g(h())))`.
func (c *ApprovalLogClient) Use(hooks ...Hook) {
	c.hooks.ApprovalLog = append(c.hooks.ApprovalLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `approvallog.Intercept(f(g(h())))`.
func (c *ApprovalLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApprovalLog = append(c.inters.ApprovalLog, interceptors...)
}

// Create returns a builder for creating a ApprovalLog entity.
func (c *ApprovalLogClient) Create() *ApprovalLogCreate {
	mutation := newApprovalLogMutation(c.config, OpCreate)
	return &ApprovalLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApprovalLog entities.
func (c *ApprovalLogClient) CreateBulk(builders ...*ApprovalLogCreate) *ApprovalLogCreateBulk {
	return &ApprovalLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApprovalLogClient) MapCreateBulk(slice any, setFunc func(*ApprovalLogCreate, int)) *ApprovalLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApprovalLogCreateBulk{err: fmt.Errorf("calling to ApprovalLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApprovalLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApprovalLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApprovalLog.
func (c *ApprovalLogClient) Update() *ApprovalLogUpdate {
	mutation := newApprovalLogMutation(c.config, OpUpdate)
	return &ApprovalLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApprovalLogClient) UpdateOne(al *ApprovalLog) *ApprovalLogUpdateOne {
	mutation := newApprovalLogMutation(c.config, OpUpdateOne, withApprovalLog(al))
	return &ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApprovalLogClient) UpdateOneID(id int) *ApprovalLogUpdateOne {
	mutation := newApprovalLogMutation(c.config, OpUpdateOne, withApprovalLogID(id))
	return &ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApprovalLog.
func (c *ApprovalLogClient) Delete() *ApprovalLogDelete {
	mutation := newApprovalLogMutation(c.config, OpDelete)
	return &ApprovalLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApprovalLogClient) DeleteOne(al *ApprovalLog) *ApprovalLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApprovalLogClient) DeleteOneID(id int) *ApprovalLogDeleteOne {
	builder := c.Delete().Where(approvallog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApprovalLogDeleteOne{builder}
}

// Query returns a query builder for ApprovalLog.
func (c *ApprovalLogClient) Query() *ApprovalLogQuery {
	return &ApprovalLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApprovalLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ApprovalLog entity by its id.
func (c *ApprovalLogClient) Get(ctx context.Context, id int) (*ApprovalLog, error) {
	return c.Query().Where(approvallog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApprovalLogClient) GetX(ctx context.Context, id int) *ApprovalLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprover queries the approver edge of a ApprovalLog.
func (c *ApprovalLogClient) QueryApprover(al *ApprovalLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approvallog.Table, approvallog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approvallog.ApproverTable, approvallog.ApproverColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTicket queries the ticket edge of a ApprovalLog.
func (c *ApprovalLogClient) QueryTicket(al *ApprovalLog) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approvallog.Table, approvallog.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approvallog.TicketTable, approvallog.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApprovalLogClient) Hooks() []Hook {
	return c.hooks.ApprovalLog
}

// Interceptors returns the client interceptors.
func (c *ApprovalLogClient) Interceptors() []Interceptor {
	return c.inters.ApprovalLog
}

func (c *ApprovalLogClient) mutate(ctx context.Context, m *ApprovalLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApprovalLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApprovalLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApprovalLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApprovalLog mutation op: %q", m.Op())
	}
}

// CIAttributeDefinitionClient is a client for the CIAttributeDefinition schema.
type CIAttributeDefinitionClient struct {
	config
}

// NewCIAttributeDefinitionClient returns a client for the CIAttributeDefinition from the given config.
func NewCIAttributeDefinitionClient(c config) *CIAttributeDefinitionClient {
	return &CIAttributeDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ciattributedefinition.Hooks(f(g(h())))`.
func (c *CIAttributeDefinitionClient) Use(hooks ...Hook) {
	c.hooks.CIAttributeDefinition = append(c.hooks.CIAttributeDefinition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ciattributedefinition.Intercept(f(g(h())))`.
func (c *CIAttributeDefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIAttributeDefinition = append(c.inters.CIAttributeDefinition, interceptors...)
}

// Create returns a builder for creating a CIAttributeDefinition entity.
func (c *CIAttributeDefinitionClient) Create() *CIAttributeDefinitionCreate {
	mutation := newCIAttributeDefinitionMutation(c.config, OpCreate)
	return &CIAttributeDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIAttributeDefinition entities.
func (c *CIAttributeDefinitionClient) CreateBulk(builders ...*CIAttributeDefinitionCreate) *CIAttributeDefinitionCreateBulk {
	return &CIAttributeDefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIAttributeDefinitionClient) MapCreateBulk(slice any, setFunc func(*CIAttributeDefinitionCreate, int)) *CIAttributeDefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIAttributeDefinitionCreateBulk{err: fmt.Errorf("calling to CIAttributeDefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIAttributeDefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIAttributeDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Update() *CIAttributeDefinitionUpdate {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdate)
	return &CIAttributeDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIAttributeDefinitionClient) UpdateOne(cad *CIAttributeDefinition) *CIAttributeDefinitionUpdateOne {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdateOne, withCIAttributeDefinition(cad))
	return &CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIAttributeDefinitionClient) UpdateOneID(id int) *CIAttributeDefinitionUpdateOne {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdateOne, withCIAttributeDefinitionID(id))
	return &CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Delete() *CIAttributeDefinitionDelete {
	mutation := newCIAttributeDefinitionMutation(c.config, OpDelete)
	return &CIAttributeDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIAttributeDefinitionClient) DeleteOne(cad *CIAttributeDefinition) *CIAttributeDefinitionDeleteOne {
	return c.DeleteOneID(cad.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIAttributeDefinitionClient) DeleteOneID(id int) *CIAttributeDefinitionDeleteOne {
	builder := c.Delete().Where(ciattributedefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIAttributeDefinitionDeleteOne{builder}
}

// Query returns a query builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Query() *CIAttributeDefinitionQuery {
	return &CIAttributeDefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIAttributeDefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a CIAttributeDefinition entity by its id.
func (c *CIAttributeDefinitionClient) Get(ctx context.Context, id int) (*CIAttributeDefinition, error) {
	return c.Query().Where(ciattributedefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIAttributeDefinitionClient) GetX(ctx context.Context, id int) *CIAttributeDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) QueryTenant(cad *CIAttributeDefinition) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ciattributedefinition.Table, ciattributedefinition.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ciattributedefinition.TenantTable, ciattributedefinition.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiType queries the ci_type edge of a CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) QueryCiType(cad *CIAttributeDefinition) *CITypeQuery {
	query := (&CITypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cad.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ciattributedefinition.Table, ciattributedefinition.FieldID, id),
			sqlgraph.To(citype.Table, citype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ciattributedefinition.CiTypeTable, ciattributedefinition.CiTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cad.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CIAttributeDefinitionClient) Hooks() []Hook {
	return c.hooks.CIAttributeDefinition
}

// Interceptors returns the client interceptors.
func (c *CIAttributeDefinitionClient) Interceptors() []Interceptor {
	return c.inters.CIAttributeDefinition
}

func (c *CIAttributeDefinitionClient) mutate(ctx context.Context, m *CIAttributeDefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIAttributeDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIAttributeDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIAttributeDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIAttributeDefinition mutation op: %q", m.Op())
	}
}

// CIChangeRecordClient is a client for the CIChangeRecord schema.
type CIChangeRecordClient struct {
	config
}

// NewCIChangeRecordClient returns a client for the CIChangeRecord from the given config.
func NewCIChangeRecordClient(c config) *CIChangeRecordClient {
	return &CIChangeRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cichangerecord.Hooks(f(g(h())))`.
func (c *CIChangeRecordClient) Use(hooks ...Hook) {
	c.hooks.CIChangeRecord = append(c.hooks.CIChangeRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cichangerecord.Intercept(f(g(h())))`.
func (c *CIChangeRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIChangeRecord = append(c.inters.CIChangeRecord, interceptors...)
}

// Create returns a builder for creating a CIChangeRecord entity.
func (c *CIChangeRecordClient) Create() *CIChangeRecordCreate {
	mutation := newCIChangeRecordMutation(c.config, OpCreate)
	return &CIChangeRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIChangeRecord entities.
func (c *CIChangeRecordClient) CreateBulk(builders ...*CIChangeRecordCreate) *CIChangeRecordCreateBulk {
	return &CIChangeRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIChangeRecordClient) MapCreateBulk(slice any, setFunc func(*CIChangeRecordCreate, int)) *CIChangeRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIChangeRecordCreateBulk{err: fmt.Errorf("calling to CIChangeRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIChangeRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIChangeRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIChangeRecord.
func (c *CIChangeRecordClient) Update() *CIChangeRecordUpdate {
	mutation := newCIChangeRecordMutation(c.config, OpUpdate)
	return &CIChangeRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIChangeRecordClient) UpdateOne(ccr *CIChangeRecord) *CIChangeRecordUpdateOne {
	mutation := newCIChangeRecordMutation(c.config, OpUpdateOne, withCIChangeRecord(ccr))
	return &CIChangeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIChangeRecordClient) UpdateOneID(id int) *CIChangeRecordUpdateOne {
	mutation := newCIChangeRecordMutation(c.config, OpUpdateOne, withCIChangeRecordID(id))
	return &CIChangeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIChangeRecord.
func (c *CIChangeRecordClient) Delete() *CIChangeRecordDelete {
	mutation := newCIChangeRecordMutation(c.config, OpDelete)
	return &CIChangeRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIChangeRecordClient) DeleteOne(ccr *CIChangeRecord) *CIChangeRecordDeleteOne {
	return c.DeleteOneID(ccr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIChangeRecordClient) DeleteOneID(id int) *CIChangeRecordDeleteOne {
	builder := c.Delete().Where(cichangerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIChangeRecordDeleteOne{builder}
}

// Query returns a query builder for CIChangeRecord.
func (c *CIChangeRecordClient) Query() *CIChangeRecordQuery {
	return &CIChangeRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIChangeRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a CIChangeRecord entity by its id.
func (c *CIChangeRecordClient) Get(ctx context.Context, id int) (*CIChangeRecord, error) {
	return c.Query().Where(cichangerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIChangeRecordClient) GetX(ctx context.Context, id int) *CIChangeRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CIChangeRecord.
func (c *CIChangeRecordClient) QueryTenant(ccr *CIChangeRecord) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cichangerecord.Table, cichangerecord.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cichangerecord.TenantTable, cichangerecord.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ccr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfigurationItem queries the configuration_item edge of a CIChangeRecord.
func (c *CIChangeRecordClient) QueryConfigurationItem(ccr *CIChangeRecord) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cichangerecord.Table, cichangerecord.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cichangerecord.ConfigurationItemTable, cichangerecord.ConfigurationItemColumn),
		)
		fromV = sqlgraph.Neighbors(ccr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CIChangeRecordClient) Hooks() []Hook {
	return c.hooks.CIChangeRecord
}

// Interceptors returns the client interceptors.
func (c *CIChangeRecordClient) Interceptors() []Interceptor {
	return c.inters.CIChangeRecord
}

func (c *CIChangeRecordClient) mutate(ctx context.Context, m *CIChangeRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIChangeRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIChangeRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIChangeRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIChangeRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIChangeRecord mutation op: %q", m.Op())
	}
}

// CILifecycleStateClient is a client for the CILifecycleState schema.
type CILifecycleStateClient struct {
	config
}

// NewCILifecycleStateClient returns a client for the CILifecycleState from the given config.
func NewCILifecycleStateClient(c config) *CILifecycleStateClient {
	return &CILifecycleStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cilifecyclestate.Hooks(f(g(h())))`.
func (c *CILifecycleStateClient) Use(hooks ...Hook) {
	c.hooks.CILifecycleState = append(c.hooks.CILifecycleState, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cilifecyclestate.Intercept(f(g(h())))`.
func (c *CILifecycleStateClient) Intercept(interceptors ...Interceptor) {
	c.inters.CILifecycleState = append(c.inters.CILifecycleState, interceptors...)
}

// Create returns a builder for creating a CILifecycleState entity.
func (c *CILifecycleStateClient) Create() *CILifecycleStateCreate {
	mutation := newCILifecycleStateMutation(c.config, OpCreate)
	return &CILifecycleStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CILifecycleState entities.
func (c *CILifecycleStateClient) CreateBulk(builders ...*CILifecycleStateCreate) *CILifecycleStateCreateBulk {
	return &CILifecycleStateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CILifecycleStateClient) MapCreateBulk(slice any, setFunc func(*CILifecycleStateCreate, int)) *CILifecycleStateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CILifecycleStateCreateBulk{err: fmt.Errorf("calling to CILifecycleStateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CILifecycleStateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CILifecycleStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CILifecycleState.
func (c *CILifecycleStateClient) Update() *CILifecycleStateUpdate {
	mutation := newCILifecycleStateMutation(c.config, OpUpdate)
	return &CILifecycleStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CILifecycleStateClient) UpdateOne(cls *CILifecycleState) *CILifecycleStateUpdateOne {
	mutation := newCILifecycleStateMutation(c.config, OpUpdateOne, withCILifecycleState(cls))
	return &CILifecycleStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CILifecycleStateClient) UpdateOneID(id int) *CILifecycleStateUpdateOne {
	mutation := newCILifecycleStateMutation(c.config, OpUpdateOne, withCILifecycleStateID(id))
	return &CILifecycleStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CILifecycleState.
func (c *CILifecycleStateClient) Delete() *CILifecycleStateDelete {
	mutation := newCILifecycleStateMutation(c.config, OpDelete)
	return &CILifecycleStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CILifecycleStateClient) DeleteOne(cls *CILifecycleState) *CILifecycleStateDeleteOne {
	return c.DeleteOneID(cls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CILifecycleStateClient) DeleteOneID(id int) *CILifecycleStateDeleteOne {
	builder := c.Delete().Where(cilifecyclestate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CILifecycleStateDeleteOne{builder}
}

// Query returns a query builder for CILifecycleState.
func (c *CILifecycleStateClient) Query() *CILifecycleStateQuery {
	return &CILifecycleStateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCILifecycleState},
		inters: c.Interceptors(),
	}
}

// Get returns a CILifecycleState entity by its id.
func (c *CILifecycleStateClient) Get(ctx context.Context, id int) (*CILifecycleState, error) {
	return c.Query().Where(cilifecyclestate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CILifecycleStateClient) GetX(ctx context.Context, id int) *CILifecycleState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CILifecycleState.
func (c *CILifecycleStateClient) QueryTenant(cls *CILifecycleState) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cilifecyclestate.Table, cilifecyclestate.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cilifecyclestate.TenantTable, cilifecyclestate.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfigurationItem queries the configuration_item edge of a CILifecycleState.
func (c *CILifecycleStateClient) QueryConfigurationItem(cls *CILifecycleState) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cilifecyclestate.Table, cilifecyclestate.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cilifecyclestate.ConfigurationItemTable, cilifecyclestate.ConfigurationItemColumn),
		)
		fromV = sqlgraph.Neighbors(cls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CILifecycleStateClient) Hooks() []Hook {
	return c.hooks.CILifecycleState
}

// Interceptors returns the client interceptors.
func (c *CILifecycleStateClient) Interceptors() []Interceptor {
	return c.inters.CILifecycleState
}

func (c *CILifecycleStateClient) mutate(ctx context.Context, m *CILifecycleStateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CILifecycleStateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CILifecycleStateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CILifecycleStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CILifecycleStateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CILifecycleState mutation op: %q", m.Op())
	}
}

// CIRelationshipClient is a client for the CIRelationship schema.
type CIRelationshipClient struct {
	config
}

// NewCIRelationshipClient returns a client for the CIRelationship from the given config.
func NewCIRelationshipClient(c config) *CIRelationshipClient {
	return &CIRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cirelationship.Hooks(f(g(h())))`.
func (c *CIRelationshipClient) Use(hooks ...Hook) {
	c.hooks.CIRelationship = append(c.hooks.CIRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cirelationship.Intercept(f(g(h())))`.
func (c *CIRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIRelationship = append(c.inters.CIRelationship, interceptors...)
}

// Create returns a builder for creating a CIRelationship entity.
func (c *CIRelationshipClient) Create() *CIRelationshipCreate {
	mutation := newCIRelationshipMutation(c.config, OpCreate)
	return &CIRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIRelationship entities.
func (c *CIRelationshipClient) CreateBulk(builders ...*CIRelationshipCreate) *CIRelationshipCreateBulk {
	return &CIRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIRelationshipClient) MapCreateBulk(slice any, setFunc func(*CIRelationshipCreate, int)) *CIRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIRelationshipCreateBulk{err: fmt.Errorf("calling to CIRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIRelationship.
func (c *CIRelationshipClient) Update() *CIRelationshipUpdate {
	mutation := newCIRelationshipMutation(c.config, OpUpdate)
	return &CIRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIRelationshipClient) UpdateOne(cr *CIRelationship) *CIRelationshipUpdateOne {
	mutation := newCIRelationshipMutation(c.config, OpUpdateOne, withCIRelationship(cr))
	return &CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIRelationshipClient) UpdateOneID(id int) *CIRelationshipUpdateOne {
	mutation := newCIRelationshipMutation(c.config, OpUpdateOne, withCIRelationshipID(id))
	return &CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIRelationship.
func (c *CIRelationshipClient) Delete() *CIRelationshipDelete {
	mutation := newCIRelationshipMutation(c.config, OpDelete)
	return &CIRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIRelationshipClient) DeleteOne(cr *CIRelationship) *CIRelationshipDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIRelationshipClient) DeleteOneID(id int) *CIRelationshipDeleteOne {
	builder := c.Delete().Where(cirelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIRelationshipDeleteOne{builder}
}

// Query returns a query builder for CIRelationship.
func (c *CIRelationshipClient) Query() *CIRelationshipQuery {
	return &CIRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a CIRelationship entity by its id.
func (c *CIRelationshipClient) Get(ctx context.Context, id int) (*CIRelationship, error) {
	return c.Query().Where(cirelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIRelationshipClient) GetX(ctx context.Context, id int) *CIRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CIRelationship.
func (c *CIRelationshipClient) QueryTenant(cr *CIRelationship) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationship.Table, cirelationship.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationship.TenantTable, cirelationship.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceCi queries the source_ci edge of a CIRelationship.
func (c *CIRelationshipClient) QuerySourceCi(cr *CIRelationship) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationship.Table, cirelationship.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationship.SourceCiTable, cirelationship.SourceCiColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetCi queries the target_ci edge of a CIRelationship.
func (c *CIRelationshipClient) QueryTargetCi(cr *CIRelationship) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationship.Table, cirelationship.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationship.TargetCiTable, cirelationship.TargetCiColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelationshipType queries the relationship_type edge of a CIRelationship.
func (c *CIRelationshipClient) QueryRelationshipType(cr *CIRelationship) *CIRelationshipTypeQuery {
	query := (&CIRelationshipTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationship.Table, cirelationship.FieldID, id),
			sqlgraph.To(cirelationshiptype.Table, cirelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationship.RelationshipTypeTable, cirelationship.RelationshipTypeColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CIRelationshipClient) Hooks() []Hook {
	return c.hooks.CIRelationship
}

// Interceptors returns the client interceptors.
func (c *CIRelationshipClient) Interceptors() []Interceptor {
	return c.inters.CIRelationship
}

func (c *CIRelationshipClient) mutate(ctx context.Context, m *CIRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIRelationship mutation op: %q", m.Op())
	}
}

// CIRelationshipTypeClient is a client for the CIRelationshipType schema.
type CIRelationshipTypeClient struct {
	config
}

// NewCIRelationshipTypeClient returns a client for the CIRelationshipType from the given config.
func NewCIRelationshipTypeClient(c config) *CIRelationshipTypeClient {
	return &CIRelationshipTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cirelationshiptype.Hooks(f(g(h())))`.
func (c *CIRelationshipTypeClient) Use(hooks ...Hook) {
	c.hooks.CIRelationshipType = append(c.hooks.CIRelationshipType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cirelationshiptype.Intercept(f(g(h())))`.
func (c *CIRelationshipTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIRelationshipType = append(c.inters.CIRelationshipType, interceptors...)
}

// Create returns a builder for creating a CIRelationshipType entity.
func (c *CIRelationshipTypeClient) Create() *CIRelationshipTypeCreate {
	mutation := newCIRelationshipTypeMutation(c.config, OpCreate)
	return &CIRelationshipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIRelationshipType entities.
func (c *CIRelationshipTypeClient) CreateBulk(builders ...*CIRelationshipTypeCreate) *CIRelationshipTypeCreateBulk {
	return &CIRelationshipTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIRelationshipTypeClient) MapCreateBulk(slice any, setFunc func(*CIRelationshipTypeCreate, int)) *CIRelationshipTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIRelationshipTypeCreateBulk{err: fmt.Errorf("calling to CIRelationshipTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIRelationshipTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIRelationshipTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIRelationshipType.
func (c *CIRelationshipTypeClient) Update() *CIRelationshipTypeUpdate {
	mutation := newCIRelationshipTypeMutation(c.config, OpUpdate)
	return &CIRelationshipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIRelationshipTypeClient) UpdateOne(crt *CIRelationshipType) *CIRelationshipTypeUpdateOne {
	mutation := newCIRelationshipTypeMutation(c.config, OpUpdateOne, withCIRelationshipType(crt))
	return &CIRelationshipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIRelationshipTypeClient) UpdateOneID(id int) *CIRelationshipTypeUpdateOne {
	mutation := newCIRelationshipTypeMutation(c.config, OpUpdateOne, withCIRelationshipTypeID(id))
	return &CIRelationshipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIRelationshipType.
func (c *CIRelationshipTypeClient) Delete() *CIRelationshipTypeDelete {
	mutation := newCIRelationshipTypeMutation(c.config, OpDelete)
	return &CIRelationshipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIRelationshipTypeClient) DeleteOne(crt *CIRelationshipType) *CIRelationshipTypeDeleteOne {
	return c.DeleteOneID(crt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIRelationshipTypeClient) DeleteOneID(id int) *CIRelationshipTypeDeleteOne {
	builder := c.Delete().Where(cirelationshiptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIRelationshipTypeDeleteOne{builder}
}

// Query returns a query builder for CIRelationshipType.
func (c *CIRelationshipTypeClient) Query() *CIRelationshipTypeQuery {
	return &CIRelationshipTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIRelationshipType},
		inters: c.Interceptors(),
	}
}

// Get returns a CIRelationshipType entity by its id.
func (c *CIRelationshipTypeClient) Get(ctx context.Context, id int) (*CIRelationshipType, error) {
	return c.Query().Where(cirelationshiptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIRelationshipTypeClient) GetX(ctx context.Context, id int) *CIRelationshipType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CIRelationshipType.
func (c *CIRelationshipTypeClient) QueryTenant(crt *CIRelationshipType) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := crt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationshiptype.Table, cirelationshiptype.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cirelationshiptype.TenantTable, cirelationshiptype.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(crt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelationships queries the relationships edge of a CIRelationshipType.
func (c *CIRelationshipTypeClient) QueryRelationships(crt *CIRelationshipType) *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := crt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cirelationshiptype.Table, cirelationshiptype.FieldID, id),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cirelationshiptype.RelationshipsTable, cirelationshiptype.RelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(crt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CIRelationshipTypeClient) Hooks() []Hook {
	return c.hooks.CIRelationshipType
}

// Interceptors returns the client interceptors.
func (c *CIRelationshipTypeClient) Interceptors() []Interceptor {
	return c.inters.CIRelationshipType
}

func (c *CIRelationshipTypeClient) mutate(ctx context.Context, m *CIRelationshipTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIRelationshipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIRelationshipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIRelationshipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIRelationshipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIRelationshipType mutation op: %q", m.Op())
	}
}

// CITypeClient is a client for the CIType schema.
type CITypeClient struct {
	config
}

// NewCITypeClient returns a client for the CIType from the given config.
func NewCITypeClient(c config) *CITypeClient {
	return &CITypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `citype.Hooks(f(g(h())))`.
func (c *CITypeClient) Use(hooks ...Hook) {
	c.hooks.CIType = append(c.hooks.CIType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `citype.Intercept(f(g(h())))`.
func (c *CITypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIType = append(c.inters.CIType, interceptors...)
}

// Create returns a builder for creating a CIType entity.
func (c *CITypeClient) Create() *CITypeCreate {
	mutation := newCITypeMutation(c.config, OpCreate)
	return &CITypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIType entities.
func (c *CITypeClient) CreateBulk(builders ...*CITypeCreate) *CITypeCreateBulk {
	return &CITypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CITypeClient) MapCreateBulk(slice any, setFunc func(*CITypeCreate, int)) *CITypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CITypeCreateBulk{err: fmt.Errorf("calling to CITypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CITypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CITypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIType.
func (c *CITypeClient) Update() *CITypeUpdate {
	mutation := newCITypeMutation(c.config, OpUpdate)
	return &CITypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CITypeClient) UpdateOne(ct *CIType) *CITypeUpdateOne {
	mutation := newCITypeMutation(c.config, OpUpdateOne, withCIType(ct))
	return &CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CITypeClient) UpdateOneID(id int) *CITypeUpdateOne {
	mutation := newCITypeMutation(c.config, OpUpdateOne, withCITypeID(id))
	return &CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIType.
func (c *CITypeClient) Delete() *CITypeDelete {
	mutation := newCITypeMutation(c.config, OpDelete)
	return &CITypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CITypeClient) DeleteOne(ct *CIType) *CITypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CITypeClient) DeleteOneID(id int) *CITypeDeleteOne {
	builder := c.Delete().Where(citype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CITypeDeleteOne{builder}
}

// Query returns a query builder for CIType.
func (c *CITypeClient) Query() *CITypeQuery {
	return &CITypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIType},
		inters: c.Interceptors(),
	}
}

// Get returns a CIType entity by its id.
func (c *CITypeClient) Get(ctx context.Context, id int) (*CIType, error) {
	return c.Query().Where(citype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CITypeClient) GetX(ctx context.Context, id int) *CIType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CIType.
func (c *CITypeClient) QueryTenant(ct *CIType) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(citype.Table, citype.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, citype.TenantTable, citype.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfigurationItems queries the configuration_items edge of a CIType.
func (c *CITypeClient) QueryConfigurationItems(ct *CIType) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(citype.Table, citype.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, citype.ConfigurationItemsTable, citype.ConfigurationItemsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllowedRelationships queries the allowed_relationships edge of a CIType.
func (c *CITypeClient) QueryAllowedRelationships(ct *CIType) *CIRelationshipTypeQuery {
	query := (&CIRelationshipTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(citype.Table, citype.FieldID, id),
			sqlgraph.To(cirelationshiptype.Table, cirelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, citype.AllowedRelationshipsTable, citype.AllowedRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttributeDefinitions queries the attribute_definitions edge of a CIType.
func (c *CITypeClient) QueryAttributeDefinitions(ct *CIType) *CIAttributeDefinitionQuery {
	query := (&CIAttributeDefinitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(citype.Table, citype.FieldID, id),
			sqlgraph.To(ciattributedefinition.Table, ciattributedefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, citype.AttributeDefinitionsTable, citype.AttributeDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CITypeClient) Hooks() []Hook {
	return c.hooks.CIType
}

// Interceptors returns the client interceptors.
func (c *CITypeClient) Interceptors() []Interceptor {
	return c.inters.CIType
}

func (c *CITypeClient) mutate(ctx context.Context, m *CITypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CITypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CITypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CITypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIType mutation op: %q", m.Op())
	}
}

// ConfigurationItemClient is a client for the ConfigurationItem schema.
type ConfigurationItemClient struct {
	config
}

// NewConfigurationItemClient returns a client for the ConfigurationItem from the given config.
func NewConfigurationItemClient(c config) *ConfigurationItemClient {
	return &ConfigurationItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configurationitem.Hooks(f(g(h())))`.
func (c *ConfigurationItemClient) Use(hooks ...Hook) {
	c.hooks.ConfigurationItem = append(c.hooks.ConfigurationItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `configurationitem.Intercept(f(g(h())))`.
func (c *ConfigurationItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConfigurationItem = append(c.inters.ConfigurationItem, interceptors...)
}

// Create returns a builder for creating a ConfigurationItem entity.
func (c *ConfigurationItemClient) Create() *ConfigurationItemCreate {
	mutation := newConfigurationItemMutation(c.config, OpCreate)
	return &ConfigurationItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConfigurationItem entities.
func (c *ConfigurationItemClient) CreateBulk(builders ...*ConfigurationItemCreate) *ConfigurationItemCreateBulk {
	return &ConfigurationItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConfigurationItemClient) MapCreateBulk(slice any, setFunc func(*ConfigurationItemCreate, int)) *ConfigurationItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConfigurationItemCreateBulk{err: fmt.Errorf("calling to ConfigurationItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConfigurationItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConfigurationItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConfigurationItem.
func (c *ConfigurationItemClient) Update() *ConfigurationItemUpdate {
	mutation := newConfigurationItemMutation(c.config, OpUpdate)
	return &ConfigurationItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigurationItemClient) UpdateOne(ci *ConfigurationItem) *ConfigurationItemUpdateOne {
	mutation := newConfigurationItemMutation(c.config, OpUpdateOne, withConfigurationItem(ci))
	return &ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigurationItemClient) UpdateOneID(id int) *ConfigurationItemUpdateOne {
	mutation := newConfigurationItemMutation(c.config, OpUpdateOne, withConfigurationItemID(id))
	return &ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConfigurationItem.
func (c *ConfigurationItemClient) Delete() *ConfigurationItemDelete {
	mutation := newConfigurationItemMutation(c.config, OpDelete)
	return &ConfigurationItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConfigurationItemClient) DeleteOne(ci *ConfigurationItem) *ConfigurationItemDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConfigurationItemClient) DeleteOneID(id int) *ConfigurationItemDeleteOne {
	builder := c.Delete().Where(configurationitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigurationItemDeleteOne{builder}
}

// Query returns a query builder for ConfigurationItem.
func (c *ConfigurationItemClient) Query() *ConfigurationItemQuery {
	return &ConfigurationItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConfigurationItem},
		inters: c.Interceptors(),
	}
}

// Get returns a ConfigurationItem entity by its id.
func (c *ConfigurationItemClient) Get(ctx context.Context, id int) (*ConfigurationItem, error) {
	return c.Query().Where(configurationitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigurationItemClient) GetX(ctx context.Context, id int) *ConfigurationItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryTenant(ci *ConfigurationItem) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, configurationitem.TenantTable, configurationitem.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiType queries the ci_type edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryCiType(ci *ConfigurationItem) *CITypeQuery {
	query := (&CITypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(citype.Table, citype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, configurationitem.CiTypeTable, configurationitem.CiTypeColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutgoingRelationships queries the outgoing_relationships edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryOutgoingRelationships(ci *ConfigurationItem) *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.OutgoingRelationshipsTable, configurationitem.OutgoingRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncomingRelationships queries the incoming_relationships edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryIncomingRelationships(ci *ConfigurationItem) *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.IncomingRelationshipsTable, configurationitem.IncomingRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLifecycleStates queries the lifecycle_states edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryLifecycleStates(ci *ConfigurationItem) *CILifecycleStateQuery {
	query := (&CILifecycleStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(cilifecyclestate.Table, cilifecyclestate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.LifecycleStatesTable, configurationitem.LifecycleStatesColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeRecords queries the change_records edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryChangeRecords(ci *ConfigurationItem) *CIChangeRecordQuery {
	query := (&CIChangeRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(cichangerecord.Table, cichangerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.ChangeRecordsTable, configurationitem.ChangeRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncidents queries the incidents edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryIncidents(ci *ConfigurationItem) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.IncidentsTable, configurationitem.IncidentsColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChanges queries the changes edge of a ConfigurationItem.
func (c *ConfigurationItemClient) QueryChanges(ci *ConfigurationItem) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(configurationitem.Table, configurationitem.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, configurationitem.ChangesTable, configurationitem.ChangesColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConfigurationItemClient) Hooks() []Hook {
	return c.hooks.ConfigurationItem
}

// Interceptors returns the client interceptors.
func (c *ConfigurationItemClient) Interceptors() []Interceptor {
	return c.inters.ConfigurationItem
}

func (c *ConfigurationItemClient) mutate(ctx context.Context, m *ConfigurationItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConfigurationItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConfigurationItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConfigurationItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConfigurationItem mutation op: %q", m.Op())
	}
}

// FlowInstanceClient is a client for the FlowInstance schema.
type FlowInstanceClient struct {
	config
}

// NewFlowInstanceClient returns a client for the FlowInstance from the given config.
func NewFlowInstanceClient(c config) *FlowInstanceClient {
	return &FlowInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowinstance.Hooks(f(g(h())))`.
func (c *FlowInstanceClient) Use(hooks ...Hook) {
	c.hooks.FlowInstance = append(c.hooks.FlowInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `flowinstance.Intercept(f(g(h())))`.
func (c *FlowInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.FlowInstance = append(c.inters.FlowInstance, interceptors...)
}

// Create returns a builder for creating a FlowInstance entity.
func (c *FlowInstanceClient) Create() *FlowInstanceCreate {
	mutation := newFlowInstanceMutation(c.config, OpCreate)
	return &FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowInstance entities.
func (c *FlowInstanceClient) CreateBulk(builders ...*FlowInstanceCreate) *FlowInstanceCreateBulk {
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FlowInstanceClient) MapCreateBulk(slice any, setFunc func(*FlowInstanceCreate, int)) *FlowInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FlowInstanceCreateBulk{err: fmt.Errorf("calling to FlowInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FlowInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowInstance.
func (c *FlowInstanceClient) Update() *FlowInstanceUpdate {
	mutation := newFlowInstanceMutation(c.config, OpUpdate)
	return &FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowInstanceClient) UpdateOne(fi *FlowInstance) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstance(fi))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowInstanceClient) UpdateOneID(id int) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstanceID(id))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowInstance.
func (c *FlowInstanceClient) Delete() *FlowInstanceDelete {
	mutation := newFlowInstanceMutation(c.config, OpDelete)
	return &FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FlowInstanceClient) DeleteOne(fi *FlowInstance) *FlowInstanceDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FlowInstanceClient) DeleteOneID(id int) *FlowInstanceDeleteOne {
	builder := c.Delete().Where(flowinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowInstanceDeleteOne{builder}
}

// Query returns a query builder for FlowInstance.
func (c *FlowInstanceClient) Query() *FlowInstanceQuery {
	return &FlowInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFlowInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a FlowInstance entity by its id.
func (c *FlowInstanceClient) Get(ctx context.Context, id int) (*FlowInstance, error) {
	return c.Query().Where(flowinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowInstanceClient) GetX(ctx context.Context, id int) *FlowInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicket queries the ticket edge of a FlowInstance.
func (c *FlowInstanceClient) QueryTicket(fi *FlowInstance) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, flowinstance.TicketTable, flowinstance.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowInstanceClient) Hooks() []Hook {
	return c.hooks.FlowInstance
}

// Interceptors returns the client interceptors.
func (c *FlowInstanceClient) Interceptors() []Interceptor {
	return c.inters.FlowInstance
}

func (c *FlowInstanceClient) mutate(ctx context.Context, m *FlowInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FlowInstance mutation op: %q", m.Op())
	}
}

// IncidentClient is a client for the Incident schema.
type IncidentClient struct {
	config
}

// NewIncidentClient returns a client for the Incident from the given config.
func NewIncidentClient(c config) *IncidentClient {
	return &IncidentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `incident.Hooks(f(g(h())))`.
func (c *IncidentClient) Use(hooks ...Hook) {
	c.hooks.Incident = append(c.hooks.Incident, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `incident.Intercept(f(g(h())))`.
func (c *IncidentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Incident = append(c.inters.Incident, interceptors...)
}

// Create returns a builder for creating a Incident entity.
func (c *IncidentClient) Create() *IncidentCreate {
	mutation := newIncidentMutation(c.config, OpCreate)
	return &IncidentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Incident entities.
func (c *IncidentClient) CreateBulk(builders ...*IncidentCreate) *IncidentCreateBulk {
	return &IncidentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IncidentClient) MapCreateBulk(slice any, setFunc func(*IncidentCreate, int)) *IncidentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IncidentCreateBulk{err: fmt.Errorf("calling to IncidentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IncidentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IncidentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Incident.
func (c *IncidentClient) Update() *IncidentUpdate {
	mutation := newIncidentMutation(c.config, OpUpdate)
	return &IncidentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IncidentClient) UpdateOne(i *Incident) *IncidentUpdateOne {
	mutation := newIncidentMutation(c.config, OpUpdateOne, withIncident(i))
	return &IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IncidentClient) UpdateOneID(id int) *IncidentUpdateOne {
	mutation := newIncidentMutation(c.config, OpUpdateOne, withIncidentID(id))
	return &IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Incident.
func (c *IncidentClient) Delete() *IncidentDelete {
	mutation := newIncidentMutation(c.config, OpDelete)
	return &IncidentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IncidentClient) DeleteOne(i *Incident) *IncidentDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IncidentClient) DeleteOneID(id int) *IncidentDeleteOne {
	builder := c.Delete().Where(incident.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IncidentDeleteOne{builder}
}

// Query returns a query builder for Incident.
func (c *IncidentClient) Query() *IncidentQuery {
	return &IncidentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIncident},
		inters: c.Interceptors(),
	}
}

// Get returns a Incident entity by its id.
func (c *IncidentClient) Get(ctx context.Context, id int) (*Incident, error) {
	return c.Query().Where(incident.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IncidentClient) GetX(ctx context.Context, id int) *Incident {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Incident.
func (c *IncidentClient) QueryTenant(i *Incident) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incident.TenantTable, incident.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReporter queries the reporter edge of a Incident.
func (c *IncidentClient) QueryReporter(i *Incident) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incident.ReporterTable, incident.ReporterColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignee queries the assignee edge of a Incident.
func (c *IncidentClient) QueryAssignee(i *Incident) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, incident.AssigneeTable, incident.AssigneeColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAffectedConfigurationItems queries the affected_configuration_items edge of a Incident.
func (c *IncidentClient) QueryAffectedConfigurationItems(i *Incident) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.AffectedConfigurationItemsTable, incident.AffectedConfigurationItemsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelatedProblems queries the related_problems edge of a Incident.
func (c *IncidentClient) QueryRelatedProblems(i *Incident) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.RelatedProblemsTable, incident.RelatedProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelatedChanges queries the related_changes edge of a Incident.
func (c *IncidentClient) QueryRelatedChanges(i *Incident) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.RelatedChangesTable, incident.RelatedChangesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusLogs queries the status_logs edge of a Incident.
func (c *IncidentClient) QueryStatusLogs(i *Incident) *StatusLogQuery {
	query := (&StatusLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(statuslog.Table, statuslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.StatusLogsTable, incident.StatusLogsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a Incident.
func (c *IncidentClient) QueryComments(i *Incident) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incident.Table, incident.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, incident.CommentsTable, incident.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IncidentClient) Hooks() []Hook {
	return c.hooks.Incident
}

// Interceptors returns the client interceptors.
func (c *IncidentClient) Interceptors() []Interceptor {
	return c.inters.Incident
}

func (c *IncidentClient) mutate(ctx context.Context, m *IncidentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IncidentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IncidentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IncidentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Incident mutation op: %q", m.Op())
	}
}

// KnowledgeArticleClient is a client for the KnowledgeArticle schema.
type KnowledgeArticleClient struct {
	config
}

// NewKnowledgeArticleClient returns a client for the KnowledgeArticle from the given config.
func NewKnowledgeArticleClient(c config) *KnowledgeArticleClient {
	return &KnowledgeArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `knowledgearticle.Hooks(f(g(h())))`.
func (c *KnowledgeArticleClient) Use(hooks ...Hook) {
	c.hooks.KnowledgeArticle = append(c.hooks.KnowledgeArticle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `knowledgearticle.Intercept(f(g(h())))`.
func (c *KnowledgeArticleClient) Intercept(interceptors ...Interceptor) {
	c.inters.KnowledgeArticle = append(c.inters.KnowledgeArticle, interceptors...)
}

// Create returns a builder for creating a KnowledgeArticle entity.
func (c *KnowledgeArticleClient) Create() *KnowledgeArticleCreate {
	mutation := newKnowledgeArticleMutation(c.config, OpCreate)
	return &KnowledgeArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KnowledgeArticle entities.
func (c *KnowledgeArticleClient) CreateBulk(builders ...*KnowledgeArticleCreate) *KnowledgeArticleCreateBulk {
	return &KnowledgeArticleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KnowledgeArticleClient) MapCreateBulk(slice any, setFunc func(*KnowledgeArticleCreate, int)) *KnowledgeArticleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KnowledgeArticleCreateBulk{err: fmt.Errorf("calling to KnowledgeArticleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KnowledgeArticleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KnowledgeArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Update() *KnowledgeArticleUpdate {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdate)
	return &KnowledgeArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KnowledgeArticleClient) UpdateOne(ka *KnowledgeArticle) *KnowledgeArticleUpdateOne {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdateOne, withKnowledgeArticle(ka))
	return &KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KnowledgeArticleClient) UpdateOneID(id int) *KnowledgeArticleUpdateOne {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdateOne, withKnowledgeArticleID(id))
	return &KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Delete() *KnowledgeArticleDelete {
	mutation := newKnowledgeArticleMutation(c.config, OpDelete)
	return &KnowledgeArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KnowledgeArticleClient) DeleteOne(ka *KnowledgeArticle) *KnowledgeArticleDeleteOne {
	return c.DeleteOneID(ka.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KnowledgeArticleClient) DeleteOneID(id int) *KnowledgeArticleDeleteOne {
	builder := c.Delete().Where(knowledgearticle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KnowledgeArticleDeleteOne{builder}
}

// Query returns a query builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Query() *KnowledgeArticleQuery {
	return &KnowledgeArticleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKnowledgeArticle},
		inters: c.Interceptors(),
	}
}

// Get returns a KnowledgeArticle entity by its id.
func (c *KnowledgeArticleClient) Get(ctx context.Context, id int) (*KnowledgeArticle, error) {
	return c.Query().Where(knowledgearticle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KnowledgeArticleClient) GetX(ctx context.Context, id int) *KnowledgeArticle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a KnowledgeArticle.
func (c *KnowledgeArticleClient) QueryTenant(ka *KnowledgeArticle) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ka.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(knowledgearticle.Table, knowledgearticle.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, knowledgearticle.TenantTable, knowledgearticle.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ka.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KnowledgeArticleClient) Hooks() []Hook {
	return c.hooks.KnowledgeArticle
}

// Interceptors returns the client interceptors.
func (c *KnowledgeArticleClient) Interceptors() []Interceptor {
	return c.inters.KnowledgeArticle
}

func (c *KnowledgeArticleClient) mutate(ctx context.Context, m *KnowledgeArticleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KnowledgeArticleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KnowledgeArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KnowledgeArticleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KnowledgeArticle mutation op: %q", m.Op())
	}
}

// ServiceCatalogClient is a client for the ServiceCatalog schema.
type ServiceCatalogClient struct {
	config
}

// NewServiceCatalogClient returns a client for the ServiceCatalog from the given config.
func NewServiceCatalogClient(c config) *ServiceCatalogClient {
	return &ServiceCatalogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicecatalog.Hooks(f(g(h())))`.
func (c *ServiceCatalogClient) Use(hooks ...Hook) {
	c.hooks.ServiceCatalog = append(c.hooks.ServiceCatalog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicecatalog.Intercept(f(g(h())))`.
func (c *ServiceCatalogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceCatalog = append(c.inters.ServiceCatalog, interceptors...)
}

// Create returns a builder for creating a ServiceCatalog entity.
func (c *ServiceCatalogClient) Create() *ServiceCatalogCreate {
	mutation := newServiceCatalogMutation(c.config, OpCreate)
	return &ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceCatalog entities.
func (c *ServiceCatalogClient) CreateBulk(builders ...*ServiceCatalogCreate) *ServiceCatalogCreateBulk {
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceCatalogClient) MapCreateBulk(slice any, setFunc func(*ServiceCatalogCreate, int)) *ServiceCatalogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceCatalogCreateBulk{err: fmt.Errorf("calling to ServiceCatalogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceCatalogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceCatalog.
func (c *ServiceCatalogClient) Update() *ServiceCatalogUpdate {
	mutation := newServiceCatalogMutation(c.config, OpUpdate)
	return &ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceCatalogClient) UpdateOne(sc *ServiceCatalog) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalog(sc))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceCatalogClient) UpdateOneID(id int) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalogID(id))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceCatalog.
func (c *ServiceCatalogClient) Delete() *ServiceCatalogDelete {
	mutation := newServiceCatalogMutation(c.config, OpDelete)
	return &ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceCatalogClient) DeleteOne(sc *ServiceCatalog) *ServiceCatalogDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceCatalogClient) DeleteOneID(id int) *ServiceCatalogDeleteOne {
	builder := c.Delete().Where(servicecatalog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceCatalogDeleteOne{builder}
}

// Query returns a query builder for ServiceCatalog.
func (c *ServiceCatalogClient) Query() *ServiceCatalogQuery {
	return &ServiceCatalogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceCatalog},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceCatalog entity by its id.
func (c *ServiceCatalogClient) Get(ctx context.Context, id int) (*ServiceCatalog, error) {
	return c.Query().Where(servicecatalog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceCatalogClient) GetX(ctx context.Context, id int) *ServiceCatalog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ServiceCatalog.
func (c *ServiceCatalogClient) QueryTenant(sc *ServiceCatalog) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicecatalog.Table, servicecatalog.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicecatalog.TenantTable, servicecatalog.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRequests queries the service_requests edge of a ServiceCatalog.
func (c *ServiceCatalogClient) QueryServiceRequests(sc *ServiceCatalog) *ServiceRequestQuery {
	query := (&ServiceRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicecatalog.Table, servicecatalog.FieldID, id),
			sqlgraph.To(servicerequest.Table, servicerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicecatalog.ServiceRequestsTable, servicecatalog.ServiceRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceCatalogClient) Hooks() []Hook {
	return c.hooks.ServiceCatalog
}

// Interceptors returns the client interceptors.
func (c *ServiceCatalogClient) Interceptors() []Interceptor {
	return c.inters.ServiceCatalog
}

func (c *ServiceCatalogClient) mutate(ctx context.Context, m *ServiceCatalogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceCatalog mutation op: %q", m.Op())
	}
}

// ServiceRequestClient is a client for the ServiceRequest schema.
type ServiceRequestClient struct {
	config
}

// NewServiceRequestClient returns a client for the ServiceRequest from the given config.
func NewServiceRequestClient(c config) *ServiceRequestClient {
	return &ServiceRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicerequest.Hooks(f(g(h())))`.
func (c *ServiceRequestClient) Use(hooks ...Hook) {
	c.hooks.ServiceRequest = append(c.hooks.ServiceRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicerequest.Intercept(f(g(h())))`.
func (c *ServiceRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceRequest = append(c.inters.ServiceRequest, interceptors...)
}

// Create returns a builder for creating a ServiceRequest entity.
func (c *ServiceRequestClient) Create() *ServiceRequestCreate {
	mutation := newServiceRequestMutation(c.config, OpCreate)
	return &ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceRequest entities.
func (c *ServiceRequestClient) CreateBulk(builders ...*ServiceRequestCreate) *ServiceRequestCreateBulk {
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceRequestClient) MapCreateBulk(slice any, setFunc func(*ServiceRequestCreate, int)) *ServiceRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceRequestCreateBulk{err: fmt.Errorf("calling to ServiceRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceRequest.
func (c *ServiceRequestClient) Update() *ServiceRequestUpdate {
	mutation := newServiceRequestMutation(c.config, OpUpdate)
	return &ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceRequestClient) UpdateOne(sr *ServiceRequest) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequest(sr))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceRequestClient) UpdateOneID(id int) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequestID(id))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceRequest.
func (c *ServiceRequestClient) Delete() *ServiceRequestDelete {
	mutation := newServiceRequestMutation(c.config, OpDelete)
	return &ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceRequestClient) DeleteOne(sr *ServiceRequest) *ServiceRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceRequestClient) DeleteOneID(id int) *ServiceRequestDeleteOne {
	builder := c.Delete().Where(servicerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceRequestDeleteOne{builder}
}

// Query returns a query builder for ServiceRequest.
func (c *ServiceRequestClient) Query() *ServiceRequestQuery {
	return &ServiceRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceRequest entity by its id.
func (c *ServiceRequestClient) Get(ctx context.Context, id int) (*ServiceRequest, error) {
	return c.Query().Where(servicerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceRequestClient) GetX(ctx context.Context, id int) *ServiceRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ServiceRequest.
func (c *ServiceRequestClient) QueryTenant(sr *ServiceRequest) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerequest.Table, servicerequest.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerequest.TenantTable, servicerequest.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCatalog queries the catalog edge of a ServiceRequest.
func (c *ServiceRequestClient) QueryCatalog(sr *ServiceRequest) *ServiceCatalogQuery {
	query := (&ServiceCatalogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerequest.Table, servicerequest.FieldID, id),
			sqlgraph.To(servicecatalog.Table, servicecatalog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerequest.CatalogTable, servicerequest.CatalogColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequester queries the requester edge of a ServiceRequest.
func (c *ServiceRequestClient) QueryRequester(sr *ServiceRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerequest.Table, servicerequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerequest.RequesterTable, servicerequest.RequesterColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceRequestClient) Hooks() []Hook {
	return c.hooks.ServiceRequest
}

// Interceptors returns the client interceptors.
func (c *ServiceRequestClient) Interceptors() []Interceptor {
	return c.inters.ServiceRequest
}

func (c *ServiceRequestClient) mutate(ctx context.Context, m *ServiceRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceRequest mutation op: %q", m.Op())
	}
}

// StatusLogClient is a client for the StatusLog schema.
type StatusLogClient struct {
	config
}

// NewStatusLogClient returns a client for the StatusLog from the given config.
func NewStatusLogClient(c config) *StatusLogClient {
	return &StatusLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statuslog.Hooks(f(g(h())))`.
func (c *StatusLogClient) Use(hooks ...Hook) {
	c.hooks.StatusLog = append(c.hooks.StatusLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `statuslog.Intercept(f(g(h())))`.
func (c *StatusLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.StatusLog = append(c.inters.StatusLog, interceptors...)
}

// Create returns a builder for creating a StatusLog entity.
func (c *StatusLogClient) Create() *StatusLogCreate {
	mutation := newStatusLogMutation(c.config, OpCreate)
	return &StatusLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusLog entities.
func (c *StatusLogClient) CreateBulk(builders ...*StatusLogCreate) *StatusLogCreateBulk {
	return &StatusLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StatusLogClient) MapCreateBulk(slice any, setFunc func(*StatusLogCreate, int)) *StatusLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StatusLogCreateBulk{err: fmt.Errorf("calling to StatusLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StatusLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StatusLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusLog.
func (c *StatusLogClient) Update() *StatusLogUpdate {
	mutation := newStatusLogMutation(c.config, OpUpdate)
	return &StatusLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusLogClient) UpdateOne(sl *StatusLog) *StatusLogUpdateOne {
	mutation := newStatusLogMutation(c.config, OpUpdateOne, withStatusLog(sl))
	return &StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusLogClient) UpdateOneID(id int) *StatusLogUpdateOne {
	mutation := newStatusLogMutation(c.config, OpUpdateOne, withStatusLogID(id))
	return &StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusLog.
func (c *StatusLogClient) Delete() *StatusLogDelete {
	mutation := newStatusLogMutation(c.config, OpDelete)
	return &StatusLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatusLogClient) DeleteOne(sl *StatusLog) *StatusLogDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatusLogClient) DeleteOneID(id int) *StatusLogDeleteOne {
	builder := c.Delete().Where(statuslog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusLogDeleteOne{builder}
}

// Query returns a query builder for StatusLog.
func (c *StatusLogClient) Query() *StatusLogQuery {
	return &StatusLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatusLog},
		inters: c.Interceptors(),
	}
}

// Get returns a StatusLog entity by its id.
func (c *StatusLogClient) Get(ctx context.Context, id int) (*StatusLog, error) {
	return c.Query().Where(statuslog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusLogClient) GetX(ctx context.Context, id int) *StatusLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicket queries the ticket edge of a StatusLog.
func (c *StatusLogClient) QueryTicket(sl *StatusLog) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuslog.Table, statuslog.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statuslog.TicketTable, statuslog.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a StatusLog.
func (c *StatusLogClient) QueryUser(sl *StatusLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuslog.Table, statuslog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statuslog.UserTable, statuslog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusLogClient) Hooks() []Hook {
	return c.hooks.StatusLog
}

// Interceptors returns the client interceptors.
func (c *StatusLogClient) Interceptors() []Interceptor {
	return c.inters.StatusLog
}

func (c *StatusLogClient) mutate(ctx context.Context, m *StatusLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatusLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatusLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatusLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StatusLog mutation op: %q", m.Op())
	}
}

// SubscriptionClient is a client for the Subscription schema.
type SubscriptionClient struct {
	config
}

// NewSubscriptionClient returns a client for the Subscription from the given config.
func NewSubscriptionClient(c config) *SubscriptionClient {
	return &SubscriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscription.Hooks(f(g(h())))`.
func (c *SubscriptionClient) Use(hooks ...Hook) {
	c.hooks.Subscription = append(c.hooks.Subscription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscription.Intercept(f(g(h())))`.
func (c *SubscriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscription = append(c.inters.Subscription, interceptors...)
}

// Create returns a builder for creating a Subscription entity.
func (c *SubscriptionClient) Create() *SubscriptionCreate {
	mutation := newSubscriptionMutation(c.config, OpCreate)
	return &SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscription entities.
func (c *SubscriptionClient) CreateBulk(builders ...*SubscriptionCreate) *SubscriptionCreateBulk {
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscriptionClient) MapCreateBulk(slice any, setFunc func(*SubscriptionCreate, int)) *SubscriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscriptionCreateBulk{err: fmt.Errorf("calling to SubscriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscription.
func (c *SubscriptionClient) Update() *SubscriptionUpdate {
	mutation := newSubscriptionMutation(c.config, OpUpdate)
	return &SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscriptionClient) UpdateOne(s *Subscription) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscription(s))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscriptionClient) UpdateOneID(id int) *SubscriptionUpdateOne {
	mutation := newSubscriptionMutation(c.config, OpUpdateOne, withSubscriptionID(id))
	return &SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscription.
func (c *SubscriptionClient) Delete() *SubscriptionDelete {
	mutation := newSubscriptionMutation(c.config, OpDelete)
	return &SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscriptionClient) DeleteOne(s *Subscription) *SubscriptionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscriptionClient) DeleteOneID(id int) *SubscriptionDeleteOne {
	builder := c.Delete().Where(subscription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscriptionDeleteOne{builder}
}

// Query returns a query builder for Subscription.
func (c *SubscriptionClient) Query() *SubscriptionQuery {
	return &SubscriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscription},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscription entity by its id.
func (c *SubscriptionClient) Get(ctx context.Context, id int) (*Subscription, error) {
	return c.Query().Where(subscription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscriptionClient) GetX(ctx context.Context, id int) *Subscription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Subscription.
func (c *SubscriptionClient) QueryTenant(s *Subscription) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscription.Table, subscription.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscription.TenantTable, subscription.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscriptionClient) Hooks() []Hook {
	return c.hooks.Subscription
}

// Interceptors returns the client interceptors.
func (c *SubscriptionClient) Interceptors() []Interceptor {
	return c.inters.Subscription
}

func (c *SubscriptionClient) mutate(ctx context.Context, m *SubscriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscription mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Tenant.
func (c *TenantClient) QueryUsers(t *Tenant) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.UsersTable, tenant.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTickets queries the tickets edge of a Tenant.
func (c *TenantClient) QueryTickets(t *Tenant) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.TicketsTable, tenant.TicketsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceCatalogs queries the service_catalogs edge of a Tenant.
func (c *TenantClient) QueryServiceCatalogs(t *Tenant) *ServiceCatalogQuery {
	query := (&ServiceCatalogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(servicecatalog.Table, servicecatalog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.ServiceCatalogsTable, tenant.ServiceCatalogsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRequests queries the service_requests edge of a Tenant.
func (c *TenantClient) QueryServiceRequests(t *Tenant) *ServiceRequestQuery {
	query := (&ServiceRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(servicerequest.Table, servicerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.ServiceRequestsTable, tenant.ServiceRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscriptions queries the subscriptions edge of a Tenant.
func (c *TenantClient) QuerySubscriptions(t *Tenant) *SubscriptionQuery {
	query := (&SubscriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.SubscriptionsTable, tenant.SubscriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfigurationItems queries the configuration_items edge of a Tenant.
func (c *TenantClient) QueryConfigurationItems(t *Tenant) *ConfigurationItemQuery {
	query := (&ConfigurationItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(configurationitem.Table, configurationitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.ConfigurationItemsTable, tenant.ConfigurationItemsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKnowledgeArticles queries the knowledge_articles edge of a Tenant.
func (c *TenantClient) QueryKnowledgeArticles(t *Tenant) *KnowledgeArticleQuery {
	query := (&KnowledgeArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(knowledgearticle.Table, knowledgearticle.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.KnowledgeArticlesTable, tenant.KnowledgeArticlesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkflows queries the workflows edge of a Tenant.
func (c *TenantClient) QueryWorkflows(t *Tenant) *WorkflowQuery {
	query := (&WorkflowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(workflow.Table, workflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.WorkflowsTable, tenant.WorkflowsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiTypes queries the ci_types edge of a Tenant.
func (c *TenantClient) QueryCiTypes(t *Tenant) *CITypeQuery {
	query := (&CITypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(citype.Table, citype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiTypesTable, tenant.CiTypesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiRelationshipTypes queries the ci_relationship_types edge of a Tenant.
func (c *TenantClient) QueryCiRelationshipTypes(t *Tenant) *CIRelationshipTypeQuery {
	query := (&CIRelationshipTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(cirelationshiptype.Table, cirelationshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiRelationshipTypesTable, tenant.CiRelationshipTypesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiRelationships queries the ci_relationships edge of a Tenant.
func (c *TenantClient) QueryCiRelationships(t *Tenant) *CIRelationshipQuery {
	query := (&CIRelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(cirelationship.Table, cirelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiRelationshipsTable, tenant.CiRelationshipsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiLifecycleStates queries the ci_lifecycle_states edge of a Tenant.
func (c *TenantClient) QueryCiLifecycleStates(t *Tenant) *CILifecycleStateQuery {
	query := (&CILifecycleStateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(cilifecyclestate.Table, cilifecyclestate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiLifecycleStatesTable, tenant.CiLifecycleStatesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiChangeRecords queries the ci_change_records edge of a Tenant.
func (c *TenantClient) QueryCiChangeRecords(t *Tenant) *CIChangeRecordQuery {
	query := (&CIChangeRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(cichangerecord.Table, cichangerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiChangeRecordsTable, tenant.CiChangeRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCiAttributeDefinitions queries the ci_attribute_definitions edge of a Tenant.
func (c *TenantClient) QueryCiAttributeDefinitions(t *Tenant) *CIAttributeDefinitionQuery {
	query := (&CIAttributeDefinitionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(ciattributedefinition.Table, ciattributedefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CiAttributeDefinitionsTable, tenant.CiAttributeDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncidents queries the incidents edge of a Tenant.
func (c *TenantClient) QueryIncidents(t *Tenant) *IncidentQuery {
	query := (&IncidentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.IncidentsTable, tenant.IncidentsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// TicketClient is a client for the Ticket schema.
type TicketClient struct {
	config
}

// NewTicketClient returns a client for the Ticket from the given config.
func NewTicketClient(c config) *TicketClient {
	return &TicketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticket.Hooks(f(g(h())))`.
func (c *TicketClient) Use(hooks ...Hook) {
	c.hooks.Ticket = append(c.hooks.Ticket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ticket.Intercept(f(g(h())))`.
func (c *TicketClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ticket = append(c.inters.Ticket, interceptors...)
}

// Create returns a builder for creating a Ticket entity.
func (c *TicketClient) Create() *TicketCreate {
	mutation := newTicketMutation(c.config, OpCreate)
	return &TicketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ticket entities.
func (c *TicketClient) CreateBulk(builders ...*TicketCreate) *TicketCreateBulk {
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TicketClient) MapCreateBulk(slice any, setFunc func(*TicketCreate, int)) *TicketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TicketCreateBulk{err: fmt.Errorf("calling to TicketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TicketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ticket.
func (c *TicketClient) Update() *TicketUpdate {
	mutation := newTicketMutation(c.config, OpUpdate)
	return &TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TicketClient) UpdateOne(t *Ticket) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicket(t))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TicketClient) UpdateOneID(id int) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicketID(id))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ticket.
func (c *TicketClient) Delete() *TicketDelete {
	mutation := newTicketMutation(c.config, OpDelete)
	return &TicketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TicketClient) DeleteOne(t *Ticket) *TicketDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TicketClient) DeleteOneID(id int) *TicketDeleteOne {
	builder := c.Delete().Where(ticket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TicketDeleteOne{builder}
}

// Query returns a query builder for Ticket.
func (c *TicketClient) Query() *TicketQuery {
	return &TicketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTicket},
		inters: c.Interceptors(),
	}
}

// Get returns a Ticket entity by its id.
func (c *TicketClient) Get(ctx context.Context, id int) (*Ticket, error) {
	return c.Query().Where(ticket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TicketClient) GetX(ctx context.Context, id int) *Ticket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Ticket.
func (c *TicketClient) QueryTenant(t *Ticket) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticket.TenantTable, ticket.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequester queries the requester edge of a Ticket.
func (c *TicketClient) QueryRequester(t *Ticket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticket.RequesterTable, ticket.RequesterColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignee queries the assignee edge of a Ticket.
func (c *TicketClient) QueryAssignee(t *Ticket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticket.AssigneeTable, ticket.AssigneeColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalLogs queries the approval_logs edge of a Ticket.
func (c *TicketClient) QueryApprovalLogs(t *Ticket) *ApprovalLogQuery {
	query := (&ApprovalLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(approvallog.Table, approvallog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticket.ApprovalLogsTable, ticket.ApprovalLogsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowInstance queries the flow_instance edge of a Ticket.
func (c *TicketClient) QueryFlowInstance(t *Ticket) *FlowInstanceQuery {
	query := (&FlowInstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ticket.FlowInstanceTable, ticket.FlowInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusLogs queries the status_logs edge of a Ticket.
func (c *TicketClient) QueryStatusLogs(t *Ticket) *StatusLogQuery {
	query := (&StatusLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(statuslog.Table, statuslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticket.StatusLogsTable, ticket.StatusLogsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TicketClient) Hooks() []Hook {
	return c.hooks.Ticket
}

// Interceptors returns the client interceptors.
func (c *TicketClient) Interceptors() []Interceptor {
	return c.inters.Ticket
}

func (c *TicketClient) mutate(ctx context.Context, m *TicketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TicketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TicketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ticket mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a User.
func (c *UserClient) QueryTenant(u *User) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.TenantTable, user.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubmittedTickets queries the submitted_tickets edge of a User.
func (c *UserClient) QuerySubmittedTickets(u *User) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SubmittedTicketsTable, user.SubmittedTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedTickets queries the assigned_tickets edge of a User.
func (c *UserClient) QueryAssignedTickets(u *User) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedTicketsTable, user.AssignedTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalLogs queries the approval_logs edge of a User.
func (c *UserClient) QueryApprovalLogs(u *User) *ApprovalLogQuery {
	query := (&ApprovalLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(approvallog.Table, approvallog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovalLogsTable, user.ApprovalLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusLogs queries the status_logs edge of a User.
func (c *UserClient) QueryStatusLogs(u *User) *StatusLogQuery {
	query := (&StatusLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(statuslog.Table, statuslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StatusLogsTable, user.StatusLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRequests queries the service_requests edge of a User.
func (c *UserClient) QueryServiceRequests(u *User) *ServiceRequestQuery {
	query := (&ServiceRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(servicerequest.Table, servicerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ServiceRequestsTable, user.ServiceRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReportedIncidents queries the reported_incidents edge of a User.
func (c *UserClient) QueryReportedIncidents(u *User) *IncidentQuery {
	query := (&IncidentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReportedIncidentsTable, user.ReportedIncidentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedIncidents queries the assigned_incidents edge of a User.
func (c *UserClient) QueryAssignedIncidents(u *User) *IncidentQuery {
	query := (&IncidentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(incident.Table, incident.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedIncidentsTable, user.AssignedIncidentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkflowClient is a client for the Workflow schema.
type WorkflowClient struct {
	config
}

// NewWorkflowClient returns a client for the Workflow from the given config.
func NewWorkflowClient(c config) *WorkflowClient {
	return &WorkflowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workflow.Hooks(f(g(h())))`.
func (c *WorkflowClient) Use(hooks ...Hook) {
	c.hooks.Workflow = append(c.hooks.Workflow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workflow.Intercept(f(g(h())))`.
func (c *WorkflowClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workflow = append(c.inters.Workflow, interceptors...)
}

// Create returns a builder for creating a Workflow entity.
func (c *WorkflowClient) Create() *WorkflowCreate {
	mutation := newWorkflowMutation(c.config, OpCreate)
	return &WorkflowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workflow entities.
func (c *WorkflowClient) CreateBulk(builders ...*WorkflowCreate) *WorkflowCreateBulk {
	return &WorkflowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkflowClient) MapCreateBulk(slice any, setFunc func(*WorkflowCreate, int)) *WorkflowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkflowCreateBulk{err: fmt.Errorf("calling to WorkflowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkflowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkflowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workflow.
func (c *WorkflowClient) Update() *WorkflowUpdate {
	mutation := newWorkflowMutation(c.config, OpUpdate)
	return &WorkflowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkflowClient) UpdateOne(w *Workflow) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflow(w))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkflowClient) UpdateOneID(id int) *WorkflowUpdateOne {
	mutation := newWorkflowMutation(c.config, OpUpdateOne, withWorkflowID(id))
	return &WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workflow.
func (c *WorkflowClient) Delete() *WorkflowDelete {
	mutation := newWorkflowMutation(c.config, OpDelete)
	return &WorkflowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkflowClient) DeleteOne(w *Workflow) *WorkflowDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkflowClient) DeleteOneID(id int) *WorkflowDeleteOne {
	builder := c.Delete().Where(workflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkflowDeleteOne{builder}
}

// Query returns a query builder for Workflow.
func (c *WorkflowClient) Query() *WorkflowQuery {
	return &WorkflowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkflow},
		inters: c.Interceptors(),
	}
}

// Get returns a Workflow entity by its id.
func (c *WorkflowClient) Get(ctx context.Context, id int) (*Workflow, error) {
	return c.Query().Where(workflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkflowClient) GetX(ctx context.Context, id int) *Workflow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Workflow.
func (c *WorkflowClient) QueryTenant(w *Workflow) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workflow.TenantTable, workflow.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowInstances queries the flow_instances edge of a Workflow.
func (c *WorkflowClient) QueryFlowInstances(w *Workflow) *FlowInstanceQuery {
	query := (&FlowInstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workflow.Table, workflow.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workflow.FlowInstancesTable, workflow.FlowInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkflowClient) Hooks() []Hook {
	return c.hooks.Workflow
}

// Interceptors returns the client interceptors.
func (c *WorkflowClient) Interceptors() []Interceptor {
	return c.inters.Workflow
}

func (c *WorkflowClient) mutate(ctx context.Context, m *WorkflowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkflowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkflowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkflowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkflowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Workflow mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApprovalLog, CIAttributeDefinition, CIChangeRecord, CILifecycleState,
		CIRelationship, CIRelationshipType, CIType, ConfigurationItem, FlowInstance,
		Incident, KnowledgeArticle, ServiceCatalog, ServiceRequest, StatusLog,
		Subscription, Tenant, Ticket, User, Workflow []ent.Hook
	}
	inters struct {
		ApprovalLog, CIAttributeDefinition, CIChangeRecord, CILifecycleState,
		CIRelationship, CIRelationshipType, CIType, ConfigurationItem, FlowInstance,
		Incident, KnowledgeArticle, ServiceCatalog, ServiceRequest, StatusLog,
		Subscription, Tenant, Ticket, User, Workflow []ent.Interceptor
	}
)
