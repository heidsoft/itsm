// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"itsm-backend/ent/migrate"

	"itsm-backend/ent/approvallog"
	"itsm-backend/ent/flowinstance"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/statuslog"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApprovalLog is the client for interacting with the ApprovalLog builders.
	ApprovalLog *ApprovalLogClient
	// FlowInstance is the client for interacting with the FlowInstance builders.
	FlowInstance *FlowInstanceClient
	// ServiceCatalog is the client for interacting with the ServiceCatalog builders.
	ServiceCatalog *ServiceCatalogClient
	// ServiceRequest is the client for interacting with the ServiceRequest builders.
	ServiceRequest *ServiceRequestClient
	// StatusLog is the client for interacting with the StatusLog builders.
	StatusLog *StatusLogClient
	// Ticket is the client for interacting with the Ticket builders.
	Ticket *TicketClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApprovalLog = NewApprovalLogClient(c.config)
	c.FlowInstance = NewFlowInstanceClient(c.config)
	c.ServiceCatalog = NewServiceCatalogClient(c.config)
	c.ServiceRequest = NewServiceRequestClient(c.config)
	c.StatusLog = NewStatusLogClient(c.config)
	c.Ticket = NewTicketClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ApprovalLog:    NewApprovalLogClient(cfg),
		FlowInstance:   NewFlowInstanceClient(cfg),
		ServiceCatalog: NewServiceCatalogClient(cfg),
		ServiceRequest: NewServiceRequestClient(cfg),
		StatusLog:      NewStatusLogClient(cfg),
		Ticket:         NewTicketClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ApprovalLog:    NewApprovalLogClient(cfg),
		FlowInstance:   NewFlowInstanceClient(cfg),
		ServiceCatalog: NewServiceCatalogClient(cfg),
		ServiceRequest: NewServiceRequestClient(cfg),
		StatusLog:      NewStatusLogClient(cfg),
		Ticket:         NewTicketClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApprovalLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApprovalLog, c.FlowInstance, c.ServiceCatalog, c.ServiceRequest, c.StatusLog,
		c.Ticket, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApprovalLog, c.FlowInstance, c.ServiceCatalog, c.ServiceRequest, c.StatusLog,
		c.Ticket, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApprovalLogMutation:
		return c.ApprovalLog.mutate(ctx, m)
	case *FlowInstanceMutation:
		return c.FlowInstance.mutate(ctx, m)
	case *ServiceCatalogMutation:
		return c.ServiceCatalog.mutate(ctx, m)
	case *ServiceRequestMutation:
		return c.ServiceRequest.mutate(ctx, m)
	case *StatusLogMutation:
		return c.StatusLog.mutate(ctx, m)
	case *TicketMutation:
		return c.Ticket.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApprovalLogClient is a client for the ApprovalLog schema.
type ApprovalLogClient struct {
	config
}

// NewApprovalLogClient returns a client for the ApprovalLog from the given config.
func NewApprovalLogClient(c config) *ApprovalLogClient {
	return &ApprovalLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `approvallog.Hooks(f(g(h())))`.
func (c *ApprovalLogClient) Use(hooks ...Hook) {
	c.hooks.ApprovalLog = append(c.hooks.ApprovalLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `approvallog.Intercept(f(g(h())))`.
func (c *ApprovalLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApprovalLog = append(c.inters.ApprovalLog, interceptors...)
}

// Create returns a builder for creating a ApprovalLog entity.
func (c *ApprovalLogClient) Create() *ApprovalLogCreate {
	mutation := newApprovalLogMutation(c.config, OpCreate)
	return &ApprovalLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApprovalLog entities.
func (c *ApprovalLogClient) CreateBulk(builders ...*ApprovalLogCreate) *ApprovalLogCreateBulk {
	return &ApprovalLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApprovalLogClient) MapCreateBulk(slice any, setFunc func(*ApprovalLogCreate, int)) *ApprovalLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApprovalLogCreateBulk{err: fmt.Errorf("calling to ApprovalLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApprovalLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApprovalLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApprovalLog.
func (c *ApprovalLogClient) Update() *ApprovalLogUpdate {
	mutation := newApprovalLogMutation(c.config, OpUpdate)
	return &ApprovalLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApprovalLogClient) UpdateOne(al *ApprovalLog) *ApprovalLogUpdateOne {
	mutation := newApprovalLogMutation(c.config, OpUpdateOne, withApprovalLog(al))
	return &ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApprovalLogClient) UpdateOneID(id int) *ApprovalLogUpdateOne {
	mutation := newApprovalLogMutation(c.config, OpUpdateOne, withApprovalLogID(id))
	return &ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApprovalLog.
func (c *ApprovalLogClient) Delete() *ApprovalLogDelete {
	mutation := newApprovalLogMutation(c.config, OpDelete)
	return &ApprovalLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApprovalLogClient) DeleteOne(al *ApprovalLog) *ApprovalLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApprovalLogClient) DeleteOneID(id int) *ApprovalLogDeleteOne {
	builder := c.Delete().Where(approvallog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApprovalLogDeleteOne{builder}
}

// Query returns a query builder for ApprovalLog.
func (c *ApprovalLogClient) Query() *ApprovalLogQuery {
	return &ApprovalLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApprovalLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ApprovalLog entity by its id.
func (c *ApprovalLogClient) Get(ctx context.Context, id int) (*ApprovalLog, error) {
	return c.Query().Where(approvallog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApprovalLogClient) GetX(ctx context.Context, id int) *ApprovalLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprover queries the approver edge of a ApprovalLog.
func (c *ApprovalLogClient) QueryApprover(al *ApprovalLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approvallog.Table, approvallog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approvallog.ApproverTable, approvallog.ApproverColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTicket queries the ticket edge of a ApprovalLog.
func (c *ApprovalLogClient) QueryTicket(al *ApprovalLog) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := al.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(approvallog.Table, approvallog.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, approvallog.TicketTable, approvallog.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(al.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApprovalLogClient) Hooks() []Hook {
	return c.hooks.ApprovalLog
}

// Interceptors returns the client interceptors.
func (c *ApprovalLogClient) Interceptors() []Interceptor {
	return c.inters.ApprovalLog
}

func (c *ApprovalLogClient) mutate(ctx context.Context, m *ApprovalLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApprovalLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApprovalLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApprovalLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApprovalLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ApprovalLog mutation op: %q", m.Op())
	}
}

// FlowInstanceClient is a client for the FlowInstance schema.
type FlowInstanceClient struct {
	config
}

// NewFlowInstanceClient returns a client for the FlowInstance from the given config.
func NewFlowInstanceClient(c config) *FlowInstanceClient {
	return &FlowInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowinstance.Hooks(f(g(h())))`.
func (c *FlowInstanceClient) Use(hooks ...Hook) {
	c.hooks.FlowInstance = append(c.hooks.FlowInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `flowinstance.Intercept(f(g(h())))`.
func (c *FlowInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.FlowInstance = append(c.inters.FlowInstance, interceptors...)
}

// Create returns a builder for creating a FlowInstance entity.
func (c *FlowInstanceClient) Create() *FlowInstanceCreate {
	mutation := newFlowInstanceMutation(c.config, OpCreate)
	return &FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowInstance entities.
func (c *FlowInstanceClient) CreateBulk(builders ...*FlowInstanceCreate) *FlowInstanceCreateBulk {
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FlowInstanceClient) MapCreateBulk(slice any, setFunc func(*FlowInstanceCreate, int)) *FlowInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FlowInstanceCreateBulk{err: fmt.Errorf("calling to FlowInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FlowInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowInstance.
func (c *FlowInstanceClient) Update() *FlowInstanceUpdate {
	mutation := newFlowInstanceMutation(c.config, OpUpdate)
	return &FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowInstanceClient) UpdateOne(fi *FlowInstance) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstance(fi))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowInstanceClient) UpdateOneID(id int) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstanceID(id))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowInstance.
func (c *FlowInstanceClient) Delete() *FlowInstanceDelete {
	mutation := newFlowInstanceMutation(c.config, OpDelete)
	return &FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FlowInstanceClient) DeleteOne(fi *FlowInstance) *FlowInstanceDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FlowInstanceClient) DeleteOneID(id int) *FlowInstanceDeleteOne {
	builder := c.Delete().Where(flowinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowInstanceDeleteOne{builder}
}

// Query returns a query builder for FlowInstance.
func (c *FlowInstanceClient) Query() *FlowInstanceQuery {
	return &FlowInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFlowInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a FlowInstance entity by its id.
func (c *FlowInstanceClient) Get(ctx context.Context, id int) (*FlowInstance, error) {
	return c.Query().Where(flowinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowInstanceClient) GetX(ctx context.Context, id int) *FlowInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicket queries the ticket edge of a FlowInstance.
func (c *FlowInstanceClient) QueryTicket(fi *FlowInstance) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, flowinstance.TicketTable, flowinstance.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowInstanceClient) Hooks() []Hook {
	return c.hooks.FlowInstance
}

// Interceptors returns the client interceptors.
func (c *FlowInstanceClient) Interceptors() []Interceptor {
	return c.inters.FlowInstance
}

func (c *FlowInstanceClient) mutate(ctx context.Context, m *FlowInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FlowInstance mutation op: %q", m.Op())
	}
}

// ServiceCatalogClient is a client for the ServiceCatalog schema.
type ServiceCatalogClient struct {
	config
}

// NewServiceCatalogClient returns a client for the ServiceCatalog from the given config.
func NewServiceCatalogClient(c config) *ServiceCatalogClient {
	return &ServiceCatalogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicecatalog.Hooks(f(g(h())))`.
func (c *ServiceCatalogClient) Use(hooks ...Hook) {
	c.hooks.ServiceCatalog = append(c.hooks.ServiceCatalog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicecatalog.Intercept(f(g(h())))`.
func (c *ServiceCatalogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceCatalog = append(c.inters.ServiceCatalog, interceptors...)
}

// Create returns a builder for creating a ServiceCatalog entity.
func (c *ServiceCatalogClient) Create() *ServiceCatalogCreate {
	mutation := newServiceCatalogMutation(c.config, OpCreate)
	return &ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceCatalog entities.
func (c *ServiceCatalogClient) CreateBulk(builders ...*ServiceCatalogCreate) *ServiceCatalogCreateBulk {
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceCatalogClient) MapCreateBulk(slice any, setFunc func(*ServiceCatalogCreate, int)) *ServiceCatalogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceCatalogCreateBulk{err: fmt.Errorf("calling to ServiceCatalogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceCatalogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceCatalog.
func (c *ServiceCatalogClient) Update() *ServiceCatalogUpdate {
	mutation := newServiceCatalogMutation(c.config, OpUpdate)
	return &ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceCatalogClient) UpdateOne(sc *ServiceCatalog) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalog(sc))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceCatalogClient) UpdateOneID(id int) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalogID(id))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceCatalog.
func (c *ServiceCatalogClient) Delete() *ServiceCatalogDelete {
	mutation := newServiceCatalogMutation(c.config, OpDelete)
	return &ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceCatalogClient) DeleteOne(sc *ServiceCatalog) *ServiceCatalogDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceCatalogClient) DeleteOneID(id int) *ServiceCatalogDeleteOne {
	builder := c.Delete().Where(servicecatalog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceCatalogDeleteOne{builder}
}

// Query returns a query builder for ServiceCatalog.
func (c *ServiceCatalogClient) Query() *ServiceCatalogQuery {
	return &ServiceCatalogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceCatalog},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceCatalog entity by its id.
func (c *ServiceCatalogClient) Get(ctx context.Context, id int) (*ServiceCatalog, error) {
	return c.Query().Where(servicecatalog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceCatalogClient) GetX(ctx context.Context, id int) *ServiceCatalog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServiceRequests queries the service_requests edge of a ServiceCatalog.
func (c *ServiceCatalogClient) QueryServiceRequests(sc *ServiceCatalog) *ServiceRequestQuery {
	query := (&ServiceRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicecatalog.Table, servicecatalog.FieldID, id),
			sqlgraph.To(servicerequest.Table, servicerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicecatalog.ServiceRequestsTable, servicecatalog.ServiceRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceCatalogClient) Hooks() []Hook {
	return c.hooks.ServiceCatalog
}

// Interceptors returns the client interceptors.
func (c *ServiceCatalogClient) Interceptors() []Interceptor {
	return c.inters.ServiceCatalog
}

func (c *ServiceCatalogClient) mutate(ctx context.Context, m *ServiceCatalogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceCatalog mutation op: %q", m.Op())
	}
}

// ServiceRequestClient is a client for the ServiceRequest schema.
type ServiceRequestClient struct {
	config
}

// NewServiceRequestClient returns a client for the ServiceRequest from the given config.
func NewServiceRequestClient(c config) *ServiceRequestClient {
	return &ServiceRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicerequest.Hooks(f(g(h())))`.
func (c *ServiceRequestClient) Use(hooks ...Hook) {
	c.hooks.ServiceRequest = append(c.hooks.ServiceRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicerequest.Intercept(f(g(h())))`.
func (c *ServiceRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceRequest = append(c.inters.ServiceRequest, interceptors...)
}

// Create returns a builder for creating a ServiceRequest entity.
func (c *ServiceRequestClient) Create() *ServiceRequestCreate {
	mutation := newServiceRequestMutation(c.config, OpCreate)
	return &ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceRequest entities.
func (c *ServiceRequestClient) CreateBulk(builders ...*ServiceRequestCreate) *ServiceRequestCreateBulk {
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceRequestClient) MapCreateBulk(slice any, setFunc func(*ServiceRequestCreate, int)) *ServiceRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceRequestCreateBulk{err: fmt.Errorf("calling to ServiceRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceRequest.
func (c *ServiceRequestClient) Update() *ServiceRequestUpdate {
	mutation := newServiceRequestMutation(c.config, OpUpdate)
	return &ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceRequestClient) UpdateOne(sr *ServiceRequest) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequest(sr))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceRequestClient) UpdateOneID(id int) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequestID(id))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceRequest.
func (c *ServiceRequestClient) Delete() *ServiceRequestDelete {
	mutation := newServiceRequestMutation(c.config, OpDelete)
	return &ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceRequestClient) DeleteOne(sr *ServiceRequest) *ServiceRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceRequestClient) DeleteOneID(id int) *ServiceRequestDeleteOne {
	builder := c.Delete().Where(servicerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceRequestDeleteOne{builder}
}

// Query returns a query builder for ServiceRequest.
func (c *ServiceRequestClient) Query() *ServiceRequestQuery {
	return &ServiceRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceRequest entity by its id.
func (c *ServiceRequestClient) Get(ctx context.Context, id int) (*ServiceRequest, error) {
	return c.Query().Where(servicerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceRequestClient) GetX(ctx context.Context, id int) *ServiceRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCatalog queries the catalog edge of a ServiceRequest.
func (c *ServiceRequestClient) QueryCatalog(sr *ServiceRequest) *ServiceCatalogQuery {
	query := (&ServiceCatalogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerequest.Table, servicerequest.FieldID, id),
			sqlgraph.To(servicecatalog.Table, servicecatalog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerequest.CatalogTable, servicerequest.CatalogColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequester queries the requester edge of a ServiceRequest.
func (c *ServiceRequestClient) QueryRequester(sr *ServiceRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicerequest.Table, servicerequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicerequest.RequesterTable, servicerequest.RequesterColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceRequestClient) Hooks() []Hook {
	return c.hooks.ServiceRequest
}

// Interceptors returns the client interceptors.
func (c *ServiceRequestClient) Interceptors() []Interceptor {
	return c.inters.ServiceRequest
}

func (c *ServiceRequestClient) mutate(ctx context.Context, m *ServiceRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceRequest mutation op: %q", m.Op())
	}
}

// StatusLogClient is a client for the StatusLog schema.
type StatusLogClient struct {
	config
}

// NewStatusLogClient returns a client for the StatusLog from the given config.
func NewStatusLogClient(c config) *StatusLogClient {
	return &StatusLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statuslog.Hooks(f(g(h())))`.
func (c *StatusLogClient) Use(hooks ...Hook) {
	c.hooks.StatusLog = append(c.hooks.StatusLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `statuslog.Intercept(f(g(h())))`.
func (c *StatusLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.StatusLog = append(c.inters.StatusLog, interceptors...)
}

// Create returns a builder for creating a StatusLog entity.
func (c *StatusLogClient) Create() *StatusLogCreate {
	mutation := newStatusLogMutation(c.config, OpCreate)
	return &StatusLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatusLog entities.
func (c *StatusLogClient) CreateBulk(builders ...*StatusLogCreate) *StatusLogCreateBulk {
	return &StatusLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StatusLogClient) MapCreateBulk(slice any, setFunc func(*StatusLogCreate, int)) *StatusLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StatusLogCreateBulk{err: fmt.Errorf("calling to StatusLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StatusLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StatusLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatusLog.
func (c *StatusLogClient) Update() *StatusLogUpdate {
	mutation := newStatusLogMutation(c.config, OpUpdate)
	return &StatusLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusLogClient) UpdateOne(sl *StatusLog) *StatusLogUpdateOne {
	mutation := newStatusLogMutation(c.config, OpUpdateOne, withStatusLog(sl))
	return &StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusLogClient) UpdateOneID(id int) *StatusLogUpdateOne {
	mutation := newStatusLogMutation(c.config, OpUpdateOne, withStatusLogID(id))
	return &StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusLog.
func (c *StatusLogClient) Delete() *StatusLogDelete {
	mutation := newStatusLogMutation(c.config, OpDelete)
	return &StatusLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatusLogClient) DeleteOne(sl *StatusLog) *StatusLogDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatusLogClient) DeleteOneID(id int) *StatusLogDeleteOne {
	builder := c.Delete().Where(statuslog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusLogDeleteOne{builder}
}

// Query returns a query builder for StatusLog.
func (c *StatusLogClient) Query() *StatusLogQuery {
	return &StatusLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatusLog},
		inters: c.Interceptors(),
	}
}

// Get returns a StatusLog entity by its id.
func (c *StatusLogClient) Get(ctx context.Context, id int) (*StatusLog, error) {
	return c.Query().Where(statuslog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusLogClient) GetX(ctx context.Context, id int) *StatusLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTicket queries the ticket edge of a StatusLog.
func (c *StatusLogClient) QueryTicket(sl *StatusLog) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuslog.Table, statuslog.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statuslog.TicketTable, statuslog.TicketColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a StatusLog.
func (c *StatusLogClient) QueryUser(sl *StatusLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statuslog.Table, statuslog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statuslog.UserTable, statuslog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusLogClient) Hooks() []Hook {
	return c.hooks.StatusLog
}

// Interceptors returns the client interceptors.
func (c *StatusLogClient) Interceptors() []Interceptor {
	return c.inters.StatusLog
}

func (c *StatusLogClient) mutate(ctx context.Context, m *StatusLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatusLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatusLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatusLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatusLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StatusLog mutation op: %q", m.Op())
	}
}

// TicketClient is a client for the Ticket schema.
type TicketClient struct {
	config
}

// NewTicketClient returns a client for the Ticket from the given config.
func NewTicketClient(c config) *TicketClient {
	return &TicketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticket.Hooks(f(g(h())))`.
func (c *TicketClient) Use(hooks ...Hook) {
	c.hooks.Ticket = append(c.hooks.Ticket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ticket.Intercept(f(g(h())))`.
func (c *TicketClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ticket = append(c.inters.Ticket, interceptors...)
}

// Create returns a builder for creating a Ticket entity.
func (c *TicketClient) Create() *TicketCreate {
	mutation := newTicketMutation(c.config, OpCreate)
	return &TicketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ticket entities.
func (c *TicketClient) CreateBulk(builders ...*TicketCreate) *TicketCreateBulk {
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TicketClient) MapCreateBulk(slice any, setFunc func(*TicketCreate, int)) *TicketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TicketCreateBulk{err: fmt.Errorf("calling to TicketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TicketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ticket.
func (c *TicketClient) Update() *TicketUpdate {
	mutation := newTicketMutation(c.config, OpUpdate)
	return &TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TicketClient) UpdateOne(t *Ticket) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicket(t))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TicketClient) UpdateOneID(id int) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicketID(id))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ticket.
func (c *TicketClient) Delete() *TicketDelete {
	mutation := newTicketMutation(c.config, OpDelete)
	return &TicketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TicketClient) DeleteOne(t *Ticket) *TicketDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TicketClient) DeleteOneID(id int) *TicketDeleteOne {
	builder := c.Delete().Where(ticket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TicketDeleteOne{builder}
}

// Query returns a query builder for Ticket.
func (c *TicketClient) Query() *TicketQuery {
	return &TicketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTicket},
		inters: c.Interceptors(),
	}
}

// Get returns a Ticket entity by its id.
func (c *TicketClient) Get(ctx context.Context, id int) (*Ticket, error) {
	return c.Query().Where(ticket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TicketClient) GetX(ctx context.Context, id int) *Ticket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequester queries the requester edge of a Ticket.
func (c *TicketClient) QueryRequester(t *Ticket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticket.RequesterTable, ticket.RequesterColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignee queries the assignee edge of a Ticket.
func (c *TicketClient) QueryAssignee(t *Ticket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ticket.AssigneeTable, ticket.AssigneeColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalLogs queries the approval_logs edge of a Ticket.
func (c *TicketClient) QueryApprovalLogs(t *Ticket) *ApprovalLogQuery {
	query := (&ApprovalLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(approvallog.Table, approvallog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticket.ApprovalLogsTable, ticket.ApprovalLogsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowInstance queries the flow_instance edge of a Ticket.
func (c *TicketClient) QueryFlowInstance(t *Ticket) *FlowInstanceQuery {
	query := (&FlowInstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ticket.FlowInstanceTable, ticket.FlowInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusLogs queries the status_logs edge of a Ticket.
func (c *TicketClient) QueryStatusLogs(t *Ticket) *StatusLogQuery {
	query := (&StatusLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ticket.Table, ticket.FieldID, id),
			sqlgraph.To(statuslog.Table, statuslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ticket.StatusLogsTable, ticket.StatusLogsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TicketClient) Hooks() []Hook {
	return c.hooks.Ticket
}

// Interceptors returns the client interceptors.
func (c *TicketClient) Interceptors() []Interceptor {
	return c.inters.Ticket
}

func (c *TicketClient) mutate(ctx context.Context, m *TicketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TicketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TicketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ticket mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubmittedTickets queries the submitted_tickets edge of a User.
func (c *UserClient) QuerySubmittedTickets(u *User) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SubmittedTicketsTable, user.SubmittedTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedTickets queries the assigned_tickets edge of a User.
func (c *UserClient) QueryAssignedTickets(u *User) *TicketQuery {
	query := (&TicketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignedTicketsTable, user.AssignedTicketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovalLogs queries the approval_logs edge of a User.
func (c *UserClient) QueryApprovalLogs(u *User) *ApprovalLogQuery {
	query := (&ApprovalLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(approvallog.Table, approvallog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovalLogsTable, user.ApprovalLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusLogs queries the status_logs edge of a User.
func (c *UserClient) QueryStatusLogs(u *User) *StatusLogQuery {
	query := (&StatusLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(statuslog.Table, statuslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StatusLogsTable, user.StatusLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceRequests queries the service_requests edge of a User.
func (c *UserClient) QueryServiceRequests(u *User) *ServiceRequestQuery {
	query := (&ServiceRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(servicerequest.Table, servicerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ServiceRequestsTable, user.ServiceRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApprovalLog, FlowInstance, ServiceCatalog, ServiceRequest, StatusLog, Ticket,
		User []ent.Hook
	}
	inters struct {
		ApprovalLog, FlowInstance, ServiceCatalog, ServiceRequest, StatusLog, Ticket,
		User []ent.Interceptor
	}
)
