// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"itsm-backend/ent/migrate"

	"itsm-backend/ent/auditlog"
	"itsm-backend/ent/ciattributedefinition"
	"itsm-backend/ent/cirelationship"
	"itsm-backend/ent/citype"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/conversation"
	"itsm-backend/ent/incident"
	"itsm-backend/ent/knowledgearticle"
	"itsm-backend/ent/message"
	"itsm-backend/ent/notification"
	"itsm-backend/ent/prompttemplate"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/sladefinition"
	"itsm-backend/ent/slaviolation"
	"itsm-backend/ent/tenant"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/toolinvocation"
	"itsm-backend/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuditLog is the client for interacting with the AuditLog builders.
	AuditLog *AuditLogClient
	// CIAttributeDefinition is the client for interacting with the CIAttributeDefinition builders.
	CIAttributeDefinition *CIAttributeDefinitionClient
	// CIRelationship is the client for interacting with the CIRelationship builders.
	CIRelationship *CIRelationshipClient
	// CIType is the client for interacting with the CIType builders.
	CIType *CITypeClient
	// ConfigurationItem is the client for interacting with the ConfigurationItem builders.
	ConfigurationItem *ConfigurationItemClient
	// Conversation is the client for interacting with the Conversation builders.
	Conversation *ConversationClient
	// Incident is the client for interacting with the Incident builders.
	Incident *IncidentClient
	// KnowledgeArticle is the client for interacting with the KnowledgeArticle builders.
	KnowledgeArticle *KnowledgeArticleClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// PromptTemplate is the client for interacting with the PromptTemplate builders.
	PromptTemplate *PromptTemplateClient
	// SLADefinition is the client for interacting with the SLADefinition builders.
	SLADefinition *SLADefinitionClient
	// SLAViolation is the client for interacting with the SLAViolation builders.
	SLAViolation *SLAViolationClient
	// ServiceCatalog is the client for interacting with the ServiceCatalog builders.
	ServiceCatalog *ServiceCatalogClient
	// ServiceRequest is the client for interacting with the ServiceRequest builders.
	ServiceRequest *ServiceRequestClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// Ticket is the client for interacting with the Ticket builders.
	Ticket *TicketClient
	// ToolInvocation is the client for interacting with the ToolInvocation builders.
	ToolInvocation *ToolInvocationClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuditLog = NewAuditLogClient(c.config)
	c.CIAttributeDefinition = NewCIAttributeDefinitionClient(c.config)
	c.CIRelationship = NewCIRelationshipClient(c.config)
	c.CIType = NewCITypeClient(c.config)
	c.ConfigurationItem = NewConfigurationItemClient(c.config)
	c.Conversation = NewConversationClient(c.config)
	c.Incident = NewIncidentClient(c.config)
	c.KnowledgeArticle = NewKnowledgeArticleClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.PromptTemplate = NewPromptTemplateClient(c.config)
	c.SLADefinition = NewSLADefinitionClient(c.config)
	c.SLAViolation = NewSLAViolationClient(c.config)
	c.ServiceCatalog = NewServiceCatalogClient(c.config)
	c.ServiceRequest = NewServiceRequestClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.Ticket = NewTicketClient(c.config)
	c.ToolInvocation = NewToolInvocationClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		AuditLog:              NewAuditLogClient(cfg),
		CIAttributeDefinition: NewCIAttributeDefinitionClient(cfg),
		CIRelationship:        NewCIRelationshipClient(cfg),
		CIType:                NewCITypeClient(cfg),
		ConfigurationItem:     NewConfigurationItemClient(cfg),
		Conversation:          NewConversationClient(cfg),
		Incident:              NewIncidentClient(cfg),
		KnowledgeArticle:      NewKnowledgeArticleClient(cfg),
		Message:               NewMessageClient(cfg),
		Notification:          NewNotificationClient(cfg),
		PromptTemplate:        NewPromptTemplateClient(cfg),
		SLADefinition:         NewSLADefinitionClient(cfg),
		SLAViolation:          NewSLAViolationClient(cfg),
		ServiceCatalog:        NewServiceCatalogClient(cfg),
		ServiceRequest:        NewServiceRequestClient(cfg),
		Tenant:                NewTenantClient(cfg),
		Ticket:                NewTicketClient(cfg),
		ToolInvocation:        NewToolInvocationClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		AuditLog:              NewAuditLogClient(cfg),
		CIAttributeDefinition: NewCIAttributeDefinitionClient(cfg),
		CIRelationship:        NewCIRelationshipClient(cfg),
		CIType:                NewCITypeClient(cfg),
		ConfigurationItem:     NewConfigurationItemClient(cfg),
		Conversation:          NewConversationClient(cfg),
		Incident:              NewIncidentClient(cfg),
		KnowledgeArticle:      NewKnowledgeArticleClient(cfg),
		Message:               NewMessageClient(cfg),
		Notification:          NewNotificationClient(cfg),
		PromptTemplate:        NewPromptTemplateClient(cfg),
		SLADefinition:         NewSLADefinitionClient(cfg),
		SLAViolation:          NewSLAViolationClient(cfg),
		ServiceCatalog:        NewServiceCatalogClient(cfg),
		ServiceRequest:        NewServiceRequestClient(cfg),
		Tenant:                NewTenantClient(cfg),
		Ticket:                NewTicketClient(cfg),
		ToolInvocation:        NewToolInvocationClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuditLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AuditLog, c.CIAttributeDefinition, c.CIRelationship, c.CIType,
		c.ConfigurationItem, c.Conversation, c.Incident, c.KnowledgeArticle, c.Message,
		c.Notification, c.PromptTemplate, c.SLADefinition, c.SLAViolation,
		c.ServiceCatalog, c.ServiceRequest, c.Tenant, c.Ticket, c.ToolInvocation,
		c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AuditLog, c.CIAttributeDefinition, c.CIRelationship, c.CIType,
		c.ConfigurationItem, c.Conversation, c.Incident, c.KnowledgeArticle, c.Message,
		c.Notification, c.PromptTemplate, c.SLADefinition, c.SLAViolation,
		c.ServiceCatalog, c.ServiceRequest, c.Tenant, c.Ticket, c.ToolInvocation,
		c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditLogMutation:
		return c.AuditLog.mutate(ctx, m)
	case *CIAttributeDefinitionMutation:
		return c.CIAttributeDefinition.mutate(ctx, m)
	case *CIRelationshipMutation:
		return c.CIRelationship.mutate(ctx, m)
	case *CITypeMutation:
		return c.CIType.mutate(ctx, m)
	case *ConfigurationItemMutation:
		return c.ConfigurationItem.mutate(ctx, m)
	case *ConversationMutation:
		return c.Conversation.mutate(ctx, m)
	case *IncidentMutation:
		return c.Incident.mutate(ctx, m)
	case *KnowledgeArticleMutation:
		return c.KnowledgeArticle.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PromptTemplateMutation:
		return c.PromptTemplate.mutate(ctx, m)
	case *SLADefinitionMutation:
		return c.SLADefinition.mutate(ctx, m)
	case *SLAViolationMutation:
		return c.SLAViolation.mutate(ctx, m)
	case *ServiceCatalogMutation:
		return c.ServiceCatalog.mutate(ctx, m)
	case *ServiceRequestMutation:
		return c.ServiceRequest.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *TicketMutation:
		return c.Ticket.mutate(ctx, m)
	case *ToolInvocationMutation:
		return c.ToolInvocation.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditLogClient is a client for the AuditLog schema.
type AuditLogClient struct {
	config
}

// NewAuditLogClient returns a client for the AuditLog from the given config.
func NewAuditLogClient(c config) *AuditLogClient {
	return &AuditLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `auditlog.Hooks(f(g(h())))`.
func (c *AuditLogClient) Use(hooks ...Hook) {
	c.hooks.AuditLog = append(c.hooks.AuditLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `auditlog.Intercept(f(g(h())))`.
func (c *AuditLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuditLog = append(c.inters.AuditLog, interceptors...)
}

// Create returns a builder for creating a AuditLog entity.
func (c *AuditLogClient) Create() *AuditLogCreate {
	mutation := newAuditLogMutation(c.config, OpCreate)
	return &AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuditLog entities.
func (c *AuditLogClient) CreateBulk(builders ...*AuditLogCreate) *AuditLogCreateBulk {
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditLogClient) MapCreateBulk(slice any, setFunc func(*AuditLogCreate, int)) *AuditLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditLogCreateBulk{err: fmt.Errorf("calling to AuditLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuditLog.
func (c *AuditLogClient) Update() *AuditLogUpdate {
	mutation := newAuditLogMutation(c.config, OpUpdate)
	return &AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditLogClient) UpdateOne(al *AuditLog) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLog(al))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditLogClient) UpdateOneID(id int) *AuditLogUpdateOne {
	mutation := newAuditLogMutation(c.config, OpUpdateOne, withAuditLogID(id))
	return &AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuditLog.
func (c *AuditLogClient) Delete() *AuditLogDelete {
	mutation := newAuditLogMutation(c.config, OpDelete)
	return &AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditLogClient) DeleteOne(al *AuditLog) *AuditLogDeleteOne {
	return c.DeleteOneID(al.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditLogClient) DeleteOneID(id int) *AuditLogDeleteOne {
	builder := c.Delete().Where(auditlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditLogDeleteOne{builder}
}

// Query returns a query builder for AuditLog.
func (c *AuditLogClient) Query() *AuditLogQuery {
	return &AuditLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuditLog},
		inters: c.Interceptors(),
	}
}

// Get returns a AuditLog entity by its id.
func (c *AuditLogClient) Get(ctx context.Context, id int) (*AuditLog, error) {
	return c.Query().Where(auditlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditLogClient) GetX(ctx context.Context, id int) *AuditLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditLogClient) Hooks() []Hook {
	return c.hooks.AuditLog
}

// Interceptors returns the client interceptors.
func (c *AuditLogClient) Interceptors() []Interceptor {
	return c.inters.AuditLog
}

func (c *AuditLogClient) mutate(ctx context.Context, m *AuditLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuditLog mutation op: %q", m.Op())
	}
}

// CIAttributeDefinitionClient is a client for the CIAttributeDefinition schema.
type CIAttributeDefinitionClient struct {
	config
}

// NewCIAttributeDefinitionClient returns a client for the CIAttributeDefinition from the given config.
func NewCIAttributeDefinitionClient(c config) *CIAttributeDefinitionClient {
	return &CIAttributeDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ciattributedefinition.Hooks(f(g(h())))`.
func (c *CIAttributeDefinitionClient) Use(hooks ...Hook) {
	c.hooks.CIAttributeDefinition = append(c.hooks.CIAttributeDefinition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ciattributedefinition.Intercept(f(g(h())))`.
func (c *CIAttributeDefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIAttributeDefinition = append(c.inters.CIAttributeDefinition, interceptors...)
}

// Create returns a builder for creating a CIAttributeDefinition entity.
func (c *CIAttributeDefinitionClient) Create() *CIAttributeDefinitionCreate {
	mutation := newCIAttributeDefinitionMutation(c.config, OpCreate)
	return &CIAttributeDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIAttributeDefinition entities.
func (c *CIAttributeDefinitionClient) CreateBulk(builders ...*CIAttributeDefinitionCreate) *CIAttributeDefinitionCreateBulk {
	return &CIAttributeDefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIAttributeDefinitionClient) MapCreateBulk(slice any, setFunc func(*CIAttributeDefinitionCreate, int)) *CIAttributeDefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIAttributeDefinitionCreateBulk{err: fmt.Errorf("calling to CIAttributeDefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIAttributeDefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIAttributeDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Update() *CIAttributeDefinitionUpdate {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdate)
	return &CIAttributeDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIAttributeDefinitionClient) UpdateOne(cad *CIAttributeDefinition) *CIAttributeDefinitionUpdateOne {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdateOne, withCIAttributeDefinition(cad))
	return &CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIAttributeDefinitionClient) UpdateOneID(id int) *CIAttributeDefinitionUpdateOne {
	mutation := newCIAttributeDefinitionMutation(c.config, OpUpdateOne, withCIAttributeDefinitionID(id))
	return &CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Delete() *CIAttributeDefinitionDelete {
	mutation := newCIAttributeDefinitionMutation(c.config, OpDelete)
	return &CIAttributeDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIAttributeDefinitionClient) DeleteOne(cad *CIAttributeDefinition) *CIAttributeDefinitionDeleteOne {
	return c.DeleteOneID(cad.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIAttributeDefinitionClient) DeleteOneID(id int) *CIAttributeDefinitionDeleteOne {
	builder := c.Delete().Where(ciattributedefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIAttributeDefinitionDeleteOne{builder}
}

// Query returns a query builder for CIAttributeDefinition.
func (c *CIAttributeDefinitionClient) Query() *CIAttributeDefinitionQuery {
	return &CIAttributeDefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIAttributeDefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a CIAttributeDefinition entity by its id.
func (c *CIAttributeDefinitionClient) Get(ctx context.Context, id int) (*CIAttributeDefinition, error) {
	return c.Query().Where(ciattributedefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIAttributeDefinitionClient) GetX(ctx context.Context, id int) *CIAttributeDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CIAttributeDefinitionClient) Hooks() []Hook {
	return c.hooks.CIAttributeDefinition
}

// Interceptors returns the client interceptors.
func (c *CIAttributeDefinitionClient) Interceptors() []Interceptor {
	return c.inters.CIAttributeDefinition
}

func (c *CIAttributeDefinitionClient) mutate(ctx context.Context, m *CIAttributeDefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIAttributeDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIAttributeDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIAttributeDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIAttributeDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIAttributeDefinition mutation op: %q", m.Op())
	}
}

// CIRelationshipClient is a client for the CIRelationship schema.
type CIRelationshipClient struct {
	config
}

// NewCIRelationshipClient returns a client for the CIRelationship from the given config.
func NewCIRelationshipClient(c config) *CIRelationshipClient {
	return &CIRelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cirelationship.Hooks(f(g(h())))`.
func (c *CIRelationshipClient) Use(hooks ...Hook) {
	c.hooks.CIRelationship = append(c.hooks.CIRelationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cirelationship.Intercept(f(g(h())))`.
func (c *CIRelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIRelationship = append(c.inters.CIRelationship, interceptors...)
}

// Create returns a builder for creating a CIRelationship entity.
func (c *CIRelationshipClient) Create() *CIRelationshipCreate {
	mutation := newCIRelationshipMutation(c.config, OpCreate)
	return &CIRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIRelationship entities.
func (c *CIRelationshipClient) CreateBulk(builders ...*CIRelationshipCreate) *CIRelationshipCreateBulk {
	return &CIRelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CIRelationshipClient) MapCreateBulk(slice any, setFunc func(*CIRelationshipCreate, int)) *CIRelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CIRelationshipCreateBulk{err: fmt.Errorf("calling to CIRelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CIRelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CIRelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIRelationship.
func (c *CIRelationshipClient) Update() *CIRelationshipUpdate {
	mutation := newCIRelationshipMutation(c.config, OpUpdate)
	return &CIRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CIRelationshipClient) UpdateOne(cr *CIRelationship) *CIRelationshipUpdateOne {
	mutation := newCIRelationshipMutation(c.config, OpUpdateOne, withCIRelationship(cr))
	return &CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CIRelationshipClient) UpdateOneID(id int) *CIRelationshipUpdateOne {
	mutation := newCIRelationshipMutation(c.config, OpUpdateOne, withCIRelationshipID(id))
	return &CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIRelationship.
func (c *CIRelationshipClient) Delete() *CIRelationshipDelete {
	mutation := newCIRelationshipMutation(c.config, OpDelete)
	return &CIRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CIRelationshipClient) DeleteOne(cr *CIRelationship) *CIRelationshipDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CIRelationshipClient) DeleteOneID(id int) *CIRelationshipDeleteOne {
	builder := c.Delete().Where(cirelationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CIRelationshipDeleteOne{builder}
}

// Query returns a query builder for CIRelationship.
func (c *CIRelationshipClient) Query() *CIRelationshipQuery {
	return &CIRelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a CIRelationship entity by its id.
func (c *CIRelationshipClient) Get(ctx context.Context, id int) (*CIRelationship, error) {
	return c.Query().Where(cirelationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CIRelationshipClient) GetX(ctx context.Context, id int) *CIRelationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CIRelationshipClient) Hooks() []Hook {
	return c.hooks.CIRelationship
}

// Interceptors returns the client interceptors.
func (c *CIRelationshipClient) Interceptors() []Interceptor {
	return c.inters.CIRelationship
}

func (c *CIRelationshipClient) mutate(ctx context.Context, m *CIRelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CIRelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CIRelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CIRelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CIRelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIRelationship mutation op: %q", m.Op())
	}
}

// CITypeClient is a client for the CIType schema.
type CITypeClient struct {
	config
}

// NewCITypeClient returns a client for the CIType from the given config.
func NewCITypeClient(c config) *CITypeClient {
	return &CITypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `citype.Hooks(f(g(h())))`.
func (c *CITypeClient) Use(hooks ...Hook) {
	c.hooks.CIType = append(c.hooks.CIType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `citype.Intercept(f(g(h())))`.
func (c *CITypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CIType = append(c.inters.CIType, interceptors...)
}

// Create returns a builder for creating a CIType entity.
func (c *CITypeClient) Create() *CITypeCreate {
	mutation := newCITypeMutation(c.config, OpCreate)
	return &CITypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CIType entities.
func (c *CITypeClient) CreateBulk(builders ...*CITypeCreate) *CITypeCreateBulk {
	return &CITypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CITypeClient) MapCreateBulk(slice any, setFunc func(*CITypeCreate, int)) *CITypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CITypeCreateBulk{err: fmt.Errorf("calling to CITypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CITypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CITypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CIType.
func (c *CITypeClient) Update() *CITypeUpdate {
	mutation := newCITypeMutation(c.config, OpUpdate)
	return &CITypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CITypeClient) UpdateOne(ct *CIType) *CITypeUpdateOne {
	mutation := newCITypeMutation(c.config, OpUpdateOne, withCIType(ct))
	return &CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CITypeClient) UpdateOneID(id int) *CITypeUpdateOne {
	mutation := newCITypeMutation(c.config, OpUpdateOne, withCITypeID(id))
	return &CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CIType.
func (c *CITypeClient) Delete() *CITypeDelete {
	mutation := newCITypeMutation(c.config, OpDelete)
	return &CITypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CITypeClient) DeleteOne(ct *CIType) *CITypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CITypeClient) DeleteOneID(id int) *CITypeDeleteOne {
	builder := c.Delete().Where(citype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CITypeDeleteOne{builder}
}

// Query returns a query builder for CIType.
func (c *CITypeClient) Query() *CITypeQuery {
	return &CITypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCIType},
		inters: c.Interceptors(),
	}
}

// Get returns a CIType entity by its id.
func (c *CITypeClient) Get(ctx context.Context, id int) (*CIType, error) {
	return c.Query().Where(citype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CITypeClient) GetX(ctx context.Context, id int) *CIType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CITypeClient) Hooks() []Hook {
	return c.hooks.CIType
}

// Interceptors returns the client interceptors.
func (c *CITypeClient) Interceptors() []Interceptor {
	return c.inters.CIType
}

func (c *CITypeClient) mutate(ctx context.Context, m *CITypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CITypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CITypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CITypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CITypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CIType mutation op: %q", m.Op())
	}
}

// ConfigurationItemClient is a client for the ConfigurationItem schema.
type ConfigurationItemClient struct {
	config
}

// NewConfigurationItemClient returns a client for the ConfigurationItem from the given config.
func NewConfigurationItemClient(c config) *ConfigurationItemClient {
	return &ConfigurationItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `configurationitem.Hooks(f(g(h())))`.
func (c *ConfigurationItemClient) Use(hooks ...Hook) {
	c.hooks.ConfigurationItem = append(c.hooks.ConfigurationItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `configurationitem.Intercept(f(g(h())))`.
func (c *ConfigurationItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConfigurationItem = append(c.inters.ConfigurationItem, interceptors...)
}

// Create returns a builder for creating a ConfigurationItem entity.
func (c *ConfigurationItemClient) Create() *ConfigurationItemCreate {
	mutation := newConfigurationItemMutation(c.config, OpCreate)
	return &ConfigurationItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConfigurationItem entities.
func (c *ConfigurationItemClient) CreateBulk(builders ...*ConfigurationItemCreate) *ConfigurationItemCreateBulk {
	return &ConfigurationItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConfigurationItemClient) MapCreateBulk(slice any, setFunc func(*ConfigurationItemCreate, int)) *ConfigurationItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConfigurationItemCreateBulk{err: fmt.Errorf("calling to ConfigurationItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConfigurationItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConfigurationItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConfigurationItem.
func (c *ConfigurationItemClient) Update() *ConfigurationItemUpdate {
	mutation := newConfigurationItemMutation(c.config, OpUpdate)
	return &ConfigurationItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConfigurationItemClient) UpdateOne(ci *ConfigurationItem) *ConfigurationItemUpdateOne {
	mutation := newConfigurationItemMutation(c.config, OpUpdateOne, withConfigurationItem(ci))
	return &ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConfigurationItemClient) UpdateOneID(id int) *ConfigurationItemUpdateOne {
	mutation := newConfigurationItemMutation(c.config, OpUpdateOne, withConfigurationItemID(id))
	return &ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConfigurationItem.
func (c *ConfigurationItemClient) Delete() *ConfigurationItemDelete {
	mutation := newConfigurationItemMutation(c.config, OpDelete)
	return &ConfigurationItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConfigurationItemClient) DeleteOne(ci *ConfigurationItem) *ConfigurationItemDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConfigurationItemClient) DeleteOneID(id int) *ConfigurationItemDeleteOne {
	builder := c.Delete().Where(configurationitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConfigurationItemDeleteOne{builder}
}

// Query returns a query builder for ConfigurationItem.
func (c *ConfigurationItemClient) Query() *ConfigurationItemQuery {
	return &ConfigurationItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConfigurationItem},
		inters: c.Interceptors(),
	}
}

// Get returns a ConfigurationItem entity by its id.
func (c *ConfigurationItemClient) Get(ctx context.Context, id int) (*ConfigurationItem, error) {
	return c.Query().Where(configurationitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConfigurationItemClient) GetX(ctx context.Context, id int) *ConfigurationItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConfigurationItemClient) Hooks() []Hook {
	return c.hooks.ConfigurationItem
}

// Interceptors returns the client interceptors.
func (c *ConfigurationItemClient) Interceptors() []Interceptor {
	return c.inters.ConfigurationItem
}

func (c *ConfigurationItemClient) mutate(ctx context.Context, m *ConfigurationItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConfigurationItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConfigurationItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConfigurationItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConfigurationItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConfigurationItem mutation op: %q", m.Op())
	}
}

// ConversationClient is a client for the Conversation schema.
type ConversationClient struct {
	config
}

// NewConversationClient returns a client for the Conversation from the given config.
func NewConversationClient(c config) *ConversationClient {
	return &ConversationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversation.Hooks(f(g(h())))`.
func (c *ConversationClient) Use(hooks ...Hook) {
	c.hooks.Conversation = append(c.hooks.Conversation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversation.Intercept(f(g(h())))`.
func (c *ConversationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Conversation = append(c.inters.Conversation, interceptors...)
}

// Create returns a builder for creating a Conversation entity.
func (c *ConversationClient) Create() *ConversationCreate {
	mutation := newConversationMutation(c.config, OpCreate)
	return &ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conversation entities.
func (c *ConversationClient) CreateBulk(builders ...*ConversationCreate) *ConversationCreateBulk {
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConversationClient) MapCreateBulk(slice any, setFunc func(*ConversationCreate, int)) *ConversationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConversationCreateBulk{err: fmt.Errorf("calling to ConversationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConversationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConversationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conversation.
func (c *ConversationClient) Update() *ConversationUpdate {
	mutation := newConversationMutation(c.config, OpUpdate)
	return &ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationClient) UpdateOne(co *Conversation) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversation(co))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationClient) UpdateOneID(id int) *ConversationUpdateOne {
	mutation := newConversationMutation(c.config, OpUpdateOne, withConversationID(id))
	return &ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conversation.
func (c *ConversationClient) Delete() *ConversationDelete {
	mutation := newConversationMutation(c.config, OpDelete)
	return &ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationClient) DeleteOne(co *Conversation) *ConversationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationClient) DeleteOneID(id int) *ConversationDeleteOne {
	builder := c.Delete().Where(conversation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationDeleteOne{builder}
}

// Query returns a query builder for Conversation.
func (c *ConversationClient) Query() *ConversationQuery {
	return &ConversationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversation},
		inters: c.Interceptors(),
	}
}

// Get returns a Conversation entity by its id.
func (c *ConversationClient) Get(ctx context.Context, id int) (*Conversation, error) {
	return c.Query().Where(conversation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationClient) GetX(ctx context.Context, id int) *Conversation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessages queries the messages edge of a Conversation.
func (c *ConversationClient) QueryMessages(co *Conversation) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, conversation.MessagesTable, conversation.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToolInvocations queries the tool_invocations edge of a Conversation.
func (c *ConversationClient) QueryToolInvocations(co *Conversation) *ToolInvocationQuery {
	query := (&ToolInvocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(conversation.Table, conversation.FieldID, id),
			sqlgraph.To(toolinvocation.Table, toolinvocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, conversation.ToolInvocationsTable, conversation.ToolInvocationsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConversationClient) Hooks() []Hook {
	return c.hooks.Conversation
}

// Interceptors returns the client interceptors.
func (c *ConversationClient) Interceptors() []Interceptor {
	return c.inters.Conversation
}

func (c *ConversationClient) mutate(ctx context.Context, m *ConversationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Conversation mutation op: %q", m.Op())
	}
}

// IncidentClient is a client for the Incident schema.
type IncidentClient struct {
	config
}

// NewIncidentClient returns a client for the Incident from the given config.
func NewIncidentClient(c config) *IncidentClient {
	return &IncidentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `incident.Hooks(f(g(h())))`.
func (c *IncidentClient) Use(hooks ...Hook) {
	c.hooks.Incident = append(c.hooks.Incident, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `incident.Intercept(f(g(h())))`.
func (c *IncidentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Incident = append(c.inters.Incident, interceptors...)
}

// Create returns a builder for creating a Incident entity.
func (c *IncidentClient) Create() *IncidentCreate {
	mutation := newIncidentMutation(c.config, OpCreate)
	return &IncidentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Incident entities.
func (c *IncidentClient) CreateBulk(builders ...*IncidentCreate) *IncidentCreateBulk {
	return &IncidentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IncidentClient) MapCreateBulk(slice any, setFunc func(*IncidentCreate, int)) *IncidentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IncidentCreateBulk{err: fmt.Errorf("calling to IncidentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IncidentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IncidentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Incident.
func (c *IncidentClient) Update() *IncidentUpdate {
	mutation := newIncidentMutation(c.config, OpUpdate)
	return &IncidentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IncidentClient) UpdateOne(i *Incident) *IncidentUpdateOne {
	mutation := newIncidentMutation(c.config, OpUpdateOne, withIncident(i))
	return &IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IncidentClient) UpdateOneID(id int) *IncidentUpdateOne {
	mutation := newIncidentMutation(c.config, OpUpdateOne, withIncidentID(id))
	return &IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Incident.
func (c *IncidentClient) Delete() *IncidentDelete {
	mutation := newIncidentMutation(c.config, OpDelete)
	return &IncidentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IncidentClient) DeleteOne(i *Incident) *IncidentDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IncidentClient) DeleteOneID(id int) *IncidentDeleteOne {
	builder := c.Delete().Where(incident.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IncidentDeleteOne{builder}
}

// Query returns a query builder for Incident.
func (c *IncidentClient) Query() *IncidentQuery {
	return &IncidentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIncident},
		inters: c.Interceptors(),
	}
}

// Get returns a Incident entity by its id.
func (c *IncidentClient) Get(ctx context.Context, id int) (*Incident, error) {
	return c.Query().Where(incident.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IncidentClient) GetX(ctx context.Context, id int) *Incident {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IncidentClient) Hooks() []Hook {
	return c.hooks.Incident
}

// Interceptors returns the client interceptors.
func (c *IncidentClient) Interceptors() []Interceptor {
	return c.inters.Incident
}

func (c *IncidentClient) mutate(ctx context.Context, m *IncidentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IncidentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IncidentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IncidentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IncidentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Incident mutation op: %q", m.Op())
	}
}

// KnowledgeArticleClient is a client for the KnowledgeArticle schema.
type KnowledgeArticleClient struct {
	config
}

// NewKnowledgeArticleClient returns a client for the KnowledgeArticle from the given config.
func NewKnowledgeArticleClient(c config) *KnowledgeArticleClient {
	return &KnowledgeArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `knowledgearticle.Hooks(f(g(h())))`.
func (c *KnowledgeArticleClient) Use(hooks ...Hook) {
	c.hooks.KnowledgeArticle = append(c.hooks.KnowledgeArticle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `knowledgearticle.Intercept(f(g(h())))`.
func (c *KnowledgeArticleClient) Intercept(interceptors ...Interceptor) {
	c.inters.KnowledgeArticle = append(c.inters.KnowledgeArticle, interceptors...)
}

// Create returns a builder for creating a KnowledgeArticle entity.
func (c *KnowledgeArticleClient) Create() *KnowledgeArticleCreate {
	mutation := newKnowledgeArticleMutation(c.config, OpCreate)
	return &KnowledgeArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KnowledgeArticle entities.
func (c *KnowledgeArticleClient) CreateBulk(builders ...*KnowledgeArticleCreate) *KnowledgeArticleCreateBulk {
	return &KnowledgeArticleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KnowledgeArticleClient) MapCreateBulk(slice any, setFunc func(*KnowledgeArticleCreate, int)) *KnowledgeArticleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KnowledgeArticleCreateBulk{err: fmt.Errorf("calling to KnowledgeArticleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KnowledgeArticleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KnowledgeArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Update() *KnowledgeArticleUpdate {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdate)
	return &KnowledgeArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KnowledgeArticleClient) UpdateOne(ka *KnowledgeArticle) *KnowledgeArticleUpdateOne {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdateOne, withKnowledgeArticle(ka))
	return &KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KnowledgeArticleClient) UpdateOneID(id int) *KnowledgeArticleUpdateOne {
	mutation := newKnowledgeArticleMutation(c.config, OpUpdateOne, withKnowledgeArticleID(id))
	return &KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Delete() *KnowledgeArticleDelete {
	mutation := newKnowledgeArticleMutation(c.config, OpDelete)
	return &KnowledgeArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KnowledgeArticleClient) DeleteOne(ka *KnowledgeArticle) *KnowledgeArticleDeleteOne {
	return c.DeleteOneID(ka.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KnowledgeArticleClient) DeleteOneID(id int) *KnowledgeArticleDeleteOne {
	builder := c.Delete().Where(knowledgearticle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KnowledgeArticleDeleteOne{builder}
}

// Query returns a query builder for KnowledgeArticle.
func (c *KnowledgeArticleClient) Query() *KnowledgeArticleQuery {
	return &KnowledgeArticleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKnowledgeArticle},
		inters: c.Interceptors(),
	}
}

// Get returns a KnowledgeArticle entity by its id.
func (c *KnowledgeArticleClient) Get(ctx context.Context, id int) (*KnowledgeArticle, error) {
	return c.Query().Where(knowledgearticle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KnowledgeArticleClient) GetX(ctx context.Context, id int) *KnowledgeArticle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *KnowledgeArticleClient) Hooks() []Hook {
	return c.hooks.KnowledgeArticle
}

// Interceptors returns the client interceptors.
func (c *KnowledgeArticleClient) Interceptors() []Interceptor {
	return c.inters.KnowledgeArticle
}

func (c *KnowledgeArticleClient) mutate(ctx context.Context, m *KnowledgeArticleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KnowledgeArticleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KnowledgeArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KnowledgeArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KnowledgeArticleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KnowledgeArticle mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a Message.
func (c *MessageClient) QueryConversation(m *Message) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ConversationTable, message.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationClient) MapCreateBulk(slice any, setFunc func(*NotificationCreate, int)) *NotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationCreateBulk{err: fmt.Errorf("calling to NotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id int) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id int) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id int) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id int) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PromptTemplateClient is a client for the PromptTemplate schema.
type PromptTemplateClient struct {
	config
}

// NewPromptTemplateClient returns a client for the PromptTemplate from the given config.
func NewPromptTemplateClient(c config) *PromptTemplateClient {
	return &PromptTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prompttemplate.Hooks(f(g(h())))`.
func (c *PromptTemplateClient) Use(hooks ...Hook) {
	c.hooks.PromptTemplate = append(c.hooks.PromptTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prompttemplate.Intercept(f(g(h())))`.
func (c *PromptTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromptTemplate = append(c.inters.PromptTemplate, interceptors...)
}

// Create returns a builder for creating a PromptTemplate entity.
func (c *PromptTemplateClient) Create() *PromptTemplateCreate {
	mutation := newPromptTemplateMutation(c.config, OpCreate)
	return &PromptTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromptTemplate entities.
func (c *PromptTemplateClient) CreateBulk(builders ...*PromptTemplateCreate) *PromptTemplateCreateBulk {
	return &PromptTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromptTemplateClient) MapCreateBulk(slice any, setFunc func(*PromptTemplateCreate, int)) *PromptTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromptTemplateCreateBulk{err: fmt.Errorf("calling to PromptTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromptTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromptTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromptTemplate.
func (c *PromptTemplateClient) Update() *PromptTemplateUpdate {
	mutation := newPromptTemplateMutation(c.config, OpUpdate)
	return &PromptTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromptTemplateClient) UpdateOne(pt *PromptTemplate) *PromptTemplateUpdateOne {
	mutation := newPromptTemplateMutation(c.config, OpUpdateOne, withPromptTemplate(pt))
	return &PromptTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromptTemplateClient) UpdateOneID(id int) *PromptTemplateUpdateOne {
	mutation := newPromptTemplateMutation(c.config, OpUpdateOne, withPromptTemplateID(id))
	return &PromptTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromptTemplate.
func (c *PromptTemplateClient) Delete() *PromptTemplateDelete {
	mutation := newPromptTemplateMutation(c.config, OpDelete)
	return &PromptTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromptTemplateClient) DeleteOne(pt *PromptTemplate) *PromptTemplateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromptTemplateClient) DeleteOneID(id int) *PromptTemplateDeleteOne {
	builder := c.Delete().Where(prompttemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromptTemplateDeleteOne{builder}
}

// Query returns a query builder for PromptTemplate.
func (c *PromptTemplateClient) Query() *PromptTemplateQuery {
	return &PromptTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromptTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a PromptTemplate entity by its id.
func (c *PromptTemplateClient) Get(ctx context.Context, id int) (*PromptTemplate, error) {
	return c.Query().Where(prompttemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromptTemplateClient) GetX(ctx context.Context, id int) *PromptTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromptTemplateClient) Hooks() []Hook {
	return c.hooks.PromptTemplate
}

// Interceptors returns the client interceptors.
func (c *PromptTemplateClient) Interceptors() []Interceptor {
	return c.inters.PromptTemplate
}

func (c *PromptTemplateClient) mutate(ctx context.Context, m *PromptTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromptTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromptTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromptTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromptTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromptTemplate mutation op: %q", m.Op())
	}
}

// SLADefinitionClient is a client for the SLADefinition schema.
type SLADefinitionClient struct {
	config
}

// NewSLADefinitionClient returns a client for the SLADefinition from the given config.
func NewSLADefinitionClient(c config) *SLADefinitionClient {
	return &SLADefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sladefinition.Hooks(f(g(h())))`.
func (c *SLADefinitionClient) Use(hooks ...Hook) {
	c.hooks.SLADefinition = append(c.hooks.SLADefinition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sladefinition.Intercept(f(g(h())))`.
func (c *SLADefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SLADefinition = append(c.inters.SLADefinition, interceptors...)
}

// Create returns a builder for creating a SLADefinition entity.
func (c *SLADefinitionClient) Create() *SLADefinitionCreate {
	mutation := newSLADefinitionMutation(c.config, OpCreate)
	return &SLADefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SLADefinition entities.
func (c *SLADefinitionClient) CreateBulk(builders ...*SLADefinitionCreate) *SLADefinitionCreateBulk {
	return &SLADefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SLADefinitionClient) MapCreateBulk(slice any, setFunc func(*SLADefinitionCreate, int)) *SLADefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SLADefinitionCreateBulk{err: fmt.Errorf("calling to SLADefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SLADefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SLADefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SLADefinition.
func (c *SLADefinitionClient) Update() *SLADefinitionUpdate {
	mutation := newSLADefinitionMutation(c.config, OpUpdate)
	return &SLADefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SLADefinitionClient) UpdateOne(sd *SLADefinition) *SLADefinitionUpdateOne {
	mutation := newSLADefinitionMutation(c.config, OpUpdateOne, withSLADefinition(sd))
	return &SLADefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SLADefinitionClient) UpdateOneID(id int) *SLADefinitionUpdateOne {
	mutation := newSLADefinitionMutation(c.config, OpUpdateOne, withSLADefinitionID(id))
	return &SLADefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SLADefinition.
func (c *SLADefinitionClient) Delete() *SLADefinitionDelete {
	mutation := newSLADefinitionMutation(c.config, OpDelete)
	return &SLADefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SLADefinitionClient) DeleteOne(sd *SLADefinition) *SLADefinitionDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SLADefinitionClient) DeleteOneID(id int) *SLADefinitionDeleteOne {
	builder := c.Delete().Where(sladefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SLADefinitionDeleteOne{builder}
}

// Query returns a query builder for SLADefinition.
func (c *SLADefinitionClient) Query() *SLADefinitionQuery {
	return &SLADefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSLADefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a SLADefinition entity by its id.
func (c *SLADefinitionClient) Get(ctx context.Context, id int) (*SLADefinition, error) {
	return c.Query().Where(sladefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SLADefinitionClient) GetX(ctx context.Context, id int) *SLADefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SLADefinitionClient) Hooks() []Hook {
	return c.hooks.SLADefinition
}

// Interceptors returns the client interceptors.
func (c *SLADefinitionClient) Interceptors() []Interceptor {
	return c.inters.SLADefinition
}

func (c *SLADefinitionClient) mutate(ctx context.Context, m *SLADefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SLADefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SLADefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SLADefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SLADefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SLADefinition mutation op: %q", m.Op())
	}
}

// SLAViolationClient is a client for the SLAViolation schema.
type SLAViolationClient struct {
	config
}

// NewSLAViolationClient returns a client for the SLAViolation from the given config.
func NewSLAViolationClient(c config) *SLAViolationClient {
	return &SLAViolationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slaviolation.Hooks(f(g(h())))`.
func (c *SLAViolationClient) Use(hooks ...Hook) {
	c.hooks.SLAViolation = append(c.hooks.SLAViolation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `slaviolation.Intercept(f(g(h())))`.
func (c *SLAViolationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SLAViolation = append(c.inters.SLAViolation, interceptors...)
}

// Create returns a builder for creating a SLAViolation entity.
func (c *SLAViolationClient) Create() *SLAViolationCreate {
	mutation := newSLAViolationMutation(c.config, OpCreate)
	return &SLAViolationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SLAViolation entities.
func (c *SLAViolationClient) CreateBulk(builders ...*SLAViolationCreate) *SLAViolationCreateBulk {
	return &SLAViolationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SLAViolationClient) MapCreateBulk(slice any, setFunc func(*SLAViolationCreate, int)) *SLAViolationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SLAViolationCreateBulk{err: fmt.Errorf("calling to SLAViolationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SLAViolationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SLAViolationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SLAViolation.
func (c *SLAViolationClient) Update() *SLAViolationUpdate {
	mutation := newSLAViolationMutation(c.config, OpUpdate)
	return &SLAViolationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SLAViolationClient) UpdateOne(sv *SLAViolation) *SLAViolationUpdateOne {
	mutation := newSLAViolationMutation(c.config, OpUpdateOne, withSLAViolation(sv))
	return &SLAViolationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SLAViolationClient) UpdateOneID(id int) *SLAViolationUpdateOne {
	mutation := newSLAViolationMutation(c.config, OpUpdateOne, withSLAViolationID(id))
	return &SLAViolationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SLAViolation.
func (c *SLAViolationClient) Delete() *SLAViolationDelete {
	mutation := newSLAViolationMutation(c.config, OpDelete)
	return &SLAViolationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SLAViolationClient) DeleteOne(sv *SLAViolation) *SLAViolationDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SLAViolationClient) DeleteOneID(id int) *SLAViolationDeleteOne {
	builder := c.Delete().Where(slaviolation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SLAViolationDeleteOne{builder}
}

// Query returns a query builder for SLAViolation.
func (c *SLAViolationClient) Query() *SLAViolationQuery {
	return &SLAViolationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSLAViolation},
		inters: c.Interceptors(),
	}
}

// Get returns a SLAViolation entity by its id.
func (c *SLAViolationClient) Get(ctx context.Context, id int) (*SLAViolation, error) {
	return c.Query().Where(slaviolation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SLAViolationClient) GetX(ctx context.Context, id int) *SLAViolation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SLAViolationClient) Hooks() []Hook {
	return c.hooks.SLAViolation
}

// Interceptors returns the client interceptors.
func (c *SLAViolationClient) Interceptors() []Interceptor {
	return c.inters.SLAViolation
}

func (c *SLAViolationClient) mutate(ctx context.Context, m *SLAViolationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SLAViolationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SLAViolationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SLAViolationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SLAViolationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SLAViolation mutation op: %q", m.Op())
	}
}

// ServiceCatalogClient is a client for the ServiceCatalog schema.
type ServiceCatalogClient struct {
	config
}

// NewServiceCatalogClient returns a client for the ServiceCatalog from the given config.
func NewServiceCatalogClient(c config) *ServiceCatalogClient {
	return &ServiceCatalogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicecatalog.Hooks(f(g(h())))`.
func (c *ServiceCatalogClient) Use(hooks ...Hook) {
	c.hooks.ServiceCatalog = append(c.hooks.ServiceCatalog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicecatalog.Intercept(f(g(h())))`.
func (c *ServiceCatalogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceCatalog = append(c.inters.ServiceCatalog, interceptors...)
}

// Create returns a builder for creating a ServiceCatalog entity.
func (c *ServiceCatalogClient) Create() *ServiceCatalogCreate {
	mutation := newServiceCatalogMutation(c.config, OpCreate)
	return &ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceCatalog entities.
func (c *ServiceCatalogClient) CreateBulk(builders ...*ServiceCatalogCreate) *ServiceCatalogCreateBulk {
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceCatalogClient) MapCreateBulk(slice any, setFunc func(*ServiceCatalogCreate, int)) *ServiceCatalogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceCatalogCreateBulk{err: fmt.Errorf("calling to ServiceCatalogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceCatalogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceCatalogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceCatalog.
func (c *ServiceCatalogClient) Update() *ServiceCatalogUpdate {
	mutation := newServiceCatalogMutation(c.config, OpUpdate)
	return &ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceCatalogClient) UpdateOne(sc *ServiceCatalog) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalog(sc))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceCatalogClient) UpdateOneID(id int) *ServiceCatalogUpdateOne {
	mutation := newServiceCatalogMutation(c.config, OpUpdateOne, withServiceCatalogID(id))
	return &ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceCatalog.
func (c *ServiceCatalogClient) Delete() *ServiceCatalogDelete {
	mutation := newServiceCatalogMutation(c.config, OpDelete)
	return &ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceCatalogClient) DeleteOne(sc *ServiceCatalog) *ServiceCatalogDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceCatalogClient) DeleteOneID(id int) *ServiceCatalogDeleteOne {
	builder := c.Delete().Where(servicecatalog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceCatalogDeleteOne{builder}
}

// Query returns a query builder for ServiceCatalog.
func (c *ServiceCatalogClient) Query() *ServiceCatalogQuery {
	return &ServiceCatalogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceCatalog},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceCatalog entity by its id.
func (c *ServiceCatalogClient) Get(ctx context.Context, id int) (*ServiceCatalog, error) {
	return c.Query().Where(servicecatalog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceCatalogClient) GetX(ctx context.Context, id int) *ServiceCatalog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServiceCatalogClient) Hooks() []Hook {
	return c.hooks.ServiceCatalog
}

// Interceptors returns the client interceptors.
func (c *ServiceCatalogClient) Interceptors() []Interceptor {
	return c.inters.ServiceCatalog
}

func (c *ServiceCatalogClient) mutate(ctx context.Context, m *ServiceCatalogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceCatalog mutation op: %q", m.Op())
	}
}

// ServiceRequestClient is a client for the ServiceRequest schema.
type ServiceRequestClient struct {
	config
}

// NewServiceRequestClient returns a client for the ServiceRequest from the given config.
func NewServiceRequestClient(c config) *ServiceRequestClient {
	return &ServiceRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicerequest.Hooks(f(g(h())))`.
func (c *ServiceRequestClient) Use(hooks ...Hook) {
	c.hooks.ServiceRequest = append(c.hooks.ServiceRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `servicerequest.Intercept(f(g(h())))`.
func (c *ServiceRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.ServiceRequest = append(c.inters.ServiceRequest, interceptors...)
}

// Create returns a builder for creating a ServiceRequest entity.
func (c *ServiceRequestClient) Create() *ServiceRequestCreate {
	mutation := newServiceRequestMutation(c.config, OpCreate)
	return &ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceRequest entities.
func (c *ServiceRequestClient) CreateBulk(builders ...*ServiceRequestCreate) *ServiceRequestCreateBulk {
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServiceRequestClient) MapCreateBulk(slice any, setFunc func(*ServiceRequestCreate, int)) *ServiceRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServiceRequestCreateBulk{err: fmt.Errorf("calling to ServiceRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServiceRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServiceRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceRequest.
func (c *ServiceRequestClient) Update() *ServiceRequestUpdate {
	mutation := newServiceRequestMutation(c.config, OpUpdate)
	return &ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceRequestClient) UpdateOne(sr *ServiceRequest) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequest(sr))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceRequestClient) UpdateOneID(id int) *ServiceRequestUpdateOne {
	mutation := newServiceRequestMutation(c.config, OpUpdateOne, withServiceRequestID(id))
	return &ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceRequest.
func (c *ServiceRequestClient) Delete() *ServiceRequestDelete {
	mutation := newServiceRequestMutation(c.config, OpDelete)
	return &ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceRequestClient) DeleteOne(sr *ServiceRequest) *ServiceRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceRequestClient) DeleteOneID(id int) *ServiceRequestDeleteOne {
	builder := c.Delete().Where(servicerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceRequestDeleteOne{builder}
}

// Query returns a query builder for ServiceRequest.
func (c *ServiceRequestClient) Query() *ServiceRequestQuery {
	return &ServiceRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServiceRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a ServiceRequest entity by its id.
func (c *ServiceRequestClient) Get(ctx context.Context, id int) (*ServiceRequest, error) {
	return c.Query().Where(servicerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceRequestClient) GetX(ctx context.Context, id int) *ServiceRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ServiceRequestClient) Hooks() []Hook {
	return c.hooks.ServiceRequest
}

// Interceptors returns the client interceptors.
func (c *ServiceRequestClient) Interceptors() []Interceptor {
	return c.inters.ServiceRequest
}

func (c *ServiceRequestClient) mutate(ctx context.Context, m *ServiceRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ServiceRequest mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// TicketClient is a client for the Ticket schema.
type TicketClient struct {
	config
}

// NewTicketClient returns a client for the Ticket from the given config.
func NewTicketClient(c config) *TicketClient {
	return &TicketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ticket.Hooks(f(g(h())))`.
func (c *TicketClient) Use(hooks ...Hook) {
	c.hooks.Ticket = append(c.hooks.Ticket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ticket.Intercept(f(g(h())))`.
func (c *TicketClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ticket = append(c.inters.Ticket, interceptors...)
}

// Create returns a builder for creating a Ticket entity.
func (c *TicketClient) Create() *TicketCreate {
	mutation := newTicketMutation(c.config, OpCreate)
	return &TicketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ticket entities.
func (c *TicketClient) CreateBulk(builders ...*TicketCreate) *TicketCreateBulk {
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TicketClient) MapCreateBulk(slice any, setFunc func(*TicketCreate, int)) *TicketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TicketCreateBulk{err: fmt.Errorf("calling to TicketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TicketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TicketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ticket.
func (c *TicketClient) Update() *TicketUpdate {
	mutation := newTicketMutation(c.config, OpUpdate)
	return &TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TicketClient) UpdateOne(t *Ticket) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicket(t))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TicketClient) UpdateOneID(id int) *TicketUpdateOne {
	mutation := newTicketMutation(c.config, OpUpdateOne, withTicketID(id))
	return &TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ticket.
func (c *TicketClient) Delete() *TicketDelete {
	mutation := newTicketMutation(c.config, OpDelete)
	return &TicketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TicketClient) DeleteOne(t *Ticket) *TicketDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TicketClient) DeleteOneID(id int) *TicketDeleteOne {
	builder := c.Delete().Where(ticket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TicketDeleteOne{builder}
}

// Query returns a query builder for Ticket.
func (c *TicketClient) Query() *TicketQuery {
	return &TicketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTicket},
		inters: c.Interceptors(),
	}
}

// Get returns a Ticket entity by its id.
func (c *TicketClient) Get(ctx context.Context, id int) (*Ticket, error) {
	return c.Query().Where(ticket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TicketClient) GetX(ctx context.Context, id int) *Ticket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TicketClient) Hooks() []Hook {
	return c.hooks.Ticket
}

// Interceptors returns the client interceptors.
func (c *TicketClient) Interceptors() []Interceptor {
	return c.inters.Ticket
}

func (c *TicketClient) mutate(ctx context.Context, m *TicketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TicketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TicketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TicketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TicketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ticket mutation op: %q", m.Op())
	}
}

// ToolInvocationClient is a client for the ToolInvocation schema.
type ToolInvocationClient struct {
	config
}

// NewToolInvocationClient returns a client for the ToolInvocation from the given config.
func NewToolInvocationClient(c config) *ToolInvocationClient {
	return &ToolInvocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `toolinvocation.Hooks(f(g(h())))`.
func (c *ToolInvocationClient) Use(hooks ...Hook) {
	c.hooks.ToolInvocation = append(c.hooks.ToolInvocation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `toolinvocation.Intercept(f(g(h())))`.
func (c *ToolInvocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ToolInvocation = append(c.inters.ToolInvocation, interceptors...)
}

// Create returns a builder for creating a ToolInvocation entity.
func (c *ToolInvocationClient) Create() *ToolInvocationCreate {
	mutation := newToolInvocationMutation(c.config, OpCreate)
	return &ToolInvocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ToolInvocation entities.
func (c *ToolInvocationClient) CreateBulk(builders ...*ToolInvocationCreate) *ToolInvocationCreateBulk {
	return &ToolInvocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ToolInvocationClient) MapCreateBulk(slice any, setFunc func(*ToolInvocationCreate, int)) *ToolInvocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ToolInvocationCreateBulk{err: fmt.Errorf("calling to ToolInvocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ToolInvocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ToolInvocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ToolInvocation.
func (c *ToolInvocationClient) Update() *ToolInvocationUpdate {
	mutation := newToolInvocationMutation(c.config, OpUpdate)
	return &ToolInvocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToolInvocationClient) UpdateOne(ti *ToolInvocation) *ToolInvocationUpdateOne {
	mutation := newToolInvocationMutation(c.config, OpUpdateOne, withToolInvocation(ti))
	return &ToolInvocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToolInvocationClient) UpdateOneID(id int) *ToolInvocationUpdateOne {
	mutation := newToolInvocationMutation(c.config, OpUpdateOne, withToolInvocationID(id))
	return &ToolInvocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ToolInvocation.
func (c *ToolInvocationClient) Delete() *ToolInvocationDelete {
	mutation := newToolInvocationMutation(c.config, OpDelete)
	return &ToolInvocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ToolInvocationClient) DeleteOne(ti *ToolInvocation) *ToolInvocationDeleteOne {
	return c.DeleteOneID(ti.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ToolInvocationClient) DeleteOneID(id int) *ToolInvocationDeleteOne {
	builder := c.Delete().Where(toolinvocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToolInvocationDeleteOne{builder}
}

// Query returns a query builder for ToolInvocation.
func (c *ToolInvocationClient) Query() *ToolInvocationQuery {
	return &ToolInvocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToolInvocation},
		inters: c.Interceptors(),
	}
}

// Get returns a ToolInvocation entity by its id.
func (c *ToolInvocationClient) Get(ctx context.Context, id int) (*ToolInvocation, error) {
	return c.Query().Where(toolinvocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToolInvocationClient) GetX(ctx context.Context, id int) *ToolInvocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a ToolInvocation.
func (c *ToolInvocationClient) QueryConversation(ti *ToolInvocation) *ConversationQuery {
	query := (&ConversationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ti.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(toolinvocation.Table, toolinvocation.FieldID, id),
			sqlgraph.To(conversation.Table, conversation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, toolinvocation.ConversationTable, toolinvocation.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(ti.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToolInvocationClient) Hooks() []Hook {
	return c.hooks.ToolInvocation
}

// Interceptors returns the client interceptors.
func (c *ToolInvocationClient) Interceptors() []Interceptor {
	return c.inters.ToolInvocation
}

func (c *ToolInvocationClient) mutate(ctx context.Context, m *ToolInvocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ToolInvocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ToolInvocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ToolInvocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ToolInvocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ToolInvocation mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuditLog, CIAttributeDefinition, CIRelationship, CIType, ConfigurationItem,
		Conversation, Incident, KnowledgeArticle, Message, Notification,
		PromptTemplate, SLADefinition, SLAViolation, ServiceCatalog, ServiceRequest,
		Tenant, Ticket, ToolInvocation, User []ent.Hook
	}
	inters struct {
		AuditLog, CIAttributeDefinition, CIRelationship, CIType, ConfigurationItem,
		Conversation, Incident, KnowledgeArticle, Message, Notification,
		PromptTemplate, SLADefinition, SLAViolation, ServiceCatalog, ServiceRequest,
		Tenant, Ticket, ToolInvocation, User []ent.Interceptor
	}
)
