// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/conversation"
	"itsm-backend/ent/toolinvocation"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ToolInvocation is the model entity for the ToolInvocation schema.
type ToolInvocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ConversationID holds the value of the "conversation_id" field.
	ConversationID int `json:"conversation_id,omitempty"`
	// ToolName holds the value of the "tool_name" field.
	ToolName string `json:"tool_name,omitempty"`
	// Arguments holds the value of the "arguments" field.
	Arguments string `json:"arguments,omitempty"`
	// Result holds the value of the "result" field.
	Result *string `json:"result,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// NeedsApproval holds the value of the "needs_approval" field.
	NeedsApproval bool `json:"needs_approval,omitempty"`
	// ApprovalState holds the value of the "approval_state" field.
	ApprovalState string `json:"approval_state,omitempty"`
	// ApprovalReason holds the value of the "approval_reason" field.
	ApprovalReason string `json:"approval_reason,omitempty"`
	// ApprovedBy holds the value of the "approved_by" field.
	ApprovedBy int `json:"approved_by,omitempty"`
	// ApprovedAt holds the value of the "approved_at" field.
	ApprovedAt time.Time `json:"approved_at,omitempty"`
	// DryRun holds the value of the "dry_run" field.
	DryRun bool `json:"dry_run,omitempty"`
	// Error holds the value of the "error" field.
	Error *string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ToolInvocationQuery when eager-loading is set.
	Edges        ToolInvocationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ToolInvocationEdges holds the relations/edges for other nodes in the graph.
type ToolInvocationEdges struct {
	// Conversation holds the value of the conversation edge.
	Conversation *Conversation `json:"conversation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConversationOrErr returns the Conversation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ToolInvocationEdges) ConversationOrErr() (*Conversation, error) {
	if e.Conversation != nil {
		return e.Conversation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: conversation.Label}
	}
	return nil, &NotLoadedError{edge: "conversation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ToolInvocation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case toolinvocation.FieldNeedsApproval, toolinvocation.FieldDryRun:
			values[i] = new(sql.NullBool)
		case toolinvocation.FieldID, toolinvocation.FieldConversationID, toolinvocation.FieldApprovedBy:
			values[i] = new(sql.NullInt64)
		case toolinvocation.FieldToolName, toolinvocation.FieldArguments, toolinvocation.FieldResult, toolinvocation.FieldStatus, toolinvocation.FieldRequestID, toolinvocation.FieldApprovalState, toolinvocation.FieldApprovalReason, toolinvocation.FieldError:
			values[i] = new(sql.NullString)
		case toolinvocation.FieldCreatedAt, toolinvocation.FieldApprovedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ToolInvocation fields.
func (ti *ToolInvocation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case toolinvocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case toolinvocation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = value.Time
			}
		case toolinvocation.FieldConversationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value.Valid {
				ti.ConversationID = int(value.Int64)
			}
		case toolinvocation.FieldToolName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tool_name", values[i])
			} else if value.Valid {
				ti.ToolName = value.String
			}
		case toolinvocation.FieldArguments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arguments", values[i])
			} else if value.Valid {
				ti.Arguments = value.String
			}
		case toolinvocation.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				ti.Result = new(string)
				*ti.Result = value.String
			}
		case toolinvocation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ti.Status = value.String
			}
		case toolinvocation.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				ti.RequestID = value.String
			}
		case toolinvocation.FieldNeedsApproval:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field needs_approval", values[i])
			} else if value.Valid {
				ti.NeedsApproval = value.Bool
			}
		case toolinvocation.FieldApprovalState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_state", values[i])
			} else if value.Valid {
				ti.ApprovalState = value.String
			}
		case toolinvocation.FieldApprovalReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approval_reason", values[i])
			} else if value.Valid {
				ti.ApprovalReason = value.String
			}
		case toolinvocation.FieldApprovedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by", values[i])
			} else if value.Valid {
				ti.ApprovedBy = int(value.Int64)
			}
		case toolinvocation.FieldApprovedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approved_at", values[i])
			} else if value.Valid {
				ti.ApprovedAt = value.Time
			}
		case toolinvocation.FieldDryRun:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dry_run", values[i])
			} else if value.Valid {
				ti.DryRun = value.Bool
			}
		case toolinvocation.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				ti.Error = new(string)
				*ti.Error = value.String
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ToolInvocation.
// This includes values selected through modifiers, order, etc.
func (ti *ToolInvocation) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// QueryConversation queries the "conversation" edge of the ToolInvocation entity.
func (ti *ToolInvocation) QueryConversation() *ConversationQuery {
	return NewToolInvocationClient(ti.config).QueryConversation(ti)
}

// Update returns a builder for updating this ToolInvocation.
// Note that you need to call ToolInvocation.Unwrap() before calling this method if this ToolInvocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *ToolInvocation) Update() *ToolInvocationUpdateOne {
	return NewToolInvocationClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the ToolInvocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *ToolInvocation) Unwrap() *ToolInvocation {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: ToolInvocation is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *ToolInvocation) String() string {
	var builder strings.Builder
	builder.WriteString("ToolInvocation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(fmt.Sprintf("%v", ti.ConversationID))
	builder.WriteString(", ")
	builder.WriteString("tool_name=")
	builder.WriteString(ti.ToolName)
	builder.WriteString(", ")
	builder.WriteString("arguments=")
	builder.WriteString(ti.Arguments)
	builder.WriteString(", ")
	if v := ti.Result; v != nil {
		builder.WriteString("result=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ti.Status)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(ti.RequestID)
	builder.WriteString(", ")
	builder.WriteString("needs_approval=")
	builder.WriteString(fmt.Sprintf("%v", ti.NeedsApproval))
	builder.WriteString(", ")
	builder.WriteString("approval_state=")
	builder.WriteString(ti.ApprovalState)
	builder.WriteString(", ")
	builder.WriteString("approval_reason=")
	builder.WriteString(ti.ApprovalReason)
	builder.WriteString(", ")
	builder.WriteString("approved_by=")
	builder.WriteString(fmt.Sprintf("%v", ti.ApprovedBy))
	builder.WriteString(", ")
	builder.WriteString("approved_at=")
	builder.WriteString(ti.ApprovedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dry_run=")
	builder.WriteString(fmt.Sprintf("%v", ti.DryRun))
	builder.WriteString(", ")
	if v := ti.Error; v != nil {
		builder.WriteString("error=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ToolInvocations is a parsable slice of ToolInvocation.
type ToolInvocations []*ToolInvocation
