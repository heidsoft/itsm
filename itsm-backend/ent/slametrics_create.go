// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/slametrics"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SLAMetricsCreate is the builder for creating a SLAMetrics entity.
type SLAMetricsCreate struct {
	config
	mutation *SLAMetricsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (smc *SLAMetricsCreate) SetCreateTime(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetCreateTime(t)
	return smc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (smc *SLAMetricsCreate) SetNillableCreateTime(t *time.Time) *SLAMetricsCreate {
	if t != nil {
		smc.SetCreateTime(*t)
	}
	return smc
}

// SetUpdateTime sets the "update_time" field.
func (smc *SLAMetricsCreate) SetUpdateTime(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetUpdateTime(t)
	return smc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (smc *SLAMetricsCreate) SetNillableUpdateTime(t *time.Time) *SLAMetricsCreate {
	if t != nil {
		smc.SetUpdateTime(*t)
	}
	return smc
}

// SetServiceType sets the "service_type" field.
func (smc *SLAMetricsCreate) SetServiceType(s string) *SLAMetricsCreate {
	smc.mutation.SetServiceType(s)
	return smc
}

// SetPriority sets the "priority" field.
func (smc *SLAMetricsCreate) SetPriority(s string) *SLAMetricsCreate {
	smc.mutation.SetPriority(s)
	return smc
}

// SetImpact sets the "impact" field.
func (smc *SLAMetricsCreate) SetImpact(s string) *SLAMetricsCreate {
	smc.mutation.SetImpact(s)
	return smc
}

// SetTotalTickets sets the "total_tickets" field.
func (smc *SLAMetricsCreate) SetTotalTickets(i int) *SLAMetricsCreate {
	smc.mutation.SetTotalTickets(i)
	return smc
}

// SetMetSLATickets sets the "met_sla_tickets" field.
func (smc *SLAMetricsCreate) SetMetSLATickets(i int) *SLAMetricsCreate {
	smc.mutation.SetMetSLATickets(i)
	return smc
}

// SetViolatedSLATickets sets the "violated_sla_tickets" field.
func (smc *SLAMetricsCreate) SetViolatedSLATickets(i int) *SLAMetricsCreate {
	smc.mutation.SetViolatedSLATickets(i)
	return smc
}

// SetSLAComplianceRate sets the "sla_compliance_rate" field.
func (smc *SLAMetricsCreate) SetSLAComplianceRate(f float64) *SLAMetricsCreate {
	smc.mutation.SetSLAComplianceRate(f)
	return smc
}

// SetAvgResponseTime sets the "avg_response_time" field.
func (smc *SLAMetricsCreate) SetAvgResponseTime(f float64) *SLAMetricsCreate {
	smc.mutation.SetAvgResponseTime(f)
	return smc
}

// SetAvgResolutionTime sets the "avg_resolution_time" field.
func (smc *SLAMetricsCreate) SetAvgResolutionTime(f float64) *SLAMetricsCreate {
	smc.mutation.SetAvgResolutionTime(f)
	return smc
}

// SetPeriod sets the "period" field.
func (smc *SLAMetricsCreate) SetPeriod(s string) *SLAMetricsCreate {
	smc.mutation.SetPeriod(s)
	return smc
}

// SetPeriodStart sets the "period_start" field.
func (smc *SLAMetricsCreate) SetPeriodStart(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetPeriodStart(t)
	return smc
}

// SetPeriodEnd sets the "period_end" field.
func (smc *SLAMetricsCreate) SetPeriodEnd(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetPeriodEnd(t)
	return smc
}

// SetTenantID sets the "tenant_id" field.
func (smc *SLAMetricsCreate) SetTenantID(i int) *SLAMetricsCreate {
	smc.mutation.SetTenantID(i)
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *SLAMetricsCreate) SetCreatedAt(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *SLAMetricsCreate) SetUpdatedAt(t time.Time) *SLAMetricsCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// Mutation returns the SLAMetricsMutation object of the builder.
func (smc *SLAMetricsCreate) Mutation() *SLAMetricsMutation {
	return smc.mutation
}

// Save creates the SLAMetrics in the database.
func (smc *SLAMetricsCreate) Save(ctx context.Context) (*SLAMetrics, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SLAMetricsCreate) SaveX(ctx context.Context) *SLAMetrics {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SLAMetricsCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SLAMetricsCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SLAMetricsCreate) defaults() {
	if _, ok := smc.mutation.CreateTime(); !ok {
		v := slametrics.DefaultCreateTime()
		smc.mutation.SetCreateTime(v)
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		v := slametrics.DefaultUpdateTime()
		smc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SLAMetricsCreate) check() error {
	if _, ok := smc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SLAMetrics.create_time"`)}
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SLAMetrics.update_time"`)}
	}
	if _, ok := smc.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New(`ent: missing required field "SLAMetrics.service_type"`)}
	}
	if _, ok := smc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "SLAMetrics.priority"`)}
	}
	if _, ok := smc.mutation.Impact(); !ok {
		return &ValidationError{Name: "impact", err: errors.New(`ent: missing required field "SLAMetrics.impact"`)}
	}
	if _, ok := smc.mutation.TotalTickets(); !ok {
		return &ValidationError{Name: "total_tickets", err: errors.New(`ent: missing required field "SLAMetrics.total_tickets"`)}
	}
	if _, ok := smc.mutation.MetSLATickets(); !ok {
		return &ValidationError{Name: "met_sla_tickets", err: errors.New(`ent: missing required field "SLAMetrics.met_sla_tickets"`)}
	}
	if _, ok := smc.mutation.ViolatedSLATickets(); !ok {
		return &ValidationError{Name: "violated_sla_tickets", err: errors.New(`ent: missing required field "SLAMetrics.violated_sla_tickets"`)}
	}
	if _, ok := smc.mutation.SLAComplianceRate(); !ok {
		return &ValidationError{Name: "sla_compliance_rate", err: errors.New(`ent: missing required field "SLAMetrics.sla_compliance_rate"`)}
	}
	if _, ok := smc.mutation.AvgResponseTime(); !ok {
		return &ValidationError{Name: "avg_response_time", err: errors.New(`ent: missing required field "SLAMetrics.avg_response_time"`)}
	}
	if _, ok := smc.mutation.AvgResolutionTime(); !ok {
		return &ValidationError{Name: "avg_resolution_time", err: errors.New(`ent: missing required field "SLAMetrics.avg_resolution_time"`)}
	}
	if _, ok := smc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "SLAMetrics.period"`)}
	}
	if _, ok := smc.mutation.PeriodStart(); !ok {
		return &ValidationError{Name: "period_start", err: errors.New(`ent: missing required field "SLAMetrics.period_start"`)}
	}
	if _, ok := smc.mutation.PeriodEnd(); !ok {
		return &ValidationError{Name: "period_end", err: errors.New(`ent: missing required field "SLAMetrics.period_end"`)}
	}
	if _, ok := smc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SLAMetrics.tenant_id"`)}
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SLAMetrics.created_at"`)}
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SLAMetrics.updated_at"`)}
	}
	return nil
}

func (smc *SLAMetricsCreate) sqlSave(ctx context.Context) (*SLAMetrics, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SLAMetricsCreate) createSpec() (*SLAMetrics, *sqlgraph.CreateSpec) {
	var (
		_node = &SLAMetrics{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(slametrics.Table, sqlgraph.NewFieldSpec(slametrics.FieldID, field.TypeInt))
	)
	if value, ok := smc.mutation.CreateTime(); ok {
		_spec.SetField(slametrics.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := smc.mutation.UpdateTime(); ok {
		_spec.SetField(slametrics.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := smc.mutation.ServiceType(); ok {
		_spec.SetField(slametrics.FieldServiceType, field.TypeString, value)
		_node.ServiceType = value
	}
	if value, ok := smc.mutation.Priority(); ok {
		_spec.SetField(slametrics.FieldPriority, field.TypeString, value)
		_node.Priority = value
	}
	if value, ok := smc.mutation.Impact(); ok {
		_spec.SetField(slametrics.FieldImpact, field.TypeString, value)
		_node.Impact = value
	}
	if value, ok := smc.mutation.TotalTickets(); ok {
		_spec.SetField(slametrics.FieldTotalTickets, field.TypeInt, value)
		_node.TotalTickets = value
	}
	if value, ok := smc.mutation.MetSLATickets(); ok {
		_spec.SetField(slametrics.FieldMetSLATickets, field.TypeInt, value)
		_node.MetSLATickets = value
	}
	if value, ok := smc.mutation.ViolatedSLATickets(); ok {
		_spec.SetField(slametrics.FieldViolatedSLATickets, field.TypeInt, value)
		_node.ViolatedSLATickets = value
	}
	if value, ok := smc.mutation.SLAComplianceRate(); ok {
		_spec.SetField(slametrics.FieldSLAComplianceRate, field.TypeFloat64, value)
		_node.SLAComplianceRate = value
	}
	if value, ok := smc.mutation.AvgResponseTime(); ok {
		_spec.SetField(slametrics.FieldAvgResponseTime, field.TypeFloat64, value)
		_node.AvgResponseTime = value
	}
	if value, ok := smc.mutation.AvgResolutionTime(); ok {
		_spec.SetField(slametrics.FieldAvgResolutionTime, field.TypeFloat64, value)
		_node.AvgResolutionTime = value
	}
	if value, ok := smc.mutation.Period(); ok {
		_spec.SetField(slametrics.FieldPeriod, field.TypeString, value)
		_node.Period = value
	}
	if value, ok := smc.mutation.PeriodStart(); ok {
		_spec.SetField(slametrics.FieldPeriodStart, field.TypeTime, value)
		_node.PeriodStart = value
	}
	if value, ok := smc.mutation.PeriodEnd(); ok {
		_spec.SetField(slametrics.FieldPeriodEnd, field.TypeTime, value)
		_node.PeriodEnd = value
	}
	if value, ok := smc.mutation.TenantID(); ok {
		_spec.SetField(slametrics.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(slametrics.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(slametrics.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// SLAMetricsCreateBulk is the builder for creating many SLAMetrics entities in bulk.
type SLAMetricsCreateBulk struct {
	config
	err      error
	builders []*SLAMetricsCreate
}

// Save creates the SLAMetrics entities in the database.
func (smcb *SLAMetricsCreateBulk) Save(ctx context.Context) ([]*SLAMetrics, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SLAMetrics, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SLAMetricsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SLAMetricsCreateBulk) SaveX(ctx context.Context) []*SLAMetrics {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SLAMetricsCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SLAMetricsCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
