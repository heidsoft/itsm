// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/processtask"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProcessTask is the model entity for the ProcessTask schema.
type ProcessTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 任务ID，BPMN标准
	TaskID string `json:"task_id,omitempty"`
	// 流程实例ID
	ProcessInstanceID string `json:"process_instance_id,omitempty"`
	// 流程定义Key
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 任务定义Key
	TaskDefinitionKey string `json:"task_definition_key,omitempty"`
	// 任务名称
	TaskName string `json:"task_name,omitempty"`
	// 任务类型：user_task, service_task, script_task, manual_task
	TaskType string `json:"task_type,omitempty"`
	// 任务负责人
	Assignee string `json:"assignee,omitempty"`
	// 候选用户，逗号分隔
	CandidateUsers string `json:"candidate_users,omitempty"`
	// 候选组，逗号分隔
	CandidateGroups string `json:"candidate_groups,omitempty"`
	// 任务状态：created, assigned, started, completed, cancelled
	Status string `json:"status,omitempty"`
	// 优先级：low, normal, high, urgent
	Priority string `json:"priority,omitempty"`
	// 到期时间
	DueDate time.Time `json:"due_date,omitempty"`
	// 创建时间
	CreatedTime time.Time `json:"created_time,omitempty"`
	// 分配时间
	AssignedTime time.Time `json:"assigned_time,omitempty"`
	// 开始时间
	StartedTime time.Time `json:"started_time,omitempty"`
	// 完成时间
	CompletedTime time.Time `json:"completed_time,omitempty"`
	// 表单Key
	FormKey string `json:"form_key,omitempty"`
	// 任务变量
	TaskVariables map[string]interface{} `json:"task_variables,omitempty"`
	// 任务描述
	Description string `json:"description,omitempty"`
	// 父任务ID
	ParentTaskID string `json:"parent_task_id,omitempty"`
	// 根任务ID
	RootTaskID string `json:"root_task_id,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processtask.FieldTaskVariables:
			values[i] = new([]byte)
		case processtask.FieldID, processtask.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case processtask.FieldTaskID, processtask.FieldProcessInstanceID, processtask.FieldProcessDefinitionKey, processtask.FieldTaskDefinitionKey, processtask.FieldTaskName, processtask.FieldTaskType, processtask.FieldAssignee, processtask.FieldCandidateUsers, processtask.FieldCandidateGroups, processtask.FieldStatus, processtask.FieldPriority, processtask.FieldFormKey, processtask.FieldDescription, processtask.FieldParentTaskID, processtask.FieldRootTaskID:
			values[i] = new(sql.NullString)
		case processtask.FieldDueDate, processtask.FieldCreatedTime, processtask.FieldAssignedTime, processtask.FieldStartedTime, processtask.FieldCompletedTime, processtask.FieldCreatedAt, processtask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessTask fields.
func (pt *ProcessTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processtask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = int(value.Int64)
		case processtask.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				pt.TaskID = value.String
			}
		case processtask.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				pt.ProcessInstanceID = value.String
			}
		case processtask.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				pt.ProcessDefinitionKey = value.String
			}
		case processtask.FieldTaskDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_definition_key", values[i])
			} else if value.Valid {
				pt.TaskDefinitionKey = value.String
			}
		case processtask.FieldTaskName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_name", values[i])
			} else if value.Valid {
				pt.TaskName = value.String
			}
		case processtask.FieldTaskType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_type", values[i])
			} else if value.Valid {
				pt.TaskType = value.String
			}
		case processtask.FieldAssignee:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assignee", values[i])
			} else if value.Valid {
				pt.Assignee = value.String
			}
		case processtask.FieldCandidateUsers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_users", values[i])
			} else if value.Valid {
				pt.CandidateUsers = value.String
			}
		case processtask.FieldCandidateGroups:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field candidate_groups", values[i])
			} else if value.Valid {
				pt.CandidateGroups = value.String
			}
		case processtask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pt.Status = value.String
			}
		case processtask.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				pt.Priority = value.String
			}
		case processtask.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				pt.DueDate = value.Time
			}
		case processtask.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				pt.CreatedTime = value.Time
			}
		case processtask.FieldAssignedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_time", values[i])
			} else if value.Valid {
				pt.AssignedTime = value.Time
			}
		case processtask.FieldStartedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_time", values[i])
			} else if value.Valid {
				pt.StartedTime = value.Time
			}
		case processtask.FieldCompletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_time", values[i])
			} else if value.Valid {
				pt.CompletedTime = value.Time
			}
		case processtask.FieldFormKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_key", values[i])
			} else if value.Valid {
				pt.FormKey = value.String
			}
		case processtask.FieldTaskVariables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field task_variables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pt.TaskVariables); err != nil {
					return fmt.Errorf("unmarshal field task_variables: %w", err)
				}
			}
		case processtask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pt.Description = value.String
			}
		case processtask.FieldParentTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_task_id", values[i])
			} else if value.Valid {
				pt.ParentTaskID = value.String
			}
		case processtask.FieldRootTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_task_id", values[i])
			} else if value.Valid {
				pt.RootTaskID = value.String
			}
		case processtask.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pt.TenantID = int(value.Int64)
			}
		case processtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case processtask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessTask.
// This includes values selected through modifiers, order, etc.
func (pt *ProcessTask) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessTask.
// Note that you need to call ProcessTask.Unwrap() before calling this method if this ProcessTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProcessTask) Update() *ProcessTaskUpdateOne {
	return NewProcessTaskClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the ProcessTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *ProcessTask) Unwrap() *ProcessTask {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessTask is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProcessTask) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("task_id=")
	builder.WriteString(pt.TaskID)
	builder.WriteString(", ")
	builder.WriteString("process_instance_id=")
	builder.WriteString(pt.ProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(pt.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("task_definition_key=")
	builder.WriteString(pt.TaskDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("task_name=")
	builder.WriteString(pt.TaskName)
	builder.WriteString(", ")
	builder.WriteString("task_type=")
	builder.WriteString(pt.TaskType)
	builder.WriteString(", ")
	builder.WriteString("assignee=")
	builder.WriteString(pt.Assignee)
	builder.WriteString(", ")
	builder.WriteString("candidate_users=")
	builder.WriteString(pt.CandidateUsers)
	builder.WriteString(", ")
	builder.WriteString("candidate_groups=")
	builder.WriteString(pt.CandidateGroups)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pt.Status)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(pt.Priority)
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(pt.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_time=")
	builder.WriteString(pt.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("assigned_time=")
	builder.WriteString(pt.AssignedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_time=")
	builder.WriteString(pt.StartedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_time=")
	builder.WriteString(pt.CompletedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("form_key=")
	builder.WriteString(pt.FormKey)
	builder.WriteString(", ")
	builder.WriteString("task_variables=")
	builder.WriteString(fmt.Sprintf("%v", pt.TaskVariables))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pt.Description)
	builder.WriteString(", ")
	builder.WriteString("parent_task_id=")
	builder.WriteString(pt.ParentTaskID)
	builder.WriteString(", ")
	builder.WriteString("root_task_id=")
	builder.WriteString(pt.RootTaskID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pt.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessTasks is a parsable slice of ProcessTask.
type ProcessTasks []*ProcessTask
