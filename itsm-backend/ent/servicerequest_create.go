// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/servicerequest"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceRequestCreate is the builder for creating a ServiceRequest entity.
type ServiceRequestCreate struct {
	config
	mutation *ServiceRequestMutation
	hooks    []Hook
}

// SetCatalogID sets the "catalog_id" field.
func (src *ServiceRequestCreate) SetCatalogID(i int) *ServiceRequestCreate {
	src.mutation.SetCatalogID(i)
	return src
}

// SetRequesterID sets the "requester_id" field.
func (src *ServiceRequestCreate) SetRequesterID(i int) *ServiceRequestCreate {
	src.mutation.SetRequesterID(i)
	return src
}

// SetStatus sets the "status" field.
func (src *ServiceRequestCreate) SetStatus(s string) *ServiceRequestCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableStatus(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetStatus(*s)
	}
	return src
}

// SetReason sets the "reason" field.
func (src *ServiceRequestCreate) SetReason(s string) *ServiceRequestCreate {
	src.mutation.SetReason(s)
	return src
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableReason(s *string) *ServiceRequestCreate {
	if s != nil {
		src.SetReason(*s)
	}
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *ServiceRequestCreate) SetCreatedAt(t time.Time) *ServiceRequestCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableCreatedAt(t *time.Time) *ServiceRequestCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *ServiceRequestCreate) SetUpdatedAt(t time.Time) *ServiceRequestCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *ServiceRequestCreate) SetNillableUpdatedAt(t *time.Time) *ServiceRequestCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// Mutation returns the ServiceRequestMutation object of the builder.
func (src *ServiceRequestCreate) Mutation() *ServiceRequestMutation {
	return src.mutation
}

// Save creates the ServiceRequest in the database.
func (src *ServiceRequestCreate) Save(ctx context.Context) (*ServiceRequest, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *ServiceRequestCreate) SaveX(ctx context.Context) *ServiceRequest {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *ServiceRequestCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *ServiceRequestCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *ServiceRequestCreate) defaults() {
	if _, ok := src.mutation.Status(); !ok {
		v := servicerequest.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := servicerequest.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := servicerequest.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *ServiceRequestCreate) check() error {
	if _, ok := src.mutation.CatalogID(); !ok {
		return &ValidationError{Name: "catalog_id", err: errors.New(`ent: missing required field "ServiceRequest.catalog_id"`)}
	}
	if v, ok := src.mutation.CatalogID(); ok {
		if err := servicerequest.CatalogIDValidator(v); err != nil {
			return &ValidationError{Name: "catalog_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.catalog_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.RequesterID(); !ok {
		return &ValidationError{Name: "requester_id", err: errors.New(`ent: missing required field "ServiceRequest.requester_id"`)}
	}
	if v, ok := src.mutation.RequesterID(); ok {
		if err := servicerequest.RequesterIDValidator(v); err != nil {
			return &ValidationError{Name: "requester_id", err: fmt.Errorf(`ent: validator failed for field "ServiceRequest.requester_id": %w`, err)}
		}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ServiceRequest.status"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServiceRequest.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServiceRequest.updated_at"`)}
	}
	return nil
}

func (src *ServiceRequestCreate) sqlSave(ctx context.Context) (*ServiceRequest, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *ServiceRequestCreate) createSpec() (*ServiceRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceRequest{config: src.config}
		_spec = sqlgraph.NewCreateSpec(servicerequest.Table, sqlgraph.NewFieldSpec(servicerequest.FieldID, field.TypeInt))
	)
	if value, ok := src.mutation.CatalogID(); ok {
		_spec.SetField(servicerequest.FieldCatalogID, field.TypeInt, value)
		_node.CatalogID = value
	}
	if value, ok := src.mutation.RequesterID(); ok {
		_spec.SetField(servicerequest.FieldRequesterID, field.TypeInt, value)
		_node.RequesterID = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(servicerequest.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := src.mutation.Reason(); ok {
		_spec.SetField(servicerequest.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(servicerequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(servicerequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ServiceRequestCreateBulk is the builder for creating many ServiceRequest entities in bulk.
type ServiceRequestCreateBulk struct {
	config
	err      error
	builders []*ServiceRequestCreate
}

// Save creates the ServiceRequest entities in the database.
func (srcb *ServiceRequestCreateBulk) Save(ctx context.Context) ([]*ServiceRequest, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*ServiceRequest, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *ServiceRequestCreateBulk) SaveX(ctx context.Context) []*ServiceRequest {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *ServiceRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *ServiceRequestCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
