// Code generated by ent, DO NOT EDIT.

package notification

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ActionURL applies equality check predicate on the "action_url" field. It's identical to ActionURLEQ.
func ActionURL(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldActionURL, v))
}

// ActionText applies equality check predicate on the "action_text" field. It's identical to ActionTextEQ.
func ActionText(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldActionText, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTitle, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldMessage, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldType, v))
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRead, v))
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRead, v))
}

// ActionURLEQ applies the EQ predicate on the "action_url" field.
func ActionURLEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldActionURL, v))
}

// ActionURLNEQ applies the NEQ predicate on the "action_url" field.
func ActionURLNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldActionURL, v))
}

// ActionURLIn applies the In predicate on the "action_url" field.
func ActionURLIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldActionURL, vs...))
}

// ActionURLNotIn applies the NotIn predicate on the "action_url" field.
func ActionURLNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldActionURL, vs...))
}

// ActionURLGT applies the GT predicate on the "action_url" field.
func ActionURLGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldActionURL, v))
}

// ActionURLGTE applies the GTE predicate on the "action_url" field.
func ActionURLGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldActionURL, v))
}

// ActionURLLT applies the LT predicate on the "action_url" field.
func ActionURLLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldActionURL, v))
}

// ActionURLLTE applies the LTE predicate on the "action_url" field.
func ActionURLLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldActionURL, v))
}

// ActionURLContains applies the Contains predicate on the "action_url" field.
func ActionURLContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldActionURL, v))
}

// ActionURLHasPrefix applies the HasPrefix predicate on the "action_url" field.
func ActionURLHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldActionURL, v))
}

// ActionURLHasSuffix applies the HasSuffix predicate on the "action_url" field.
func ActionURLHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldActionURL, v))
}

// ActionURLIsNil applies the IsNil predicate on the "action_url" field.
func ActionURLIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldActionURL))
}

// ActionURLNotNil applies the NotNil predicate on the "action_url" field.
func ActionURLNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldActionURL))
}

// ActionURLEqualFold applies the EqualFold predicate on the "action_url" field.
func ActionURLEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldActionURL, v))
}

// ActionURLContainsFold applies the ContainsFold predicate on the "action_url" field.
func ActionURLContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldActionURL, v))
}

// ActionTextEQ applies the EQ predicate on the "action_text" field.
func ActionTextEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldActionText, v))
}

// ActionTextNEQ applies the NEQ predicate on the "action_text" field.
func ActionTextNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldActionText, v))
}

// ActionTextIn applies the In predicate on the "action_text" field.
func ActionTextIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldActionText, vs...))
}

// ActionTextNotIn applies the NotIn predicate on the "action_text" field.
func ActionTextNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldActionText, vs...))
}

// ActionTextGT applies the GT predicate on the "action_text" field.
func ActionTextGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldActionText, v))
}

// ActionTextGTE applies the GTE predicate on the "action_text" field.
func ActionTextGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldActionText, v))
}

// ActionTextLT applies the LT predicate on the "action_text" field.
func ActionTextLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldActionText, v))
}

// ActionTextLTE applies the LTE predicate on the "action_text" field.
func ActionTextLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldActionText, v))
}

// ActionTextContains applies the Contains predicate on the "action_text" field.
func ActionTextContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldActionText, v))
}

// ActionTextHasPrefix applies the HasPrefix predicate on the "action_text" field.
func ActionTextHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldActionText, v))
}

// ActionTextHasSuffix applies the HasSuffix predicate on the "action_text" field.
func ActionTextHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldActionText, v))
}

// ActionTextIsNil applies the IsNil predicate on the "action_text" field.
func ActionTextIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldActionText))
}

// ActionTextNotNil applies the NotNil predicate on the "action_text" field.
func ActionTextNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldActionText))
}

// ActionTextEqualFold applies the EqualFold predicate on the "action_text" field.
func ActionTextEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldActionText, v))
}

// ActionTextContainsFold applies the ContainsFold predicate on the "action_text" field.
func ActionTextContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldActionText, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUserID, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
