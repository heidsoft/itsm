// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/servicecatalog"
	"itsm-backend/ent/servicerequest"
	"itsm-backend/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ServiceRequest is the model entity for the ServiceRequest schema.
type ServiceRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 服务目录ID
	CatalogID int `json:"catalog_id,omitempty"`
	// 申请人ID
	RequesterID int `json:"requester_id,omitempty"`
	// 请求状态
	Status servicerequest.Status `json:"status,omitempty"`
	// 申请原因
	Reason string `json:"reason,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceRequestQuery when eager-loading is set.
	Edges        ServiceRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ServiceRequestEdges holds the relations/edges for other nodes in the graph.
type ServiceRequestEdges struct {
	// Catalog holds the value of the catalog edge.
	Catalog *ServiceCatalog `json:"catalog,omitempty"`
	// Requester holds the value of the requester edge.
	Requester *User `json:"requester,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CatalogOrErr returns the Catalog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceRequestEdges) CatalogOrErr() (*ServiceCatalog, error) {
	if e.Catalog != nil {
		return e.Catalog, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: servicecatalog.Label}
	}
	return nil, &NotLoadedError{edge: "catalog"}
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceRequestEdges) RequesterOrErr() (*User, error) {
	if e.Requester != nil {
		return e.Requester, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicerequest.FieldID, servicerequest.FieldCatalogID, servicerequest.FieldRequesterID:
			values[i] = new(sql.NullInt64)
		case servicerequest.FieldStatus, servicerequest.FieldReason:
			values[i] = new(sql.NullString)
		case servicerequest.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceRequest fields.
func (sr *ServiceRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicerequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case servicerequest.FieldCatalogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field catalog_id", values[i])
			} else if value.Valid {
				sr.CatalogID = int(value.Int64)
			}
		case servicerequest.FieldRequesterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field requester_id", values[i])
			} else if value.Valid {
				sr.RequesterID = int(value.Int64)
			}
		case servicerequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = servicerequest.Status(value.String)
			}
		case servicerequest.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				sr.Reason = value.String
			}
		case servicerequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceRequest.
// This includes values selected through modifiers, order, etc.
func (sr *ServiceRequest) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QueryCatalog queries the "catalog" edge of the ServiceRequest entity.
func (sr *ServiceRequest) QueryCatalog() *ServiceCatalogQuery {
	return NewServiceRequestClient(sr.config).QueryCatalog(sr)
}

// QueryRequester queries the "requester" edge of the ServiceRequest entity.
func (sr *ServiceRequest) QueryRequester() *UserQuery {
	return NewServiceRequestClient(sr.config).QueryRequester(sr)
}

// Update returns a builder for updating this ServiceRequest.
// Note that you need to call ServiceRequest.Unwrap() before calling this method if this ServiceRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *ServiceRequest) Update() *ServiceRequestUpdateOne {
	return NewServiceRequestClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the ServiceRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *ServiceRequest) Unwrap() *ServiceRequest {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceRequest is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *ServiceRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("catalog_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.CatalogID))
	builder.WriteString(", ")
	builder.WriteString("requester_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.RequesterID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(sr.Reason)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ServiceRequests is a parsable slice of ServiceRequest.
type ServiceRequests []*ServiceRequest
