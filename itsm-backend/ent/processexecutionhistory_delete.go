// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/processexecutionhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessExecutionHistoryDelete is the builder for deleting a ProcessExecutionHistory entity.
type ProcessExecutionHistoryDelete struct {
	config
	hooks    []Hook
	mutation *ProcessExecutionHistoryMutation
}

// Where appends a list predicates to the ProcessExecutionHistoryDelete builder.
func (pehd *ProcessExecutionHistoryDelete) Where(ps ...predicate.ProcessExecutionHistory) *ProcessExecutionHistoryDelete {
	pehd.mutation.Where(ps...)
	return pehd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pehd *ProcessExecutionHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pehd.sqlExec, pehd.mutation, pehd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pehd *ProcessExecutionHistoryDelete) ExecX(ctx context.Context) int {
	n, err := pehd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pehd *ProcessExecutionHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(processexecutionhistory.Table, sqlgraph.NewFieldSpec(processexecutionhistory.FieldID, field.TypeInt))
	if ps := pehd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pehd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pehd.mutation.done = true
	return affected, err
}

// ProcessExecutionHistoryDeleteOne is the builder for deleting a single ProcessExecutionHistory entity.
type ProcessExecutionHistoryDeleteOne struct {
	pehd *ProcessExecutionHistoryDelete
}

// Where appends a list predicates to the ProcessExecutionHistoryDelete builder.
func (pehdo *ProcessExecutionHistoryDeleteOne) Where(ps ...predicate.ProcessExecutionHistory) *ProcessExecutionHistoryDeleteOne {
	pehdo.pehd.mutation.Where(ps...)
	return pehdo
}

// Exec executes the deletion query.
func (pehdo *ProcessExecutionHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := pehdo.pehd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{processexecutionhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pehdo *ProcessExecutionHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := pehdo.Exec(ctx); err != nil {
		panic(err)
	}
}
