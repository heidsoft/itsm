// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/tenant"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 租户名称
	Name string `json:"name,omitempty"`
	// 租户代码
	Code string `json:"code,omitempty"`
	// 自定义域名
	Domain string `json:"domain,omitempty"`
	// 租户状态
	Status tenant.Status `json:"status,omitempty"`
	// 租户类型
	Type tenant.Type `json:"type,omitempty"`
	// 租户配置
	Settings map[string]interface{} `json:"settings,omitempty"`
	// 资源配额
	Quota map[string]interface{} `json:"quota,omitempty"`
	// 过期时间
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges        TenantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Tickets holds the value of the tickets edge.
	Tickets []*Ticket `json:"tickets,omitempty"`
	// ServiceCatalogs holds the value of the service_catalogs edge.
	ServiceCatalogs []*ServiceCatalog `json:"service_catalogs,omitempty"`
	// ServiceRequests holds the value of the service_requests edge.
	ServiceRequests []*ServiceRequest `json:"service_requests,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[1] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// ServiceCatalogsOrErr returns the ServiceCatalogs value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ServiceCatalogsOrErr() ([]*ServiceCatalog, error) {
	if e.loadedTypes[2] {
		return e.ServiceCatalogs, nil
	}
	return nil, &NotLoadedError{edge: "service_catalogs"}
}

// ServiceRequestsOrErr returns the ServiceRequests value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) ServiceRequestsOrErr() ([]*ServiceRequest, error) {
	if e.loadedTypes[3] {
		return e.ServiceRequests, nil
	}
	return nil, &NotLoadedError{edge: "service_requests"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[4] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldSettings, tenant.FieldQuota:
			values[i] = new([]byte)
		case tenant.FieldID:
			values[i] = new(sql.NullInt64)
		case tenant.FieldName, tenant.FieldCode, tenant.FieldDomain, tenant.FieldStatus, tenant.FieldType:
			values[i] = new(sql.NullString)
		case tenant.FieldExpiresAt, tenant.FieldCreatedAt, tenant.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (t *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tenant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tenant.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case tenant.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				t.Domain = value.String
			}
		case tenant.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = tenant.Status(value.String)
			}
		case tenant.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = tenant.Type(value.String)
			}
		case tenant.FieldSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Settings); err != nil {
					return fmt.Errorf("unmarshal field settings: %w", err)
				}
			}
		case tenant.FieldQuota:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field quota", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Quota); err != nil {
					return fmt.Errorf("unmarshal field quota: %w", err)
				}
			}
		case tenant.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				t.ExpiresAt = new(time.Time)
				*t.ExpiresAt = value.Time
			}
		case tenant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tenant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenant.
// This includes values selected through modifiers, order, etc.
func (t *Tenant) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Tenant entity.
func (t *Tenant) QueryUsers() *UserQuery {
	return NewTenantClient(t.config).QueryUsers(t)
}

// QueryTickets queries the "tickets" edge of the Tenant entity.
func (t *Tenant) QueryTickets() *TicketQuery {
	return NewTenantClient(t.config).QueryTickets(t)
}

// QueryServiceCatalogs queries the "service_catalogs" edge of the Tenant entity.
func (t *Tenant) QueryServiceCatalogs() *ServiceCatalogQuery {
	return NewTenantClient(t.config).QueryServiceCatalogs(t)
}

// QueryServiceRequests queries the "service_requests" edge of the Tenant entity.
func (t *Tenant) QueryServiceRequests() *ServiceRequestQuery {
	return NewTenantClient(t.config).QueryServiceRequests(t)
}

// QuerySubscriptions queries the "subscriptions" edge of the Tenant entity.
func (t *Tenant) QuerySubscriptions() *SubscriptionQuery {
	return NewTenantClient(t.config).QuerySubscriptions(t)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tenant) Unwrap() *Tenant {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tenant is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(t.Code)
	builder.WriteString(", ")
	builder.WriteString("domain=")
	builder.WriteString(t.Domain)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", t.Settings))
	builder.WriteString(", ")
	builder.WriteString("quota=")
	builder.WriteString(fmt.Sprintf("%v", t.Quota))
	builder.WriteString(", ")
	if v := t.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant
