// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"itsm-backend/ent/ciattributedefinition"
	"itsm-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIAttributeDefinitionDelete is the builder for deleting a CIAttributeDefinition entity.
type CIAttributeDefinitionDelete struct {
	config
	hooks    []Hook
	mutation *CIAttributeDefinitionMutation
}

// Where appends a list predicates to the CIAttributeDefinitionDelete builder.
func (cadd *CIAttributeDefinitionDelete) Where(ps ...predicate.CIAttributeDefinition) *CIAttributeDefinitionDelete {
	cadd.mutation.Where(ps...)
	return cadd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cadd *CIAttributeDefinitionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cadd.sqlExec, cadd.mutation, cadd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cadd *CIAttributeDefinitionDelete) ExecX(ctx context.Context) int {
	n, err := cadd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cadd *CIAttributeDefinitionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ciattributedefinition.Table, sqlgraph.NewFieldSpec(ciattributedefinition.FieldID, field.TypeInt))
	if ps := cadd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cadd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cadd.mutation.done = true
	return affected, err
}

// CIAttributeDefinitionDeleteOne is the builder for deleting a single CIAttributeDefinition entity.
type CIAttributeDefinitionDeleteOne struct {
	cadd *CIAttributeDefinitionDelete
}

// Where appends a list predicates to the CIAttributeDefinitionDelete builder.
func (caddo *CIAttributeDefinitionDeleteOne) Where(ps ...predicate.CIAttributeDefinition) *CIAttributeDefinitionDeleteOne {
	caddo.cadd.mutation.Where(ps...)
	return caddo
}

// Exec executes the deletion query.
func (caddo *CIAttributeDefinitionDeleteOne) Exec(ctx context.Context) error {
	n, err := caddo.cadd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ciattributedefinition.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (caddo *CIAttributeDefinitionDeleteOne) ExecX(ctx context.Context) {
	if err := caddo.Exec(ctx); err != nil {
		panic(err)
	}
}
