// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"itsm-backend/ent/tickettemplate"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TicketTemplate is the model entity for the TicketTemplate schema.
type TicketTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 模板名称
	Name string `json:"name,omitempty"`
	// 模板描述
	Description string `json:"description,omitempty"`
	// 工单分类
	Category string `json:"category,omitempty"`
	// 默认优先级
	Priority string `json:"priority,omitempty"`
	// 表单字段定义
	FormFields []uint8 `json:"form_fields,omitempty"`
	// 工作流步骤定义
	WorkflowSteps []uint8 `json:"workflow_steps,omitempty"`
	// 是否启用
	IsActive bool `json:"is_active,omitempty"`
	// 租户ID
	TenantID int `json:"tenant_id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketTemplateQuery when eager-loading is set.
	Edges        TicketTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketTemplateEdges holds the relations/edges for other nodes in the graph.
type TicketTemplateEdges struct {
	// 使用此模板的工单
	Tickets []*Ticket `json:"tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e TicketTemplateEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[0] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TicketTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tickettemplate.FieldFormFields, tickettemplate.FieldWorkflowSteps:
			values[i] = new([]byte)
		case tickettemplate.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tickettemplate.FieldID, tickettemplate.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case tickettemplate.FieldName, tickettemplate.FieldDescription, tickettemplate.FieldCategory, tickettemplate.FieldPriority:
			values[i] = new(sql.NullString)
		case tickettemplate.FieldCreatedAt, tickettemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TicketTemplate fields.
func (tt *TicketTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tickettemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case tickettemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case tickettemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tt.Description = value.String
			}
		case tickettemplate.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				tt.Category = value.String
			}
		case tickettemplate.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				tt.Priority = value.String
			}
		case tickettemplate.FieldFormFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form_fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tt.FormFields); err != nil {
					return fmt.Errorf("unmarshal field form_fields: %w", err)
				}
			}
		case tickettemplate.FieldWorkflowSteps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_steps", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tt.WorkflowSteps); err != nil {
					return fmt.Errorf("unmarshal field workflow_steps: %w", err)
				}
			}
		case tickettemplate.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				tt.IsActive = value.Bool
			}
		case tickettemplate.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tt.TenantID = int(value.Int64)
			}
		case tickettemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case tickettemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TicketTemplate.
// This includes values selected through modifiers, order, etc.
func (tt *TicketTemplate) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryTickets queries the "tickets" edge of the TicketTemplate entity.
func (tt *TicketTemplate) QueryTickets() *TicketQuery {
	return NewTicketTemplateClient(tt.config).QueryTickets(tt)
}

// Update returns a builder for updating this TicketTemplate.
// Note that you need to call TicketTemplate.Unwrap() before calling this method if this TicketTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TicketTemplate) Update() *TicketTemplateUpdateOne {
	return NewTicketTemplateClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TicketTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TicketTemplate) Unwrap() *TicketTemplate {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TicketTemplate is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TicketTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("TicketTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tt.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(tt.Category)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(tt.Priority)
	builder.WriteString(", ")
	builder.WriteString("form_fields=")
	builder.WriteString(fmt.Sprintf("%v", tt.FormFields))
	builder.WriteString(", ")
	builder.WriteString("workflow_steps=")
	builder.WriteString(fmt.Sprintf("%v", tt.WorkflowSteps))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", tt.IsActive))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TicketTemplates is a parsable slice of TicketTemplate.
type TicketTemplates []*TicketTemplate
