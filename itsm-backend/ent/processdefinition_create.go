// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processdefinition"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessDefinitionCreate is the builder for creating a ProcessDefinition entity.
type ProcessDefinitionCreate struct {
	config
	mutation *ProcessDefinitionMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (pdc *ProcessDefinitionCreate) SetKey(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetKey(s)
	return pdc
}

// SetName sets the "name" field.
func (pdc *ProcessDefinitionCreate) SetName(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetName(s)
	return pdc
}

// SetDescription sets the "description" field.
func (pdc *ProcessDefinitionCreate) SetDescription(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetDescription(s)
	return pdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableDescription(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetDescription(*s)
	}
	return pdc
}

// SetVersion sets the "version" field.
func (pdc *ProcessDefinitionCreate) SetVersion(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetVersion(s)
	return pdc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableVersion(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetVersion(*s)
	}
	return pdc
}

// SetCategory sets the "category" field.
func (pdc *ProcessDefinitionCreate) SetCategory(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetCategory(s)
	return pdc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableCategory(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetCategory(*s)
	}
	return pdc
}

// SetBpmnXML sets the "bpmn_xml" field.
func (pdc *ProcessDefinitionCreate) SetBpmnXML(u []uint8) *ProcessDefinitionCreate {
	pdc.mutation.SetBpmnXML(u)
	return pdc
}

// SetProcessVariables sets the "process_variables" field.
func (pdc *ProcessDefinitionCreate) SetProcessVariables(m map[string]interface{}) *ProcessDefinitionCreate {
	pdc.mutation.SetProcessVariables(m)
	return pdc
}

// SetIsActive sets the "is_active" field.
func (pdc *ProcessDefinitionCreate) SetIsActive(b bool) *ProcessDefinitionCreate {
	pdc.mutation.SetIsActive(b)
	return pdc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableIsActive(b *bool) *ProcessDefinitionCreate {
	if b != nil {
		pdc.SetIsActive(*b)
	}
	return pdc
}

// SetIsLatest sets the "is_latest" field.
func (pdc *ProcessDefinitionCreate) SetIsLatest(b bool) *ProcessDefinitionCreate {
	pdc.mutation.SetIsLatest(b)
	return pdc
}

// SetNillableIsLatest sets the "is_latest" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableIsLatest(b *bool) *ProcessDefinitionCreate {
	if b != nil {
		pdc.SetIsLatest(*b)
	}
	return pdc
}

// SetDeploymentID sets the "deployment_id" field.
func (pdc *ProcessDefinitionCreate) SetDeploymentID(i int) *ProcessDefinitionCreate {
	pdc.mutation.SetDeploymentID(i)
	return pdc
}

// SetDeploymentName sets the "deployment_name" field.
func (pdc *ProcessDefinitionCreate) SetDeploymentName(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetDeploymentName(s)
	return pdc
}

// SetNillableDeploymentName sets the "deployment_name" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableDeploymentName(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetDeploymentName(*s)
	}
	return pdc
}

// SetDeployedAt sets the "deployed_at" field.
func (pdc *ProcessDefinitionCreate) SetDeployedAt(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetDeployedAt(t)
	return pdc
}

// SetNillableDeployedAt sets the "deployed_at" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableDeployedAt(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetDeployedAt(*t)
	}
	return pdc
}

// SetTenantID sets the "tenant_id" field.
func (pdc *ProcessDefinitionCreate) SetTenantID(i int) *ProcessDefinitionCreate {
	pdc.mutation.SetTenantID(i)
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcessDefinitionCreate) SetCreatedAt(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableCreatedAt(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProcessDefinitionCreate) SetUpdatedAt(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableUpdatedAt(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// Mutation returns the ProcessDefinitionMutation object of the builder.
func (pdc *ProcessDefinitionCreate) Mutation() *ProcessDefinitionMutation {
	return pdc.mutation
}

// Save creates the ProcessDefinition in the database.
func (pdc *ProcessDefinitionCreate) Save(ctx context.Context) (*ProcessDefinition, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcessDefinitionCreate) SaveX(ctx context.Context) *ProcessDefinition {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcessDefinitionCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcessDefinitionCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProcessDefinitionCreate) defaults() {
	if _, ok := pdc.mutation.Version(); !ok {
		v := processdefinition.DefaultVersion
		pdc.mutation.SetVersion(v)
	}
	if _, ok := pdc.mutation.Category(); !ok {
		v := processdefinition.DefaultCategory
		pdc.mutation.SetCategory(v)
	}
	if _, ok := pdc.mutation.IsActive(); !ok {
		v := processdefinition.DefaultIsActive
		pdc.mutation.SetIsActive(v)
	}
	if _, ok := pdc.mutation.IsLatest(); !ok {
		v := processdefinition.DefaultIsLatest
		pdc.mutation.SetIsLatest(v)
	}
	if _, ok := pdc.mutation.DeployedAt(); !ok {
		v := processdefinition.DefaultDeployedAt()
		pdc.mutation.SetDeployedAt(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := processdefinition.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := processdefinition.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcessDefinitionCreate) check() error {
	if _, ok := pdc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ProcessDefinition.key"`)}
	}
	if v, ok := pdc.mutation.Key(); ok {
		if err := processdefinition.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.key": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProcessDefinition.name"`)}
	}
	if v, ok := pdc.mutation.Name(); ok {
		if err := processdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.name": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ProcessDefinition.version"`)}
	}
	if _, ok := pdc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "ProcessDefinition.category"`)}
	}
	if _, ok := pdc.mutation.BpmnXML(); !ok {
		return &ValidationError{Name: "bpmn_xml", err: errors.New(`ent: missing required field "ProcessDefinition.bpmn_xml"`)}
	}
	if _, ok := pdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ProcessDefinition.is_active"`)}
	}
	if _, ok := pdc.mutation.IsLatest(); !ok {
		return &ValidationError{Name: "is_latest", err: errors.New(`ent: missing required field "ProcessDefinition.is_latest"`)}
	}
	if _, ok := pdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "ProcessDefinition.deployment_id"`)}
	}
	if v, ok := pdc.mutation.DeploymentID(); ok {
		if err := processdefinition.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.deployment_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DeployedAt(); !ok {
		return &ValidationError{Name: "deployed_at", err: errors.New(`ent: missing required field "ProcessDefinition.deployed_at"`)}
	}
	if _, ok := pdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessDefinition.tenant_id"`)}
	}
	if v, ok := pdc.mutation.TenantID(); ok {
		if err := processdefinition.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.tenant_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessDefinition.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessDefinition.updated_at"`)}
	}
	return nil
}

func (pdc *ProcessDefinitionCreate) sqlSave(ctx context.Context) (*ProcessDefinition, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcessDefinitionCreate) createSpec() (*ProcessDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessDefinition{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(processdefinition.Table, sqlgraph.NewFieldSpec(processdefinition.FieldID, field.TypeInt))
	)
	if value, ok := pdc.mutation.Key(); ok {
		_spec.SetField(processdefinition.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pdc.mutation.Name(); ok {
		_spec.SetField(processdefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pdc.mutation.Description(); ok {
		_spec.SetField(processdefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pdc.mutation.Version(); ok {
		_spec.SetField(processdefinition.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := pdc.mutation.Category(); ok {
		_spec.SetField(processdefinition.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pdc.mutation.BpmnXML(); ok {
		_spec.SetField(processdefinition.FieldBpmnXML, field.TypeJSON, value)
		_node.BpmnXML = value
	}
	if value, ok := pdc.mutation.ProcessVariables(); ok {
		_spec.SetField(processdefinition.FieldProcessVariables, field.TypeJSON, value)
		_node.ProcessVariables = value
	}
	if value, ok := pdc.mutation.IsActive(); ok {
		_spec.SetField(processdefinition.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pdc.mutation.IsLatest(); ok {
		_spec.SetField(processdefinition.FieldIsLatest, field.TypeBool, value)
		_node.IsLatest = value
	}
	if value, ok := pdc.mutation.DeploymentID(); ok {
		_spec.SetField(processdefinition.FieldDeploymentID, field.TypeInt, value)
		_node.DeploymentID = value
	}
	if value, ok := pdc.mutation.DeploymentName(); ok {
		_spec.SetField(processdefinition.FieldDeploymentName, field.TypeString, value)
		_node.DeploymentName = value
	}
	if value, ok := pdc.mutation.DeployedAt(); ok {
		_spec.SetField(processdefinition.FieldDeployedAt, field.TypeTime, value)
		_node.DeployedAt = value
	}
	if value, ok := pdc.mutation.TenantID(); ok {
		_spec.SetField(processdefinition.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(processdefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(processdefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessDefinitionCreateBulk is the builder for creating many ProcessDefinition entities in bulk.
type ProcessDefinitionCreateBulk struct {
	config
	err      error
	builders []*ProcessDefinitionCreate
}

// Save creates the ProcessDefinition entities in the database.
func (pdcb *ProcessDefinitionCreateBulk) Save(ctx context.Context) ([]*ProcessDefinition, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcessDefinition, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcessDefinitionCreateBulk) SaveX(ctx context.Context) []*ProcessDefinition {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcessDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcessDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
