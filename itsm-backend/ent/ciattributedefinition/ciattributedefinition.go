// Code generated by ent, DO NOT EDIT.

package ciattributedefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ciattributedefinition type in the database.
	Label = "ci_attribute_definition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRequired holds the string denoting the required field in the database.
	FieldRequired = "required"
	// FieldUnique holds the string denoting the unique field in the database.
	FieldUnique = "unique"
	// FieldDefaultValue holds the string denoting the default_value field in the database.
	FieldDefaultValue = "default_value"
	// FieldValidationRules holds the string denoting the validation_rules field in the database.
	FieldValidationRules = "validation_rules"
	// FieldCiTypeID holds the string denoting the ci_type_id field in the database.
	FieldCiTypeID = "ci_type_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the ciattributedefinition in the database.
	Table = "ci_attribute_definitions"
)

// Columns holds all SQL columns for ciattributedefinition fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldType,
	FieldRequired,
	FieldUnique,
	FieldDefaultValue,
	FieldValidationRules,
	FieldCiTypeID,
	FieldTenantID,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// DefaultRequired holds the default value on creation for the "required" field.
	DefaultRequired bool
	// DefaultUnique holds the default value on creation for the "unique" field.
	DefaultUnique bool
	// CiTypeIDValidator is a validator for the "ci_type_id" field. It is called by the builders before save.
	CiTypeIDValidator func(int) error
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CIAttributeDefinition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByRequired orders the results by the required field.
func ByRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequired, opts...).ToFunc()
}

// ByUnique orders the results by the unique field.
func ByUnique(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnique, opts...).ToFunc()
}

// ByDefaultValue orders the results by the default_value field.
func ByDefaultValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultValue, opts...).ToFunc()
}

// ByValidationRules orders the results by the validation_rules field.
func ByValidationRules(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidationRules, opts...).ToFunc()
}

// ByCiTypeID orders the results by the ci_type_id field.
func ByCiTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCiTypeID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
