// Code generated by ent, DO NOT EDIT.

package ciattributedefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ciattributedefinition type in the database.
	Label = "ci_attribute_definition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// FieldIsRequired holds the string denoting the is_required field in the database.
	FieldIsRequired = "is_required"
	// FieldIsUnique holds the string denoting the is_unique field in the database.
	FieldIsUnique = "is_unique"
	// FieldDefaultValue holds the string denoting the default_value field in the database.
	FieldDefaultValue = "default_value"
	// FieldValidationRules holds the string denoting the validation_rules field in the database.
	FieldValidationRules = "validation_rules"
	// FieldEnumValues holds the string denoting the enum_values field in the database.
	FieldEnumValues = "enum_values"
	// FieldReferenceType holds the string denoting the reference_type field in the database.
	FieldReferenceType = "reference_type"
	// FieldDisplayOrder holds the string denoting the display_order field in the database.
	FieldDisplayOrder = "display_order"
	// FieldIsSearchable holds the string denoting the is_searchable field in the database.
	FieldIsSearchable = "is_searchable"
	// FieldIsSystem holds the string denoting the is_system field in the database.
	FieldIsSystem = "is_system"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCiTypeID holds the string denoting the ci_type_id field in the database.
	FieldCiTypeID = "ci_type_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCiType holds the string denoting the ci_type edge name in mutations.
	EdgeCiType = "ci_type"
	// Table holds the table name of the ciattributedefinition in the database.
	Table = "ci_attribute_definitions"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "ci_attribute_definitions"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CiTypeTable is the table that holds the ci_type relation/edge.
	CiTypeTable = "ci_attribute_definitions"
	// CiTypeInverseTable is the table name for the CIType entity.
	// It exists in this package in order to avoid circular dependency with the "citype" package.
	CiTypeInverseTable = "ci_types"
	// CiTypeColumn is the table column denoting the ci_type relation/edge.
	CiTypeColumn = "ci_type_id"
)

// Columns holds all SQL columns for ciattributedefinition fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldDataType,
	FieldIsRequired,
	FieldIsUnique,
	FieldDefaultValue,
	FieldValidationRules,
	FieldEnumValues,
	FieldReferenceType,
	FieldDisplayOrder,
	FieldIsSearchable,
	FieldIsSystem,
	FieldIsActive,
	FieldCiTypeID,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DataTypeValidator is a validator for the "data_type" field. It is called by the builders before save.
	DataTypeValidator func(string) error
	// DefaultIsRequired holds the default value on creation for the "is_required" field.
	DefaultIsRequired bool
	// DefaultIsUnique holds the default value on creation for the "is_unique" field.
	DefaultIsUnique bool
	// DefaultDisplayOrder holds the default value on creation for the "display_order" field.
	DefaultDisplayOrder int
	// DefaultIsSearchable holds the default value on creation for the "is_searchable" field.
	DefaultIsSearchable bool
	// DefaultIsSystem holds the default value on creation for the "is_system" field.
	DefaultIsSystem bool
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CIAttributeDefinition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByIsRequired orders the results by the is_required field.
func ByIsRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequired, opts...).ToFunc()
}

// ByIsUnique orders the results by the is_unique field.
func ByIsUnique(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUnique, opts...).ToFunc()
}

// ByDefaultValue orders the results by the default_value field.
func ByDefaultValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultValue, opts...).ToFunc()
}

// ByReferenceType orders the results by the reference_type field.
func ByReferenceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceType, opts...).ToFunc()
}

// ByDisplayOrder orders the results by the display_order field.
func ByDisplayOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayOrder, opts...).ToFunc()
}

// ByIsSearchable orders the results by the is_searchable field.
func ByIsSearchable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSearchable, opts...).ToFunc()
}

// ByIsSystem orders the results by the is_system field.
func ByIsSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSystem, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCiTypeID orders the results by the ci_type_id field.
func ByCiTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCiTypeID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCiTypeField orders the results by ci_type field.
func ByCiTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCiTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newCiTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CiTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CiTypeTable, CiTypeColumn),
	)
}
