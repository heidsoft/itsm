// Code generated by ent, DO NOT EDIT.

package ciattributedefinition

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDescription, v))
}

// DataType applies equality check predicate on the "data_type" field. It's identical to DataTypeEQ.
func DataType(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDataType, v))
}

// IsRequired applies equality check predicate on the "is_required" field. It's identical to IsRequiredEQ.
func IsRequired(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsRequired, v))
}

// IsUnique applies equality check predicate on the "is_unique" field. It's identical to IsUniqueEQ.
func IsUnique(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsUnique, v))
}

// DefaultValue applies equality check predicate on the "default_value" field. It's identical to DefaultValueEQ.
func DefaultValue(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDefaultValue, v))
}

// ReferenceType applies equality check predicate on the "reference_type" field. It's identical to ReferenceTypeEQ.
func ReferenceType(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldReferenceType, v))
}

// DisplayOrder applies equality check predicate on the "display_order" field. It's identical to DisplayOrderEQ.
func DisplayOrder(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDisplayOrder, v))
}

// IsSearchable applies equality check predicate on the "is_searchable" field. It's identical to IsSearchableEQ.
func IsSearchable(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsSearchable, v))
}

// IsSystem applies equality check predicate on the "is_system" field. It's identical to IsSystemEQ.
func IsSystem(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsSystem, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsActive, v))
}

// CiTypeID applies equality check predicate on the "ci_type_id" field. It's identical to CiTypeIDEQ.
func CiTypeID(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldCiTypeID, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldDescription, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldDataType, vs...))
}

// DataTypeGT applies the GT predicate on the "data_type" field.
func DataTypeGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldDataType, v))
}

// DataTypeGTE applies the GTE predicate on the "data_type" field.
func DataTypeGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldDataType, v))
}

// DataTypeLT applies the LT predicate on the "data_type" field.
func DataTypeLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldDataType, v))
}

// DataTypeLTE applies the LTE predicate on the "data_type" field.
func DataTypeLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldDataType, v))
}

// DataTypeContains applies the Contains predicate on the "data_type" field.
func DataTypeContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldDataType, v))
}

// DataTypeHasPrefix applies the HasPrefix predicate on the "data_type" field.
func DataTypeHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldDataType, v))
}

// DataTypeHasSuffix applies the HasSuffix predicate on the "data_type" field.
func DataTypeHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldDataType, v))
}

// DataTypeEqualFold applies the EqualFold predicate on the "data_type" field.
func DataTypeEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldDataType, v))
}

// DataTypeContainsFold applies the ContainsFold predicate on the "data_type" field.
func DataTypeContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldDataType, v))
}

// IsRequiredEQ applies the EQ predicate on the "is_required" field.
func IsRequiredEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsRequired, v))
}

// IsRequiredNEQ applies the NEQ predicate on the "is_required" field.
func IsRequiredNEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldIsRequired, v))
}

// IsUniqueEQ applies the EQ predicate on the "is_unique" field.
func IsUniqueEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsUnique, v))
}

// IsUniqueNEQ applies the NEQ predicate on the "is_unique" field.
func IsUniqueNEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldIsUnique, v))
}

// DefaultValueEQ applies the EQ predicate on the "default_value" field.
func DefaultValueEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDefaultValue, v))
}

// DefaultValueNEQ applies the NEQ predicate on the "default_value" field.
func DefaultValueNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldDefaultValue, v))
}

// DefaultValueIn applies the In predicate on the "default_value" field.
func DefaultValueIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldDefaultValue, vs...))
}

// DefaultValueNotIn applies the NotIn predicate on the "default_value" field.
func DefaultValueNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldDefaultValue, vs...))
}

// DefaultValueGT applies the GT predicate on the "default_value" field.
func DefaultValueGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldDefaultValue, v))
}

// DefaultValueGTE applies the GTE predicate on the "default_value" field.
func DefaultValueGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldDefaultValue, v))
}

// DefaultValueLT applies the LT predicate on the "default_value" field.
func DefaultValueLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldDefaultValue, v))
}

// DefaultValueLTE applies the LTE predicate on the "default_value" field.
func DefaultValueLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldDefaultValue, v))
}

// DefaultValueContains applies the Contains predicate on the "default_value" field.
func DefaultValueContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldDefaultValue, v))
}

// DefaultValueHasPrefix applies the HasPrefix predicate on the "default_value" field.
func DefaultValueHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldDefaultValue, v))
}

// DefaultValueHasSuffix applies the HasSuffix predicate on the "default_value" field.
func DefaultValueHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldDefaultValue, v))
}

// DefaultValueIsNil applies the IsNil predicate on the "default_value" field.
func DefaultValueIsNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIsNull(FieldDefaultValue))
}

// DefaultValueNotNil applies the NotNil predicate on the "default_value" field.
func DefaultValueNotNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotNull(FieldDefaultValue))
}

// DefaultValueEqualFold applies the EqualFold predicate on the "default_value" field.
func DefaultValueEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldDefaultValue, v))
}

// DefaultValueContainsFold applies the ContainsFold predicate on the "default_value" field.
func DefaultValueContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldDefaultValue, v))
}

// ValidationRulesIsNil applies the IsNil predicate on the "validation_rules" field.
func ValidationRulesIsNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIsNull(FieldValidationRules))
}

// ValidationRulesNotNil applies the NotNil predicate on the "validation_rules" field.
func ValidationRulesNotNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotNull(FieldValidationRules))
}

// EnumValuesIsNil applies the IsNil predicate on the "enum_values" field.
func EnumValuesIsNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIsNull(FieldEnumValues))
}

// EnumValuesNotNil applies the NotNil predicate on the "enum_values" field.
func EnumValuesNotNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotNull(FieldEnumValues))
}

// ReferenceTypeEQ applies the EQ predicate on the "reference_type" field.
func ReferenceTypeEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldReferenceType, v))
}

// ReferenceTypeNEQ applies the NEQ predicate on the "reference_type" field.
func ReferenceTypeNEQ(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldReferenceType, v))
}

// ReferenceTypeIn applies the In predicate on the "reference_type" field.
func ReferenceTypeIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldReferenceType, vs...))
}

// ReferenceTypeNotIn applies the NotIn predicate on the "reference_type" field.
func ReferenceTypeNotIn(vs ...string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldReferenceType, vs...))
}

// ReferenceTypeGT applies the GT predicate on the "reference_type" field.
func ReferenceTypeGT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldReferenceType, v))
}

// ReferenceTypeGTE applies the GTE predicate on the "reference_type" field.
func ReferenceTypeGTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldReferenceType, v))
}

// ReferenceTypeLT applies the LT predicate on the "reference_type" field.
func ReferenceTypeLT(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldReferenceType, v))
}

// ReferenceTypeLTE applies the LTE predicate on the "reference_type" field.
func ReferenceTypeLTE(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldReferenceType, v))
}

// ReferenceTypeContains applies the Contains predicate on the "reference_type" field.
func ReferenceTypeContains(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContains(FieldReferenceType, v))
}

// ReferenceTypeHasPrefix applies the HasPrefix predicate on the "reference_type" field.
func ReferenceTypeHasPrefix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasPrefix(FieldReferenceType, v))
}

// ReferenceTypeHasSuffix applies the HasSuffix predicate on the "reference_type" field.
func ReferenceTypeHasSuffix(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldHasSuffix(FieldReferenceType, v))
}

// ReferenceTypeIsNil applies the IsNil predicate on the "reference_type" field.
func ReferenceTypeIsNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIsNull(FieldReferenceType))
}

// ReferenceTypeNotNil applies the NotNil predicate on the "reference_type" field.
func ReferenceTypeNotNil() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotNull(FieldReferenceType))
}

// ReferenceTypeEqualFold applies the EqualFold predicate on the "reference_type" field.
func ReferenceTypeEqualFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEqualFold(FieldReferenceType, v))
}

// ReferenceTypeContainsFold applies the ContainsFold predicate on the "reference_type" field.
func ReferenceTypeContainsFold(v string) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldContainsFold(FieldReferenceType, v))
}

// DisplayOrderEQ applies the EQ predicate on the "display_order" field.
func DisplayOrderEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldDisplayOrder, v))
}

// DisplayOrderNEQ applies the NEQ predicate on the "display_order" field.
func DisplayOrderNEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldDisplayOrder, v))
}

// DisplayOrderIn applies the In predicate on the "display_order" field.
func DisplayOrderIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldDisplayOrder, vs...))
}

// DisplayOrderNotIn applies the NotIn predicate on the "display_order" field.
func DisplayOrderNotIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldDisplayOrder, vs...))
}

// DisplayOrderGT applies the GT predicate on the "display_order" field.
func DisplayOrderGT(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldDisplayOrder, v))
}

// DisplayOrderGTE applies the GTE predicate on the "display_order" field.
func DisplayOrderGTE(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldDisplayOrder, v))
}

// DisplayOrderLT applies the LT predicate on the "display_order" field.
func DisplayOrderLT(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldDisplayOrder, v))
}

// DisplayOrderLTE applies the LTE predicate on the "display_order" field.
func DisplayOrderLTE(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldDisplayOrder, v))
}

// IsSearchableEQ applies the EQ predicate on the "is_searchable" field.
func IsSearchableEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsSearchable, v))
}

// IsSearchableNEQ applies the NEQ predicate on the "is_searchable" field.
func IsSearchableNEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldIsSearchable, v))
}

// IsSystemEQ applies the EQ predicate on the "is_system" field.
func IsSystemEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsSystem, v))
}

// IsSystemNEQ applies the NEQ predicate on the "is_system" field.
func IsSystemNEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldIsSystem, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldIsActive, v))
}

// CiTypeIDEQ applies the EQ predicate on the "ci_type_id" field.
func CiTypeIDEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldCiTypeID, v))
}

// CiTypeIDNEQ applies the NEQ predicate on the "ci_type_id" field.
func CiTypeIDNEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldCiTypeID, v))
}

// CiTypeIDIn applies the In predicate on the "ci_type_id" field.
func CiTypeIDIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldCiTypeID, vs...))
}

// CiTypeIDNotIn applies the NotIn predicate on the "ci_type_id" field.
func CiTypeIDNotIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldCiTypeID, vs...))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldTenantID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCiType applies the HasEdge predicate on the "ci_type" edge.
func HasCiType() predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CiTypeTable, CiTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCiTypeWith applies the HasEdge predicate on the "ci_type" edge with a given conditions (other predicates).
func HasCiTypeWith(preds ...predicate.CIType) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(func(s *sql.Selector) {
		step := newCiTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CIAttributeDefinition) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CIAttributeDefinition) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CIAttributeDefinition) predicate.CIAttributeDefinition {
	return predicate.CIAttributeDefinition(sql.NotPredicates(p))
}
