// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processdeployment"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessDeploymentCreate is the builder for creating a ProcessDeployment entity.
type ProcessDeploymentCreate struct {
	config
	mutation *ProcessDeploymentMutation
	hooks    []Hook
}

// SetDeploymentID sets the "deployment_id" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentID(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentID(s)
	return pdc
}

// SetDeploymentName sets the "deployment_name" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentName(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentName(s)
	return pdc
}

// SetDeploymentSource sets the "deployment_source" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentSource(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentSource(s)
	return pdc
}

// SetNillableDeploymentSource sets the "deployment_source" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableDeploymentSource(s *string) *ProcessDeploymentCreate {
	if s != nil {
		pdc.SetDeploymentSource(*s)
	}
	return pdc
}

// SetDeploymentTime sets the "deployment_time" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentTime(t time.Time) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentTime(t)
	return pdc
}

// SetNillableDeploymentTime sets the "deployment_time" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableDeploymentTime(t *time.Time) *ProcessDeploymentCreate {
	if t != nil {
		pdc.SetDeploymentTime(*t)
	}
	return pdc
}

// SetDeployedBy sets the "deployed_by" field.
func (pdc *ProcessDeploymentCreate) SetDeployedBy(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeployedBy(s)
	return pdc
}

// SetNillableDeployedBy sets the "deployed_by" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableDeployedBy(s *string) *ProcessDeploymentCreate {
	if s != nil {
		pdc.SetDeployedBy(*s)
	}
	return pdc
}

// SetDeploymentComment sets the "deployment_comment" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentComment(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentComment(s)
	return pdc
}

// SetNillableDeploymentComment sets the "deployment_comment" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableDeploymentComment(s *string) *ProcessDeploymentCreate {
	if s != nil {
		pdc.SetDeploymentComment(*s)
	}
	return pdc
}

// SetIsActive sets the "is_active" field.
func (pdc *ProcessDeploymentCreate) SetIsActive(b bool) *ProcessDeploymentCreate {
	pdc.mutation.SetIsActive(b)
	return pdc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableIsActive(b *bool) *ProcessDeploymentCreate {
	if b != nil {
		pdc.SetIsActive(*b)
	}
	return pdc
}

// SetDeploymentCategory sets the "deployment_category" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentCategory(s string) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentCategory(s)
	return pdc
}

// SetNillableDeploymentCategory sets the "deployment_category" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableDeploymentCategory(s *string) *ProcessDeploymentCreate {
	if s != nil {
		pdc.SetDeploymentCategory(*s)
	}
	return pdc
}

// SetDeploymentMetadata sets the "deployment_metadata" field.
func (pdc *ProcessDeploymentCreate) SetDeploymentMetadata(m map[string]interface{}) *ProcessDeploymentCreate {
	pdc.mutation.SetDeploymentMetadata(m)
	return pdc
}

// SetTenantID sets the "tenant_id" field.
func (pdc *ProcessDeploymentCreate) SetTenantID(i int) *ProcessDeploymentCreate {
	pdc.mutation.SetTenantID(i)
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcessDeploymentCreate) SetCreatedAt(t time.Time) *ProcessDeploymentCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableCreatedAt(t *time.Time) *ProcessDeploymentCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProcessDeploymentCreate) SetUpdatedAt(t time.Time) *ProcessDeploymentCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProcessDeploymentCreate) SetNillableUpdatedAt(t *time.Time) *ProcessDeploymentCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// Mutation returns the ProcessDeploymentMutation object of the builder.
func (pdc *ProcessDeploymentCreate) Mutation() *ProcessDeploymentMutation {
	return pdc.mutation
}

// Save creates the ProcessDeployment in the database.
func (pdc *ProcessDeploymentCreate) Save(ctx context.Context) (*ProcessDeployment, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcessDeploymentCreate) SaveX(ctx context.Context) *ProcessDeployment {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcessDeploymentCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcessDeploymentCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProcessDeploymentCreate) defaults() {
	if _, ok := pdc.mutation.DeploymentTime(); !ok {
		v := processdeployment.DefaultDeploymentTime()
		pdc.mutation.SetDeploymentTime(v)
	}
	if _, ok := pdc.mutation.IsActive(); !ok {
		v := processdeployment.DefaultIsActive
		pdc.mutation.SetIsActive(v)
	}
	if _, ok := pdc.mutation.DeploymentCategory(); !ok {
		v := processdeployment.DefaultDeploymentCategory
		pdc.mutation.SetDeploymentCategory(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := processdeployment.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := processdeployment.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcessDeploymentCreate) check() error {
	if _, ok := pdc.mutation.DeploymentID(); !ok {
		return &ValidationError{Name: "deployment_id", err: errors.New(`ent: missing required field "ProcessDeployment.deployment_id"`)}
	}
	if v, ok := pdc.mutation.DeploymentID(); ok {
		if err := processdeployment.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DeploymentName(); !ok {
		return &ValidationError{Name: "deployment_name", err: errors.New(`ent: missing required field "ProcessDeployment.deployment_name"`)}
	}
	if v, ok := pdc.mutation.DeploymentName(); ok {
		if err := processdeployment.DeploymentNameValidator(v); err != nil {
			return &ValidationError{Name: "deployment_name", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.deployment_name": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.DeploymentTime(); !ok {
		return &ValidationError{Name: "deployment_time", err: errors.New(`ent: missing required field "ProcessDeployment.deployment_time"`)}
	}
	if _, ok := pdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ProcessDeployment.is_active"`)}
	}
	if _, ok := pdc.mutation.DeploymentCategory(); !ok {
		return &ValidationError{Name: "deployment_category", err: errors.New(`ent: missing required field "ProcessDeployment.deployment_category"`)}
	}
	if _, ok := pdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessDeployment.tenant_id"`)}
	}
	if v, ok := pdc.mutation.TenantID(); ok {
		if err := processdeployment.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDeployment.tenant_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessDeployment.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessDeployment.updated_at"`)}
	}
	return nil
}

func (pdc *ProcessDeploymentCreate) sqlSave(ctx context.Context) (*ProcessDeployment, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcessDeploymentCreate) createSpec() (*ProcessDeployment, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessDeployment{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(processdeployment.Table, sqlgraph.NewFieldSpec(processdeployment.FieldID, field.TypeInt))
	)
	if value, ok := pdc.mutation.DeploymentID(); ok {
		_spec.SetField(processdeployment.FieldDeploymentID, field.TypeString, value)
		_node.DeploymentID = value
	}
	if value, ok := pdc.mutation.DeploymentName(); ok {
		_spec.SetField(processdeployment.FieldDeploymentName, field.TypeString, value)
		_node.DeploymentName = value
	}
	if value, ok := pdc.mutation.DeploymentSource(); ok {
		_spec.SetField(processdeployment.FieldDeploymentSource, field.TypeString, value)
		_node.DeploymentSource = value
	}
	if value, ok := pdc.mutation.DeploymentTime(); ok {
		_spec.SetField(processdeployment.FieldDeploymentTime, field.TypeTime, value)
		_node.DeploymentTime = value
	}
	if value, ok := pdc.mutation.DeployedBy(); ok {
		_spec.SetField(processdeployment.FieldDeployedBy, field.TypeString, value)
		_node.DeployedBy = value
	}
	if value, ok := pdc.mutation.DeploymentComment(); ok {
		_spec.SetField(processdeployment.FieldDeploymentComment, field.TypeString, value)
		_node.DeploymentComment = value
	}
	if value, ok := pdc.mutation.IsActive(); ok {
		_spec.SetField(processdeployment.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := pdc.mutation.DeploymentCategory(); ok {
		_spec.SetField(processdeployment.FieldDeploymentCategory, field.TypeString, value)
		_node.DeploymentCategory = value
	}
	if value, ok := pdc.mutation.DeploymentMetadata(); ok {
		_spec.SetField(processdeployment.FieldDeploymentMetadata, field.TypeJSON, value)
		_node.DeploymentMetadata = value
	}
	if value, ok := pdc.mutation.TenantID(); ok {
		_spec.SetField(processdeployment.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(processdeployment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(processdeployment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessDeploymentCreateBulk is the builder for creating many ProcessDeployment entities in bulk.
type ProcessDeploymentCreateBulk struct {
	config
	err      error
	builders []*ProcessDeploymentCreate
}

// Save creates the ProcessDeployment entities in the database.
func (pdcb *ProcessDeploymentCreateBulk) Save(ctx context.Context) ([]*ProcessDeployment, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcessDeployment, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessDeploymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcessDeploymentCreateBulk) SaveX(ctx context.Context) []*ProcessDeployment {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcessDeploymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcessDeploymentCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
