// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/prompttemplate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PromptTemplateUpdate is the builder for updating PromptTemplate entities.
type PromptTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *PromptTemplateMutation
}

// Where appends a list predicates to the PromptTemplateUpdate builder.
func (ptu *PromptTemplateUpdate) Where(ps ...predicate.PromptTemplate) *PromptTemplateUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetCreatedAt sets the "created_at" field.
func (ptu *PromptTemplateUpdate) SetCreatedAt(t time.Time) *PromptTemplateUpdate {
	ptu.mutation.SetCreatedAt(t)
	return ptu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptu *PromptTemplateUpdate) SetNillableCreatedAt(t *time.Time) *PromptTemplateUpdate {
	if t != nil {
		ptu.SetCreatedAt(*t)
	}
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PromptTemplateUpdate) SetUpdatedAt(t time.Time) *PromptTemplateUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// SetName sets the "name" field.
func (ptu *PromptTemplateUpdate) SetName(s string) *PromptTemplateUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *PromptTemplateUpdate) SetNillableName(s *string) *PromptTemplateUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetVersion sets the "version" field.
func (ptu *PromptTemplateUpdate) SetVersion(s string) *PromptTemplateUpdate {
	ptu.mutation.SetVersion(s)
	return ptu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ptu *PromptTemplateUpdate) SetNillableVersion(s *string) *PromptTemplateUpdate {
	if s != nil {
		ptu.SetVersion(*s)
	}
	return ptu
}

// SetTemplate sets the "template" field.
func (ptu *PromptTemplateUpdate) SetTemplate(s string) *PromptTemplateUpdate {
	ptu.mutation.SetTemplate(s)
	return ptu
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (ptu *PromptTemplateUpdate) SetNillableTemplate(s *string) *PromptTemplateUpdate {
	if s != nil {
		ptu.SetTemplate(*s)
	}
	return ptu
}

// SetDescription sets the "description" field.
func (ptu *PromptTemplateUpdate) SetDescription(s string) *PromptTemplateUpdate {
	ptu.mutation.SetDescription(s)
	return ptu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptu *PromptTemplateUpdate) SetNillableDescription(s *string) *PromptTemplateUpdate {
	if s != nil {
		ptu.SetDescription(*s)
	}
	return ptu
}

// SetMetadata sets the "metadata" field.
func (ptu *PromptTemplateUpdate) SetMetadata(m map[string]interface{}) *PromptTemplateUpdate {
	ptu.mutation.SetMetadata(m)
	return ptu
}

// ClearMetadata clears the value of the "metadata" field.
func (ptu *PromptTemplateUpdate) ClearMetadata() *PromptTemplateUpdate {
	ptu.mutation.ClearMetadata()
	return ptu
}

// Mutation returns the PromptTemplateMutation object of the builder.
func (ptu *PromptTemplateUpdate) Mutation() *PromptTemplateMutation {
	return ptu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PromptTemplateUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PromptTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PromptTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PromptTemplateUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PromptTemplateUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		v := prompttemplate.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

func (ptu *PromptTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(prompttemplate.Table, prompttemplate.Columns, sqlgraph.NewFieldSpec(prompttemplate.FieldID, field.TypeInt))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.CreatedAt(); ok {
		_spec.SetField(prompttemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(prompttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(prompttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Version(); ok {
		_spec.SetField(prompttemplate.FieldVersion, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Template(); ok {
		_spec.SetField(prompttemplate.FieldTemplate, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Description(); ok {
		_spec.SetField(prompttemplate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Metadata(); ok {
		_spec.SetField(prompttemplate.FieldMetadata, field.TypeJSON, value)
	}
	if ptu.mutation.MetadataCleared() {
		_spec.ClearField(prompttemplate.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PromptTemplateUpdateOne is the builder for updating a single PromptTemplate entity.
type PromptTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PromptTemplateMutation
}

// SetCreatedAt sets the "created_at" field.
func (ptuo *PromptTemplateUpdateOne) SetCreatedAt(t time.Time) *PromptTemplateUpdateOne {
	ptuo.mutation.SetCreatedAt(t)
	return ptuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptuo *PromptTemplateUpdateOne) SetNillableCreatedAt(t *time.Time) *PromptTemplateUpdateOne {
	if t != nil {
		ptuo.SetCreatedAt(*t)
	}
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PromptTemplateUpdateOne) SetUpdatedAt(t time.Time) *PromptTemplateUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *PromptTemplateUpdateOne) SetName(s string) *PromptTemplateUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *PromptTemplateUpdateOne) SetNillableName(s *string) *PromptTemplateUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetVersion sets the "version" field.
func (ptuo *PromptTemplateUpdateOne) SetVersion(s string) *PromptTemplateUpdateOne {
	ptuo.mutation.SetVersion(s)
	return ptuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ptuo *PromptTemplateUpdateOne) SetNillableVersion(s *string) *PromptTemplateUpdateOne {
	if s != nil {
		ptuo.SetVersion(*s)
	}
	return ptuo
}

// SetTemplate sets the "template" field.
func (ptuo *PromptTemplateUpdateOne) SetTemplate(s string) *PromptTemplateUpdateOne {
	ptuo.mutation.SetTemplate(s)
	return ptuo
}

// SetNillableTemplate sets the "template" field if the given value is not nil.
func (ptuo *PromptTemplateUpdateOne) SetNillableTemplate(s *string) *PromptTemplateUpdateOne {
	if s != nil {
		ptuo.SetTemplate(*s)
	}
	return ptuo
}

// SetDescription sets the "description" field.
func (ptuo *PromptTemplateUpdateOne) SetDescription(s string) *PromptTemplateUpdateOne {
	ptuo.mutation.SetDescription(s)
	return ptuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptuo *PromptTemplateUpdateOne) SetNillableDescription(s *string) *PromptTemplateUpdateOne {
	if s != nil {
		ptuo.SetDescription(*s)
	}
	return ptuo
}

// SetMetadata sets the "metadata" field.
func (ptuo *PromptTemplateUpdateOne) SetMetadata(m map[string]interface{}) *PromptTemplateUpdateOne {
	ptuo.mutation.SetMetadata(m)
	return ptuo
}

// ClearMetadata clears the value of the "metadata" field.
func (ptuo *PromptTemplateUpdateOne) ClearMetadata() *PromptTemplateUpdateOne {
	ptuo.mutation.ClearMetadata()
	return ptuo
}

// Mutation returns the PromptTemplateMutation object of the builder.
func (ptuo *PromptTemplateUpdateOne) Mutation() *PromptTemplateMutation {
	return ptuo.mutation
}

// Where appends a list predicates to the PromptTemplateUpdate builder.
func (ptuo *PromptTemplateUpdateOne) Where(ps ...predicate.PromptTemplate) *PromptTemplateUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PromptTemplateUpdateOne) Select(field string, fields ...string) *PromptTemplateUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PromptTemplate entity.
func (ptuo *PromptTemplateUpdateOne) Save(ctx context.Context) (*PromptTemplate, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PromptTemplateUpdateOne) SaveX(ctx context.Context) *PromptTemplate {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PromptTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PromptTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PromptTemplateUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		v := prompttemplate.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

func (ptuo *PromptTemplateUpdateOne) sqlSave(ctx context.Context) (_node *PromptTemplate, err error) {
	_spec := sqlgraph.NewUpdateSpec(prompttemplate.Table, prompttemplate.Columns, sqlgraph.NewFieldSpec(prompttemplate.FieldID, field.TypeInt))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromptTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prompttemplate.FieldID)
		for _, f := range fields {
			if !prompttemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prompttemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.CreatedAt(); ok {
		_spec.SetField(prompttemplate.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(prompttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(prompttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Version(); ok {
		_spec.SetField(prompttemplate.FieldVersion, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Template(); ok {
		_spec.SetField(prompttemplate.FieldTemplate, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Description(); ok {
		_spec.SetField(prompttemplate.FieldDescription, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Metadata(); ok {
		_spec.SetField(prompttemplate.FieldMetadata, field.TypeJSON, value)
	}
	if ptuo.mutation.MetadataCleared() {
		_spec.ClearField(prompttemplate.FieldMetadata, field.TypeJSON)
	}
	_node = &PromptTemplate{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prompttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
