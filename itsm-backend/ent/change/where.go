// Code generated by ent, DO NOT EDIT.

package change

import (
	"itsm-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldDescription, v))
}

// Justification applies equality check predicate on the "justification" field. It's identical to JustificationEQ.
func Justification(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldJustification, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldStatus, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPriority, v))
}

// ImpactScope applies equality check predicate on the "impact_scope" field. It's identical to ImpactScopeEQ.
func ImpactScope(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldImpactScope, v))
}

// RiskLevel applies equality check predicate on the "risk_level" field. It's identical to RiskLevelEQ.
func RiskLevel(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldRiskLevel, v))
}

// AssigneeID applies equality check predicate on the "assignee_id" field. It's identical to AssigneeIDEQ.
func AssigneeID(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldAssigneeID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldCreatedBy, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldTenantID, v))
}

// PlannedStartDate applies equality check predicate on the "planned_start_date" field. It's identical to PlannedStartDateEQ.
func PlannedStartDate(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPlannedStartDate, v))
}

// PlannedEndDate applies equality check predicate on the "planned_end_date" field. It's identical to PlannedEndDateEQ.
func PlannedEndDate(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPlannedEndDate, v))
}

// ActualStartDate applies equality check predicate on the "actual_start_date" field. It's identical to ActualStartDateEQ.
func ActualStartDate(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldActualStartDate, v))
}

// ActualEndDate applies equality check predicate on the "actual_end_date" field. It's identical to ActualEndDateEQ.
func ActualEndDate(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldActualEndDate, v))
}

// ImplementationPlan applies equality check predicate on the "implementation_plan" field. It's identical to ImplementationPlanEQ.
func ImplementationPlan(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldImplementationPlan, v))
}

// RollbackPlan applies equality check predicate on the "rollback_plan" field. It's identical to RollbackPlanEQ.
func RollbackPlan(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldRollbackPlan, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldDescription, v))
}

// JustificationEQ applies the EQ predicate on the "justification" field.
func JustificationEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldJustification, v))
}

// JustificationNEQ applies the NEQ predicate on the "justification" field.
func JustificationNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldJustification, v))
}

// JustificationIn applies the In predicate on the "justification" field.
func JustificationIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldJustification, vs...))
}

// JustificationNotIn applies the NotIn predicate on the "justification" field.
func JustificationNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldJustification, vs...))
}

// JustificationGT applies the GT predicate on the "justification" field.
func JustificationGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldJustification, v))
}

// JustificationGTE applies the GTE predicate on the "justification" field.
func JustificationGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldJustification, v))
}

// JustificationLT applies the LT predicate on the "justification" field.
func JustificationLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldJustification, v))
}

// JustificationLTE applies the LTE predicate on the "justification" field.
func JustificationLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldJustification, v))
}

// JustificationContains applies the Contains predicate on the "justification" field.
func JustificationContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldJustification, v))
}

// JustificationHasPrefix applies the HasPrefix predicate on the "justification" field.
func JustificationHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldJustification, v))
}

// JustificationHasSuffix applies the HasSuffix predicate on the "justification" field.
func JustificationHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldJustification, v))
}

// JustificationIsNil applies the IsNil predicate on the "justification" field.
func JustificationIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldJustification))
}

// JustificationNotNil applies the NotNil predicate on the "justification" field.
func JustificationNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldJustification))
}

// JustificationEqualFold applies the EqualFold predicate on the "justification" field.
func JustificationEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldJustification, v))
}

// JustificationContainsFold applies the ContainsFold predicate on the "justification" field.
func JustificationContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldJustification, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldStatus, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldPriority, v))
}

// PriorityContains applies the Contains predicate on the "priority" field.
func PriorityContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldPriority, v))
}

// PriorityHasPrefix applies the HasPrefix predicate on the "priority" field.
func PriorityHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldPriority, v))
}

// PriorityHasSuffix applies the HasSuffix predicate on the "priority" field.
func PriorityHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldPriority, v))
}

// PriorityEqualFold applies the EqualFold predicate on the "priority" field.
func PriorityEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldPriority, v))
}

// PriorityContainsFold applies the ContainsFold predicate on the "priority" field.
func PriorityContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldPriority, v))
}

// ImpactScopeEQ applies the EQ predicate on the "impact_scope" field.
func ImpactScopeEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldImpactScope, v))
}

// ImpactScopeNEQ applies the NEQ predicate on the "impact_scope" field.
func ImpactScopeNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldImpactScope, v))
}

// ImpactScopeIn applies the In predicate on the "impact_scope" field.
func ImpactScopeIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldImpactScope, vs...))
}

// ImpactScopeNotIn applies the NotIn predicate on the "impact_scope" field.
func ImpactScopeNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldImpactScope, vs...))
}

// ImpactScopeGT applies the GT predicate on the "impact_scope" field.
func ImpactScopeGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldImpactScope, v))
}

// ImpactScopeGTE applies the GTE predicate on the "impact_scope" field.
func ImpactScopeGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldImpactScope, v))
}

// ImpactScopeLT applies the LT predicate on the "impact_scope" field.
func ImpactScopeLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldImpactScope, v))
}

// ImpactScopeLTE applies the LTE predicate on the "impact_scope" field.
func ImpactScopeLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldImpactScope, v))
}

// ImpactScopeContains applies the Contains predicate on the "impact_scope" field.
func ImpactScopeContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldImpactScope, v))
}

// ImpactScopeHasPrefix applies the HasPrefix predicate on the "impact_scope" field.
func ImpactScopeHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldImpactScope, v))
}

// ImpactScopeHasSuffix applies the HasSuffix predicate on the "impact_scope" field.
func ImpactScopeHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldImpactScope, v))
}

// ImpactScopeEqualFold applies the EqualFold predicate on the "impact_scope" field.
func ImpactScopeEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldImpactScope, v))
}

// ImpactScopeContainsFold applies the ContainsFold predicate on the "impact_scope" field.
func ImpactScopeContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldImpactScope, v))
}

// RiskLevelEQ applies the EQ predicate on the "risk_level" field.
func RiskLevelEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldRiskLevel, v))
}

// RiskLevelNEQ applies the NEQ predicate on the "risk_level" field.
func RiskLevelNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldRiskLevel, v))
}

// RiskLevelIn applies the In predicate on the "risk_level" field.
func RiskLevelIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldRiskLevel, vs...))
}

// RiskLevelNotIn applies the NotIn predicate on the "risk_level" field.
func RiskLevelNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldRiskLevel, vs...))
}

// RiskLevelGT applies the GT predicate on the "risk_level" field.
func RiskLevelGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldRiskLevel, v))
}

// RiskLevelGTE applies the GTE predicate on the "risk_level" field.
func RiskLevelGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldRiskLevel, v))
}

// RiskLevelLT applies the LT predicate on the "risk_level" field.
func RiskLevelLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldRiskLevel, v))
}

// RiskLevelLTE applies the LTE predicate on the "risk_level" field.
func RiskLevelLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldRiskLevel, v))
}

// RiskLevelContains applies the Contains predicate on the "risk_level" field.
func RiskLevelContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldRiskLevel, v))
}

// RiskLevelHasPrefix applies the HasPrefix predicate on the "risk_level" field.
func RiskLevelHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldRiskLevel, v))
}

// RiskLevelHasSuffix applies the HasSuffix predicate on the "risk_level" field.
func RiskLevelHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldRiskLevel, v))
}

// RiskLevelEqualFold applies the EqualFold predicate on the "risk_level" field.
func RiskLevelEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldRiskLevel, v))
}

// RiskLevelContainsFold applies the ContainsFold predicate on the "risk_level" field.
func RiskLevelContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldRiskLevel, v))
}

// AssigneeIDEQ applies the EQ predicate on the "assignee_id" field.
func AssigneeIDEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldAssigneeID, v))
}

// AssigneeIDNEQ applies the NEQ predicate on the "assignee_id" field.
func AssigneeIDNEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldAssigneeID, v))
}

// AssigneeIDIn applies the In predicate on the "assignee_id" field.
func AssigneeIDIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldAssigneeID, vs...))
}

// AssigneeIDNotIn applies the NotIn predicate on the "assignee_id" field.
func AssigneeIDNotIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldAssigneeID, vs...))
}

// AssigneeIDGT applies the GT predicate on the "assignee_id" field.
func AssigneeIDGT(v int) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldAssigneeID, v))
}

// AssigneeIDGTE applies the GTE predicate on the "assignee_id" field.
func AssigneeIDGTE(v int) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldAssigneeID, v))
}

// AssigneeIDLT applies the LT predicate on the "assignee_id" field.
func AssigneeIDLT(v int) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldAssigneeID, v))
}

// AssigneeIDLTE applies the LTE predicate on the "assignee_id" field.
func AssigneeIDLTE(v int) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldAssigneeID, v))
}

// AssigneeIDIsNil applies the IsNil predicate on the "assignee_id" field.
func AssigneeIDIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldAssigneeID))
}

// AssigneeIDNotNil applies the NotNil predicate on the "assignee_id" field.
func AssigneeIDNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldAssigneeID))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldCreatedBy, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v int) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v int) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v int) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v int) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldTenantID, v))
}

// PlannedStartDateEQ applies the EQ predicate on the "planned_start_date" field.
func PlannedStartDateEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPlannedStartDate, v))
}

// PlannedStartDateNEQ applies the NEQ predicate on the "planned_start_date" field.
func PlannedStartDateNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldPlannedStartDate, v))
}

// PlannedStartDateIn applies the In predicate on the "planned_start_date" field.
func PlannedStartDateIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldPlannedStartDate, vs...))
}

// PlannedStartDateNotIn applies the NotIn predicate on the "planned_start_date" field.
func PlannedStartDateNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldPlannedStartDate, vs...))
}

// PlannedStartDateGT applies the GT predicate on the "planned_start_date" field.
func PlannedStartDateGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldPlannedStartDate, v))
}

// PlannedStartDateGTE applies the GTE predicate on the "planned_start_date" field.
func PlannedStartDateGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldPlannedStartDate, v))
}

// PlannedStartDateLT applies the LT predicate on the "planned_start_date" field.
func PlannedStartDateLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldPlannedStartDate, v))
}

// PlannedStartDateLTE applies the LTE predicate on the "planned_start_date" field.
func PlannedStartDateLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldPlannedStartDate, v))
}

// PlannedStartDateIsNil applies the IsNil predicate on the "planned_start_date" field.
func PlannedStartDateIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldPlannedStartDate))
}

// PlannedStartDateNotNil applies the NotNil predicate on the "planned_start_date" field.
func PlannedStartDateNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldPlannedStartDate))
}

// PlannedEndDateEQ applies the EQ predicate on the "planned_end_date" field.
func PlannedEndDateEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldPlannedEndDate, v))
}

// PlannedEndDateNEQ applies the NEQ predicate on the "planned_end_date" field.
func PlannedEndDateNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldPlannedEndDate, v))
}

// PlannedEndDateIn applies the In predicate on the "planned_end_date" field.
func PlannedEndDateIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldPlannedEndDate, vs...))
}

// PlannedEndDateNotIn applies the NotIn predicate on the "planned_end_date" field.
func PlannedEndDateNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldPlannedEndDate, vs...))
}

// PlannedEndDateGT applies the GT predicate on the "planned_end_date" field.
func PlannedEndDateGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldPlannedEndDate, v))
}

// PlannedEndDateGTE applies the GTE predicate on the "planned_end_date" field.
func PlannedEndDateGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldPlannedEndDate, v))
}

// PlannedEndDateLT applies the LT predicate on the "planned_end_date" field.
func PlannedEndDateLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldPlannedEndDate, v))
}

// PlannedEndDateLTE applies the LTE predicate on the "planned_end_date" field.
func PlannedEndDateLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldPlannedEndDate, v))
}

// PlannedEndDateIsNil applies the IsNil predicate on the "planned_end_date" field.
func PlannedEndDateIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldPlannedEndDate))
}

// PlannedEndDateNotNil applies the NotNil predicate on the "planned_end_date" field.
func PlannedEndDateNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldPlannedEndDate))
}

// ActualStartDateEQ applies the EQ predicate on the "actual_start_date" field.
func ActualStartDateEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldActualStartDate, v))
}

// ActualStartDateNEQ applies the NEQ predicate on the "actual_start_date" field.
func ActualStartDateNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldActualStartDate, v))
}

// ActualStartDateIn applies the In predicate on the "actual_start_date" field.
func ActualStartDateIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldActualStartDate, vs...))
}

// ActualStartDateNotIn applies the NotIn predicate on the "actual_start_date" field.
func ActualStartDateNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldActualStartDate, vs...))
}

// ActualStartDateGT applies the GT predicate on the "actual_start_date" field.
func ActualStartDateGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldActualStartDate, v))
}

// ActualStartDateGTE applies the GTE predicate on the "actual_start_date" field.
func ActualStartDateGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldActualStartDate, v))
}

// ActualStartDateLT applies the LT predicate on the "actual_start_date" field.
func ActualStartDateLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldActualStartDate, v))
}

// ActualStartDateLTE applies the LTE predicate on the "actual_start_date" field.
func ActualStartDateLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldActualStartDate, v))
}

// ActualStartDateIsNil applies the IsNil predicate on the "actual_start_date" field.
func ActualStartDateIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldActualStartDate))
}

// ActualStartDateNotNil applies the NotNil predicate on the "actual_start_date" field.
func ActualStartDateNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldActualStartDate))
}

// ActualEndDateEQ applies the EQ predicate on the "actual_end_date" field.
func ActualEndDateEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldActualEndDate, v))
}

// ActualEndDateNEQ applies the NEQ predicate on the "actual_end_date" field.
func ActualEndDateNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldActualEndDate, v))
}

// ActualEndDateIn applies the In predicate on the "actual_end_date" field.
func ActualEndDateIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldActualEndDate, vs...))
}

// ActualEndDateNotIn applies the NotIn predicate on the "actual_end_date" field.
func ActualEndDateNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldActualEndDate, vs...))
}

// ActualEndDateGT applies the GT predicate on the "actual_end_date" field.
func ActualEndDateGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldActualEndDate, v))
}

// ActualEndDateGTE applies the GTE predicate on the "actual_end_date" field.
func ActualEndDateGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldActualEndDate, v))
}

// ActualEndDateLT applies the LT predicate on the "actual_end_date" field.
func ActualEndDateLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldActualEndDate, v))
}

// ActualEndDateLTE applies the LTE predicate on the "actual_end_date" field.
func ActualEndDateLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldActualEndDate, v))
}

// ActualEndDateIsNil applies the IsNil predicate on the "actual_end_date" field.
func ActualEndDateIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldActualEndDate))
}

// ActualEndDateNotNil applies the NotNil predicate on the "actual_end_date" field.
func ActualEndDateNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldActualEndDate))
}

// ImplementationPlanEQ applies the EQ predicate on the "implementation_plan" field.
func ImplementationPlanEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldImplementationPlan, v))
}

// ImplementationPlanNEQ applies the NEQ predicate on the "implementation_plan" field.
func ImplementationPlanNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldImplementationPlan, v))
}

// ImplementationPlanIn applies the In predicate on the "implementation_plan" field.
func ImplementationPlanIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldImplementationPlan, vs...))
}

// ImplementationPlanNotIn applies the NotIn predicate on the "implementation_plan" field.
func ImplementationPlanNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldImplementationPlan, vs...))
}

// ImplementationPlanGT applies the GT predicate on the "implementation_plan" field.
func ImplementationPlanGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldImplementationPlan, v))
}

// ImplementationPlanGTE applies the GTE predicate on the "implementation_plan" field.
func ImplementationPlanGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldImplementationPlan, v))
}

// ImplementationPlanLT applies the LT predicate on the "implementation_plan" field.
func ImplementationPlanLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldImplementationPlan, v))
}

// ImplementationPlanLTE applies the LTE predicate on the "implementation_plan" field.
func ImplementationPlanLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldImplementationPlan, v))
}

// ImplementationPlanContains applies the Contains predicate on the "implementation_plan" field.
func ImplementationPlanContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldImplementationPlan, v))
}

// ImplementationPlanHasPrefix applies the HasPrefix predicate on the "implementation_plan" field.
func ImplementationPlanHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldImplementationPlan, v))
}

// ImplementationPlanHasSuffix applies the HasSuffix predicate on the "implementation_plan" field.
func ImplementationPlanHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldImplementationPlan, v))
}

// ImplementationPlanIsNil applies the IsNil predicate on the "implementation_plan" field.
func ImplementationPlanIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldImplementationPlan))
}

// ImplementationPlanNotNil applies the NotNil predicate on the "implementation_plan" field.
func ImplementationPlanNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldImplementationPlan))
}

// ImplementationPlanEqualFold applies the EqualFold predicate on the "implementation_plan" field.
func ImplementationPlanEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldImplementationPlan, v))
}

// ImplementationPlanContainsFold applies the ContainsFold predicate on the "implementation_plan" field.
func ImplementationPlanContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldImplementationPlan, v))
}

// RollbackPlanEQ applies the EQ predicate on the "rollback_plan" field.
func RollbackPlanEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldRollbackPlan, v))
}

// RollbackPlanNEQ applies the NEQ predicate on the "rollback_plan" field.
func RollbackPlanNEQ(v string) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldRollbackPlan, v))
}

// RollbackPlanIn applies the In predicate on the "rollback_plan" field.
func RollbackPlanIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldRollbackPlan, vs...))
}

// RollbackPlanNotIn applies the NotIn predicate on the "rollback_plan" field.
func RollbackPlanNotIn(vs ...string) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldRollbackPlan, vs...))
}

// RollbackPlanGT applies the GT predicate on the "rollback_plan" field.
func RollbackPlanGT(v string) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldRollbackPlan, v))
}

// RollbackPlanGTE applies the GTE predicate on the "rollback_plan" field.
func RollbackPlanGTE(v string) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldRollbackPlan, v))
}

// RollbackPlanLT applies the LT predicate on the "rollback_plan" field.
func RollbackPlanLT(v string) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldRollbackPlan, v))
}

// RollbackPlanLTE applies the LTE predicate on the "rollback_plan" field.
func RollbackPlanLTE(v string) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldRollbackPlan, v))
}

// RollbackPlanContains applies the Contains predicate on the "rollback_plan" field.
func RollbackPlanContains(v string) predicate.Change {
	return predicate.Change(sql.FieldContains(FieldRollbackPlan, v))
}

// RollbackPlanHasPrefix applies the HasPrefix predicate on the "rollback_plan" field.
func RollbackPlanHasPrefix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasPrefix(FieldRollbackPlan, v))
}

// RollbackPlanHasSuffix applies the HasSuffix predicate on the "rollback_plan" field.
func RollbackPlanHasSuffix(v string) predicate.Change {
	return predicate.Change(sql.FieldHasSuffix(FieldRollbackPlan, v))
}

// RollbackPlanIsNil applies the IsNil predicate on the "rollback_plan" field.
func RollbackPlanIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldRollbackPlan))
}

// RollbackPlanNotNil applies the NotNil predicate on the "rollback_plan" field.
func RollbackPlanNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldRollbackPlan))
}

// RollbackPlanEqualFold applies the EqualFold predicate on the "rollback_plan" field.
func RollbackPlanEqualFold(v string) predicate.Change {
	return predicate.Change(sql.FieldEqualFold(FieldRollbackPlan, v))
}

// RollbackPlanContainsFold applies the ContainsFold predicate on the "rollback_plan" field.
func RollbackPlanContainsFold(v string) predicate.Change {
	return predicate.Change(sql.FieldContainsFold(FieldRollbackPlan, v))
}

// AffectedCisIsNil applies the IsNil predicate on the "affected_cis" field.
func AffectedCisIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldAffectedCis))
}

// AffectedCisNotNil applies the NotNil predicate on the "affected_cis" field.
func AffectedCisNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldAffectedCis))
}

// RelatedTicketsIsNil applies the IsNil predicate on the "related_tickets" field.
func RelatedTicketsIsNil() predicate.Change {
	return predicate.Change(sql.FieldIsNull(FieldRelatedTickets))
}

// RelatedTicketsNotNil applies the NotNil predicate on the "related_tickets" field.
func RelatedTicketsNotNil() predicate.Change {
	return predicate.Change(sql.FieldNotNull(FieldRelatedTickets))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Change {
	return predicate.Change(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Change {
	return predicate.Change(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Change) predicate.Change {
	return predicate.Change(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Change) predicate.Change {
	return predicate.Change(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Change) predicate.Change {
	return predicate.Change(sql.NotPredicates(p))
}
