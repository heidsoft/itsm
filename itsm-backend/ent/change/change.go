// Code generated by ent, DO NOT EDIT.

package change

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the change type in the database.
	Label = "change"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldJustification holds the string denoting the justification field in the database.
	FieldJustification = "justification"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldImpactScope holds the string denoting the impact_scope field in the database.
	FieldImpactScope = "impact_scope"
	// FieldRiskLevel holds the string denoting the risk_level field in the database.
	FieldRiskLevel = "risk_level"
	// FieldAssigneeID holds the string denoting the assignee_id field in the database.
	FieldAssigneeID = "assignee_id"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPlannedStartDate holds the string denoting the planned_start_date field in the database.
	FieldPlannedStartDate = "planned_start_date"
	// FieldPlannedEndDate holds the string denoting the planned_end_date field in the database.
	FieldPlannedEndDate = "planned_end_date"
	// FieldActualStartDate holds the string denoting the actual_start_date field in the database.
	FieldActualStartDate = "actual_start_date"
	// FieldActualEndDate holds the string denoting the actual_end_date field in the database.
	FieldActualEndDate = "actual_end_date"
	// FieldImplementationPlan holds the string denoting the implementation_plan field in the database.
	FieldImplementationPlan = "implementation_plan"
	// FieldRollbackPlan holds the string denoting the rollback_plan field in the database.
	FieldRollbackPlan = "rollback_plan"
	// FieldAffectedCis holds the string denoting the affected_cis field in the database.
	FieldAffectedCis = "affected_cis"
	// FieldRelatedTickets holds the string denoting the related_tickets field in the database.
	FieldRelatedTickets = "related_tickets"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the change in the database.
	Table = "changes"
)

// Columns holds all SQL columns for change fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldJustification,
	FieldType,
	FieldStatus,
	FieldPriority,
	FieldImpactScope,
	FieldRiskLevel,
	FieldAssigneeID,
	FieldCreatedBy,
	FieldTenantID,
	FieldPlannedStartDate,
	FieldPlannedEndDate,
	FieldActualStartDate,
	FieldActualEndDate,
	FieldImplementationPlan,
	FieldRollbackPlan,
	FieldAffectedCis,
	FieldRelatedTickets,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority string
	// DefaultImpactScope holds the default value on creation for the "impact_scope" field.
	DefaultImpactScope string
	// DefaultRiskLevel holds the default value on creation for the "risk_level" field.
	DefaultRiskLevel string
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Change queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByJustification orders the results by the justification field.
func ByJustification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJustification, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByImpactScope orders the results by the impact_scope field.
func ByImpactScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpactScope, opts...).ToFunc()
}

// ByRiskLevel orders the results by the risk_level field.
func ByRiskLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskLevel, opts...).ToFunc()
}

// ByAssigneeID orders the results by the assignee_id field.
func ByAssigneeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssigneeID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPlannedStartDate orders the results by the planned_start_date field.
func ByPlannedStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlannedStartDate, opts...).ToFunc()
}

// ByPlannedEndDate orders the results by the planned_end_date field.
func ByPlannedEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlannedEndDate, opts...).ToFunc()
}

// ByActualStartDate orders the results by the actual_start_date field.
func ByActualStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActualStartDate, opts...).ToFunc()
}

// ByActualEndDate orders the results by the actual_end_date field.
func ByActualEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActualEndDate, opts...).ToFunc()
}

// ByImplementationPlan orders the results by the implementation_plan field.
func ByImplementationPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationPlan, opts...).ToFunc()
}

// ByRollbackPlan orders the results by the rollback_plan field.
func ByRollbackPlan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRollbackPlan, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
