// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/processinstance"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcessInstanceCreate is the builder for creating a ProcessInstance entity.
type ProcessInstanceCreate struct {
	config
	mutation *ProcessInstanceMutation
	hooks    []Hook
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pic *ProcessInstanceCreate) SetProcessInstanceID(s string) *ProcessInstanceCreate {
	pic.mutation.SetProcessInstanceID(s)
	return pic
}

// SetBusinessKey sets the "business_key" field.
func (pic *ProcessInstanceCreate) SetBusinessKey(s string) *ProcessInstanceCreate {
	pic.mutation.SetBusinessKey(s)
	return pic
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableBusinessKey(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetBusinessKey(*s)
	}
	return pic
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (pic *ProcessInstanceCreate) SetProcessDefinitionKey(s string) *ProcessInstanceCreate {
	pic.mutation.SetProcessDefinitionKey(s)
	return pic
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (pic *ProcessInstanceCreate) SetProcessDefinitionID(s string) *ProcessInstanceCreate {
	pic.mutation.SetProcessDefinitionID(s)
	return pic
}

// SetStatus sets the "status" field.
func (pic *ProcessInstanceCreate) SetStatus(s string) *ProcessInstanceCreate {
	pic.mutation.SetStatus(s)
	return pic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableStatus(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetStatus(*s)
	}
	return pic
}

// SetCurrentActivityID sets the "current_activity_id" field.
func (pic *ProcessInstanceCreate) SetCurrentActivityID(s string) *ProcessInstanceCreate {
	pic.mutation.SetCurrentActivityID(s)
	return pic
}

// SetNillableCurrentActivityID sets the "current_activity_id" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableCurrentActivityID(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetCurrentActivityID(*s)
	}
	return pic
}

// SetCurrentActivityName sets the "current_activity_name" field.
func (pic *ProcessInstanceCreate) SetCurrentActivityName(s string) *ProcessInstanceCreate {
	pic.mutation.SetCurrentActivityName(s)
	return pic
}

// SetNillableCurrentActivityName sets the "current_activity_name" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableCurrentActivityName(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetCurrentActivityName(*s)
	}
	return pic
}

// SetVariables sets the "variables" field.
func (pic *ProcessInstanceCreate) SetVariables(m map[string]interface{}) *ProcessInstanceCreate {
	pic.mutation.SetVariables(m)
	return pic
}

// SetStartTime sets the "start_time" field.
func (pic *ProcessInstanceCreate) SetStartTime(t time.Time) *ProcessInstanceCreate {
	pic.mutation.SetStartTime(t)
	return pic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableStartTime(t *time.Time) *ProcessInstanceCreate {
	if t != nil {
		pic.SetStartTime(*t)
	}
	return pic
}

// SetEndTime sets the "end_time" field.
func (pic *ProcessInstanceCreate) SetEndTime(t time.Time) *ProcessInstanceCreate {
	pic.mutation.SetEndTime(t)
	return pic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableEndTime(t *time.Time) *ProcessInstanceCreate {
	if t != nil {
		pic.SetEndTime(*t)
	}
	return pic
}

// SetSuspendedTime sets the "suspended_time" field.
func (pic *ProcessInstanceCreate) SetSuspendedTime(t time.Time) *ProcessInstanceCreate {
	pic.mutation.SetSuspendedTime(t)
	return pic
}

// SetNillableSuspendedTime sets the "suspended_time" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableSuspendedTime(t *time.Time) *ProcessInstanceCreate {
	if t != nil {
		pic.SetSuspendedTime(*t)
	}
	return pic
}

// SetSuspendedReason sets the "suspended_reason" field.
func (pic *ProcessInstanceCreate) SetSuspendedReason(s string) *ProcessInstanceCreate {
	pic.mutation.SetSuspendedReason(s)
	return pic
}

// SetNillableSuspendedReason sets the "suspended_reason" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableSuspendedReason(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetSuspendedReason(*s)
	}
	return pic
}

// SetTenantID sets the "tenant_id" field.
func (pic *ProcessInstanceCreate) SetTenantID(i int) *ProcessInstanceCreate {
	pic.mutation.SetTenantID(i)
	return pic
}

// SetInitiator sets the "initiator" field.
func (pic *ProcessInstanceCreate) SetInitiator(s string) *ProcessInstanceCreate {
	pic.mutation.SetInitiator(s)
	return pic
}

// SetNillableInitiator sets the "initiator" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableInitiator(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetInitiator(*s)
	}
	return pic
}

// SetParentProcessInstanceID sets the "parent_process_instance_id" field.
func (pic *ProcessInstanceCreate) SetParentProcessInstanceID(s string) *ProcessInstanceCreate {
	pic.mutation.SetParentProcessInstanceID(s)
	return pic
}

// SetNillableParentProcessInstanceID sets the "parent_process_instance_id" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableParentProcessInstanceID(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetParentProcessInstanceID(*s)
	}
	return pic
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (pic *ProcessInstanceCreate) SetRootProcessInstanceID(s string) *ProcessInstanceCreate {
	pic.mutation.SetRootProcessInstanceID(s)
	return pic
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableRootProcessInstanceID(s *string) *ProcessInstanceCreate {
	if s != nil {
		pic.SetRootProcessInstanceID(*s)
	}
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProcessInstanceCreate) SetCreatedAt(t time.Time) *ProcessInstanceCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableCreatedAt(t *time.Time) *ProcessInstanceCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *ProcessInstanceCreate) SetUpdatedAt(t time.Time) *ProcessInstanceCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *ProcessInstanceCreate) SetNillableUpdatedAt(t *time.Time) *ProcessInstanceCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// Mutation returns the ProcessInstanceMutation object of the builder.
func (pic *ProcessInstanceCreate) Mutation() *ProcessInstanceMutation {
	return pic.mutation
}

// Save creates the ProcessInstance in the database.
func (pic *ProcessInstanceCreate) Save(ctx context.Context) (*ProcessInstance, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProcessInstanceCreate) SaveX(ctx context.Context) *ProcessInstance {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProcessInstanceCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProcessInstanceCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProcessInstanceCreate) defaults() {
	if _, ok := pic.mutation.Status(); !ok {
		v := processinstance.DefaultStatus
		pic.mutation.SetStatus(v)
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		v := processinstance.DefaultStartTime()
		pic.mutation.SetStartTime(v)
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := processinstance.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := processinstance.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProcessInstanceCreate) check() error {
	if _, ok := pic.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "ProcessInstance.process_instance_id"`)}
	}
	if v, ok := pic.mutation.ProcessInstanceID(); ok {
		if err := processinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if _, ok := pic.mutation.ProcessDefinitionKey(); !ok {
		return &ValidationError{Name: "process_definition_key", err: errors.New(`ent: missing required field "ProcessInstance.process_definition_key"`)}
	}
	if v, ok := pic.mutation.ProcessDefinitionKey(); ok {
		if err := processinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if _, ok := pic.mutation.ProcessDefinitionID(); !ok {
		return &ValidationError{Name: "process_definition_id", err: errors.New(`ent: missing required field "ProcessInstance.process_definition_id"`)}
	}
	if v, ok := pic.mutation.ProcessDefinitionID(); ok {
		if err := processinstance.ProcessDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_id": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ProcessInstance.status"`)}
	}
	if _, ok := pic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ProcessInstance.start_time"`)}
	}
	if _, ok := pic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessInstance.tenant_id"`)}
	}
	if v, ok := pic.mutation.TenantID(); ok {
		if err := processinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.tenant_id": %w`, err)}
		}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessInstance.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessInstance.updated_at"`)}
	}
	return nil
}

func (pic *ProcessInstanceCreate) sqlSave(ctx context.Context) (*ProcessInstance, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProcessInstanceCreate) createSpec() (*ProcessInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessInstance{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(processinstance.Table, sqlgraph.NewFieldSpec(processinstance.FieldID, field.TypeInt))
	)
	if value, ok := pic.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldProcessInstanceID, field.TypeString, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := pic.mutation.BusinessKey(); ok {
		_spec.SetField(processinstance.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := pic.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := pic.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionID, field.TypeString, value)
		_node.ProcessDefinitionID = value
	}
	if value, ok := pic.mutation.Status(); ok {
		_spec.SetField(processinstance.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pic.mutation.CurrentActivityID(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityID, field.TypeString, value)
		_node.CurrentActivityID = value
	}
	if value, ok := pic.mutation.CurrentActivityName(); ok {
		_spec.SetField(processinstance.FieldCurrentActivityName, field.TypeString, value)
		_node.CurrentActivityName = value
	}
	if value, ok := pic.mutation.Variables(); ok {
		_spec.SetField(processinstance.FieldVariables, field.TypeJSON, value)
		_node.Variables = value
	}
	if value, ok := pic.mutation.StartTime(); ok {
		_spec.SetField(processinstance.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := pic.mutation.EndTime(); ok {
		_spec.SetField(processinstance.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := pic.mutation.SuspendedTime(); ok {
		_spec.SetField(processinstance.FieldSuspendedTime, field.TypeTime, value)
		_node.SuspendedTime = value
	}
	if value, ok := pic.mutation.SuspendedReason(); ok {
		_spec.SetField(processinstance.FieldSuspendedReason, field.TypeString, value)
		_node.SuspendedReason = value
	}
	if value, ok := pic.mutation.TenantID(); ok {
		_spec.SetField(processinstance.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := pic.mutation.Initiator(); ok {
		_spec.SetField(processinstance.FieldInitiator, field.TypeString, value)
		_node.Initiator = value
	}
	if value, ok := pic.mutation.ParentProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldParentProcessInstanceID, field.TypeString, value)
		_node.ParentProcessInstanceID = value
	}
	if value, ok := pic.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldRootProcessInstanceID, field.TypeString, value)
		_node.RootProcessInstanceID = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(processinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(processinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessInstanceCreateBulk is the builder for creating many ProcessInstance entities in bulk.
type ProcessInstanceCreateBulk struct {
	config
	err      error
	builders []*ProcessInstanceCreate
}

// Save creates the ProcessInstance entities in the database.
func (picb *ProcessInstanceCreateBulk) Save(ctx context.Context) ([]*ProcessInstance, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProcessInstance, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProcessInstanceCreateBulk) SaveX(ctx context.Context) []*ProcessInstance {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProcessInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProcessInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
