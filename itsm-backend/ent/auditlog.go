// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"itsm-backend/ent/auditlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// StatusCode holds the value of the "status_code" field.
	StatusCode int `json:"status_code,omitempty"`
	// RequestBody holds the value of the "request_body" field.
	RequestBody  *string `json:"request_body,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID, auditlog.FieldTenantID, auditlog.FieldUserID, auditlog.FieldStatusCode:
			values[i] = new(sql.NullInt64)
		case auditlog.FieldRequestID, auditlog.FieldIP, auditlog.FieldResource, auditlog.FieldAction, auditlog.FieldPath, auditlog.FieldMethod, auditlog.FieldRequestBody:
			values[i] = new(sql.NullString)
		case auditlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (al *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case auditlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		case auditlog.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				al.TenantID = int(value.Int64)
			}
		case auditlog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				al.UserID = int(value.Int64)
			}
		case auditlog.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				al.RequestID = value.String
			}
		case auditlog.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				al.IP = value.String
			}
		case auditlog.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				al.Resource = value.String
			}
		case auditlog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				al.Action = value.String
			}
		case auditlog.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				al.Path = value.String
			}
		case auditlog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				al.Method = value.String
			}
		case auditlog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				al.StatusCode = int(value.Int64)
			}
		case auditlog.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				al.RequestBody = new(string)
				*al.RequestBody = value.String
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (al *AuditLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLog) Unwrap() *AuditLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", al.TenantID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", al.UserID))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(al.RequestID)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(al.IP)
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(al.Resource)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(al.Action)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(al.Path)
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(al.Method)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", al.StatusCode))
	builder.WriteString(", ")
	if v := al.RequestBody; v != nil {
		builder.WriteString("request_body=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
