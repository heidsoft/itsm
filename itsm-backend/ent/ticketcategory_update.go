// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/predicate"
	"itsm-backend/ent/ticket"
	"itsm-backend/ent/ticketcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TicketCategoryUpdate is the builder for updating TicketCategory entities.
type TicketCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *TicketCategoryMutation
}

// Where appends a list predicates to the TicketCategoryUpdate builder.
func (tcu *TicketCategoryUpdate) Where(ps ...predicate.TicketCategory) *TicketCategoryUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetName sets the "name" field.
func (tcu *TicketCategoryUpdate) SetName(s string) *TicketCategoryUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableName(s *string) *TicketCategoryUpdate {
	if s != nil {
		tcu.SetName(*s)
	}
	return tcu
}

// SetDescription sets the "description" field.
func (tcu *TicketCategoryUpdate) SetDescription(s string) *TicketCategoryUpdate {
	tcu.mutation.SetDescription(s)
	return tcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableDescription(s *string) *TicketCategoryUpdate {
	if s != nil {
		tcu.SetDescription(*s)
	}
	return tcu
}

// ClearDescription clears the value of the "description" field.
func (tcu *TicketCategoryUpdate) ClearDescription() *TicketCategoryUpdate {
	tcu.mutation.ClearDescription()
	return tcu
}

// SetCode sets the "code" field.
func (tcu *TicketCategoryUpdate) SetCode(s string) *TicketCategoryUpdate {
	tcu.mutation.SetCode(s)
	return tcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableCode(s *string) *TicketCategoryUpdate {
	if s != nil {
		tcu.SetCode(*s)
	}
	return tcu
}

// SetParentID sets the "parent_id" field.
func (tcu *TicketCategoryUpdate) SetParentID(i int) *TicketCategoryUpdate {
	tcu.mutation.SetParentID(i)
	return tcu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableParentID(i *int) *TicketCategoryUpdate {
	if i != nil {
		tcu.SetParentID(*i)
	}
	return tcu
}

// ClearParentID clears the value of the "parent_id" field.
func (tcu *TicketCategoryUpdate) ClearParentID() *TicketCategoryUpdate {
	tcu.mutation.ClearParentID()
	return tcu
}

// SetLevel sets the "level" field.
func (tcu *TicketCategoryUpdate) SetLevel(i int) *TicketCategoryUpdate {
	tcu.mutation.ResetLevel()
	tcu.mutation.SetLevel(i)
	return tcu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableLevel(i *int) *TicketCategoryUpdate {
	if i != nil {
		tcu.SetLevel(*i)
	}
	return tcu
}

// AddLevel adds i to the "level" field.
func (tcu *TicketCategoryUpdate) AddLevel(i int) *TicketCategoryUpdate {
	tcu.mutation.AddLevel(i)
	return tcu
}

// SetSortOrder sets the "sort_order" field.
func (tcu *TicketCategoryUpdate) SetSortOrder(i int) *TicketCategoryUpdate {
	tcu.mutation.ResetSortOrder()
	tcu.mutation.SetSortOrder(i)
	return tcu
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableSortOrder(i *int) *TicketCategoryUpdate {
	if i != nil {
		tcu.SetSortOrder(*i)
	}
	return tcu
}

// AddSortOrder adds i to the "sort_order" field.
func (tcu *TicketCategoryUpdate) AddSortOrder(i int) *TicketCategoryUpdate {
	tcu.mutation.AddSortOrder(i)
	return tcu
}

// SetIsActive sets the "is_active" field.
func (tcu *TicketCategoryUpdate) SetIsActive(b bool) *TicketCategoryUpdate {
	tcu.mutation.SetIsActive(b)
	return tcu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableIsActive(b *bool) *TicketCategoryUpdate {
	if b != nil {
		tcu.SetIsActive(*b)
	}
	return tcu
}

// SetTenantID sets the "tenant_id" field.
func (tcu *TicketCategoryUpdate) SetTenantID(i int) *TicketCategoryUpdate {
	tcu.mutation.ResetTenantID()
	tcu.mutation.SetTenantID(i)
	return tcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableTenantID(i *int) *TicketCategoryUpdate {
	if i != nil {
		tcu.SetTenantID(*i)
	}
	return tcu
}

// AddTenantID adds i to the "tenant_id" field.
func (tcu *TicketCategoryUpdate) AddTenantID(i int) *TicketCategoryUpdate {
	tcu.mutation.AddTenantID(i)
	return tcu
}

// SetCreatedAt sets the "created_at" field.
func (tcu *TicketCategoryUpdate) SetCreatedAt(t time.Time) *TicketCategoryUpdate {
	tcu.mutation.SetCreatedAt(t)
	return tcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcu *TicketCategoryUpdate) SetNillableCreatedAt(t *time.Time) *TicketCategoryUpdate {
	if t != nil {
		tcu.SetCreatedAt(*t)
	}
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *TicketCategoryUpdate) SetUpdatedAt(t time.Time) *TicketCategoryUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tcu *TicketCategoryUpdate) AddTicketIDs(ids ...int) *TicketCategoryUpdate {
	tcu.mutation.AddTicketIDs(ids...)
	return tcu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tcu *TicketCategoryUpdate) AddTickets(t ...*Ticket) *TicketCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddTicketIDs(ids...)
}

// AddChildIDs adds the "children" edge to the TicketCategory entity by IDs.
func (tcu *TicketCategoryUpdate) AddChildIDs(ids ...int) *TicketCategoryUpdate {
	tcu.mutation.AddChildIDs(ids...)
	return tcu
}

// AddChildren adds the "children" edges to the TicketCategory entity.
func (tcu *TicketCategoryUpdate) AddChildren(t ...*TicketCategory) *TicketCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the TicketCategory entity.
func (tcu *TicketCategoryUpdate) SetParent(t *TicketCategory) *TicketCategoryUpdate {
	return tcu.SetParentID(t.ID)
}

// Mutation returns the TicketCategoryMutation object of the builder.
func (tcu *TicketCategoryUpdate) Mutation() *TicketCategoryMutation {
	return tcu.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tcu *TicketCategoryUpdate) ClearTickets() *TicketCategoryUpdate {
	tcu.mutation.ClearTickets()
	return tcu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tcu *TicketCategoryUpdate) RemoveTicketIDs(ids ...int) *TicketCategoryUpdate {
	tcu.mutation.RemoveTicketIDs(ids...)
	return tcu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tcu *TicketCategoryUpdate) RemoveTickets(t ...*Ticket) *TicketCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveTicketIDs(ids...)
}

// ClearChildren clears all "children" edges to the TicketCategory entity.
func (tcu *TicketCategoryUpdate) ClearChildren() *TicketCategoryUpdate {
	tcu.mutation.ClearChildren()
	return tcu
}

// RemoveChildIDs removes the "children" edge to TicketCategory entities by IDs.
func (tcu *TicketCategoryUpdate) RemoveChildIDs(ids ...int) *TicketCategoryUpdate {
	tcu.mutation.RemoveChildIDs(ids...)
	return tcu
}

// RemoveChildren removes "children" edges to TicketCategory entities.
func (tcu *TicketCategoryUpdate) RemoveChildren(t ...*TicketCategory) *TicketCategoryUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the TicketCategory entity.
func (tcu *TicketCategoryUpdate) ClearParent() *TicketCategoryUpdate {
	tcu.mutation.ClearParent()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TicketCategoryUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TicketCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TicketCategoryUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TicketCategoryUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TicketCategoryUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		v := ticketcategory.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TicketCategoryUpdate) check() error {
	if v, ok := tcu.mutation.Name(); ok {
		if err := ticketcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.name": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.Code(); ok {
		if err := ticketcategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.code": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.TenantID(); ok {
		if err := ticketcategory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tcu *TicketCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticketcategory.Table, ticketcategory.Columns, sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.SetField(ticketcategory.FieldName, field.TypeString, value)
	}
	if value, ok := tcu.mutation.Description(); ok {
		_spec.SetField(ticketcategory.FieldDescription, field.TypeString, value)
	}
	if tcu.mutation.DescriptionCleared() {
		_spec.ClearField(ticketcategory.FieldDescription, field.TypeString)
	}
	if value, ok := tcu.mutation.Code(); ok {
		_spec.SetField(ticketcategory.FieldCode, field.TypeString, value)
	}
	if value, ok := tcu.mutation.Level(); ok {
		_spec.SetField(ticketcategory.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedLevel(); ok {
		_spec.AddField(ticketcategory.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.SortOrder(); ok {
		_spec.SetField(ticketcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedSortOrder(); ok {
		_spec.AddField(ticketcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.IsActive(); ok {
		_spec.SetField(ticketcategory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tcu.mutation.TenantID(); ok {
		_spec.SetField(ticketcategory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.AddedTenantID(); ok {
		_spec.AddField(ticketcategory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tcu.mutation.CreatedAt(); ok {
		_spec.SetField(ticketcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tcu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tcu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketcategory.ParentTable,
			Columns: []string{ticketcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketcategory.ParentTable,
			Columns: []string{ticketcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TicketCategoryUpdateOne is the builder for updating a single TicketCategory entity.
type TicketCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketCategoryMutation
}

// SetName sets the "name" field.
func (tcuo *TicketCategoryUpdateOne) SetName(s string) *TicketCategoryUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableName(s *string) *TicketCategoryUpdateOne {
	if s != nil {
		tcuo.SetName(*s)
	}
	return tcuo
}

// SetDescription sets the "description" field.
func (tcuo *TicketCategoryUpdateOne) SetDescription(s string) *TicketCategoryUpdateOne {
	tcuo.mutation.SetDescription(s)
	return tcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableDescription(s *string) *TicketCategoryUpdateOne {
	if s != nil {
		tcuo.SetDescription(*s)
	}
	return tcuo
}

// ClearDescription clears the value of the "description" field.
func (tcuo *TicketCategoryUpdateOne) ClearDescription() *TicketCategoryUpdateOne {
	tcuo.mutation.ClearDescription()
	return tcuo
}

// SetCode sets the "code" field.
func (tcuo *TicketCategoryUpdateOne) SetCode(s string) *TicketCategoryUpdateOne {
	tcuo.mutation.SetCode(s)
	return tcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableCode(s *string) *TicketCategoryUpdateOne {
	if s != nil {
		tcuo.SetCode(*s)
	}
	return tcuo
}

// SetParentID sets the "parent_id" field.
func (tcuo *TicketCategoryUpdateOne) SetParentID(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.SetParentID(i)
	return tcuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableParentID(i *int) *TicketCategoryUpdateOne {
	if i != nil {
		tcuo.SetParentID(*i)
	}
	return tcuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tcuo *TicketCategoryUpdateOne) ClearParentID() *TicketCategoryUpdateOne {
	tcuo.mutation.ClearParentID()
	return tcuo
}

// SetLevel sets the "level" field.
func (tcuo *TicketCategoryUpdateOne) SetLevel(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.ResetLevel()
	tcuo.mutation.SetLevel(i)
	return tcuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableLevel(i *int) *TicketCategoryUpdateOne {
	if i != nil {
		tcuo.SetLevel(*i)
	}
	return tcuo
}

// AddLevel adds i to the "level" field.
func (tcuo *TicketCategoryUpdateOne) AddLevel(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.AddLevel(i)
	return tcuo
}

// SetSortOrder sets the "sort_order" field.
func (tcuo *TicketCategoryUpdateOne) SetSortOrder(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.ResetSortOrder()
	tcuo.mutation.SetSortOrder(i)
	return tcuo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableSortOrder(i *int) *TicketCategoryUpdateOne {
	if i != nil {
		tcuo.SetSortOrder(*i)
	}
	return tcuo
}

// AddSortOrder adds i to the "sort_order" field.
func (tcuo *TicketCategoryUpdateOne) AddSortOrder(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.AddSortOrder(i)
	return tcuo
}

// SetIsActive sets the "is_active" field.
func (tcuo *TicketCategoryUpdateOne) SetIsActive(b bool) *TicketCategoryUpdateOne {
	tcuo.mutation.SetIsActive(b)
	return tcuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableIsActive(b *bool) *TicketCategoryUpdateOne {
	if b != nil {
		tcuo.SetIsActive(*b)
	}
	return tcuo
}

// SetTenantID sets the "tenant_id" field.
func (tcuo *TicketCategoryUpdateOne) SetTenantID(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.ResetTenantID()
	tcuo.mutation.SetTenantID(i)
	return tcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableTenantID(i *int) *TicketCategoryUpdateOne {
	if i != nil {
		tcuo.SetTenantID(*i)
	}
	return tcuo
}

// AddTenantID adds i to the "tenant_id" field.
func (tcuo *TicketCategoryUpdateOne) AddTenantID(i int) *TicketCategoryUpdateOne {
	tcuo.mutation.AddTenantID(i)
	return tcuo
}

// SetCreatedAt sets the "created_at" field.
func (tcuo *TicketCategoryUpdateOne) SetCreatedAt(t time.Time) *TicketCategoryUpdateOne {
	tcuo.mutation.SetCreatedAt(t)
	return tcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcuo *TicketCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketCategoryUpdateOne {
	if t != nil {
		tcuo.SetCreatedAt(*t)
	}
	return tcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *TicketCategoryUpdateOne) SetUpdatedAt(t time.Time) *TicketCategoryUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tcuo *TicketCategoryUpdateOne) AddTicketIDs(ids ...int) *TicketCategoryUpdateOne {
	tcuo.mutation.AddTicketIDs(ids...)
	return tcuo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tcuo *TicketCategoryUpdateOne) AddTickets(t ...*Ticket) *TicketCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddTicketIDs(ids...)
}

// AddChildIDs adds the "children" edge to the TicketCategory entity by IDs.
func (tcuo *TicketCategoryUpdateOne) AddChildIDs(ids ...int) *TicketCategoryUpdateOne {
	tcuo.mutation.AddChildIDs(ids...)
	return tcuo
}

// AddChildren adds the "children" edges to the TicketCategory entity.
func (tcuo *TicketCategoryUpdateOne) AddChildren(t ...*TicketCategory) *TicketCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the TicketCategory entity.
func (tcuo *TicketCategoryUpdateOne) SetParent(t *TicketCategory) *TicketCategoryUpdateOne {
	return tcuo.SetParentID(t.ID)
}

// Mutation returns the TicketCategoryMutation object of the builder.
func (tcuo *TicketCategoryUpdateOne) Mutation() *TicketCategoryMutation {
	return tcuo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tcuo *TicketCategoryUpdateOne) ClearTickets() *TicketCategoryUpdateOne {
	tcuo.mutation.ClearTickets()
	return tcuo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tcuo *TicketCategoryUpdateOne) RemoveTicketIDs(ids ...int) *TicketCategoryUpdateOne {
	tcuo.mutation.RemoveTicketIDs(ids...)
	return tcuo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tcuo *TicketCategoryUpdateOne) RemoveTickets(t ...*Ticket) *TicketCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveTicketIDs(ids...)
}

// ClearChildren clears all "children" edges to the TicketCategory entity.
func (tcuo *TicketCategoryUpdateOne) ClearChildren() *TicketCategoryUpdateOne {
	tcuo.mutation.ClearChildren()
	return tcuo
}

// RemoveChildIDs removes the "children" edge to TicketCategory entities by IDs.
func (tcuo *TicketCategoryUpdateOne) RemoveChildIDs(ids ...int) *TicketCategoryUpdateOne {
	tcuo.mutation.RemoveChildIDs(ids...)
	return tcuo
}

// RemoveChildren removes "children" edges to TicketCategory entities.
func (tcuo *TicketCategoryUpdateOne) RemoveChildren(t ...*TicketCategory) *TicketCategoryUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the TicketCategory entity.
func (tcuo *TicketCategoryUpdateOne) ClearParent() *TicketCategoryUpdateOne {
	tcuo.mutation.ClearParent()
	return tcuo
}

// Where appends a list predicates to the TicketCategoryUpdate builder.
func (tcuo *TicketCategoryUpdateOne) Where(ps ...predicate.TicketCategory) *TicketCategoryUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TicketCategoryUpdateOne) Select(field string, fields ...string) *TicketCategoryUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TicketCategory entity.
func (tcuo *TicketCategoryUpdateOne) Save(ctx context.Context) (*TicketCategory, error) {
	tcuo.defaults()
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TicketCategoryUpdateOne) SaveX(ctx context.Context) *TicketCategory {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TicketCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TicketCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TicketCategoryUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		v := ticketcategory.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TicketCategoryUpdateOne) check() error {
	if v, ok := tcuo.mutation.Name(); ok {
		if err := ticketcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.name": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.Code(); ok {
		if err := ticketcategory.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.code": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.TenantID(); ok {
		if err := ticketcategory.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TicketCategory.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TicketCategoryUpdateOne) sqlSave(ctx context.Context) (_node *TicketCategory, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticketcategory.Table, ticketcategory.Columns, sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticketcategory.FieldID)
		for _, f := range fields {
			if !ticketcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticketcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.SetField(ticketcategory.FieldName, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.Description(); ok {
		_spec.SetField(ticketcategory.FieldDescription, field.TypeString, value)
	}
	if tcuo.mutation.DescriptionCleared() {
		_spec.ClearField(ticketcategory.FieldDescription, field.TypeString)
	}
	if value, ok := tcuo.mutation.Code(); ok {
		_spec.SetField(ticketcategory.FieldCode, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.Level(); ok {
		_spec.SetField(ticketcategory.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedLevel(); ok {
		_spec.AddField(ticketcategory.FieldLevel, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.SortOrder(); ok {
		_spec.SetField(ticketcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedSortOrder(); ok {
		_spec.AddField(ticketcategory.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.IsActive(); ok {
		_spec.SetField(ticketcategory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tcuo.mutation.TenantID(); ok {
		_spec.SetField(ticketcategory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.AddedTenantID(); ok {
		_spec.AddField(ticketcategory.FieldTenantID, field.TypeInt, value)
	}
	if value, ok := tcuo.mutation.CreatedAt(); ok {
		_spec.SetField(ticketcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tcuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.TicketsTable,
			Columns: []string{ticketcategory.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !tcuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticketcategory.ChildrenTable,
			Columns: []string{ticketcategory.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketcategory.ParentTable,
			Columns: []string{ticketcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketcategory.ParentTable,
			Columns: []string{ticketcategory.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketCategory{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
