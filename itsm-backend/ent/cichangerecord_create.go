// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cichangerecord"
	"itsm-backend/ent/configurationitem"
	"itsm-backend/ent/tenant"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIChangeRecordCreate is the builder for creating a CIChangeRecord entity.
type CIChangeRecordCreate struct {
	config
	mutation *CIChangeRecordMutation
	hooks    []Hook
}

// SetCiID sets the "ci_id" field.
func (ccrc *CIChangeRecordCreate) SetCiID(i int) *CIChangeRecordCreate {
	ccrc.mutation.SetCiID(i)
	return ccrc
}

// SetChangeType sets the "change_type" field.
func (ccrc *CIChangeRecordCreate) SetChangeType(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetChangeType(s)
	return ccrc
}

// SetOldValues sets the "old_values" field.
func (ccrc *CIChangeRecordCreate) SetOldValues(m map[string]interface{}) *CIChangeRecordCreate {
	ccrc.mutation.SetOldValues(m)
	return ccrc
}

// SetNewValues sets the "new_values" field.
func (ccrc *CIChangeRecordCreate) SetNewValues(m map[string]interface{}) *CIChangeRecordCreate {
	ccrc.mutation.SetNewValues(m)
	return ccrc
}

// SetChangedBy sets the "changed_by" field.
func (ccrc *CIChangeRecordCreate) SetChangedBy(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetChangedBy(s)
	return ccrc
}

// SetChangeSource sets the "change_source" field.
func (ccrc *CIChangeRecordCreate) SetChangeSource(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetChangeSource(s)
	return ccrc
}

// SetNillableChangeSource sets the "change_source" field if the given value is not nil.
func (ccrc *CIChangeRecordCreate) SetNillableChangeSource(s *string) *CIChangeRecordCreate {
	if s != nil {
		ccrc.SetChangeSource(*s)
	}
	return ccrc
}

// SetReason sets the "reason" field.
func (ccrc *CIChangeRecordCreate) SetReason(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetReason(s)
	return ccrc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ccrc *CIChangeRecordCreate) SetNillableReason(s *string) *CIChangeRecordCreate {
	if s != nil {
		ccrc.SetReason(*s)
	}
	return ccrc
}

// SetVersionBefore sets the "version_before" field.
func (ccrc *CIChangeRecordCreate) SetVersionBefore(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetVersionBefore(s)
	return ccrc
}

// SetNillableVersionBefore sets the "version_before" field if the given value is not nil.
func (ccrc *CIChangeRecordCreate) SetNillableVersionBefore(s *string) *CIChangeRecordCreate {
	if s != nil {
		ccrc.SetVersionBefore(*s)
	}
	return ccrc
}

// SetVersionAfter sets the "version_after" field.
func (ccrc *CIChangeRecordCreate) SetVersionAfter(s string) *CIChangeRecordCreate {
	ccrc.mutation.SetVersionAfter(s)
	return ccrc
}

// SetNillableVersionAfter sets the "version_after" field if the given value is not nil.
func (ccrc *CIChangeRecordCreate) SetNillableVersionAfter(s *string) *CIChangeRecordCreate {
	if s != nil {
		ccrc.SetVersionAfter(*s)
	}
	return ccrc
}

// SetTenantID sets the "tenant_id" field.
func (ccrc *CIChangeRecordCreate) SetTenantID(i int) *CIChangeRecordCreate {
	ccrc.mutation.SetTenantID(i)
	return ccrc
}

// SetCreatedAt sets the "created_at" field.
func (ccrc *CIChangeRecordCreate) SetCreatedAt(t time.Time) *CIChangeRecordCreate {
	ccrc.mutation.SetCreatedAt(t)
	return ccrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccrc *CIChangeRecordCreate) SetNillableCreatedAt(t *time.Time) *CIChangeRecordCreate {
	if t != nil {
		ccrc.SetCreatedAt(*t)
	}
	return ccrc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ccrc *CIChangeRecordCreate) SetTenant(t *Tenant) *CIChangeRecordCreate {
	return ccrc.SetTenantID(t.ID)
}

// SetConfigurationItemID sets the "configuration_item" edge to the ConfigurationItem entity by ID.
func (ccrc *CIChangeRecordCreate) SetConfigurationItemID(id int) *CIChangeRecordCreate {
	ccrc.mutation.SetConfigurationItemID(id)
	return ccrc
}

// SetConfigurationItem sets the "configuration_item" edge to the ConfigurationItem entity.
func (ccrc *CIChangeRecordCreate) SetConfigurationItem(c *ConfigurationItem) *CIChangeRecordCreate {
	return ccrc.SetConfigurationItemID(c.ID)
}

// Mutation returns the CIChangeRecordMutation object of the builder.
func (ccrc *CIChangeRecordCreate) Mutation() *CIChangeRecordMutation {
	return ccrc.mutation
}

// Save creates the CIChangeRecord in the database.
func (ccrc *CIChangeRecordCreate) Save(ctx context.Context) (*CIChangeRecord, error) {
	ccrc.defaults()
	return withHooks(ctx, ccrc.sqlSave, ccrc.mutation, ccrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccrc *CIChangeRecordCreate) SaveX(ctx context.Context) *CIChangeRecord {
	v, err := ccrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccrc *CIChangeRecordCreate) Exec(ctx context.Context) error {
	_, err := ccrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrc *CIChangeRecordCreate) ExecX(ctx context.Context) {
	if err := ccrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccrc *CIChangeRecordCreate) defaults() {
	if _, ok := ccrc.mutation.ChangeSource(); !ok {
		v := cichangerecord.DefaultChangeSource
		ccrc.mutation.SetChangeSource(v)
	}
	if _, ok := ccrc.mutation.CreatedAt(); !ok {
		v := cichangerecord.DefaultCreatedAt()
		ccrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccrc *CIChangeRecordCreate) check() error {
	if _, ok := ccrc.mutation.CiID(); !ok {
		return &ValidationError{Name: "ci_id", err: errors.New(`ent: missing required field "CIChangeRecord.ci_id"`)}
	}
	if _, ok := ccrc.mutation.ChangeType(); !ok {
		return &ValidationError{Name: "change_type", err: errors.New(`ent: missing required field "CIChangeRecord.change_type"`)}
	}
	if v, ok := ccrc.mutation.ChangeType(); ok {
		if err := cichangerecord.ChangeTypeValidator(v); err != nil {
			return &ValidationError{Name: "change_type", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.change_type": %w`, err)}
		}
	}
	if _, ok := ccrc.mutation.ChangedBy(); !ok {
		return &ValidationError{Name: "changed_by", err: errors.New(`ent: missing required field "CIChangeRecord.changed_by"`)}
	}
	if v, ok := ccrc.mutation.ChangedBy(); ok {
		if err := cichangerecord.ChangedByValidator(v); err != nil {
			return &ValidationError{Name: "changed_by", err: fmt.Errorf(`ent: validator failed for field "CIChangeRecord.changed_by": %w`, err)}
		}
	}
	if _, ok := ccrc.mutation.ChangeSource(); !ok {
		return &ValidationError{Name: "change_source", err: errors.New(`ent: missing required field "CIChangeRecord.change_source"`)}
	}
	if _, ok := ccrc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CIChangeRecord.tenant_id"`)}
	}
	if _, ok := ccrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CIChangeRecord.created_at"`)}
	}
	if len(ccrc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CIChangeRecord.tenant"`)}
	}
	if len(ccrc.mutation.ConfigurationItemIDs()) == 0 {
		return &ValidationError{Name: "configuration_item", err: errors.New(`ent: missing required edge "CIChangeRecord.configuration_item"`)}
	}
	return nil
}

func (ccrc *CIChangeRecordCreate) sqlSave(ctx context.Context) (*CIChangeRecord, error) {
	if err := ccrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ccrc.mutation.id = &_node.ID
	ccrc.mutation.done = true
	return _node, nil
}

func (ccrc *CIChangeRecordCreate) createSpec() (*CIChangeRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &CIChangeRecord{config: ccrc.config}
		_spec = sqlgraph.NewCreateSpec(cichangerecord.Table, sqlgraph.NewFieldSpec(cichangerecord.FieldID, field.TypeInt))
	)
	if value, ok := ccrc.mutation.ChangeType(); ok {
		_spec.SetField(cichangerecord.FieldChangeType, field.TypeString, value)
		_node.ChangeType = value
	}
	if value, ok := ccrc.mutation.OldValues(); ok {
		_spec.SetField(cichangerecord.FieldOldValues, field.TypeJSON, value)
		_node.OldValues = value
	}
	if value, ok := ccrc.mutation.NewValues(); ok {
		_spec.SetField(cichangerecord.FieldNewValues, field.TypeJSON, value)
		_node.NewValues = value
	}
	if value, ok := ccrc.mutation.ChangedBy(); ok {
		_spec.SetField(cichangerecord.FieldChangedBy, field.TypeString, value)
		_node.ChangedBy = value
	}
	if value, ok := ccrc.mutation.ChangeSource(); ok {
		_spec.SetField(cichangerecord.FieldChangeSource, field.TypeString, value)
		_node.ChangeSource = value
	}
	if value, ok := ccrc.mutation.Reason(); ok {
		_spec.SetField(cichangerecord.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := ccrc.mutation.VersionBefore(); ok {
		_spec.SetField(cichangerecord.FieldVersionBefore, field.TypeString, value)
		_node.VersionBefore = value
	}
	if value, ok := ccrc.mutation.VersionAfter(); ok {
		_spec.SetField(cichangerecord.FieldVersionAfter, field.TypeString, value)
		_node.VersionAfter = value
	}
	if value, ok := ccrc.mutation.CreatedAt(); ok {
		_spec.SetField(cichangerecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ccrc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.TenantTable,
			Columns: []string{cichangerecord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccrc.mutation.ConfigurationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cichangerecord.ConfigurationItemTable,
			Columns: []string{cichangerecord.ConfigurationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(configurationitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CiID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CIChangeRecordCreateBulk is the builder for creating many CIChangeRecord entities in bulk.
type CIChangeRecordCreateBulk struct {
	config
	err      error
	builders []*CIChangeRecordCreate
}

// Save creates the CIChangeRecord entities in the database.
func (ccrcb *CIChangeRecordCreateBulk) Save(ctx context.Context) ([]*CIChangeRecord, error) {
	if ccrcb.err != nil {
		return nil, ccrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccrcb.builders))
	nodes := make([]*CIChangeRecord, len(ccrcb.builders))
	mutators := make([]Mutator, len(ccrcb.builders))
	for i := range ccrcb.builders {
		func(i int, root context.Context) {
			builder := ccrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CIChangeRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccrcb *CIChangeRecordCreateBulk) SaveX(ctx context.Context) []*CIChangeRecord {
	v, err := ccrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccrcb *CIChangeRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := ccrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrcb *CIChangeRecordCreateBulk) ExecX(ctx context.Context) {
	if err := ccrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
