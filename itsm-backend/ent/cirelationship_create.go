// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"itsm-backend/ent/cirelationship"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CIRelationshipCreate is the builder for creating a CIRelationship entity.
type CIRelationshipCreate struct {
	config
	mutation *CIRelationshipMutation
	hooks    []Hook
}

// SetSourceCiID sets the "source_ci_id" field.
func (crc *CIRelationshipCreate) SetSourceCiID(i int) *CIRelationshipCreate {
	crc.mutation.SetSourceCiID(i)
	return crc
}

// SetTargetCiID sets the "target_ci_id" field.
func (crc *CIRelationshipCreate) SetTargetCiID(i int) *CIRelationshipCreate {
	crc.mutation.SetTargetCiID(i)
	return crc
}

// SetRelationshipTypeID sets the "relationship_type_id" field.
func (crc *CIRelationshipCreate) SetRelationshipTypeID(i int) *CIRelationshipCreate {
	crc.mutation.SetRelationshipTypeID(i)
	return crc
}

// SetDescription sets the "description" field.
func (crc *CIRelationshipCreate) SetDescription(s string) *CIRelationshipCreate {
	crc.mutation.SetDescription(s)
	return crc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (crc *CIRelationshipCreate) SetNillableDescription(s *string) *CIRelationshipCreate {
	if s != nil {
		crc.SetDescription(*s)
	}
	return crc
}

// SetTenantID sets the "tenant_id" field.
func (crc *CIRelationshipCreate) SetTenantID(i int) *CIRelationshipCreate {
	crc.mutation.SetTenantID(i)
	return crc
}

// SetCreatedAt sets the "created_at" field.
func (crc *CIRelationshipCreate) SetCreatedAt(t time.Time) *CIRelationshipCreate {
	crc.mutation.SetCreatedAt(t)
	return crc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (crc *CIRelationshipCreate) SetNillableCreatedAt(t *time.Time) *CIRelationshipCreate {
	if t != nil {
		crc.SetCreatedAt(*t)
	}
	return crc
}

// SetUpdatedAt sets the "updated_at" field.
func (crc *CIRelationshipCreate) SetUpdatedAt(t time.Time) *CIRelationshipCreate {
	crc.mutation.SetUpdatedAt(t)
	return crc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (crc *CIRelationshipCreate) SetNillableUpdatedAt(t *time.Time) *CIRelationshipCreate {
	if t != nil {
		crc.SetUpdatedAt(*t)
	}
	return crc
}

// Mutation returns the CIRelationshipMutation object of the builder.
func (crc *CIRelationshipCreate) Mutation() *CIRelationshipMutation {
	return crc.mutation
}

// Save creates the CIRelationship in the database.
func (crc *CIRelationshipCreate) Save(ctx context.Context) (*CIRelationship, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CIRelationshipCreate) SaveX(ctx context.Context) *CIRelationship {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CIRelationshipCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CIRelationshipCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CIRelationshipCreate) defaults() {
	if _, ok := crc.mutation.CreatedAt(); !ok {
		v := cirelationship.DefaultCreatedAt()
		crc.mutation.SetCreatedAt(v)
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		v := cirelationship.DefaultUpdatedAt()
		crc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CIRelationshipCreate) check() error {
	if _, ok := crc.mutation.SourceCiID(); !ok {
		return &ValidationError{Name: "source_ci_id", err: errors.New(`ent: missing required field "CIRelationship.source_ci_id"`)}
	}
	if v, ok := crc.mutation.SourceCiID(); ok {
		if err := cirelationship.SourceCiIDValidator(v); err != nil {
			return &ValidationError{Name: "source_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.source_ci_id": %w`, err)}
		}
	}
	if _, ok := crc.mutation.TargetCiID(); !ok {
		return &ValidationError{Name: "target_ci_id", err: errors.New(`ent: missing required field "CIRelationship.target_ci_id"`)}
	}
	if v, ok := crc.mutation.TargetCiID(); ok {
		if err := cirelationship.TargetCiIDValidator(v); err != nil {
			return &ValidationError{Name: "target_ci_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.target_ci_id": %w`, err)}
		}
	}
	if _, ok := crc.mutation.RelationshipTypeID(); !ok {
		return &ValidationError{Name: "relationship_type_id", err: errors.New(`ent: missing required field "CIRelationship.relationship_type_id"`)}
	}
	if v, ok := crc.mutation.RelationshipTypeID(); ok {
		if err := cirelationship.RelationshipTypeIDValidator(v); err != nil {
			return &ValidationError{Name: "relationship_type_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.relationship_type_id": %w`, err)}
		}
	}
	if _, ok := crc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CIRelationship.tenant_id"`)}
	}
	if v, ok := crc.mutation.TenantID(); ok {
		if err := cirelationship.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "CIRelationship.tenant_id": %w`, err)}
		}
	}
	if _, ok := crc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CIRelationship.created_at"`)}
	}
	if _, ok := crc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CIRelationship.updated_at"`)}
	}
	return nil
}

func (crc *CIRelationshipCreate) sqlSave(ctx context.Context) (*CIRelationship, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CIRelationshipCreate) createSpec() (*CIRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &CIRelationship{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(cirelationship.Table, sqlgraph.NewFieldSpec(cirelationship.FieldID, field.TypeInt))
	)
	if value, ok := crc.mutation.SourceCiID(); ok {
		_spec.SetField(cirelationship.FieldSourceCiID, field.TypeInt, value)
		_node.SourceCiID = value
	}
	if value, ok := crc.mutation.TargetCiID(); ok {
		_spec.SetField(cirelationship.FieldTargetCiID, field.TypeInt, value)
		_node.TargetCiID = value
	}
	if value, ok := crc.mutation.RelationshipTypeID(); ok {
		_spec.SetField(cirelationship.FieldRelationshipTypeID, field.TypeInt, value)
		_node.RelationshipTypeID = value
	}
	if value, ok := crc.mutation.Description(); ok {
		_spec.SetField(cirelationship.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := crc.mutation.TenantID(); ok {
		_spec.SetField(cirelationship.FieldTenantID, field.TypeInt, value)
		_node.TenantID = value
	}
	if value, ok := crc.mutation.CreatedAt(); ok {
		_spec.SetField(cirelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := crc.mutation.UpdatedAt(); ok {
		_spec.SetField(cirelationship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CIRelationshipCreateBulk is the builder for creating many CIRelationship entities in bulk.
type CIRelationshipCreateBulk struct {
	config
	err      error
	builders []*CIRelationshipCreate
}

// Save creates the CIRelationship entities in the database.
func (crcb *CIRelationshipCreateBulk) Save(ctx context.Context) ([]*CIRelationship, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CIRelationship, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CIRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CIRelationshipCreateBulk) SaveX(ctx context.Context) []*CIRelationship {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CIRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CIRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
