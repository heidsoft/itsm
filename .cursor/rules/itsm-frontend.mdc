# itsm-prototype

---

description: "ITSM前端开发规范，适用于基于React、Next.js、TypeScript、Ant Design和Tailwind CSS的ITSM系统"
globs:

- "src/app/**/*"
- "src/components/**/*"
- "src/lib/**/*"
- "src/hooks/**/*"
- "src/types/**/*"
- "src/styles/**/*"
alwaysApply: false

---

## 1. 技术栈规范

### 1.1 核心技术栈

- **框架**: React 18 + Next.js App Router
- **语言**: TypeScript
- **样式**: Tailwind CSS + Ant Design 5.x
- **状态管理**: Zustand
- **HTTP客户端**: Axios
- **构建工具**: Next.js + Turbopack

## 目录结构

```markdown
itsm-prototype/
├── src/
│   └── app/                    # Next.js App Router 主目录
│       ├── layout.tsx          # 根布局文件
│       ├── page.tsx            # 根页面
│       ├── tickets/            # 工单模块
│       │   ├── page.tsx        # 工单主页面
│       │   ├── templates/      # 工单模板子页面
│       │   └── dashboard/      # 工单仪表板子页面
│       ├── components/         # 共享组件
│       └── lib/                # 工具库
└── 其他配置文件
```

## 功能模块

1. 仪表盘
2. 工单管理
3. 事件管理
4. 问题管理
5. 变更管理
6. 配置管理
7. 服务目录
8. 知识库
9. SLA管理
10. 报表分析

## 路由映射规则

### 各模块路由路径

- 仪表盘: /dashboard
- 工单管理: /tickets
- 事件管理: /incidents
- 问题管理: /problems
- 变更管理: /changes
- 配置管理: /cmdb
- 服务目录: /catalog
- 知识库: /knowledge
- SLA管理: /sla
- 报表分析: /reports

## 组件命名规范

### 页面组件

- 主页面: [module]Page.tsx
- 列表页面: [module]List.tsx
- 详情页面: [module]Detail.tsx
- 创建页面: [module]Create.tsx

### 功能组件

- 表单组件: [Module]Form.tsx
- 表格组件: [Module]Table.tsx
- 操作组件: [Module]Actions.tsx

## 状态管理规则

### Redux结构

- 每个模块独立的slice文件
- 统一的action命名: [MODULE]_[ACTION]_[SUB_ACTION]
- 异步操作使用createAsyncThunk

## 组件导入规则

### 组件引用层级规范

1. 同级组件引用: 使用相对路径 `./ComponentName`
2. 下级组件引用: 使用相对路径 `./subfolder/ComponentName`
3. 上级组件引用: 最多允许向上两级 `../../ComponentName`
4. 跨模块组件引用: 必须通过 `@/components/` 或 `@/lib/` 别名引用

### 组件路径别名规则

- 共享组件: `@/components/SharedComponent`
- 工具库: `@/lib/utils` 或 `@/lib/services/ServiceName`
- 配置文件: `@/config/ConfigName`

## 服务层引用规则

### 服务文件组织

- 业务服务: `@/lib/services/[module]-service.ts`
- 通用服务: `@/lib/services/common/[service-name].ts`
- API服务: `@/lib/api/[module]-api.ts`

### 服务引用规范

- 组件中引用服务: `import { serviceName } from '@/lib/services/service-name'`
- 服务间引用: 允许相对路径但不超过一级
- 禁止跨层级深度引用服务文件

## 🚨 重要规则

### 1. **一个页面，一个布局，一个侧边栏**

- ✅ 在 `layout.tsx` 中使用 `AppLayout`
- ❌ 在 `page.tsx` 中不要使用 `AppLayout`

### 2. **文件结构**

```
tickets/
├── layout.tsx    # 使用 AppLayout
└── page.tsx      # 直接返回内容，不用 AppLayout
```

### 3. **代码示例**

#### ✅ 正确

```tsx
// layout.tsx
<AppLayout title="工单管理">
  {children}
</AppLayout>

// page.tsx
return (
  <>
    <Card>内容</Card>
    <Modal>弹窗</Modal>
  </>
);
```

#### ❌ 错误

```tsx
// page.tsx - 不要这样做！
return (
  <AppLayout>  {/* 重复的 AppLayout */}
    <div>内容</div>
  </AppLayout>
);
```

## 🔍 问题检查

如果出现重复侧边栏：

1. 检查 `page.tsx` 是否使用了 `AppLayout`
2. 检查是否有嵌套的布局组件
3. 确保只在 `layout.tsx` 中使用 `AppLayout`

## 💡 记忆口诀

**"布局在 layout，内容在 page，AppLayout 只用一个！"**
