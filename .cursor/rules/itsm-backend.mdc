---
description: "ITSM后端开发规范，基于Go语言、Ent ORM、Gin框架的ITSM系统开发标准"
globs:
globs:
  - "controller/**/*.go"
  - "service/**/*.go"
  - "dto/**/*.go"
  - "middleware/**/*.go"
  - "common/**/*.go"
  - "config/**/*.go"
  - "cache/**/*.go"
  - "router/**/*.go"
alwaysApply: false
---

# ITSM 后端编程规则

## 1. 项目架构规范

### 1.1 目录结构

- `controller/` - 控制器层，处理HTTP请求和响应
- `service/` - 业务逻辑层，实现核心业务功能
- `dto/` - 数据传输对象，用于API输入输出
- `ent/` - 数据库实体和ORM代码（Ent框架生成）
- `middleware/` - 中间件，包括认证、日志、审计等
- `common/` - 通用工具和错误处理
- `config/` - 配置管理
- `cache/` - 缓存相关实现
- `router/` - 路由配置

### 1.2 分层架构原则

- 严格遵循Controller-Service-Dao三层架构
- Controller只负责请求处理和参数转换
- Service实现业务逻辑，可调用其他Service
- 禁止跨层调用（如Controller直接访问DAO）

## 2. 技术栈规范

### 2.1 核心框架

- 使用Go语言开发
- Web框架：Gin（隐含在项目中）
- ORM框架：Ent（Facebook开源的Go ORM框架）
- API文档：Swagger/OpenAPI

### 2.2 数据存储

- 主数据库：PostgreSQL（基于Ent框架推断）
- 缓存系统：Redis（`cache/redis.go`）
- 数据迁移：通过多个`migrate_*.go`脚本管理

### 2.3 中间件

- 认证鉴权：JWT或类似机制（`middleware/auth.go`）
- RBAC权限控制（`middleware/rbac.go`）
- 租户隔离（`middleware/tenant.go`）
- 审计日志（`middleware/audit.go`）
- 请求追踪（`middleware/request_id.go`）

## 3. 编码规范

### 3.1 命名规范

- 包名：全小写，简洁明了（如 `controller`, [service](file:///Users/heidsoft/Downloads/research/itsm/itsm-prototype/src/app/lib/dashboard-api.ts#L29-L29)）
- 文件名：下划线命名（如 `user_controller.go`）
- 结构体：大驼峰命名（如 `UserRequest`）
- 接口：大驼峰命名，后缀加`er`（如 [UserService](file:///Users/heidsoft/Downloads/research/itsm/itsm-backend/service/user_service.go#L14-L17)）

### 3.2 DTO规范

- 请求DTO以[Request](file:///Users/heidsoft/go/pkg/mod/github.com/gin-gonic/gin@v1.10.1/context.go#L56-L56)结尾（如 [CreateUserRequest](file:///Users/heidsoft/Downloads/research/itsm/itsm-backend/dto/user_dto.go#L7-L15)）
- 响应DTO以[Response](file:///Users/heidsoft/Downloads/research/itsm/itsm-backend/common/response.go#L9-L13)结尾（如 `UserResponse`）
- 每个API端点应有对应的Request/Response DTO
- DTO应定义在`dto/`目录下，按业务模块分文件

### 3.3 错误处理

- 使用自定义错误类型（`common/errors.go`）
- 错误信息应包含足够的上下文信息
- 统一错误响应格式（`common/response.go`）
- 不要忽略任何错误返回值

## 4. 数据库规范

### 4.1 Ent ORM使用

- 通过Ent生成数据库实体代码
- 不要手动修改Ent生成的代码
- 使用Ent的Mutation API进行数据变更
- 合理使用Ent的Hook机制

### 4.2 查询优化

- 避免N+1查询问题，使用预加载
- 复杂查询应编写专门的查询方法
- 合理使用数据库索引
- 批量操作使用Ent的批量API

### 4.3 数据迁移

- 每个功能模块应有对应的迁移脚本
- 迁移脚本应可重复执行且幂等
- 使用专门的迁移工具管理版本

## 5. API规范

### 5.1 RESTful设计

- 使用标准HTTP方法（GET, POST, PUT, DELETE, PATCH）
- 资源路径使用名词复数形式（如 `/users`, `/tickets`）
- 合理使用HTTP状态码
- 支持分页、排序、过滤等通用参数

### 5.2 版本控制

- API版本通过URL路径控制（如 `/api/v1/users`）
- 向后兼容性变更可保持同一版本
- 破坏性变更需要升级版本号

### 5.3 文档规范

- 所有API端点必须有Swagger注解
- 请求/响应示例应完整准确
- 参数说明应清晰明确

## 6. 安全规范

### 6.1 认证授权

- 所有API端点必须经过认证（除登录等特殊接口）
- 实施RBAC权限控制
- 敏感操作需要二次验证
- JWT Token应设置合理的过期时间

### 6.2 数据安全

- 敏感数据应加密存储
- 日志中不应包含敏感信息（使用`middleware/mask.go`）
- 输入参数必须验证和清理
- 防止SQL注入和XSS攻击

### 6.3 租户隔离

- 多租户环境下必须实现数据隔离
- 所有数据库查询必须包含租户条件
- 跨租户操作需要特殊权限

## 7. 日志与监控

### 7.1 日志规范

- 使用结构化日志
- 包含请求ID便于追踪（`middleware/request_id.go`）
- 记录关键业务操作
- 区分不同日志级别（debug, info, warn, error）

### 7.2 审计日志

- 关键业务操作必须记录审计日志
- 审计日志应包含操作人、时间、内容等信息
- 审计日志不可篡改

## 8. 测试规范

### 8.1 单元测试

- 每个Service方法应有对应的单元测试
- 使用表驱动测试处理多种情况
- 测试覆盖率应达到80%以上

### 8.2 集成测试

- 关键业务流程需要集成测试
- 外部依赖应使用模拟对象
- 数据库测试应使用测试数据库

## 9. 部署与运维

### 9.1 配置管理

- 使用YAML配置文件（`config.yaml`）
- 环境变量覆盖配置项
- 敏感配置不应包含在代码中

### 9.2 监控告警

- 关键指标需要监控（QPS, 响应时间, 错误率等）
- 提供健康检查接口
- 设置合理的告警阈值
